/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 14:22:49 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2089443549);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)70;
      doubleArray0[1] = (double) (byte)70;
      doubleArray0[2] = (double) (byte)70;
      doubleArray0[3] = (double) (byte)70;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (byte)70);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {70.0, 70.0, 70.0, 70.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {70.0, 70.0, 70.0, 70.0, 70.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Float float0 = new Float(86.4687532978);
      assertNotNull(float0);
      assertEquals(86.46875F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {86.46875F, 86.46875F, 86.46875F, 86.46875F, 86.46875F, 86.46875F, 86.46875F, 86.46875F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '\\';
      ArrayUtils.swap(charArray0, 2, 2, (-734));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'9', '\\'}, charArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) floatArray0[5]);
      assertNotNull(double0);
      assertEquals(8, floatArray0.length);
      assertEquals(86.46875, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2418.3366015500396));
      assertNotNull(double1);
      assertEquals((-2418.3366015500396), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(433.89);
      assertNotNull(double2);
      assertEquals(433.89, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) floatArray0[5]);
      assertNotNull(double4);
      assertEquals(8, floatArray0.length);
      assertEquals(86.46875, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {86.46875, (-2418.3366015500396), 433.89, 0.0, 86.46875, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray1, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray1);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertSame(intArray3, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray3.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '?', '?', '?'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-331), (-3628));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3628);
      floatArray1[1] = (float) (short)65;
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "&{W");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) (-331);
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) (-3628);
      doubleArray0[4] = (double) (-3628.0F);
      doubleArray0[5] = 1153.207052198;
      doubleArray0[6] = (double) '?';
      doubleArray0[7] = (double) (-3628.0F);
      doubleArray0[8] = (double) (short)65;
      ArrayUtils.shift(doubleArray0, 2, 10, 36);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {63.0, (-331.0), 65.0, 45.0, (-3628.0), (-3628.0), 1153.207052198, 63.0, (-3628.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 51.0F;
      floatArray0[1] = (-1589.833F);
      floatArray0[2] = (-1261.3569F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-128.062F);
      floatArray0[5] = (-771.6511F);
      floatArray0[6] = (-1.0F);
      ArrayUtils.swap(floatArray0, (-3887), 7, (-1776));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {51.0F, (-1589.833F), (-1261.3569F), (-1.0F), (-128.062F), (-771.6511F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-25);
      shortArray0[1] = (short)4;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-25), (short)4}, shortArray0);
      assertArrayEquals(new short[] {(short) (-25), (short)4}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (short)4, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte) (-75));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)2, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte)2, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3417.7966;
      doubleArray0[1] = (-1385.80152);
      doubleArray0[2] = 3930.0988785571876;
      doubleArray0[3] = (-3598.0);
      doubleArray0[4] = 35.0;
      doubleArray0[5] = (-2569.224912);
      doubleArray0[6] = 273.71112000045264;
      doubleArray0[7] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 273.71112000045264, 93);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3417.7966, (-1385.80152), 3930.0988785571876, (-3598.0), 35.0, (-2569.224912), 273.71112000045264, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 93;
      ArrayUtils.swap(longArray0, 1, 93, 93);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {93L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2564.2F);
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, 2, 2, (-2359));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 't';
      charArray0[2] = 'O';
      charArray0[3] = ',';
      charArray0[4] = 'O';
      charArray0[5] = 'J';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertArrayEquals(new char[] {'W', 't', 'O', ',', 'O', 'J'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ',');
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'W', 't', 'O', ',', 'O', 'J'}, charArray0);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(23);
      assertNotNull(integer0);
      assertEquals(23, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2559.684;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 557.8458;
      doubleArray0[3] = 2177.251551587936;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1600.484759477561;
      doubleArray0[6] = 3565.8;
      doubleArray0[7] = (-2663.4064);
      int int0 = ArrayUtils.indexOf(doubleArray0, 557.8458, 1600.484759477561);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2559.684, (-1.0), 557.8458, 2177.251551587936, 1.5, 1600.484759477561, 3565.8, (-2663.4064)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2128809876));
      assertNotNull(integer2);
      assertEquals((-2128809876), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      assertEquals((-2128809876), (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-284.26F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1173.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-284.26F), 1.0F, (-1.0F), (-1173.0F)}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-343));
      assertNotNull(integer2);
      assertEquals((-343), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf(1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-413.0);
      doubleArray0[3] = (double) (-1173.0F);
      doubleArray0[4] = (double) (-343);
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) int0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, (-413.0), (-1173.0), (-343.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-413.0), (-1173.0), (-343.0), 1.0, 1.0}, doubleArray1, 0.01);
      
      Integer[] integerArray2 = new Integer[0];
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertEquals(1, (int)integer6);
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      
      Integer[] integerArray3 = ArrayUtils.addFirst(integerArray2, integer6);
      assertNotNull(integerArray3);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray3.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (byte)2, 1255, (-2147087983));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-198);
      shortArray0[0] = (short) (-198);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-198), (short) (-198), (short)0}, shortArray0);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-198), (short) (-198), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(1974);
      assertNotNull(integer0);
      assertEquals(1974, (int)integer0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1974);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[10];
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)77;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)61, (byte)22, (byte)77}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)61, (byte)22, (byte)77, (byte) (-3), (byte)0, (byte)61, (byte)22, (byte)77}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap(floatArray0, 1, (int) (byte) (-3), 2697);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3188;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3188);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)3188}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (int) (short)3188, (int) (short)3188, (int) (short)3188);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)3188;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)3188, (-784));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3188.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte)55;
      byteArray1[6] = (byte)10;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-46), (byte) (-1), (byte)2, (byte) (-123), (byte)55, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Short short0 = new Short((short) (-26));
      assertNotNull(short0);
      assertEquals((short) (-26), (short)short0);
      
      int int0 = 2;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-26));
      assertNotNull(integer0);
      assertEquals((-26), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, int0);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) int0;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = '\'';
      charArray0[4] = '`';
      charArray0[5] = 'y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'U', 'X', 'X', '\'', '`', 'y'}, charArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'y';
      doubleArray0[1] = (double) '\'';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 121.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {121.0, 39.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)11311;
      shortArray0[3] = (short) (-2577);
      shortArray0[4] = (short) (-1043);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)4, (short)11311, (short) (-2577), (short) (-1043), (short) (-1), (short) (-1)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short)4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("4", string0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Double double0 = new Double(642.4699496);
      assertNotNull(double0);
      assertEquals(642.4699496, (double)double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '8';
      charArray0[2] = '2';
      charArray0[3] = 'z';
      charArray0[4] = 'o';
      charArray0[5] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'#', '8', '2', 'z', 'o', '2'}, charArray0);
      assertArrayEquals(new char[] {'#', '8', '2', 'z', 'o', '2'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 79);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-454L));
      assertNotNull(long1);
      assertEquals((-454L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-2273));
      assertNotNull(long2);
      assertEquals((-2273L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = Long.getLong("java.lang.Byte", 0L);
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-2273));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-454L), (-2273L), 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '`';
      floatArray0[1] = (float) '`';
      floatArray0[2] = (float) '`';
      floatArray0[3] = (float) '`';
      floatArray0[4] = 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {96.0F, 96.0F, 96.0F, 96.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {96.0F, 96.0F, 96.0F, 96.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {96.0F, 96.0F, 96.0F, 96.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      
      objectArray0[0] = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-56);
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-56), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (-1763), (int) (short)0, (int) (short)0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-56), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 101, (int) (byte)0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)83);
      assertFalse(boolean0);
      
      long[] longArray3 = ArrayUtils.insert(740, longArray0, longArray1);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray3);
      assertSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)83;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 740;
      intArray0[4] = (int) (byte) (-56);
      intArray0[5] = (int) (byte)83;
      intArray0[6] = (int) (short)0;
      intArray0[7] = 740;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Integer integer0 = Integer.valueOf((int) (byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, (int) (byte)0, 55, 55);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 57;
      floatArray0[11] = (float) (-414);
      longArray0[2] = (-1L);
      ArrayUtils.shift(longArray0, (-414), 57, Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 57L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 0L);
      assertEquals(21, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 79;
      intArray0[2] = 512;
      intArray0[3] = (-2592);
      intArray0[4] = (-78);
      intArray0[5] = 1392;
      intArray0[6] = 5;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2907);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {79, 0, 512, (-2592), (-78), 1392, 5}, intArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) 2907;
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 79;
      longArray0[5] = (long) 512;
      longArray0[6] = (long) 2907;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {5L, (-1L), 2907L, 5L, 79L, 512L, 2907L}, longArray1);
      assertArrayEquals(new long[] {5L, (-1L), 2907L, 5L, 79L, 512L, 2907L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, (int) (byte) (-56), (int) (byte) (-56));
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte) (-56));
      assertNotNull(long0);
      assertEquals((-56L), (long)long0);
      
      longArray0[0] = long0;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      long[] longArray1 = new long[7];
      longArray1[0] = (long) (byte) (-56);
      longArray1[1] = (long) (byte) (-56);
      longArray1[2] = (-1198L);
      longArray1[3] = (long) (byte) (-56);
      longArray1[4] = (long) (byte) (-56);
      longArray1[5] = (long) longArray0[0];
      longArray1[6] = (long) longArray0[0];
      ArrayUtils.shift(longArray1, (-414), 57, (-414));
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-56L), (-1198L), (-56L), (-56L), (-56L), (-56L), (-56L)}, longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-56L);
      floatArray0[1] = (float) (-414);
      floatArray0[2] = (float) (-1198L);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-414));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-56.0F), (-414.0F), (-1198.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-2260L);
      longArray0[3] = 1406L;
      longArray0[4] = 2036L;
      longArray0[5] = 0L;
      longArray0[6] = 2303L;
      longArray0[2] = (-1L);
      longArray0[8] = (-1L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 1406L, 2036L, 0L, 2303L, 0L, (-1L)}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = '*';
      charArray0[2] = '$';
      ArrayUtils.reverse(charArray0, (int) (byte) (-124), 34);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', '*', 'e'}, charArray0);
      
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', '$', '*', 'e', '*', 'e'}, charArray1);
      assertArrayEquals(new char[] {'$', '*', 'e'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) '$';
      intArray0[2] = 34;
      intArray0[3] = (int) (byte) (-124);
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {36, 36, 34, (-124)}, intArray0);
      assertArrayEquals(new int[] {36, 34, (-124)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (int) (byte)42);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 126;
      ArrayUtils.swap(doubleArray0, 1, 1673, (int) (byte)42);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {126.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(9, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 9;
      floatArray0[2] = (float) 9;
      floatArray0[3] = (float) 9;
      floatArray0[4] = (-564.00006F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 9;
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 110;
      longArray0[2] = (long) 110;
      longArray0[4] = (long) 1284;
      long[] longArray1 = ArrayUtils.insert(9, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertArrayEquals(new long[] {0L, 110L, 110L, 0L, 1284L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 110;
      longArray0[2] = (long) 110;
      longArray0[4] = (long) 1284;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 110;
      longArray0[7] = (long) 110;
      longArray0[8] = (long) 0;
      ArrayUtils.shift(longArray0, (-2767), 110, 0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 110L, 110L, 0L, 1284L, 0L, 110L, 110L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 110L, 110L, 0L, 1284L, 0L, 110L, 110L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 110, '4');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3823L;
      longArray0[1] = 3823L;
      longArray0[2] = 3823L;
      longArray0[3] = 944L;
      longArray0[4] = (long) 2;
      longArray0[5] = 3823L;
      longArray0[6] = 3823L;
      longArray0[7] = 3823L;
      longArray0[8] = 3823L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {3823L, 3823L, 3823L, 944L, 2L, 3823L, 3823L, 3823L, 3823L}, longArray0);
      assertEquals(576, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 196, 197, 199, 200, 201, 257, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523}", bitSet0.toString());
      assertEquals(524, bitSet0.length());
      assertEquals(76, bitSet0.cardinality());
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 944L;
      longArray1[1] = (long) 2;
      longArray1[2] = (long) 2;
      longArray1[3] = 944L;
      longArray1[4] = 944L;
      longArray1[5] = 944L;
      longArray1[6] = (long) 2;
      longArray1[7] = 346L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {3823L, 3823L, 3823L, 944L, 2L, 3823L, 3823L, 3823L, 3823L}, longArray0);
      assertArrayEquals(new long[] {944L, 2L, 2L, 944L, 944L, 944L, 2L, 346L}, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)88);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-70), (byte)88, (byte)41, (byte) (-125), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-70), (byte)88, (byte)41, (byte) (-125), (byte)0, (byte)88}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = ',';
      charArray0[2] = 'y';
      charArray0[3] = '+';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = '?';
      ArrayUtils.shift(charArray0, (int) (byte) (-70), (int) (byte)41, (int) (byte)67);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'+', 'i', 'E', '?', 'g', ',', 'y'}, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)41);
      assertNotNull(integer1);
      assertEquals(41, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(56);
      assertNotNull(integer3);
      assertEquals(56, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = Integer.getInteger("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", integer3);
      assertNotNull(integer4);
      assertEquals(56, (int)integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((byte) (-70));
      assertNotNull(integer5);
      assertEquals((-70), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((byte) (-70));
      assertNotNull(integer6);
      assertEquals((-70), (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(1);
      assertNotNull(integer7);
      assertEquals(1, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      
      integerArray0[6] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 502);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {49, 41, 0, 56, (-70), (-70), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Double double0 = new Double((short)3);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[4] = (float) (short)3;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1082.737F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)3);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {3}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 127);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2919);
      assertNotNull(integer0);
      assertEquals(2919, (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[3]);
      assertNotNull(mutableInt0);
      assertEquals(8, integerArray0.length);
      assertEquals(2919.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2919, mutableInt0.shortValue());
      assertEquals(2919, (int)mutableInt0.getValue());
      assertEquals(2919.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(2919, (int)mutableInt0.toInteger());
      assertEquals(2919, mutableInt0.intValue());
      assertEquals("2919", mutableInt0.toString());
      assertEquals(2919L, mutableInt0.longValue());
      
      Integer integer1 = mutableInt0.getValue();
      assertNotNull(integer1);
      assertEquals(8, integerArray0.length);
      assertEquals(2919, (int)integer1);
      assertEquals(2919.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2919, mutableInt0.shortValue());
      assertEquals(2919, (int)mutableInt0.getValue());
      assertEquals(2919.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(2919, (int)mutableInt0.toInteger());
      assertEquals(2919, mutableInt0.intValue());
      assertEquals("2919", mutableInt0.toString());
      assertEquals(2919L, mutableInt0.longValue());
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      String string0 = ArrayUtils.toString((Object) integerArray0[1]);
      assertNotNull(string0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals("2919", string0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)49;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-122), (byte) (-51), (byte) (-61), (byte)96, (byte) (-116), (byte)9, (byte) (-112), (byte)49}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)10}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.145930193E9;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2113;
      shortArray0[1] = (short)3278;
      shortArray0[2] = (short) (-610);
      shortArray0[3] = (short) (-58);
      shortArray0[4] = (short)1626;
      shortArray0[5] = (short) (-1833);
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)2113, (short)3278, (short) (-610), (short) (-58), (short)1626, (short) (-1833), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)2113, (short)3278, (short) (-610), (short) (-58), (short)1626, (short) (-1833), (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short) (-58);
      longArray0[2] = (long) (short) (-58);
      longArray0[3] = (long) (short)2;
      longArray0[4] = (-3825L);
      ArrayUtils.swap(longArray0, (-91), (int) (short)2113, (int) (short)2);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2L, (-58L), (-58L), 2L, (-3825L)}, longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) (short)3278;
      objectArray0[2] = (Object) (short) (-58);
      objectArray0[3] = (Object) (short)3278;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (short)1626);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-87);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-87));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-12), (byte)16, (byte) (-58), (byte)44, (byte) (-87)}, byteArray0);
      assertEquals(5, int0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)44);
      assertNotNull(integer2);
      assertEquals(44, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 2);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1273.92));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1878));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1878, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2489);
      shortArray0[1] = (short)85;
      shortArray0[2] = (short)122;
      shortArray0[3] = (short)115;
      shortArray0[4] = (short)54;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2489), (short)85, (short)122, (short)115, (short)54}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2489), (short)85, (short)122, (short)115, (short)54}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-2489);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-2489)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)54;
      doubleArray0[1] = (double) (short)122;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2489, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(887);
      assertNotNull(integer3);
      assertEquals(887, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)92;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-99), (byte)127, (byte)20, (byte)92}, byteArray1);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-99), (byte)127, (byte)20, (byte)92}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2203.0F);
      floatArray0[1] = (float) (byte)127;
      floatArray0[2] = (float) (byte)127;
      floatArray0[3] = (float) (byte)110;
      floatArray0[4] = (float) (byte)110;
      floatArray0[5] = (float) (int)integerArray0[0];
      floatArray0[6] = 2813.2595F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 128, 1432.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockRandom0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      ArrayUtils.shift(byteArray0, (-1324), (int) (byte)0, (-2124013881));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-66), (byte)0, (byte)32}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-66);
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte) (-66);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)5;
      shortArray0[5] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2197, (-1324));
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-66), (short)5, (short) (-66), (short)0, (short)5, (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1259);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 403);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1259)}, intArray0);
      assertArrayEquals(new int[] {403, (-1259)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long long0 = new Long(4298L);
      assertNotNull(long0);
      assertEquals(4298L, (long)long0);
      
      ArrayUtils.shift(intArray0, (-1036));
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1259)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      ArrayUtils.shift(intArray0, 403);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1259)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      short[] shortArray0 = new short[19];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(19, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)76;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (int) (byte) (-93));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-93), (byte) (-65), (byte) (-80), (byte) (-42), (byte)76}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Integer integer0 = new Integer(850);
      assertNotNull(integer0);
      assertEquals(850, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2809.35952095713), 1.0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (byte)1, 512);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)2;
      shortArray0[4] = (short)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)0, (short)0, (short)2, (short)0}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (byte) (-56), (int) (byte) (-56), (int) (short)1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)0, (short)0, (short)2, (short)0}, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((float[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) (short)0;
      ArrayUtils.shift(objectArray0, (-1118), 393, (-1));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 2, (int) (short) (-1649), (int) (short) (-1649));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Integer integer0 = new Integer((short)829);
      assertNotNull(integer0);
      assertEquals(829, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object1, object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short)297;
      shortArray0[3] = (short) (-2034);
      shortArray0[4] = (short)891;
      shortArray0[5] = (short)13044;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-125), (short)297, (short) (-2034), (short)891, (short)13044}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2040109465, 2040109465, 2040109465);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '[';
      charArray0[2] = 'W';
      charArray0[3] = 'Q';
      charArray0[4] = 'I';
      charArray0[5] = '^';
      ArrayUtils.shift(charArray0, (-1801), 2046, (-1801));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'[', 'W', 'Q', 'I', '^', '2'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'[', 'W', 'Q', 'I', '^', '2'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '^';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2274, 2040109465);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {94}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 45L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '+';
      charArray0[2] = 'n';
      charArray0[3] = 'B';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'t', '+', 'n', 'B'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'t', '+', 'n', 'B'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-15);
      ArrayUtils.swap(byteArray0, (int) (byte) (-120), 621, (int) (byte) (-15));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-15)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-477);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-477);
      longArray0[4] = (long) (-477);
      longArray0[5] = (long) (-477);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (-477);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-477L), (-477L), (-477L), 0L, 0L, (-477L)}, longArray0);
      assertArrayEquals(new long[] {(-477L), (-477L), (-477L), (-477L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-477L));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-477L), (-477L), (-477L), 0L, 0L, (-477L)}, longArray0);
      assertArrayEquals(new long[] {(-477L), 0L, 0L, 0L, (-477L), (-477L), (-477L), 0L, 0L, (-477L)}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-477), 0}, intArray0);
      
      ArrayUtils.shift(intArray0, 0, 0, 3);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-477), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)54);
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Integer integer0 = Integer.valueOf(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) byte2;
      ArrayUtils.shift(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)54);
      assertEquals(11, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-121));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      charArray0[7] = 'u';
      charArray0[8] = 'u';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.insert(599, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = '7';
      charArray0[4] = 'h';
      charArray0[5] = 'A';
      charArray0[6] = 'F';
      charArray0[7] = '!';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '!');
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'m', 'W', 'm', '7', 'h', 'A', 'F', '!'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{7}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-2075), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 14;
      intArray0[1] = 110;
      intArray0[2] = 1618;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 110;
      intArray1[1] = 2970;
      intArray0[0] = 110;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(12, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(10, intArray2.length);
      assertArrayEquals(new int[] {110, 2970, 0}, intArray1);
      assertArrayEquals(new int[] {110, 1618, 0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-65));
      assertNotNull(byte1);
      assertEquals((byte) (-65), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-65);
      doubleArray0[3] = (double) (byte)31;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-65), (int) (byte)31, 1.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, 0.0, (-65.0), 31.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {4.0, 0.0, (-65.0), 31.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 2);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (byte)31);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {31.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {4.0, 0.0, (-65.0), 31.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0.0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {4.0, 0.0, (-65.0), 31.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)4;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)0, (short)0, (short)0, (short)4, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2703);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-2703)}, intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = 'i';
      charArray0[2] = 'U';
      charArray0[3] = '3';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'U';
      charArray1[1] = 'U';
      charArray1[2] = 'U';
      charArray1[3] = '3';
      charArray1[4] = 'r';
      charArray1[5] = 'i';
      charArray1[6] = '3';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'r', 'i', 'U', '3'}, charArray0);
      assertArrayEquals(new char[] {'U', 'U', 'U', '3', 'r', 'i', '3'}, charArray1);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 752, 69, 1064);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'U', 'U', 'U', '3', 'r', 'i', '3'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse(charArray1, 533, 1376);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'U', 'U', 'U', '3', 'r', 'i', '3'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, 533, '3');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 533, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      ArrayUtils.shift((float[]) null, 4768, (-964), (-2233));
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (-964);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-964.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-964.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-1288490189), 12, 12);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)76;
      ArrayUtils.shift(byteArray0, (int) (short) (-5424), 1, (int) (byte)76);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      ArrayUtils.shift(byteArray0, (int) (byte)4, (int) (byte)4, (int) (byte)4);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte) (-30), (byte)4, (byte)4, (byte)4, (byte)4, (byte)4}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, int0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(15);
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1674), 2);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 2);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-92));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("B");
      assertNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-92);
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (byte) (-92);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (byte) (-92);
      shortArray0[5] = (short) (byte) (-92);
      shortArray0[6] = (short) (byte) (-92);
      shortArray0[7] = (short) (byte) (-92);
      shortArray0[8] = (short) (byte) (-92);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1235));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1235), (short) (-92), (short) (-92), (short) (-92), (short) (-1), (short) (-92), (short) (-92), (short) (-92), (short) (-92), (short) (-92)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-92), (short) (-92), (short) (-92), (short) (-1), (short) (-92), (short) (-92), (short) (-92), (short) (-92), (short) (-92)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-92));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)9);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertEquals((-1), int0);
      
      Integer integer0 = Integer.getInteger("B");
      assertNull(integer0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "B");
      assertNotNull(stringArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-92);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -92, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.hashCode((Object) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-3);
      ArrayUtils.shift(byteArray0, (-485), (int) (byte) (-1), (-485));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)59, (byte)0, (byte) (-1), (byte)43, (byte) (-3)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (byte) (-56);
      floatArray0[1] = (float) (byte) (-56);
      floatArray0[2] = (float) (byte) (-121);
      ArrayUtils.shift(floatArray0, (int) (short) (-3207));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-56.0F), (-121.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-56), (byte) (-121), (byte) (-121)}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-121));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-56.0F), (-121.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-121.0F), 0.0F, (-56.0F), (-121.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(2764, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-298);
      intArray0[2] = (-477);
      Boolean boolean0 = new Boolean("java.lang.Object");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-477);
      integerArray0[1] = (Integer) (-298);
      integerArray0[2] = (Integer) (-298);
      integerArray0[3] = (Integer) (-477);
      integerArray0[4] = (Integer) (-298);
      integerArray0[5] = (Integer) (-298);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-298);
      doubleArray0[1] = (-1091.4332583053122);
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (-298);
      doubleArray0[4] = (double) (int)integerArray0[3];
      doubleArray0[5] = (double) (-298);
      doubleArray0[6] = (double) (-298);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1074.3797260170566), (-113), 41.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-298.0), (-1091.4332583053122), (-298.0), (-298.0), (-477.0), (-298.0), (-298.0)}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      long[] longArray0 = new long[1];
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4397), (-4397));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2625.0F, (int) (byte) (-72));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 593.43164F;
      doubleArray0[1] = (double) (byte) (-72);
      doubleArray0[2] = (double) 2625.0F;
      doubleArray0[3] = (double) (-4397);
      doubleArray0[4] = (double) (byte) (-72);
      doubleArray0[5] = (double) (-4397);
      doubleArray0[6] = (double) 2;
      doubleArray0[8] = (double) 2;
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertArrayEquals(new double[] {593.431640625, (-72.0), 2625.0, (-4397.0), (-72.0), (-4397.0), 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift((Object[]) null, (int) (byte) (-72), 91, 2145767034);
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-72.0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(19, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertArrayEquals(new double[] {593.431640625, (-72.0), 2625.0, (-4397.0), (-72.0), (-4397.0), 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 2145767034;
      longArray2[1] = (long) (-4397);
      longArray2[2] = (long) (byte) (-72);
      longArray2[3] = (long) (byte) (-72);
      longArray2[4] = (long) 91;
      longArray2[5] = (long) (byte) (-72);
      longArray2[6] = (long) 55;
      long[] longArray3 = ArrayUtils.insert(55, longArray2, longArray1);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(7, longArray2.length);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray3.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {2145767034L, (-4397L), (-72L), (-72L), 91L, (-72L), 55L}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2145767034L, (-4397L), (-72L), (-72L), 91L, (-72L), 55L}, longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)109);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte)109, 79, 79);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(680, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short) (-994);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)70;
      shortArray0[6] = (short)78;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)70);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)7, (short)0, (short)0, (short) (-994), (short)1, (short)70, (short)78}, shortArray0);
      assertArrayEquals(new short[] {(short)70, (short)7, (short)0, (short)0, (short) (-994), (short)1, (short)70, (short)78}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)114;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)87, (byte)87, (byte) (-69), (byte)87, (byte)114}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte)87);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {87.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'V';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      charArray0[7] = 'u';
      charArray0[8] = 'u';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'V', 'u', 'u', 'u', 'u'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs((-1L), 3380L);
      assertNotNull(longStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Boolean boolean0 = new Boolean(")\"_WbciBpsf)B");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)41;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)7, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)105, (byte)41, (byte)105, (byte)41}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int int0 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(4, floatArray2.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      ArrayUtils.shift((Object[]) integerArray0, (-2625), int0, 11);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-56);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-56);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-56);
      shortArray0[6] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-56), (short)1, (short)1, (short) (-56), (short)1, (short) (-56)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short)1, 37, (int) (short) (-56));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-56), (short)1, (short) (-56), (short) (-56), (short)1}, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1284, (-675));
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-56));
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-897), 1284, 1);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-1L), 101);
      assertNotNull(bitSet0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(164L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 770.7);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {770.7}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)54);
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (byte)54);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)54;
      floatArray0[2] = (float) (byte)54;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = 3893.0F;
      floatArray0[6] = (float) (byte)54;
      floatArray0[7] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 54.0F, 54.0F, 0.0F, 0.0F, 3893.0F, 54.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 54.0F, 54.0F, 0.0F, 0.0F, 3893.0F, 54.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (-124.0F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-124.0F), 0.0F, 54.0F, 54.0F, 0.0F, 0.0F, 3893.0F, 54.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 54.0F, 54.0F, 0.0F, 0.0F, 3893.0F, 54.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) 2.0F);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[3] = (short)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0, (short)2, (short)2}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (byte) (-56), (-1235), (int) (short)1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0, (short)2, (short)2}, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((float[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)2;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)2;
      objectArray0[8] = (Object) (short)2;
      ArrayUtils.shift(objectArray0, (-1061), 16, (int) (short)1);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-56));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(4, floatArray2.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)26214;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)100, (short)11, (short)64, (short)26214}, shortArray0);
      assertArrayEquals(new short[] {(short)11, (short)64, (short)26214}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Byte byte0 = new Byte((byte)26);
      assertNotNull(byte0);
      assertEquals((byte)26, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, 9);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1), 83, (-1280));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(1.5);
      assertNotNull(float0);
      assertEquals(1.5F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 9);
      assertNotNull(float1);
      assertEquals(9.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertNotNull(float2);
      assertEquals(4, floatArray0.length);
      assertEquals(9.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      assertNotNull(float3);
      assertEquals(4, floatArray0.length);
      assertEquals(9.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.5F, 9.0F, 9.0F, 9.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3, 4, 9, 11, 12, 17, 19, 20, 25, 27, 28, 33, 35, 36, 41, 43, 44, 49, 51, 52}", bitSet0.toString());
      assertEquals(21, bitSet0.cardinality());
      assertEquals(53, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3, 4, 9, 11, 12, 17, 19, 20, 25, 27, 28, 33, 35, 36, 41, 43, 44, 49, 51, 52}", bitSet0.toString());
      assertEquals(21, bitSet0.cardinality());
      assertEquals(53, bitSet0.length());
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) null, (int) (byte)26);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3207);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3207)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3207)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (short) (-3207);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-3207));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-3207), (int) (short) (-3207), (int) (short) (-3207));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.1F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.1F;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {0.1F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.1F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-805.5573);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      ArrayUtils.swap(doubleArray0, 510, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2.0), 0.0, 0.0, 0.0, (-805.5573), 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 1638.04F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(1299L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) byteArray0, (Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Integer integer0 = new Integer(1803);
      assertNotNull(integer0);
      assertEquals(1803, (int)integer0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1803;
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) integer0;
      Integer integer1 = new Integer((byte) (-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals((-1), object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      objectArray0[3] = object0;
      objectArray0[5] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (int) (byte)7, (int) (byte)7, 2120640102);
      assertEquals(9, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) object0;
      integerArray0[1] = (Integer) object0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1812L;
      floatArray0[1] = (-3179.8F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-3179.8F), 1812.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((-732));
      assertNotNull(integer0);
      assertEquals((-732), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-732), 4321, (-732));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.insert(2, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[1] = ')';
      charArray0[1] = ')';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) ')';
      objectArray0[2] = (Object) ')';
      objectArray0[3] = (Object) false;
      ArrayUtils.shift((byte[]) null, (-353));
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)84, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-1), 6029, 6029);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertNotNull(map0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) null, 1055);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'e';
      charArray0[2] = '$';
      charArray0[3] = '1';
      charArray0[4] = 'A';
      ArrayUtils.reverse(charArray0, (int) (byte) (-124), (-1913));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'*', 'e', '$', '1', 'A'}, charArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      char[] charArray2 = ArrayUtils.insert(1, charArray1, charArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(6, charArray2.length);
      assertArrayEquals(new char[] {'*', 'e', '$', '1', 'A'}, charArray0);
      assertArrayEquals(new char[] {'*'}, charArray1);
      assertArrayEquals(new char[] {'*', '*', 'e', '$', '1', 'A'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-124);
      shortArray0[1] = (short) (byte) (-56);
      ArrayUtils.shift(shortArray0, (-1913));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-56), (short) (-124)}, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) (byte) (-124);
      floatArray0[2] = (float) 'A';
      floatArray0[3] = (float) (-1913);
      floatArray0[4] = (float) 'A';
      floatArray0[5] = (float) 'e';
      floatArray0[6] = (float) 'e';
      floatArray0[7] = (float) 'e';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-56);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -56, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      char[] charArray0 = new char[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '@', 2);
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-277L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-1096.7601F));
      assertNotNull(float0);
      assertEquals((-1096.7601F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertNotNull(float2);
      assertEquals(5, floatArray0.length);
      assertEquals((-1096.7601F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-289.71F));
      assertNotNull(float3);
      assertEquals((-289.71F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-537.1525F));
      assertNotNull(float4);
      assertEquals((-537.1525F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1096.7601F), 1.0F, (-1096.7601F), (-289.71F), (-537.1525F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) ')';
      objectArray0[2] = (Object) ')';
      objectArray0[3] = (Object) false;
      objectArray0[5] = (Object) ')';
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) ')';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) ')';
      floatArray0[1] = (float) ')';
      floatArray0[2] = (float) ')';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 9);
      assertEquals(8, objectArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(booleanArray0, (-387), 2147204542, 9);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) '\u0000';
      objectArray0[5] = (Object) ')';
      objectArray0[7] = (Object) '\u0000';
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) ')';
      floatArray0[2] = (float) ')';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 9);
      assertEquals(8, objectArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockRandom0;
      Integer integer0 = Integer.getInteger("Km;.Ei\"u[");
      assertNull(integer0);
      
      Boolean boolean0 = new Boolean("Km;.Ei\"u[");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(int0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 1, integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) 1;
      longArray0[3] = 1887L;
      longArray0[4] = (long) 1;
      ArrayUtils.reverse(longArray0, 1, 23);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1887L, 1L, 1L}, longArray0);
      
      ArrayUtils.shift(booleanArray1, 1, int0, int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(114, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Long long0 = new Long((-865L));
      assertNotNull(long0);
      assertEquals((-865L), (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1515L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-865L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'F';
      charArray0[2] = 'Y';
      charArray0[3] = 't';
      ArrayUtils.shift(charArray0, 1, 1, 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', 'F', 'Y', 't'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (long)longArray0[0];
      floatArray0[1] = (float) (-1515L);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) (long)longArray0[0];
      floatArray0[5] = (float) 'Y';
      floatArray0[6] = (float) 'o';
      floatArray0[7] = (float) (long)longArray0[0];
      ArrayUtils.reverse(floatArray0, 1, 654);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-865.0F), (-865.0F), 111.0F, 89.0F, (-865.0F), 89.0F, 1.0F, (-1515.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '{';
      charArray0[2] = 'u';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      ArrayUtils.shift(charArray0, 3, 3, 3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'/', '{', 'u', 'l', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-162), 115, 2280);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      Integer integer0 = new Integer((-2298));
      assertNotNull(integer0);
      assertEquals((-2298), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2298), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertEquals((-2298), object1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object1.equals((Object)int0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.shift(objectArray0, 1, (-404), 102);
      assertEquals(1, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>F\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.add(charArray0, 0, 'B');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'B'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      char[] charArray3 = ArrayUtils.subarray(charArray1, 10, (-2));
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray3.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      boolean boolean0 = new Boolean("9R]>F\"y");
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-688.4F);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3825);
      intArray0[1] = (int) 'Y';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = 'Y';
      charArray1[2] = 'Y';
      charArray1[3] = 'Y';
      charArray1[4] = 'Y';
      charArray1[5] = 'Y';
      charArray1[6] = 'Y';
      charArray1[7] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3608);
      intArray0[1] = (-1333);
      ArrayUtils.reverse(intArray0, (-1333), 6);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1333), (-3608)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1333), (-3608)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-3608));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((byte)0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double((byte) (-1));
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(624.0563);
      assertNotNull(double3);
      assertEquals(624.0563, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray2[3] = double3;
      Double double4 = new Double(896.88);
      assertNotNull(double4);
      assertEquals(896.88, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray2[4] = double4;
      Double double5 = new Double(1085.73146);
      assertNotNull(double5);
      assertEquals(1085.73146, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray2[5] = double5;
      Double double6 = new Double((-3608));
      assertNotNull(double6);
      assertEquals((-3608.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray2[6] = double6;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (double) doubleArray2[1]);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 624.0563, 896.88, 1085.73146, (-3608.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1444, (int) (byte) (-113));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)101;
      shortArray0[2] = (short) (-4527);
      shortArray0[3] = (short)88;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)101, 0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)101, (short) (-4527), (short)88}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((byte[]) null, (int) (short) (-4527));
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (int) (byte)97;
      intArray0[2] = (int) (byte)97;
      intArray0[3] = (int) (byte)97;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {97, 97, 97, 97}, intArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1323), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1323, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1800.67726464);
      assertNotNull(double0);
      assertEquals(1800.67726464, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1800.67726464}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[0];
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray2[2] = 1800.67726464;
      doubleArray2[3] = (double) doubleArray0[0];
      doubleArray2[4] = (double) doubleArray0[0];
      doubleArray2[5] = (-945.0171266115682);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {1800.67726464}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1800.67726464, 1800.67726464, 1800.67726464, 1800.67726464, 1800.67726464, (-945.0171266115682)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1800.67726464, 1800.67726464, 1800.67726464, 1800.67726464, (-945.0171266115682)}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1, (-1), (-1), (-1), (-1), 1}, intArray1);
      assertArrayEquals(new int[] {(-1), 1, 1, (-1), (-1), (-1), (-1), 1}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean3 = ArrayUtils.isEmpty(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 1;
      long[] longArray1 = ArrayUtils.remove(longArray0, 1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, (-1L), (-1L), 1L}, longArray0);
      assertArrayEquals(new long[] {1L, (-1L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)30);
      assertNotNull(byte1);
      assertEquals((byte)30, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)30);
      assertNotNull(byte2);
      assertEquals((byte)30, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3493.529, Integer.MAX_VALUE, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)30;
      shortArray0[1] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte) (-105);
      shortArray0[6] = (short) (byte)30;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 9);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)30, (short)0, (short) (-105), (short) (-105), (short)30, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)30, (short)0, (short) (-105), (short) (-105), (short)30, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)30;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) byte1;
      objectArray0[5] = (Object) byte2;
      ArrayUtils.swap(objectArray0, (-477), (int) (short) (-105), (int) (short)30);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      short short0 = (short)84;
      Short short1 = new Short((short)84);
      assertNotNull(short1);
      assertEquals((short)84, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)84}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) short1;
      objectArray0[1] = (Object) short1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) short0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-1), (-1), 1073741824);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[5] = (-424);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(12, intArray0.length);
      assertEquals(13, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'B';
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('#');
      assertNotNull(character1);
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'B', '#'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-1316.0);
      doubleArray0[4] = (double) '#';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'B';
      doubleArray0[7] = (double) '#';
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, (-1316.0), 35.0, 0.0, 66.0, 35.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-819);
      boolean boolean0 = ArrayUtils.contains(intArray0, 110);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-819), 0}, intArray0);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 85);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-124);
      shortArray0[4] = (short) (byte) (-124);
      intArray0[1] = (int) (byte) (-124);
      shortArray0[3] = (short) (byte) (-124);
      shortArray0[5] = (short) (byte) (-124);
      Integer integer0 = new Integer((-819));
      assertNotNull(integer0);
      assertEquals((-819), (int)integer0);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short) (-124);
      Short short0 = new Short((short)870);
      assertNotNull(short0);
      assertEquals((short)870, (short)short0);
      
      shortArray1[1] = short0;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short) (-124);
      shortArray1[4] = (Short) (short)0;
      shortArray1[5] = (Short) (short) (-124);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-124), (short)870, (short)0, (short) (-124), (short)0, (short) (-124)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, (int) shortArray1[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(6, shortArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertNotNull(doubleArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)5, (int) (byte)21);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {5.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)21;
      intArray0[1] = (int) (byte)21;
      intArray0[2] = (int) (byte)5;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1364));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {21, 21, 5}, intArray0);
      assertArrayEquals(new int[] {(-1364), 21, 21, 5}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null, 5);
      assertNull(intArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2117);
      longArray0[1] = (-1L);
      longArray0[2] = 1266L;
      longArray0[3] = (long) 5;
      ArrayUtils.shift(longArray0, 79);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1266L, 5L, (-2117L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 34, (-1515));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[7];
      intArray0[1] = (-1515);
      intArray0[1] = (int) '@';
      intArray0[2] = (int) '@';
      intArray0[3] = (int) '@';
      intArray0[4] = (int) '@';
      intArray0[5] = 34;
      intArray0[6] = (-1515);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1515);
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, 64);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1515L), 0L}, longArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 34);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.insert(115, intArray1, intArray1);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1416.8712971537377;
      doubleArray0[1] = (-1859.7537);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 3493.529;
      doubleArray0[4] = 1416.8712971537377;
      doubleArray0[5] = 1238.75553844366;
      doubleArray0[6] = 832.204370316207;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377, (-1859.7537), 1.5, 3493.529, 1416.8712971537377, 1238.75553844366, 832.204370316207}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (-1859.7537);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 1746);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ArrayUtils.shift(byteArray1, (-1), (-1), (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(116.0);
      assertNotNull(double1);
      assertEquals(116.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3454.593303971546));
      assertNotNull(double2);
      assertEquals((-3454.593303971546), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf((double) doubleArray0[2]);
      assertNotNull(double3);
      assertEquals(5, doubleArray0.length);
      assertEquals((-3454.593303971546), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2856.0);
      assertNotNull(double4);
      assertEquals(2856.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)74, (-1658));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)45, (byte)89, (byte) (-83), (byte)21, (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)5;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-115));
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)5}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)5;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)21;
      ArrayUtils.swap(longArray0, 1, 1, 64);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 5L, 5L, 5L, 21L}, longArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(365);
      assertNotNull(integer1);
      assertEquals(365, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(437);
      assertNotNull(integer0);
      assertEquals(437, (int)integer0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 437;
      floatArray0[1] = (float) (-122);
      floatArray0[2] = (float) 437;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {437.0F, (-122.0F), 437.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {437.0F, (-122.0F), 437.0F, 437.0F, (-122.0F), 437.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2999);
      intArray0[1] = 437;
      intArray0[2] = (-122);
      intArray0[3] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2999));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2999), 437, (-122), 11}, intArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift((char[]) null, 14);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(1027);
      assertNotNull(integer1);
      assertEquals(1027, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 437;
      integerArray0[2] = (Integer) (-122);
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, (-122));
      assertEquals(3, integerArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap(booleanArray0, (-460), (-2999), 2654);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-819);
      boolean boolean0 = ArrayUtils.contains(intArray0, 110);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-819), 0}, intArray0);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 85);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-124);
      shortArray0[4] = (short) (byte) (-124);
      shortArray0[2] = (short) (byte) (-124);
      shortArray0[3] = (short) (byte) (-124);
      shortArray0[5] = (short) (byte) (-124);
      Integer integer0 = new Integer((-819));
      assertNotNull(integer0);
      assertEquals((-819), (int)integer0);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short) (-124);
      Short short0 = new Short((short)870);
      assertNotNull(short0);
      assertEquals((short)870, (short)short0);
      
      shortArray1[1] = short0;
      shortArray1[2] = (Short) (short) (-124);
      shortArray1[3] = (Short) (short) (-124);
      shortArray1[4] = (Short) (short) (-124);
      shortArray1[5] = (Short) (short) (-124);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-124), (short)870, (short) (-124), (short) (-124), (short) (-124), (short) (-124)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-124);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (-1568.159716858979);
      doubleArray0[3] = (double) (short)shortArray1[0];
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (-819);
      doubleArray0[6] = (double) (short) (-124);
      doubleArray0[7] = (double) 110;
      doubleArray0[8] = (double) (short) (-124);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-83), (int) (short) (-124));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-124.0), 2.0, (-1568.159716858979), (-124.0), 1.0, (-819.0), (-124.0), 110.0, (-124.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Byte byte0 = new Byte((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)113;
      longArray0[2] = (long) (byte)113;
      longArray0[3] = (-3673L);
      longArray0[4] = 0L;
      longArray0[5] = (-3673L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-3673L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {0L, 113L, 113L, (-3673L), 0L, (-3673L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-3673L), 0L, 113L, 113L, (-3673L), 0L, (-3673L), 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'P';
      charArray0[2] = 'k';
      charArray0[3] = 'D';
      charArray0[4] = 'I';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)113, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'f', 'P', 'k', 'D', 'I'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = ';';
      charArray0[2] = '3';
      charArray0[3] = '-';
      charArray0[4] = 'T';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ';';
      charArray1[1] = '3';
      charArray1[2] = ';';
      charArray1[3] = ';';
      charArray1[4] = '-';
      charArray1[5] = '3';
      charArray1[6] = '&';
      charArray1[7] = '-';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(1, charArray2.length);
      assertEquals(5, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'T'}, charArray2);
      assertArrayEquals(new char[] {'&', ';', '3', '-', 'T'}, charArray0);
      assertArrayEquals(new char[] {';', '3', ';', ';', '-', '3', '&', '-'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)48;
      ArrayUtils.swap(byteArray0, (int) (byte) (-63), (-831), 1270);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-23), (byte) (-44), (byte) (-63), (byte)38, (byte)110, (byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '\"';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '0';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {'0', '\"'}, charArray0);
      assertArrayEquals(new char[] {'0'}, charArray1);
      assertArrayEquals(new char[] {'\"'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2682;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 64.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-886.3964F);
      floatArray0[1] = (float) 2682;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) '-';
      floatArray0[5] = (float) 1L;
      ArrayUtils.shift(floatArray0, 1491);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 45.0F, 1.0F, (-886.3964F), 2682.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)2, (int) (byte)2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(2942);
      assertNotNull(integer0);
      assertEquals(2942, (int)integer0);
      
      Integer integer1 = Integer.getInteger("java.lang.Integer", integer0);
      assertNotNull(integer1);
      assertEquals(2942, (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 14.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {14.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-6));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-12), (byte)0, (byte) (-2), (byte)101, (byte)90, (byte)90}, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-12), (byte)0, (byte) (-2), (byte)101, (byte)90, (byte)90}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray1 = ArrayUtils.removeElement((Integer[]) null, (Object) integer1);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      int int1 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-306));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F)}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)90);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-905), 51);
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (-905), (int) (byte) (-12));
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F)}, floatArray1, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = (-1234.654727);
      doubleArray0[2] = (double) (byte) (-12);
      doubleArray0[3] = (-290.3246726117178);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) int1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)101, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)65);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short)65, 3421);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(55, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-4395), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)6);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)0, (byte) (-52), (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)6, (byte)0, (byte) (-52), (byte)2, (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) (byte) (-52);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 3355L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3355L}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1284L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {3355L}, longArray0);
      assertArrayEquals(new long[] {3355L, 1284L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray0, 20);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3355L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      Integer integer0 = new Integer(1803);
      assertNotNull(integer0);
      assertEquals(1803, (int)integer0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1803;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      Integer integer1 = new Integer((byte) (-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals((-1), object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) (byte) (-1);
      objectArray0[7] = (Object) (byte) (-1);
      objectArray0[8] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (int) (byte)7, 102, 2120640102);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) 1803;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      ArrayUtils.shift(longArray0, (-419), (int) (byte) (-1), 102);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 1803L, (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 120);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) 817;
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, object0, 120);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = (-215);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-215);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-215);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-215);
      longArray0[8] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 1284);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-215L), 0L, 0L, (-215L), 0L, 0L, (-215L), 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, (-215L), 0L, 0L, (-215L), 0L, 0L, (-215L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2.0));
      assertNotNull(double1);
      assertEquals((-2.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3825.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 751.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.4937966F;
      floatArray0[6] = 1432.0F;
      floatArray0[7] = (-2202.0F);
      floatArray0[8] = 751.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.4937966F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-3825.0F), 1.0F, 1.0F, 751.0F, 1.0F, 1.4937966F, 1432.0F, (-2202.0F), 751.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3825.0F), 1.0F, 1.0F, 751.0F, 1.0F, 1.4937966F, 1432.0F, (-2202.0F), 751.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, object0);
      assertNull(integerArray0);
      
      ArrayUtils.reverse((Object[]) null, 17, 2145788712);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(charArray1, 0, (-2140379359), 16);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1822L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1822L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'h');
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-117)}, byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)10;
      intArray0[4] = (int) (byte)10;
      intArray0[5] = (int) (byte) (-117);
      intArray0[6] = 2344;
      intArray0[7] = (int) (byte)10;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {10, 0, 0, 10, 10, (-117), 2344, 10}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (byte) (-117);
      objectArray0[3] = (Object) (-1822L);
      objectArray0[4] = (Object) 10;
      Integer integer0 = new Integer(121);
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-257.6F);
      floatArray1[1] = (-955.978F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-257.6F), (-955.978F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 740);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 740;
      longArray0[1] = (long) 740;
      longArray0[2] = (long) 740;
      longArray0[3] = (long) 740;
      longArray0[4] = (long) 740;
      longArray0[5] = (long) 740;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 740L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {740L, 740L, 740L, 740L, 740L, 740L}, longArray0);
      assertArrayEquals(new long[] {740L, 740L, 740L, 740L, 740L, 740L, 740L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 4833L);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {740L, 740L, 740L, 740L, 740L, 740L}, longArray0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 740;
      floatArray0[1] = 2042.5972F;
      floatArray0[2] = (float) 740L;
      floatArray0[3] = (float) 740L;
      floatArray0[4] = (float) 740L;
      floatArray0[5] = (float) 740L;
      floatArray0[6] = (float) 740L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 10, 10);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {740.0F, 2042.5972F, 740.0F, 740.0F, 740.0F, 740.0F, 740.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-2);
      shortArray0[3] = (short)1678;
      shortArray0[4] = (short) (-1900);
      shortArray0[5] = (short) (-4741);
      shortArray0[6] = (short)2682;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1900);
      shortArray1[1] = (short) (-1900);
      shortArray1[2] = (short)1678;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (-3183);
      shortArray1[5] = (short)2682;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-2), (short)1678, (short) (-1900), (short) (-4741), (short)2682}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1900), (short) (-1900), (short)1678, (short)0, (short) (-3183), (short)2682}, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)119;
      longArray0[1] = (long) (-732);
      longArray0[2] = (long) (byte)119;
      longArray0[3] = (long) (byte)119;
      longArray0[4] = (long) (byte)119;
      longArray0[5] = (long) (-732);
      longArray0[6] = (long) (-732);
      longArray0[7] = (long) (byte)119;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-732), (-124));
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {119L, (-732L), 119L, 119L, 119L, (-732L), (-732L), 119L}, longArray0);
      assertEquals("{1, 5, 6}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {119L, (-732L), 119L, 119L, 119L, (-732L), (-732L), 119L}, longArray0);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 119L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {119L, (-732L), 119L, 119L, 119L, (-732L), (-732L), 119L}, longArray0);
      assertArrayEquals(new long[] {119L, (-732L), 119L, 119L, 119L, (-732L), (-732L), 119L, 119L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)119;
      byteArray1[4] = (byte)119;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119, (byte)0, (byte)119}, byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119}, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)119;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)119}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new short[] {(short)119}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1772;
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 1772;
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 3);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {43, 1772, 43}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)78;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)78);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-1), (byte) (-124), (byte) (-56), (byte)78}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[3] = 1.0F;
      int[] intArray0 = new int[8];
      intArray0[0] = 16;
      intArray0[1] = 90;
      intArray0[2] = (-1064);
      intArray0[3] = (-1779);
      intArray0[4] = 0;
      intArray0[5] = (-1431655764);
      intArray0[6] = (-2703);
      intArray0[7] = 102;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1431655764));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {16, 90, (-1064), (-1779), 0, (-1431655764), (-2703), 102}, intArray0);
      assertArrayEquals(new int[] {(-1431655764), 16, 90, (-1064), (-1779), 0, (-1431655764), (-2703), 102}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2703);
      doubleArray0[1] = (-721.3391650131);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 90;
      doubleArray0[5] = (double) (-1431655764);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-2082.0);
      ArrayUtils.shift(doubleArray0, 0, 102, (-1064));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2703.0), (-721.3391650131), 0.0, 0.0, 90.0, (-1.431655764E9), 0.0, (-2082.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1812.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1389.6391;
      doubleArray0[3] = (-778.0);
      doubleArray0[4] = 1116.689;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-289.7100048409);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-851.3955026364));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1812.0, Double.NaN, 1389.6391, (-778.0), 1116.689, 1.0, 1.0, (-289.7100048409)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      intArray1[0] = 1925;
      intArray1[5] = 110;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-819));
      assertNotNull(bitSet0);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 110}, intArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray1.equals((Object)intArray0));
      
      bitSet0.set(1925, 1925);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 110}, intArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.addAll(intArray2, (int[]) null);
      assertNotNull(intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-819);
      longArray0[2] = (long) 110;
      longArray0[3] = (long) 1925;
      longArray0[4] = (long) (-819);
      longArray0[5] = (long) (-819);
      longArray0[6] = (long) 1925;
      longArray0[7] = (long) (-819);
      longArray0[8] = 1922L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {1L, (-819L), 110L, 1925L, (-819L), (-819L), 1925L, (-819L), 1922L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[8];
      intArray0[0] = 1925;
      intArray0[5] = 1925;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-819));
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 1925, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      bitSet0.set(1925, 1925);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 1925, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 1925, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1925, 0, 0, 0, 0, 1925, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1287);
      assertNotNull(double0);
      assertEquals(1287.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 11);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift((char[]) null, 11);
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "Array is empty");
      assertNotNull(stringArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2454);
      shortArray0[1] = (short)820;
      shortArray0[2] = (short) (-349);
      shortArray0[3] = (short) (-3715);
      shortArray0[4] = (short)1271;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-349), (-1090));
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2454), (short)820, (short) (-349), (short) (-3715), (short)1271}, shortArray0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 10, '\"');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)2;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)2, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-60), (byte)2, (byte) (-60)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 226L;
      longArray0[3] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 226L, 0L}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'h');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3004.1719F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3004.1719F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 91.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-1), (byte)57, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)57;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (-4114);
      shortArray0[3] = (short) (byte)57;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)57;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)57, 1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)57, (short) (-1), (short) (-4114), (short)57, (short) (-1), (short)57}, shortArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-778));
      assertNotNull(integer1);
      assertEquals((-778), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("Oqf", integer1);
      assertNotNull(integer2);
      assertEquals((-778), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 1096);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1096}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-2658.773F));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-778);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-778.0)}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer integer5 = new Integer(1096);
      assertNotNull(integer5);
      assertEquals(1096, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, integer5);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer6, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer6));
      assertTrue(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry5;
      abstractMap_SimpleImmutableEntryArray1[1] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray1[2] = abstractMap_SimpleImmutableEntry5;
      abstractMap_SimpleImmutableEntryArray1[3] = abstractMap_SimpleImmutableEntry5;
      abstractMap_SimpleImmutableEntryArray1[4] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1673));
      assertNotNull(integer1);
      assertEquals((-1673), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-3179));
      assertNotNull(integer2);
      assertEquals((-3179), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      integerArray1[1] = integer2;
      integerArray1[2] = integer1;
      integerArray1[3] = integer1;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)788;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)100;
      ArrayUtils.shift(shortArray0, (-1), 4, (-577));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)788, (short)100, (short)100, (short)100}, shortArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-288.3));
      assertNotNull(double0);
      assertEquals((-288.3), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)788);
      assertNotNull(double1);
      assertEquals(788.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2573.92));
      assertNotNull(double2);
      assertEquals((-2573.92), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-288.3));
      assertNotNull(double3);
      assertEquals((-288.3), (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1249.1);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-288.3), 788.0, (-2573.92), (-288.3)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt(81);
      assertEquals(1, int0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      double double1 = mockRandom0.nextDouble();
      assertEquals(0.2, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      intArray0[5] = 2;
      ArrayUtils.swap(intArray0, 2, 2, 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray0);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 0, 3);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'f');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (float) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1668.889004;
      Integer integer0 = new Integer(317);
      assertNotNull(integer0);
      assertEquals(317, (int)integer0);
      
      Integer integer1 = new Integer((-852));
      assertNotNull(integer1);
      assertEquals((-852), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2034));
      assertNotNull(integer2);
      assertEquals((-2034), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-2034));
      assertNotNull(integer3);
      assertEquals((-2034), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(450);
      assertNotNull(integer4);
      assertEquals(450, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      ArrayUtils.shift(doubleArray0, (-511), Integer.MAX_VALUE, 1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1668.889004, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = 'u';
      ArrayUtils.shift(charArray0, 34, 3089, 2017);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'3', 'X', 'W', 'u'}, charArray0);
      
      Integer integer5 = new Integer((-2034));
      assertNotNull(integer5);
      assertEquals((-2034), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}", bitSet0.toString());
      assertEquals(16, bitSet0.length());
      assertEquals(16, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1073741823);
      intArray0[1] = 1925;
      intArray0[2] = 1855;
      int int0 = ArrayUtils.indexOf(intArray0, 1855, (int) (byte) (-124));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1073741823), 1925, 1855}, intArray0);
      assertEquals(2, int0);
      
      MutableInt mutableInt0 = new MutableInt(1855);
      assertNotNull(mutableInt0);
      assertEquals(1855, (int)mutableInt0.getValue());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals(1855, (int)mutableInt0.toInteger());
      assertEquals(1855L, mutableInt0.longValue());
      assertEquals(1855.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1855.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1855", mutableInt0.toString());
      assertEquals((short)1855, mutableInt0.shortValue());
      assertEquals(1855, mutableInt0.intValue());
      
      Integer integer1 = mutableInt0.toInteger();
      assertNotNull(integer1);
      assertEquals(1855, (int)integer1);
      assertEquals(1855, (int)mutableInt0.getValue());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals(1855, (int)mutableInt0.toInteger());
      assertEquals(1855L, mutableInt0.longValue());
      assertEquals(1855.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1855.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1855", mutableInt0.toString());
      assertEquals((short)1855, mutableInt0.shortValue());
      assertEquals(1855, mutableInt0.intValue());
      assertTrue(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((byte) (-56));
      assertNotNull(integer2);
      assertEquals((-56), (int)integer2);
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = Integer.getInteger("1%(*yO\"");
      assertNull(integer3);
      
      Integer[] integerArray0 = new Integer[10];
      integerArray0[0] = (Integer) 1925;
      integerArray0[1] = (Integer) (-1073741823);
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 1925;
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) (-1073741823);
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[5]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(10, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (-1037), 1, 121);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      long[] longArray0 = new long[1];
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4397), (-4397));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2625.0F, (int) (byte) (-72));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 593.43164F;
      doubleArray0[1] = (double) (byte) (-72);
      doubleArray0[2] = (double) 2625.0F;
      doubleArray0[3] = (double) (-4397);
      doubleArray0[4] = (double) (byte) (-72);
      doubleArray0[5] = (double) (-4397);
      doubleArray0[6] = (double) 2625.0F;
      doubleArray0[7] = (double) 2625.0F;
      doubleArray0[8] = (double) 2;
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertArrayEquals(new double[] {593.431640625, (-72.0), 2625.0, (-4397.0), (-72.0), (-4397.0), 2625.0, 2625.0, 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift((Object[]) null, (int) (byte) (-72), 91, 2145767034);
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1220);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 2979.413892743194;
      doubleArray0[2] = (double) (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1.0);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2979.413892743194, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 4, 5, 6}", bitSet0.toString());
      
      double[] doubleArray1 = ArrayUtils.insert(4, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 2979.413892743194, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 2979.413892743194, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      int int0 = 5;
      ArrayUtils.shift((int[]) null, 5);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integer0);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'r';
      charArray0[5] = '-';
      ArrayUtils.swap(charArray0, 3, (-1137), (-1137));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', '-', '-', 'r', '-'}, charArray0);
      
      Integer integer0 = new Integer(1319);
      assertNotNull(integer0);
      assertEquals(1319, (int)integer0);
      
      Integer integer1 = new Integer((-687));
      assertNotNull(integer1);
      assertEquals((-687), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-856));
      assertNotNull(integer2);
      assertEquals((-856), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', '-', '-', 'r', '-'}, charArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'r';
      doubleArray0[1] = (double) (-54);
      ArrayUtils.swap(doubleArray0, 1810, (-687), (-1820));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {114.0, (-54.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 15, (byte)63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[0] = '\"';
      charArray0[2] = 'E';
      charArray0[3] = '-';
      charArray0[4] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000');
      assertNotNull(bitSet0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\"', '\u0000', 'E', '-', 'V', '\u0000'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{1, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      Character character0 = Character.valueOf('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3241;
      intArray0[1] = (int) '\"';
      ArrayUtils.shift(intArray0, 4, (-3823), 2390);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3241, 34}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)97, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 't');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 0, (-4818), 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((short[]) null, 1, 45);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1622.666986);
      doubleArray0[1] = (-1347.46556);
      doubleArray0[2] = 3072.2923971236;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-275.28814);
      ArrayUtils.shift(doubleArray0, 1, 1, (-796));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1622.666986), (-1347.46556), 3072.2923971236, (-1.0), (-275.28814)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-732));
      assertNotNull(integer0);
      assertEquals((-732), (int)integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      ArrayUtils.swap(doubleArray0, (-433), 16);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 16);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2146);
      shortArray0[1] = (short) (-2146);
      shortArray0[2] = (short) (-2146);
      shortArray0[3] = (short) (-2146);
      shortArray0[4] = (short) (-2146);
      shortArray0[5] = (short)1645;
      shortArray0[6] = (short) (-2146);
      shortArray0[7] = (short) (-2146);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2146), (short) (-2146), (short) (-2146), (short) (-2146), (short) (-2146), (short)1645, (short) (-2146), (short) (-2146)}, shortArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-2146), 1, 5);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(longArray0, (-37), (int) (short) (-2146));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences((double[]) null, 1.0);
      assertNull(doubleArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) 'z';
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'z';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {122, 122, 88, 122}, intArray0);
      assertArrayEquals(new int[] {122, 122, 88, 122}, intArray1);
      
      Short short0 = new Short((short)91);
      assertNotNull(short0);
      assertEquals((short)91, (short)short0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 122, (int) (short)0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 101);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 0, 0}, intArray0);
      assertArrayEquals(new int[] {101, 2, 101, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-2146484367));
      assertNotNull(integer0);
      assertEquals((-2146484367), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2146484367), object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer0;
      intArray0[1] = (int) 'e';
      objectArray0[5] = object0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1);
      assertEquals(6, objectArray0.length);
      assertEquals(0, int0);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byte byte0 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 'e';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L, 2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 101L}, longArray0);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 'e';
      floatArray0[2] = (float) 2L;
      floatArray0[3] = 194.0F;
      floatArray0[4] = (float) 'e';
      floatArray0[5] = (float) 101L;
      floatArray0[6] = (float) 2L;
      floatArray0[7] = (float) 2L;
      floatArray0[8] = (-2558.0F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 688.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, 101.0F, 2.0F, 194.0F, 101.0F, 101.0F, 2.0F, 2.0F, (-2558.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(16, object0);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      
      ArrayUtils.shift((Object[]) null, 1, 160, 3202);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-661);
      ArrayUtils.swap(shortArray0, (int) (short) (-661), 2, (-128));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-661), (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      ArrayUtils.shift(doubleArray0, 0, 0, 4104);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {45.0, 45.0, 89.0, 89.0}, doubleArray0, 0.01);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      ArrayUtils.shift(charArray1, (-761), 0, Integer.MAX_VALUE);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(48, bitSet1.cardinality());
      assertEquals(48, bitSet1.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      Double double1 = new Double((-1333));
      assertNotNull(double1);
      assertEquals((-1333.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1855.0F);
      assertNotNull(double2);
      assertEquals(1855.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1855.0F);
      assertNotNull(double3);
      assertEquals(1855.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((-1333));
      assertNotNull(double4);
      assertEquals((-1333.0), (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-2145929302));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1855;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3033;
      intArray1[1] = (-1333);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3033, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(1974);
      assertNotNull(integer0);
      assertEquals(1974, (int)integer0);
      
      Integer integer1 = new Integer(1974);
      assertNotNull(integer1);
      assertEquals(1974, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)25;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)63, (byte)32, (byte)85, (byte) (-113), (byte)0, (byte) (-1), (byte)25}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)63, (byte)32, (byte)85, (byte) (-113), (byte)0, (byte) (-1), (byte)25}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(788).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = false;
      booleanArray2[7] = true;
      booleanArray2[8] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray2, (Random) mockRandom0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, false, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 'e';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L, 2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 101L}, longArray0);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 'e';
      floatArray0[2] = (float) 2L;
      floatArray0[3] = 194.0F;
      floatArray0[4] = (float) 'e';
      floatArray0[5] = (float) 101L;
      floatArray0[6] = (float) 2L;
      floatArray0[7] = (float) 2L;
      floatArray0[8] = (-2558.0F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 688.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, 101.0F, 2.0F, 194.0F, 101.0F, 101.0F, 2.0F, 2.0F, (-2558.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(16, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      
      ArrayUtils.shift((Object[]) null, 1, 160, 3202);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-661);
      shortArray0[1] = (short) (-319);
      shortArray0[2] = (short)2877;
      shortArray0[3] = (short)120;
      shortArray0[4] = (short) (-3076);
      ArrayUtils.reverse(shortArray0, (-664), 102);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3076), (short)120, (short)2877, (short) (-319), (short) (-661)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1L;
      floatArray0[3] = (float) (-3130);
      int[] intArray0 = new int[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-3130.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3130.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short)1508, (int) (short)1508);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Object";
      stringArray0[2] = ":";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-49));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-49);
      doubleArray0[1] = 1550.22868188;
      doubleArray0[2] = (double) (byte) (-49);
      doubleArray0[3] = (double) (byte) (-49);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-49.0), 1550.22868188, (-49.0), (-49.0)}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte) (-49));
      assertNotNull(integer0);
      assertEquals((-49), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertEquals((-49), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1679));
      assertNotNull(integer4);
      assertEquals((-1679), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2481);
      assertNotNull(integer5);
      assertEquals(2481, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-49), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -49, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ')');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift((Object[]) null, 0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift((Object[]) null, 16, (-414), (-414));
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 534.9093F;
      floatArray0[1] = (-1665.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 119.0F;
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      Short short0 = Short.valueOf((short) (-899));
      assertNotNull(short0);
      assertEquals((short) (-899), (short)short0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (short) (-899);
      doubleArray1[1] = (double) 119.0F;
      doubleArray1[2] = 90.0;
      doubleArray1[3] = (double) (-1.0F);
      doubleArray1[4] = (double) (-1.0F);
      doubleArray1[5] = (double) (-1665.0F);
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-899.0), 119.0, 90.0, (-1.0), (-1.0), (-1665.0)}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-899);
      int[] intArray0 = new int[9];
      intArray0[0] = 3105;
      intArray0[1] = 621;
      intArray0[2] = (int) (short) (-899);
      intArray0[3] = (int) (short) (-899);
      intArray0[4] = (int) (short) (-899);
      intArray0[5] = (int) (short) (-899);
      intArray0[6] = (-6);
      intArray0[7] = (int) (short) (-899);
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3105, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[0] = (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte) (-125);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 160);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {2, (-125)}, intArray0);
      assertArrayEquals(new int[] {160, 2, (-125)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, (int) (short)2);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, (-125)}, intArray0);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)50;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-72), (int) (byte)92);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)113, (byte)92, (byte)50}, byteArray0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)50;
      intArray0[1] = (int) (byte) (-72);
      intArray0[2] = (int) (byte)50;
      intArray0[3] = (int) (byte)113;
      intArray0[4] = 110;
      intArray0[5] = (int) (byte)50;
      intArray0[6] = (int) (byte) (-72);
      intArray0[7] = (int) (byte)113;
      intArray0[8] = (int) (byte)113;
      int int1 = ArrayUtils.indexOf(intArray0, 98, (int) (byte)50);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {50, (-72), 50, 113, 110, 50, (-72), 113, 113}, intArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      MutableInt mutableInt0 = new MutableInt((-72));
      assertNotNull(mutableInt0);
      assertEquals("-72", mutableInt0.toString());
      assertEquals((-72.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-72.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-72), mutableInt0.intValue());
      assertEquals((-72L), mutableInt0.longValue());
      assertEquals((short) (-72), mutableInt0.shortValue());
      assertEquals((-72), (int)mutableInt0.getValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-72), (int)mutableInt0.toInteger());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals((-72), (int)integer0);
      assertEquals("-72", mutableInt0.toString());
      assertEquals((-72.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-72.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-72), mutableInt0.intValue());
      assertEquals((-72L), mutableInt0.longValue());
      assertEquals((short) (-72), mutableInt0.shortValue());
      assertEquals((-72), (int)mutableInt0.getValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-72), (int)mutableInt0.toInteger());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer((-583));
      assertNotNull(integer1);
      assertEquals((-583), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("1");
      assertNull(integer2);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) integer0);
      assertNull(integerArray0);
      assertEquals("-72", mutableInt0.toString());
      assertEquals((-72.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-72.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-72), mutableInt0.intValue());
      assertEquals((-72L), mutableInt0.longValue());
      assertEquals((short) (-72), mutableInt0.shortValue());
      assertEquals((-72), (int)mutableInt0.getValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-72), (int)mutableInt0.toInteger());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "&{W");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-3988));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(9, object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      assertEquals("9", string0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, 1280, 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 2.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)154;
      shortArray1[2] = (short)104;
      shortArray1[3] = (short)959;
      shortArray1[4] = (short)959;
      shortArray1[5] = (short)3250;
      shortArray1[6] = (short) (-72);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)154, (short)0, (short)104, (short)959, (short)959, (short)3250, (short) (-72)}, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(9, object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      assertEquals("9", string0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, 1280, 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 2.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)154;
      shortArray1[1] = (short)2524;
      shortArray1[2] = (short)104;
      shortArray1[3] = (short)959;
      shortArray1[4] = (short) (-2392);
      shortArray1[5] = (short)3250;
      shortArray1[6] = (short) (-72);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)154, (short)2524, (short)104, (short)959, (short) (-2392), (short)3250, (short) (-72)}, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, Double.NaN, (-1.0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-1186L);
      longArray0[2] = 3732L;
      long[] longArray1 = ArrayUtils.add(longArray0, 2494L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1186L), 3732L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1186L), 3732L, 2494L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertEquals(1, int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1186L), 1);
      assertNotNull(bitSet1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1186L), 3732L}, longArray0);
      assertEquals("{1}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.swap(booleanArray0, 1, 2, 2);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)18;
      Byte byte1 = new Byte((byte)18);
      assertNotNull(byte1);
      assertEquals((byte)18, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte)18, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-15));
      assertNotNull(byte3);
      assertEquals((byte) (-15), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)3);
      assertNotNull(byte4);
      assertEquals((byte)3, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)19);
      assertNotNull(byte5);
      assertEquals((byte)19, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertEquals((byte)18, (byte)byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)2);
      assertNotNull(byte7);
      assertEquals((byte)2, (byte)byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[6] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte)18, (byte) (-15), (byte)3, (byte)19, (byte)18, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '_');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences((double[]) null, 1.0);
      assertNull(doubleArray2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', 2884);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'X', 'z', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'X';
      characterArray0[1] = (Character) 'X';
      characterArray0[2] = (Character) 'X';
      characterArray0[3] = (Character) 'X';
      characterArray0[4] = (Character) 'X';
      characterArray0[5] = (Character) 'X';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) characterArray0, (int) characterArray0[4]);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      char char0 = 'b';
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, (-2171), (-2171), (int) char0);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(16, longArray0.length);
      assertEquals(32, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray0[12] = 0L;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 84;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 84);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 84, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(173);
      assertNotNull(mutableInt0);
      assertEquals(173, (int)mutableInt0.toInteger());
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals("173", mutableInt0.toString());
      assertEquals(173, (int)mutableInt0.getValue());
      assertEquals(173L, mutableInt0.longValue());
      assertEquals(173.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(173.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(173, mutableInt0.intValue());
      assertEquals((short)173, mutableInt0.shortValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(173, (int)integer0);
      assertEquals(173, (int)mutableInt0.toInteger());
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals("173", mutableInt0.toString());
      assertEquals(173, (int)mutableInt0.getValue());
      assertEquals(173L, mutableInt0.longValue());
      assertEquals(173.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(173.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(173, mutableInt0.intValue());
      assertEquals((short)173, mutableInt0.shortValue());
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1718));
      assertNotNull(integer1);
      assertEquals((-1718), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = Integer.getInteger("I");
      assertNull(integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = null;
      Integer integer3 = mutableInt0.getValue();
      assertNotNull(integer3);
      assertEquals(173, (int)integer3);
      assertEquals(173, (int)mutableInt0.toInteger());
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals("173", mutableInt0.toString());
      assertEquals(173, (int)mutableInt0.getValue());
      assertEquals(173L, mutableInt0.longValue());
      assertEquals(173.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(173.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(173, mutableInt0.intValue());
      assertEquals((short)173, mutableInt0.shortValue());
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[2] = integer3;
      integerArray0[3] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[2]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'D');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, (int) (byte)36);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)36, (-1073741823));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt((int) (byte)36);
      assertNotNull(mutableInt0);
      assertEquals(36, (int)mutableInt0.getValue());
      assertEquals((byte)36, mutableInt0.byteValue());
      assertEquals(36, (int)mutableInt0.toInteger());
      assertEquals(36.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(36, mutableInt0.intValue());
      assertEquals(36.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)36, mutableInt0.shortValue());
      assertEquals(36L, mutableInt0.longValue());
      assertEquals("36", mutableInt0.toString());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      assertEquals(36, (int)mutableInt0.getValue());
      assertEquals((byte)36, mutableInt0.byteValue());
      assertEquals(36, (int)mutableInt0.toInteger());
      assertEquals(36.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(36, mutableInt0.intValue());
      assertEquals(36.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)36, mutableInt0.shortValue());
      assertEquals(36L, mutableInt0.longValue());
      assertEquals("36", mutableInt0.toString());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1718));
      assertNotNull(integer1);
      assertEquals((-1718), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("1%(*yO\"");
      assertNull(integer2);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 101, (int) (short)0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1204;
      doubleArray0[5] = (double) 'e';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 101.0, 2.0, 2.0, 1204.0, 101.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3823L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-20);
      intArray0[1] = 4171;
      intArray0[2] = (-701);
      intArray0[3] = 2489;
      ArrayUtils.shift(intArray0, (-798), 4171, (-380));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-20), 4171, (-701), 2489}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.insert((-1), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-72);
      longArray0[2] = (long) 0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-72L), 0L}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1), (-1), (-5876));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-1098));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[3] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '?', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer(45);
      assertNotNull(integer0);
      assertEquals(45, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short)65);
      assertNotNull(shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-3628));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1551);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1551}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short short0 = (short)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1822.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (short)0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short) (-1064);
      shortArray1[2] = (Short) (short)183;
      shortArray1[3] = (Short) (short)0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray1, (int) short0);
      assertNotNull(intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray1.length);
      assertArrayEquals(new int[] {1421, 1421, 1421, 1421}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1551);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short short0 = (short)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1822.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (short)0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short) (-1064);
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short)0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[2] = integer0;
      integerArray1[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray1, (int) short0);
      assertNotNull(intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1421, 0, 1421, 1421}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      byteArray0[7] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Integer integer1 = new Integer((byte) (-56));
      assertNotNull(integer1);
      assertEquals((-56), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) object0;
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) object0;
      Integer integer2 = new Integer((-3082));
      assertNotNull(integer2);
      assertEquals((-3082), (int)integer2);
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[7] = integer2;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) (-433);
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) (-732);
      doubleArray0[4] = (double) 17;
      Long[] longArray1 = new Long[1];
      Long long0 = new Long(17);
      assertNotNull(long0);
      assertEquals(17L, (long)long0);
      
      longArray1[0] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {17L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      ArrayUtils.reverse(doubleArray0, 2, 2146701892);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, (-433.0), 0.0, 0.0, 17.0, (-732.0), 17.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)114;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)9, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)9, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray1);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1153));
      assertNotNull(integer0);
      assertEquals((-1153), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      ArrayUtils.shift(longArray0, 559, 3268, 679);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)114);
      assertSame(byteArray0, byteArray1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)9, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114, (byte)114}, byteArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-464), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -464, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-105);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-105), (int) byte2, (double) (byte) (-105));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-105.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(byte2 == byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-2880L);
      longArray0[2] = (long) (byte) (-105);
      longArray0[3] = (long) byte2;
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-2880L), (-105L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2880L), (-105L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2141475217));
      assertNotNull(integer0);
      assertEquals((-2141475217), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2141475217)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integerArray0[0], (-734));
      assertNotNull(bitSet0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-260);
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = (-1);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (int) integerArray0[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-260), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-260), (-1), (-1), (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1190.1768F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1190.1768F), 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1190.1768F), 0.0F, (-1.0F), (-1.0F), (-1.0F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-260);
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-260L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-260L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      float[] floatArray0 = new float[0];
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'D');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)144;
      shortArray0[2] = (short)3380;
      shortArray0[3] = (short)144;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (float) (short)3380;
      floatArray0[2] = 94.26365F;
      floatArray0[3] = (float) (short)99;
      floatArray0[4] = (float) 'z';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3380.0F, (-2575));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {88.0F, 3380.0F, 94.26365F, 99.0F, 122.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 94.26365F, (-433));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {88.0F, 3380.0F, 94.26365F, 99.0F, 122.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'X';
      charArray0[2] = 'z';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 'U';
      doubleArray0[3] = (double) '3';
      doubleArray0[4] = (double) '3';
      doubleArray0[5] = (double) 'U';
      doubleArray0[6] = (double) 'U';
      ArrayUtils.shift((char[]) null, (-1), (-1), (-1));
      Integer integer0 = new Integer(56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        BitSet.valueOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 1, 1, 82);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 100);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-863));
      assertNotNull(integer0);
      assertEquals((-863), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(711);
      assertNotNull(integer1);
      assertEquals(711, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)5);
      assertNotNull(integer2);
      assertEquals(5, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2144979067), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2144979067, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)5;
      ArrayUtils.swap(byteArray0, (int) (byte) (-69), (int) (byte) (-69), (int) (byte)5);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-69), (byte)5, (byte)5, (byte) (-69), (byte)5}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-89L));
      assertNotNull(long0);
      assertEquals((-89L), (long)long0);
      
      Long long1 = Long.getLong("java.lang.Object", long0);
      assertNotNull(long1);
      assertEquals((-89L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long((-1545L));
      assertNotNull(long3);
      assertEquals((-1545L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[2] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1528));
      assertNotNull(integer0);
      assertEquals((-1528), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)5);
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-215);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-215.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte) (-11));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-76), (byte) (-11), (byte)20, (byte) (-113), (byte) (-53), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'r';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'-', 'r', 'A', '('}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte) (-11));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-53);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-53.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-53.0), (-53.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) 194.0F;
      floatArray1[2] = (Float) 1.0F;
      floatArray1[3] = (Float) 1.0F;
      floatArray1[4] = (Float) 1.0F;
      floatArray1[5] = (Float) 1.0F;
      Float float0 = new Float(782.0F);
      assertNotNull(float0);
      assertEquals(782.0F, (float)float0, 0.01F);
      
      floatArray1[7] = (Float) 1.0F;
      floatArray1[8] = (Float) 1.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)1;
      longArray0[7] = (long) (short)1;
      ArrayUtils.shift(longArray0, 1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'n';
      charArray0[2] = '3';
      charArray0[3] = 'M';
      charArray0[4] = 'p';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {' ', 'n', '3', 'M', 'p'}, charArray0);
      assertArrayEquals(new char[] {' ', 'n', '3', 'M', 'p', ' ', 'n', '3', 'M', 'p'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)30;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)118);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)30, (byte)30, (byte)76, (byte) (-75), (byte) (-32), (byte) (-75), (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-75), (byte)0, (byte)30, (byte)30, (byte)76, (byte) (-75), (byte) (-32), (byte) (-75), (byte)30}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long((byte) (-75));
      assertNotNull(long0);
      assertEquals((-75L), (long)long0);
      
      Long long1 = new Long((byte)30);
      assertNotNull(long1);
      assertEquals(30L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte)0);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long long3 = new Long((byte)0);
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long2;
      longArray0[2] = long0;
      longArray0[3] = long2;
      longArray0[4] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-75L), 0L, (-75L), 0L, 0L}, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-75);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.0;
      ArrayUtils.reverse(doubleArray0, (int) (byte)118, (int) (byte)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-75.0), 2.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.145930193E9;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-574.929), 127);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.145930193E9}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2.145930193E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      long[] longArray0 = new long[11];
      longArray0[1] = (long) 2147483619;
      ArrayUtils.shift(longArray0, (-245), 2166, 2147483619);
      assertEquals(11, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-37));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-37);
      longArray0[1] = (long) (byte) (-37);
      longArray0[2] = (long) (byte) (-37);
      longArray0[3] = (long) (byte) (-37);
      longArray0[4] = (-286L);
      longArray0[5] = (long) (byte) (-37);
      ArrayUtils.shift(longArray0, (int) (byte) (-37), 3213, (int) (byte) (-37));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-37L), (-37L), (-37L), (-286L), (-37L), (-37L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[0] = 0.0F;
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 720L;
      longArray0[1] = (long) (-1276);
      longArray0[2] = (long) 6;
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1276L), 6L, 720L}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-823);
      shortArray0[2] = (short) (-5759);
      shortArray0[3] = (short) (-1056);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-823), (short) (-5759), (short) (-1056)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-823), (short) (-5759), (short) (-1056)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 863);
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 110;
      longArray0[2] = (long) 110;
      longArray0[3] = (long) 1284;
      longArray0[4] = (long) 1284;
      longArray0[5] = (long) 0;
      longArray0[6] = (-2100L);
      longArray0[7] = (long) 110;
      longArray0[8] = (long) 110;
      ArrayUtils.shift(longArray0, (-2767), 110, 512);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {110L, 110L, 1284L, 1284L, 0L, (-2100L), 110L, 110L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {110L, 110L, 1284L, 1284L, 0L, (-2100L), 110L, 110L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double((-363.0080948904));
      assertNotNull(double0);
      assertEquals((-363.0080948904), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("|h!", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 1319L);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)90;
      doubleArray0[1] = (double) (byte)90;
      doubleArray0[2] = (double) (byte)90;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (-3311.1400492831));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'a';
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-2));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-344);
      longArray0[1] = 1319L;
      longArray0[2] = (long) (byte)90;
      longArray0[3] = (long) 'a';
      ArrayUtils.reverse(longArray0, 0, (-1430));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-344L), 1319L, 90L, 97L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1373.2410779795105));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 788;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 788;
      long[] longArray1 = ArrayUtils.add(longArray0, 496L);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {3L, 788L, 3L, 788L, 496L}, longArray1);
      assertArrayEquals(new long[] {3L, 788L, 3L, 788L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-13);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 7);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)59, (byte)2, (byte)18, (byte)4, (byte) (-96), (byte)125, (byte) (-13)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)59, (byte)2, (byte)18, (byte)4, (byte) (-96), (byte)125}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      ArrayUtils.swap(intArray0, 2, 2, 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray0);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(19, byteArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(3355L);
      assertNotNull(long0);
      assertEquals(3355L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(4, longArray0.length);
      assertEquals(3355L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-305));
      assertNotNull(integer1);
      assertEquals((-305), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer2);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2941.2556507540207);
      doubleArray0[1] = (double) 3355L;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (long)longArray0[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-305);
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {2, 2, (-1), (-305), 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {2, 2, (-1), (-305), 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1719);
      intArray0[1] = 3;
      intArray0[2] = 1810;
      intArray0[3] = 1509;
      intArray0[4] = (-23);
      intArray0[5] = 0;
      intArray0[6] = 62;
      intArray0[7] = (-360);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-922), 2618);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1719), 3, 1810, 1509, (-23), 0, 62, (-360)}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 1509;
      integerArray0[1] = (Integer) 1810;
      integerArray0[2] = (Integer) 1810;
      integerArray0[3] = (Integer) 3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      
      String string0 = ArrayUtils.toString((Object) integerArray0[1]);
      assertNotNull(string0);
      assertSame(integerArray0, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals("1810", string0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)34);
      assertNotNull(byte0);
      assertEquals((byte)34, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertNotNull(byte3);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte1);
      assertNotNull(byte4);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-73));
      assertNotNull(byte5);
      assertEquals((byte) (-73), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)7);
      assertNotNull(byte6);
      assertEquals((byte)7, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)13);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)2, (byte)2, (byte)2, (byte) (-73), (byte)7}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3423);
      intArray0[1] = 1545;
      intArray0[2] = (-477);
      intArray0[3] = (-2143078572);
      intArray0[4] = 1214;
      intArray0[5] = (-5228);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4196;
      shortArray0[3] = (short) (-1732);
      shortArray0[4] = (short)11;
      shortArray0[5] = (short) (-1719);
      ArrayUtils.shift(shortArray0, (int) (short)1, 16, (-2140));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)4196, (short) (-1732), (short)11, (short) (-1719)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-1732), (-5228), (double) (-3423));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (int) (short)11);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3423), 1545, (-477), (-2143078572), 1214, (-5228), 0}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-776L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-776L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) ']';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 93.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 93.0F, 0.0F, 93.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-3636L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-3636L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, 749, (-876));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1015;
      shortArray0[1] = (short) (-3619);
      shortArray0[2] = (short)3134;
      shortArray0[3] = (short) (-611);
      shortArray0[4] = (short)121;
      shortArray0[5] = (short) (-713);
      shortArray0[6] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-713));
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1015, (short) (-3619), (short)3134, (short) (-611), (short)121, (short) (-713), (short) (-1)}, shortArray0);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)113;
      Byte byte1 = new Byte((byte)113);
      assertNotNull(byte1);
      assertEquals((byte)113, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)113}, byteArray1);
      
      Double double0 = new Double(byte0);
      assertNotNull(double0);
      assertEquals(113.0, (double)double0, 0.01);
      
      Double double1 = new Double((-692.87));
      assertNotNull(double1);
      assertEquals((-692.87), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      Double double2 = new Double((byte)113);
      assertNotNull(double2);
      assertEquals(113.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-692.87));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {113.0, 113.0, 113.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1887);
      floatArray0[1] = (float) byte0;
      ArrayUtils.shift(floatArray0, (-1887), (int) (byte)113, (int) (byte)113);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {113.0F, 0.0F, (-1887.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)45;
      shortArray0[1] = (short) (byte)45;
      shortArray0[2] = (short) (byte)113;
      shortArray0[3] = (short) (byte)113;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[7] = (short)1396;
      ArrayUtils.reverse(shortArray0, (int) (short)113, (int) (short)1396);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)45, (short)45, (short)113, (short)113, (short)113, (short)113, (short)0, (short)1396}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'U';
      doubleArray0[2] = (double) 1855.0F;
      doubleArray0[3] = (double) '3';
      doubleArray0[4] = (double) (-761);
      ArrayUtils.shift(doubleArray0, (-4454), 14, (-761));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {85.0, 1855.0, 51.0, (-761.0), 105.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, 1855, 2120640102, 3402);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      Integer integer1 = new Integer((-2880));
      assertNotNull(integer1);
      assertEquals((-2880), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        BitSet.valueOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      int[] intArray1 = ArrayUtils.add(intArray0, 1, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, (-1), 1, 1}, intArray1);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '^', 2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ArrayUtils.swap(byteArray0, 2, 297, 111);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      
      Integer integer0 = new Integer(960);
      assertNotNull(integer0);
      assertEquals(960, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "The type must not be null");
      assertNotNull(string0);
      assertEquals("960", string0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-121));
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(floatArray0, (-1), (-2145929302), (-125));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((short[]) null, (-441), 45);
      byte[] byteArray0 = ArrayUtils.insert((-441), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'z';
      charArray0[3] = '1';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (-687), (-856), (-687));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'z', '\u0000', '1', 'r'}, charArray0);
      
      Integer integer0 = new Integer((-54));
      assertNotNull(integer0);
      assertEquals((-54), (int)integer0);
      
      Integer integer1 = new Integer('r');
      assertNotNull(integer1);
      assertEquals(114, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(79);
      assertNotNull(integer2);
      assertEquals(79, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      ArrayUtils.swap((double[]) null, (-379), 22, 79);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '1';
      intArray0[1] = 22;
      intArray0[2] = (int) 'r';
      intArray0[3] = (-687);
      intArray0[4] = (int) (byte)63;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 79);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {49, 22, 114, (-687), 63}, intArray1);
      assertArrayEquals(new int[] {49, 22, 114, (-687), 63}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertNotNull(object0);
      assertEquals(79, object0);
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, (int) (byte)63);
      assertEquals((-1), int0);
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1940));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1940), (-1940), (-1940));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1940);
      longArray0[1] = (long) (-1940);
      longArray0[2] = (long) (-1940);
      longArray0[3] = (long) (-1940);
      longArray0[4] = (long) (-1940);
      longArray0[5] = (long) (-1940);
      longArray0[6] = (long) (-1940);
      longArray0[7] = (long) (-1940);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L)}, longArray1);
      assertArrayEquals(new long[] {(-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L), (-1940L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 306, 111, 111);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3598));
      assertNotNull(integer0);
      assertEquals((-3598), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1668.889004;
      Integer integer0 = new Integer(317);
      assertNotNull(integer0);
      assertEquals(317, (int)integer0);
      
      Integer integer1 = new Integer((-857));
      assertNotNull(integer1);
      assertEquals((-857), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Double double0 = new Double((-516.560159));
      assertNotNull(double0);
      assertEquals((-516.560159), (double)double0, 0.01);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 317;
      intArray0[1] = 4171;
      intArray0[2] = 317;
      intArray0[3] = 317;
      intArray0[4] = (-857);
      ArrayUtils.shift(intArray0, 4171, (-577), 4171);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {317, 4171, 317, 317, (-857)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer integer2 = new Integer((-305));
      assertNotNull(integer2);
      assertEquals((-305), (int)integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.swap(byteArray0, (-565), (-1), (-1751));
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[3] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '?', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1782;
      intArray0[1] = (-3628);
      intArray0[2] = (int) '?';
      intArray0[3] = (int) '?';
      intArray0[4] = (int) '?';
      intArray0[5] = (-3628);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3628), 1782);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1782, (-3628), 63, 63, 63, (-3628)}, intArray0);
      assertEquals(5, int0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3628), 0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)26}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      double[] doubleArray0 = new double[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-72));
      assertNotNull(byte1);
      assertEquals((byte) (-72), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-72));
      assertNotNull(byte2);
      assertEquals((byte) (-72), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3493.529, Integer.MAX_VALUE, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-72);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-72), (short)0, (short) (-105), (short)0, (short) (-72), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = "n5Ld,~xleV<MlS`g !C";
      try { 
        Integer.valueOf("u$HL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u$HL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3823L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      bitSet0.set((int) (short)1, true);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2145663746;
      intArray0[1] = 2145663746;
      intArray0[2] = (int) (short)1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2145663746, 116);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2145663746, 2145663746, 1}, intArray0);
      assertEquals(1, int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3253, (int) (byte)12);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-71), (byte)98, (byte)12, (byte)7}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1432.0F;
      floatArray0[1] = 1432.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1432.0F, 1432.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '<');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1432.0F, 1432.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, (int) (byte) (-34), (int) (byte) (-34));
      Long long0 = new Long((byte) (-34));
      assertNotNull(long0);
      assertEquals((-34L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'C';
      charArray0[2] = '\"';
      charArray0[3] = 'Q';
      charArray0[4] = 'U';
      charArray0[5] = '3';
      charArray0[6] = 'r';
      charArray0[7] = 'i';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'C', '\"', 'Q', 'U', '3', 'r', 'i'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'U';
      doubleArray0[1] = (double) '\"';
      doubleArray0[2] = (double) 'U';
      doubleArray0[3] = (double) '3';
      doubleArray0[4] = (double) 'Q';
      doubleArray0[5] = (double) '\"';
      doubleArray0[6] = (double) 'U';
      ArrayUtils.shift(doubleArray0, 0, (-511), (-761));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {85.0, 34.0, 85.0, 51.0, 81.0, 34.0, 85.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, 0, 752, 752);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'C', '\"', 'Q', 'U', '3', 'r', 'i'}, charArray0);
      
      Integer integer0 = new Integer((-2146562835));
      assertNotNull(integer0);
      assertEquals((-2146562835), (int)integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'T', 'T', 'T'}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'I';
      intArray0[2] = 1284;
      intArray0[3] = (int) 'I';
      intArray0[4] = (int) 'I';
      intArray0[5] = 88;
      intArray0[6] = (int) 'I';
      intArray0[7] = (int) 'I';
      int int0 = ArrayUtils.indexOf(intArray0, 73);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {84, 73, 1284, 73, 73, 88, 73, 73}, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)127;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)104, (byte) (-14), (byte) (-115), (byte)100, (byte)31, (byte) (-53), (byte)127}, byteArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)104;
      shortArray0[3] = (short)69;
      shortArray0[4] = (short) (byte) (-14);
      shortArray0[5] = (short) (byte)31;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-115), (short) (-1), (short)104, (short)69, (short) (-14), (short)31}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, stringArray0.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-115), (short) (-1), (short)104, (short)69, (short) (-14), (short)31}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)2;
      shortArray1[2] = (Short) (short)2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf(shortArray2, short0, (-434));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray2);
      assertEquals((-1), int0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, stringArray0.length);
      
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) short0;
      intArray0[2] = (-1);
      intArray0[3] = 512;
      intArray0[4] = (-1);
      intArray0[5] = (int) short0;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) (short) (-408);
      ArrayUtils.shift(intArray0, 2, 2, 2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {40, 2, (-1), 512, (-1), 2, 2, (-408)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      ArrayUtils.swap((Object[]) floatArray1, 1915, 1915, (-2221));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 943);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 3573, 1925);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)164;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2249;
      shortArray0[3] = (short)376;
      shortArray0[4] = (short) (-2373);
      shortArray0[5] = (short) (-2508);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)164, (short)2, (short)2249, (short)376, (short) (-2373), (short) (-2508)}, shortArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-347);
      ArrayUtils.shift(shortArray0, (-4454), (-1055), 1284);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-347)}, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short) (-347));
      assertNotNull(integer0);
      assertEquals((-347), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1), (-1));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 1284;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1055);
      floatArray0[1] = (float) 1284;
      floatArray0[2] = (float) 1284;
      floatArray0[3] = 2777.0645F;
      intArray0[1] = (-1);
      ArrayUtils.shift(floatArray0, (int) integerArray0[0], (-4454), 17);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1055.0F), 1284.0F, 1284.0F, 2777.0645F, 0.0F}, floatArray0, 0.01F);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      ArrayUtils.reverse(shortArray0, 2473, 576);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-347)}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray1 = ArrayUtils.insert((-2146716270), (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Integer integer0 = Integer.getInteger("j]z{uQjrToe<a");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, "j]z{uQjrToe<a");
      assertNotNull(string0);
      assertEquals("j]z{uQjrToe<a", string0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 2;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 2, (-56));
      assertEquals(18, longArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "j]z{uQjrToe<a";
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) 101L;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) "j]z{uQjrToe<a";
      objectArray0[7] = (Object) 101L;
      objectArray0[8] = (Object) "j]z{uQjrToe<a";
      ArrayUtils.swap(objectArray0, 2, 2, (-56));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Integer integer0 = Integer.getInteger("j]z{uQjrToe<a");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, "j]z{uQjrToe<a");
      assertNotNull(string0);
      assertEquals("j]z{uQjrToe<a", string0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-56);
      longArray0[1] = (long) (-56);
      longArray0[2] = (long) (-56);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-56L), (-56));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-56L), (-56L), (-56L)}, longArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "j]z{uQjrToe<a";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "j]z{uQjrToe<a";
      objectArray0[3] = (Object) (-56L);
      objectArray0[4] = (Object) (-56L);
      objectArray0[5] = (Object) (-56L);
      objectArray0[6] = (Object) (-56L);
      ArrayUtils.swap(objectArray0, (-1132), (-1132), (-1));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '@';
      charArray0[2] = '{';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^', 65);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'3', '@', '{'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)61;
      ArrayUtils.swap(byteArray0, (int) (byte)1, (int) (byte)2, 0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)2, (byte)1, (byte) (-69), (byte)5, (byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)23692;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short)294;
      shortArray0[5] = (short)121;
      shortArray0[6] = (short)116;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)12, (short)2, (short)23692, (short)46, (short)294, (short)121, (short)116}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short)116;
      doubleArray0[2] = (double) (short)116;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)23692;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (short)23692;
      doubleArray0[7] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 116.0, 116.0, 2.0, 23692.0, 1.0, 23692.0, 2.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) shortArray1, 5, 261, 1953);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)12, (short)2, (short)23692, (short)46, (short)294, (short)121, (short)116}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1515));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1515)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 5140L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {5140L}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (int) (byte)0, 2813);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.subarray((long[]) null, (-1635), 2780);
      assertNull(longArray2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-44), (int) (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)30, (byte) (-72), (byte) (-72), (byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray2 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-260);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (int)integerArray0[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-260.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((short[]) null, (-260), (-3650), (-3650));
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-373.0), 0, (double) (-1L));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 802);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-732);
      intArray0[1] = (-732);
      intArray0[2] = (-732);
      intArray0[3] = (-2140);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 27);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-732), (-732), (-732), (-2140)}, intArray0);
      assertArrayEquals(new int[] {(-732), (-732), (-732), (-2140)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-732);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-23), (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-23), (byte)64}, byteArray1);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(768);
      assertNotNull(integer0);
      assertEquals(768, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray0, 97, 11, 1870);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)62);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-23), (byte)64}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-732), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -732, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      Double double1 = new Double((-1333));
      assertNotNull(double1);
      assertEquals((-1333.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0F);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(0.0F);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)88);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)90, (byte)90, (byte)90, (byte)90}, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)90, (byte)90, (byte)90, (byte)90}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) (byte)90;
      objectArray0[3] = (Object) (byte)90;
      objectArray0[4] = (Object) (byte)90;
      objectArray0[5] = (Object) (byte)90;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2495.6759172494444);
      doubleArray0[2] = 1416.8712971537377;
      doubleArray0[3] = (-2533.69643036658);
      doubleArray0[4] = 72.95945917010323;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2495.6759172494444), (-191), (double) (-191));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2495.6759172494444), 1416.8712971537377, (-2533.69643036658), 72.95945917010323}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 70, 70, 70);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2495.6759172494444), 1416.8712971537377, (-2533.69643036658), 72.95945917010323}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2495.6759172494444), 1416.8712971537377, (-2533.69643036658), 72.95945917010323}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 70;
      intArray0[1] = 70;
      intArray0[2] = (-191);
      intArray0[3] = 70;
      intArray0[4] = 2610;
      intArray0[5] = 70;
      intArray0[6] = 70;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {70, 70, (-191), 70, 2610, 70, 70}, intArray0);
      assertFalse(boolean0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 0.0);
      assertNull(doubleArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)14;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)91, (byte)14}, byteArray0);
      assertEquals(1, int0);
      
      org.evosuite.runtime.Random.setNextRandom((byte)91);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean2;
      booleanArray1[1] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3085);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3085);
      ArrayUtils.shift(shortArray0, 0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3085), (short)2, (short) (-3085)}, shortArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-120));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -120, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      int int0 = 8;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (-433);
      doubleArray0[2] = (double) (-433);
      doubleArray0[3] = (double) (-433);
      doubleArray0[4] = (double) (-433);
      doubleArray0[5] = (double) (-4818);
      doubleArray0[6] = (double) (-433);
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = 1421.0;
      ArrayUtils.swap(doubleArray0, (-1333), (int) (byte)2, (-1333));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-433.0), (-433.0), (-433.0), (-433.0), (-4818.0), (-433.0), 2.0, 1421.0}, doubleArray0, 0.01);
      
      byte byte0 = (byte) (-53);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 6, (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 7.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2145929302);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2145929302);
      doubleArray1[1] = (double) (-2145929302);
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray1, intArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.145929302E9)}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-2.145929302E9), (-2.145929302E9)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2145929302);
      longArray0[1] = (long) (-2145929302);
      longArray0[2] = (long) (-2145929302);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2145929302), (-2145929302));
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2145929302L), (-2145929302L), (-2145929302L)}, longArray0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      int[] intArray4 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray4);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray4.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-347);
      ArrayUtils.shift(shortArray0, (-4454), (-1055), 1284);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-347)}, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short) (-347));
      assertNotNull(integer0);
      assertEquals((-347), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1284;
      intArray0[2] = (int) (short) (-347);
      intArray0[3] = (int) (short) (-347);
      intArray0[4] = 34;
      ArrayUtils.swap(intArray0, 1284, 1284, (-1751));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 1284, (-347), (-347), 34}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      Integer integer0 = new Integer((-1178));
      assertNotNull(integer0);
      assertEquals((-1178), (int)integer0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1822L));
      assertNotNull(long1);
      assertEquals((-1822L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = '*';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      charArray0[7] = 'Q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', '*', '\u0000', 'Q', 'Q', 'Q'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-88));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5645.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-5645.0));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5645.0)}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3355L;
      floatArray0[1] = (float) 3355L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {3355.0F, 3355.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3355.0F, 3355.0F, 3355.0F, 3355.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3355L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {3355L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 3355L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '6';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '6', '-'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift(charArray0, (-71));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '6'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3217.864F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(floatArray1, (-2146223878));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1284;
      intArray0[1] = 1284;
      intArray0[2] = 1782;
      intArray0[3] = 1782;
      intArray0[4] = 1782;
      intArray0[5] = 11;
      intArray0[6] = 1284;
      intArray0[7] = 1284;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 11, 1284);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1284, 1284, 1782, 1782, 1782, 11, 1284, 1284}, intArray0);
      assertEquals(5, int0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, 0, 1885);
      assertNull(byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom(825);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      ArrayUtils.shift(floatArray0, (-736), 11, 1657);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray0);
      assertEquals(3, int0);
      
      ArrayUtils.swap(intArray0, 1657, 11, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 2.0);
      assertNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, 3036, (-736));
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 114;
      intArray0[3] = 0;
      intArray0[4] = 1712;
      intArray0[5] = (-2513);
      intArray0[6] = 5;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {3, 3, 114, 0, 1712, (-2513), 5}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 5;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 5, 5);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {5L}, longArray0);
      assertEquals(0, int0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {5L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-99);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-99), Integer.MAX_VALUE);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)35, (byte) (-1), (byte) (-99)}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = (-423);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1064.0);
      doubleArray0[1] = (double) 0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1064.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf(intArray1, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 120);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2682;
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) 782;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {2682.0, 45.0, 45.0, 782.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2682.0, 45.0, 45.0, 782.0, 0.0, 2682.0, 45.0, 45.0, 782.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0, 45.0, 45.0, 782.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)7);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-71), (byte)110, (byte)7, (byte)95, (byte) (-1)}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 67, 782);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray1, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)2;
      shortArray1[2] = (Short) (short)2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf(shortArray2, short0, (-434));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray2);
      assertEquals((-1), int0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, stringArray0.length);
      
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '(');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) short0;
      intArray0[2] = (-1);
      intArray0[3] = 512;
      intArray0[4] = (-1);
      intArray0[5] = (int) short0;
      intArray0[6] = (int) short0;
      intArray0[7] = (int) (short) (-408);
      ArrayUtils.shift(intArray0, 2, 2, 2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {40, 2, (-1), 512, (-1), 2, 2, (-408)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 2);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[5] = 'I';
      charArray0[2] = 'I';
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 1284);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0L;
      objectArray1[1] = (Object) 0;
      Integer integer0 = new Integer((-2545));
      assertNotNull(integer0);
      assertEquals((-2545), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2545), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      objectArray1[3] = (Object) 0L;
      objectArray1[4] = (Object) 0L;
      Object[] objectArray2 = ArrayUtils.nullToEmpty(objectArray1);
      assertNotNull(objectArray2);
      assertSame(objectArray1, objectArray2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray2, objectArray0);
      assertSame(objectArray2, objectArray1);
      assertEquals(5, objectArray1.length);
      assertEquals(5, objectArray2.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '1';
      charArray0[2] = 'I';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'#', '1', 'I'}, charArray0);
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ArrayUtils.shift(objectArray0, 0);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      ArrayUtils.swap(objectArray0, 4043, 572, 505);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-373);
      intArray0[3] = (-373);
      intArray0[4] = (int) (short) (-1064);
      intArray0[5] = (int) (short)183;
      intArray0[6] = 2625;
      intArray0[7] = (int) (short) (-1064);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, (-373), (-373), (-1064), 183, 2625, (-1064)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-373);
      floatArray0[1] = (float) 183;
      floatArray0[2] = (float) (short)183;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) doubleArray1, 5, 50, (-373));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      ArrayUtils.shift(floatArray0, (-736), 11, 1657);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray0);
      assertEquals(3, int0);
      
      ArrayUtils.swap(intArray0, 1657, 11, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1032;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)97;
      ArrayUtils.shift(shortArray0, 1284, (-3536), (int) (short)1032);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1032, (short)2, (short)97}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (int) (short)2, 650);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1856), (-1856));
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '6';
      charArray0[2] = '?';
      charArray0[3] = '#';
      charArray0[4] = '@';
      charArray0[5] = '=';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '#');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'[', '6', '?', '#', '@', '='}, charArray0);
      assertArrayEquals(new char[] {'#', '[', '6', '?', '#', '@', '='}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((double[]) null, (int) (short)0, (int) (short)183);
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'A';
      charArray0[2] = 'D';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'6', 'A', 'D'}, charArray0);
      assertArrayEquals(new char[] {'6', 'A', 'D', '6', 'A', 'D'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 4, (int) (short)0, (-1235));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'6', 'A', 'D'}, charArray0);
      assertArrayEquals(new char[] {'6', 'A', 'D', '6', 'A', 'D'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[2] = (-1190.1768F);
      int[] intArray0 = new int[8];
      intArray0[0] = 2625;
      intArray0[1] = 2046;
      intArray0[2] = 2625;
      intArray0[3] = 0;
      intArray0[4] = 2625;
      intArray0[5] = 2625;
      intArray0[6] = 2625;
      intArray0[7] = 2625;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2625, 2046, 2625, 0, 2625, 2625, 2625, 2625}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2046;
      floatArray1[1] = 1.0F;
      ArrayUtils.swap(floatArray1, 0, (-2124392425), 71);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2046.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertNotNull(map0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, (-1190.1768F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null, (-578));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)30;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-18));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-34), (byte)37, (byte)1, (byte) (-108), (byte) (-67), (byte)15, (byte)30}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (short) (-1064));
      assertFalse(boolean0);
      
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)2);
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-373));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 1, (byte)49);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)49}, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)49}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1190.1768F);
      floatArray0[1] = 1432.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1621.8046F);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1190.1768F), 1432.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-423L));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-815.5848F);
      floatArray1[2] = (float) (-423L);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, (float[]) null);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertArrayEquals(new float[] {(-815.5848F), 0.0F, (-423.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-815.5848F), 0.0F, (-423.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      ArrayUtils.reverse((long[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray3 = ArrayUtils.insert((-852), floatArray1, (float[]) null);
      assertNotNull(floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray3.length);
      assertArrayEquals(new float[] {(-815.5848F), 0.0F, (-423.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-815.5848F), 0.0F, (-423.0F)}, floatArray3, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-815.5848F);
      doubleArray0[1] = (double) 1432.0F;
      doubleArray0[2] = (double) 1432.0F;
      doubleArray0[3] = (double) (-815.5848F);
      doubleArray0[4] = (double) (-1190.1768F);
      doubleArray0[5] = (double) 1621.8046F;
      doubleArray0[6] = (double) 1621.8046F;
      doubleArray0[7] = (double) (-1190.1768F);
      doubleArray0[8] = 1303.8712971537377;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-815.5847778320312), 1432.0, 1432.0, (-815.5847778320312), (-1190.1767578125), 1621.8045654296875, 1621.8045654296875, (-1190.1767578125), 1303.8712971537377}, doubleArray0, 0.01);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2034.0F);
      floatArray0[3] = (-1612.45F);
      floatArray0[4] = 443.1F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3573.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-2034.0F), (-1612.45F), 443.1F, 0.0F, (-3573.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-2034.0F), (-1612.45F), 443.1F, 0.0F, (-3573.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(2, int0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 770L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {770L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)53;
      ArrayUtils.shift(shortArray0, (int) (short) (-3085), (int) (short) (-3085), 870);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)53}, shortArray0);
      
      boolean boolean4 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'j';
      charArray0[2] = 'z';
      charArray0[3] = '?';
      charArray0[4] = 'g';
      charArray0[5] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', 'j', 'z', '?', 'g', 'S'}, charArray1);
      assertArrayEquals(new char[] {'1', 'j', 'z', '?', 'g', 'S'}, charArray0);
      
      boolean boolean5 = ArrayUtils.isEmpty(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', 'j', 'z', '?', 'g', 'S'}, charArray1);
      assertArrayEquals(new char[] {'1', 'j', 'z', '?', 'g', 'S'}, charArray0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1794;
      intArray0[1] = 585;
      ArrayUtils.shift(intArray0, 585);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 585, 1, (double) 585);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      ArrayUtils.shift(shortArray0, 2541, (-1), (int) (short)0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1202L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)0, (-3628));
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1202.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1202.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1202.0F);
      objectArray0[1] = (Object) 585;
      objectArray0[2] = (Object) (-1202.0F);
      objectArray0[3] = (Object) (-1202.0F);
      objectArray0[4] = (Object) 585;
      ArrayUtils.shift(objectArray0, 1794, 585, 1);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 3347L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3347L}, longArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)121, (-594));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)47;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)36, (byte)85, (byte) (-94), (byte)1, (byte)47}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)47;
      floatArray0[1] = (float) (byte)47;
      floatArray0[2] = (float) (byte)85;
      floatArray0[3] = (float) (byte) (-94);
      floatArray0[4] = (-2889.7F);
      floatArray0[7] = (float) (byte)85;
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 0.0F, 0.0F, (-2889.7F), (-94.0F), 85.0F, 47.0F, 47.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2889.7F);
      objectArray0[1] = (Object) (-94.0F);
      objectArray0[2] = (Object) 47.0F;
      ArrayUtils.shift(objectArray0, (int) (byte)59, Integer.MAX_VALUE, (int) (byte)47);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)85;
      byteArray2[1] = (byte)36;
      byteArray2[2] = (byte) (-94);
      byteArray2[3] = (byte)85;
      MockRandom mockRandom0 = new MockRandom((byte)36);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray2, (Random) mockRandom0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-94), (byte)85, (byte)85}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1493L));
      assertNotNull(long1);
      assertEquals((-1493L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)73, (byte)0, (byte)42}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1493L);
      doubleArray0[2] = (double) (byte)42;
      int[] intArray0 = new int[4];
      intArray0[0] = 98;
      intArray0[1] = (int) (byte)42;
      intArray0[2] = (-922);
      intArray0[3] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3280);
      assertNotNull(integer0);
      assertEquals(3280, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3280}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      Integer integer0 = Integer.getInteger("1%(*yO\"");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2146564227));
      assertNotNull(integer1);
      assertEquals((-2146564227), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-886));
      assertNotNull(integer2);
      assertEquals((-886), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-886));
      assertNotNull(integer3);
      assertEquals((-886), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      int int0 = (-2146716270);
      Integer integer4 = new Integer((-2146716270));
      assertNotNull(integer4);
      assertEquals((-2146716270), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-2146564227), (-886), (-886), (-2146716270)}, intArray0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray1.length);
      assertArrayEquals(new int[] {(-1), (-2146564227), (-886), (-886), (-2146716270)}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      ArrayUtils.swap(intArray0, (int) integerArray0[3], (-2146716270), (int) integerArray0[4]);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-2146564227), (-886), (-886), (-2146716270)}, intArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      int int1 = (-788);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-788), 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -788, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, (int) (byte) (-56), (int) (byte) (-56));
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-56));
      assertNotNull(double1);
      assertEquals((-56.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte) (-56));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-56);
      shortArray0[1] = (short) (byte) (-56);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-56), (int) (byte) (-56));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-56), (short) (-56)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("|h!", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1380.6);
      doubleArray0[1] = (double) 1319L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2334.693704));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1380.6), 1319.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)2, 3);
      assertEquals((-1), int0);
      
      Integer integer2 = new Integer((-344));
      assertNotNull(integer2);
      assertEquals((-344), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[5];
      MutableInt mutableInt0 = new MutableInt((-344));
      assertNotNull(mutableInt0);
      assertEquals((short) (-344), mutableInt0.shortValue());
      assertEquals("-344", mutableInt0.toString());
      assertEquals((-344L), mutableInt0.longValue());
      assertEquals((-344), mutableInt0.intValue());
      assertEquals((-344.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-344), (int)mutableInt0.toInteger());
      assertEquals((-344), (int)mutableInt0.getValue());
      assertEquals((-344.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-88), mutableInt0.byteValue());
      
      Integer integer3 = mutableInt0.getValue();
      assertNotNull(integer3);
      assertEquals((-344), (int)integer3);
      assertEquals((short) (-344), mutableInt0.shortValue());
      assertEquals("-344", mutableInt0.toString());
      assertEquals((-344L), mutableInt0.longValue());
      assertEquals((-344), mutableInt0.intValue());
      assertEquals((-344.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-344), (int)mutableInt0.toInteger());
      assertEquals((-344), (int)mutableInt0.getValue());
      assertEquals((-344.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-88), mutableInt0.byteValue());
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[3] = '?';
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3628);
      floatArray1[1] = (float) '?';
      floatArray1[2] = 1328.853F;
      floatArray1[3] = (float) '?';
      floatArray1[4] = (float) (-3628);
      floatArray1[5] = (float) '?';
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3628.0F), 63.0F, 1328.853F, 63.0F, (-3628.0F), 63.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3628.0F), 63.0F, 1328.853F, 63.0F, (-3628.0F), 63.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3628.0F), 63.0F, 1328.853F, 63.0F, (-3628.0F), 63.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '?');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '?', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'?', '?', '\u0000', '\u0000', '?', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1794;
      intArray0[1] = 585;
      ArrayUtils.shift(intArray0, 585);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 585, 1794, (double) 585);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 1794);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = '-';
      charArray0[2] = '\\';
      charArray0[3] = '&';
      charArray0[4] = 'x';
      charArray0[5] = 'F';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'F', 'x', '&', '\\', '-', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1284;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 771.0F, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1333);
      doubleArray0[1] = 3427.601;
      intArray0[0] = (-2145929302);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-1333.0), 3427.601, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1333.0), 3427.601, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)609;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short)609}, shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      Double double1 = new Double((-1333));
      assertNotNull(double1);
      assertEquals((-1333.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)78;
      shortArray0[1] = (short)78;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)78, (short)78}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new short[] {(short)78, (short)78}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)72;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)52, (byte)7, (byte) (-33), (byte)0, (byte)5, (byte) (-3), (byte)72}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(1855, object1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray1, object1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)78, (short)78}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-121), (byte) (-56), (byte) (-124), (byte) (-124), (byte) (-121), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-121), (byte) (-56), (byte) (-124), (byte) (-124), (byte) (-121), (byte) (-121)}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-124), (int) (byte) (-121));
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-121), (byte) (-56), (byte) (-124), (byte) (-124), (byte) (-121), (byte) (-121)}, byteArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-121);
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-121), (int) (byte) (-121));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-121)}, shortArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-121), (double) (byte) (-124));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-121.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      Integer integer0 = new Integer(116);
      assertNotNull(integer0);
      assertEquals(116, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 9;
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) int0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 2066, 1280, 2066);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2066;
      longArray0[1] = (long) 2066;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2066L, 2066L}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2066);
      assertNotNull(integer0);
      assertEquals(2066, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1235));
      assertNotNull(integer1);
      assertEquals((-1235), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1235));
      assertNotNull(integer2);
      assertEquals((-1235), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2066);
      assertNotNull(integer3);
      assertEquals(2066, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2066);
      assertNotNull(integer4);
      assertEquals(2066, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3995);
      assertNotNull(integer5);
      assertEquals(3995, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer3);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer2));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1280;
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[2] = (float) (int)integerArray0[5];
      floatArray0[3] = (float) 3995;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (-1235);
      floatArray0[6] = (float) (int)integerArray0[5];
      floatArray0[7] = (float) 2066L;
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1280.0F, (-1235.0F), 3995.0F, 3995.0F, 1.0F, (-1235.0F), 3995.0F, 2066.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1284;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)5503);
      assertNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2499L), (int) (short)5503);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1284L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, Integer.MAX_VALUE);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 50;
      intArray0[2] = (-1);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 50, (-1), Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((double[]) null, (-1), (-1997));
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'r';
      charArray0[2] = '\\';
      charArray0[3] = 'D';
      charArray0[4] = 'A';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'+', 'r', '\\', 'D', 'A'}, charArray0);
      assertArrayEquals(new char[] {'+', 'r', '\\', 'D', 'A', '+', 'r', '\\', 'D', 'A'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '+';
      charArray2[1] = 'D';
      charArray2[2] = 'A';
      charArray2[3] = 'A';
      ArrayUtils.shift(charArray2, (-1), (-1), (-1736));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(4, charArray2.length);
      assertArrayEquals(new char[] {'+', 'D', 'A', 'A'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      long[] longArray0 = new long[19];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(19, longArray0.length);
      assertEquals(19, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      charArray0[2] = 'E';
      ArrayUtils.shift(charArray0, (-410), (-73), (-410));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'F', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)30);
      assertNotNull(byte1);
      assertEquals((byte)30, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)30);
      assertNotNull(byte2);
      assertEquals((byte)30, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3493.529, Integer.MAX_VALUE, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte) (-105);
      shortArray0[6] = (short) (byte)30;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 9);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-105), (short) (-105), (short)30, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-105), (short) (-105), (short)30, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      double[] doubleArray0 = new double[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-72));
      assertNotNull(byte1);
      assertEquals((byte) (-72), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-72));
      assertNotNull(byte2);
      assertEquals((byte) (-72), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3493.529, Integer.MAX_VALUE, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-72);
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, 9);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-72), (short)0, (short) (-105), (short)0, (short) (-72), (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-72), (short)0, (short) (-105), (short)0, (short) (-72), (short)1}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string0 = "n5Ld,~xleV<MlS`g !C";
      try { 
        Integer.valueOf("u$HL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u$HL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[8];
      ArrayUtils.swap(doubleArray0, 0, 3);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)31;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)31, 0);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray0);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-405));
      assertNotNull(integer1);
      assertEquals((-405), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-405);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-405.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      ArrayUtils.swap(charArray0, 554, (int) (byte) (-92), 554);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'k', 'k', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65;
      longArray0[1] = (long) 'S';
      longArray0[2] = (long) (byte) (-92);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {65L, 83L, (-92L)}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 130.3350896614529, (int) (byte) (-92), 4138.4661095265);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet1.length());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      ArrayUtils.shift(byteArray0, 1, 3272, (int) (byte) (-92));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92), (byte) (-92), (byte) (-92)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-41));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1740.6282F;
      floatArray0[1] = (-1199.4672F);
      floatArray0[3] = 3488.6965F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-2148.5664F), 1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1199.4672F), 0.0F, 3488.6965F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      ArrayUtils.shift(byteArray0, 1431655765);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-23);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)11, 39);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1431655765;
      doubleArray0[1] = (-152.33);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.431655765E9, (-152.33)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-1199.4672F));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.431655765E9, (-152.33)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.431655765E9, (-152.33), (-1199.4671630859375)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-23);
      longArray0[1] = (long) (byte) (-23);
      longArray0[2] = (long) 1431655765;
      longArray0[3] = (long) 39;
      longArray0[4] = (long) (byte) (-23);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1752L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-23L), (-23L), 1431655765L, 39L, (-23L)}, longArray0);
      assertArrayEquals(new long[] {(-23L), (-23L), 1431655765L, 39L, (-23L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-2), (-2346));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 116);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 76, 1605);
      assertNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-10));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      int int0 = ArrayUtils.indexOf(charArray0, 'I', 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(0, int0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte) (-10));
      assertNotNull(double1);
      assertEquals((-10.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(688.696);
      assertNotNull(double2);
      assertEquals(688.696, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-10.0), 688.696}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (byte) (-10), 2145.02060388);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-10.0), 688.696}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      double double0 = (-720.310503);
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      assertNotNull(byte2);
      assertEquals((byte)89, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)89);
      assertNotNull(byte3);
      assertEquals((byte)89, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)115);
      assertNotNull(byte4);
      assertEquals((byte)115, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-11);
      Byte byte6 = new Byte((byte) (-11));
      assertNotNull(byte6);
      assertEquals((byte) (-11), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte0);
      assertNotNull(byte7);
      assertEquals((byte)89, (byte)byte7);
      assertFalse(byte0 == byte5);
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      
      byteArray0[5] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)115, (byte) (-11), (byte)89}, byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'g', (int) byte5);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p', 'g'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(byte5 == byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 3392, ' ');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3392, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1740));
      assertNotNull(integer0);
      assertEquals((-1740), (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, Integer.MAX_VALUE, integerArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1284;
      intArray0[1] = (-353);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      ArrayUtils.shift((byte[]) null, 1284, 1284, (-353));
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1668.889004;
      Integer integer0 = new Integer(317);
      assertNotNull(integer0);
      assertEquals(317, (int)integer0);
      
      Integer integer1 = new Integer((-857));
      assertNotNull(integer1);
      assertEquals((-857), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2034));
      assertNotNull(integer2);
      assertEquals((-2034), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-2034));
      assertNotNull(integer3);
      assertEquals((-2034), (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(450);
      assertNotNull(integer4);
      assertEquals(450, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(121, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      String string0 = ArrayUtils.toString((Object) integer3);
      assertNotNull(string0);
      assertEquals("-2034", string0);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2062));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2, 34);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-2145929302L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2145929302L)}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4054);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (-4054);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)33;
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short)1, (-1));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4054), (short)1, (short)2, (short) (-4054), (short)1, (short)33}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4054), (short)1, (short)2, (short) (-4054), (short)1, (short)33}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4054), (short)1, (short) (-4054), (short)1, (short)33}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 34;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 34;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)6132;
      intArray0[5] = (-633);
      intArray0[6] = (int) (short) (-4054);
      intArray0[7] = (int) (short)33;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6132, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 2150.53F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2150.53F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-477);
      intArray0[1] = (-298);
      intArray0[2] = (-477);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-12);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short) (-12);
      ArrayUtils.shift(shortArray0, (-2163), 4, (-4155));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12), (short)100, (short) (-12)}, shortArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-477);
      Integer integer0 = new Integer(3033);
      assertNotNull(integer0);
      assertEquals(3033, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-298);
      integerArray0[3] = (Integer) (-477);
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-477);
      floatArray0[1] = (float) (short)100;
      floatArray0[2] = (float) (short)100;
      ArrayUtils.reverse(floatArray0, (-477), 4);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {100.0F, 100.0F, (-477.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((int[]) null, 2147030305, 2147030305);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      Integer integer1 = new Integer(20);
      assertNotNull(integer1);
      assertEquals(20, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-683));
      assertNotNull(integer2);
      assertEquals((-683), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 1838, (-683));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1, 1);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-393.2968589811);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1333), 43);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-393.2968589811), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-393.2968589811), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1333));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, 3126.798F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3126.798F, 1855.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1855.0F;
      objectArray0[1] = (Object) "&{W";
      objectArray0[2] = (Object) 1855.0F;
      objectArray0[3] = (Object) (-393.2968589811);
      objectArray0[4] = (Object) (-1.0);
      Integer integer1 = Integer.getInteger("5hwg=;-i8", 43);
      assertNotNull(integer1);
      assertEquals(43, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals(43, object1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (-1.0);
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "&{W";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "&{W");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2144334844);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2144334844, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1333));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1333, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      Integer integer1 = Integer.getInteger("The type must not be null", integer0);
      assertNotNull(integer1);
      assertEquals(20, (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 304);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {304}, intArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)100);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, Float.NaN);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (byte)100;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3497), 20);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 1.0F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {100.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray1, (float) 20);
      assertNotNull(floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray3.length);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {20.0F, 100.0F}, floatArray3, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) 304);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 100.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 100.0, 304.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(21, booleanArray1.length);
      assertEquals(20, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray4 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray4);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertSame(floatArray4, floatArray2);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray4);
      assertEquals(1, floatArray4.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {100.0F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {100.0F}, floatArray2, 0.01F);
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)2);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = 2;
      intArray0[3] = (int) (byte)2;
      ArrayUtils.swap(intArray0, (-1), 4, 1565);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)183;
      doubleArray0[1] = (double) (short) (-1064);
      doubleArray0[2] = (double) (-373);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short) (-1064);
      doubleArray0[5] = (double) (short) (-1064);
      doubleArray0[6] = (double) (short)183;
      doubleArray0[7] = (double) (-373);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertArrayEquals(new double[] {183.0, (-1064.0), (-373.0), 0.0, (-1064.0), (-1064.0), 183.0, (-373.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 371, 371);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 108, (int) 183);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 88.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {88.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 7.0F);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(8, intArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {88.0F}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (-1086.0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {183.0, (-1064.0), (-373.0), 0.0, (-1064.0), (-1064.0), 183.0, (-373.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {183.0, (-1064.0), (-373.0), 0.0, (-1064.0), (-1064.0), 183.0, (-373.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 500L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {500L}, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)119;
      shortArray0[1] = (short) (-4054);
      shortArray0[2] = (short) (-4054);
      shortArray0[3] = (short)33;
      shortArray0[4] = (short)6132;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)6132;
      ArrayUtils.swap(shortArray0, (int) (short)6132, (-1), (int) (short)33);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)119, (short) (-4054), (short) (-4054), (short)33, (short)6132, (short)1, (short)6132}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)119);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4054), (short) (-4054), (short)33, (short)6132, (short)1, (short)6132}, shortArray1);
      assertArrayEquals(new short[] {(short)119, (short) (-4054), (short) (-4054), (short)33, (short)6132, (short)1, (short)6132}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'z';
      charArray0[2] = '+';
      charArray0[3] = 'z';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      charArray0[6] = '=';
      charArray0[7] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', 1336);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'=', 'z', '+', 'z', 'a', 'a', '=', 'O'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '=';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'='}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) doubleArray0, (-3194));
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-3702), 468, 1284);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = 0L;
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), 0L, (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-58L);
      floatArray0[1] = (float) (-1L);
      ArrayUtils.shift(floatArray0, 99, (-2455), (-2455));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-58.0F), (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 't');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 99, 99);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.insert((-258), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(16, longArray0.length);
      assertEquals(32, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      longArray0[12] = 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.insert((-2039), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)620;
      shortArray0[1] = (short) (-347);
      shortArray0[2] = (short)85;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-347);
      shortArray0[5] = (short)620;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-347), (-2039), (-2001));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)620, (short) (-347), (short)85, (short)0, (short) (-347), (short)620, (short) (-1), (short)0, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-72);
      intArray0[1] = (-72);
      intArray0[2] = (-72);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-72);
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-72), (-72), (-72), (-72)}, intArray0);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("|h!", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 1319L);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 5140L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {5140L}, longArray0);
      
      ArrayUtils.shift((short[]) null, (-2), (-920), 2146664990);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shift((short[]) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(3355L);
      assertNotNull(long0);
      assertEquals(3355L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(4, longArray0.length);
      assertEquals(3355L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-305));
      assertNotNull(integer1);
      assertEquals((-305), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer2);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2941.2556507540207);
      doubleArray0[1] = (double) 3355L;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (long)longArray0[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-305);
      intArray0[4] = 2;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 34, (-1515));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((double[]) null, 49, 0);
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 49);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1276));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1276)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = Short.valueOf((short) (-1612));
      assertNotNull(short0);
      assertEquals((short) (-1612), (short)short0);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = shortArray0[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1612), (short) (-1612), (short) (-1612), (short) (-1612), (short) (-1612)}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-84), (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)75, (byte) (-20), (byte)0, (byte) (-12)}, byteArray0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-12);
      intArray0[1] = (-2931);
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-12), (-2931), 0}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '~';
      charArray0[5] = '-';
      charArray0[6] = '-';
      charArray0[7] = '-';
      charArray0[8] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'+', '-', '-', '-', '~', '-', '-', '-', '-'}, charArray0);
      assertEquals("{1, 2, 3, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)75);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-12), (-2931), 0}, intArray1);
      assertArrayEquals(new int[] {(-12), (-2931), 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)98);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)75, (byte) (-20), (byte)0, (byte) (-12)}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Integer integer0 = new Integer((-1773));
      assertNotNull(integer0);
      assertEquals((-1773), (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)30);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long((byte)119);
      assertNotNull(long0);
      assertEquals(119L, (long)long0);
      
      Long long1 = new Long((-2143L));
      assertNotNull(long1);
      assertEquals((-2143L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte) (-75));
      assertNotNull(long2);
      assertEquals((-75L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long[] longArray0 = new Long[1];
      Long long3 = new Long(104L);
      assertNotNull(long3);
      assertEquals(104L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[0] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {104L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Byte byte0 = new Byte((byte)26);
      assertNotNull(byte0);
      assertEquals((byte)26, (byte)byte0);
      
      Integer integer0 = new Integer((byte)26);
      assertNotNull(integer0);
      assertEquals(26, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(26, object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, object0, 833);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 833, 83, (-1));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "HvI`8rosr[hp");
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[2] = (short) (byte) (-115);
      shortArray0[3] = (short) (byte) (-40);
      ArrayUtils.reverse(shortArray0, (-173), 51);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-40), (short) (-115), (short)0, (short) (-115)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      Double double0 = new Double(1855);
      assertNotNull(double0);
      assertEquals(1855.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(floatArray0, (-736), 102, 0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'E';
      charArray0[2] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'E');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'.', 'E', 'f'}, charArray0);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 11, (-1789), 694);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, (double) (-736));
      assertNull(doubleArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[11];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(11, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      ArrayUtils.swap((int[]) null, 1986781661, (int) (byte) (-123), (int) (byte) (-123));
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      ArrayUtils.reverse(booleanArray0, (int) (short)0, (int) (short) (-1064));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (short)0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.swap(shortArray0, 6, 85, (int) (short)6132);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1972));
      assertNotNull(integer0);
      assertEquals((-1972), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2100));
      assertNotNull(integer1);
      assertEquals((-2100), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-856));
      assertNotNull(integer2);
      assertEquals((-856), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(85);
      assertNotNull(integer3);
      assertEquals(85, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1353);
      assertNotNull(integer4);
      assertEquals(1353, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(45);
      assertNotNull(integer5);
      assertEquals(45, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = Integer.getInteger("6zw@]L@mrb7ttP", integer5);
      assertNotNull(integer6);
      assertEquals(45, (int)integer6);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(1353);
      assertNotNull(integer7);
      assertEquals(1353, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(1285);
      assertNotNull(integer8);
      assertEquals(1285, (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      
      integerArray0[7] = integer8;
      try { 
        Integer.valueOf("org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.CharUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3823L;
      longArray0[1] = 3823L;
      longArray0[2] = 3823L;
      longArray0[3] = 944L;
      longArray0[5] = 3823L;
      longArray0[6] = 3823L;
      longArray0[7] = 3823L;
      longArray0[1] = 3823L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {3823L, 3823L, 3823L, 944L, 0L, 3823L, 3823L, 3823L, 0L}, longArray0);
      assertEquals(460, bitSet0.length());
      assertEquals(512, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 196, 197, 199, 200, 201, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459}", bitSet0.toString());
      assertEquals(65, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 944L;
      longArray1[1] = (long) 4;
      longArray1[2] = (long) 4;
      longArray1[4] = 944L;
      longArray1[5] = 944L;
      longArray1[6] = (long) 4;
      longArray1[7] = 346L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {3823L, 3823L, 3823L, 944L, 0L, 3823L, 3823L, 3823L, 0L}, longArray0);
      assertArrayEquals(new long[] {944L, 4L, 4L, 0L, 944L, 944L, 4L, 346L}, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      doubleArray0[1] = 3427.601;
      intArray0[0] = (-2145929302);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1855.0, 3427.601, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1855.0, 3427.601, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, (-2145929302));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = '1';
      charArray0[2] = 'Y';
      charArray0[3] = 'u';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'u', '1', 'Y', 'u'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-339), (int) (byte)17);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte)86, (byte) (-1), (byte) (-52), (byte) (-28)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)86, (byte) (-1), (byte) (-52), (byte) (-28)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)17;
      doubleArray0[1] = (double) (-339);
      doubleArray0[2] = (double) (byte)86;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {17.0, (-339.0), 86.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-52));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-732));
      assertNotNull(integer0);
      assertEquals((-732), (int)integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) (-433);
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) (-732);
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) (-1017);
      doubleArray0[6] = (double) (-1017);
      ArrayUtils.swap(doubleArray0, (-433), (-4818), 8);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, (-433.0), 17.0, (-732.0), 17.0, (-1017.0), (-1017.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 8, (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1333);
      intArray0[2] = (-1333);
      intArray0[3] = (-2625);
      intArray0[4] = (-701);
      intArray0[5] = (-1333);
      intArray0[6] = (-701);
      ArrayUtils.shift(intArray0, (-2478), 4, 1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2625);
      longArray0[1] = (long) 0;
      ArrayUtils.reverse(longArray0, (-1333), 562);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2625L)}, longArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, (-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray1);
      assertArrayEquals(new int[] {(-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1276));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1276)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      ArrayUtils.shuffle(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '7';
      charArray0[2] = 'n';
      charArray0[3] = '%';
      charArray0[4] = '9';
      charArray0[5] = '\'';
      ArrayUtils.swap(charArray0, (-2356), (int) (byte)0, (int) (byte)0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'L', '7', 'n', '%', '9', '\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1612;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1612, 2754);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1612}, shortArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte)8);
      assertNotNull(byte1);
      assertEquals((byte)8, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-85));
      assertNotNull(byte2);
      assertEquals((byte) (-85), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-58L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-85);
      doubleArray0[1] = (double) (byte)8;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-85.0), 8.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      longArray0[0] = 0L;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 2625;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 2625;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 2625;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 2625, 0, 2625, 0, 2625}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap((float[]) null, 467, 2705, 120);
      Long[] longArray2 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2705);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-193);
      shortArray0[2] = (short) (-193);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-193), (short) (-193)}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1.0;
      doubleArray0[1] = 2557.03316164;
      doubleArray0[2] = 1476.264;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1190.1768F);
      floatArray0[1] = (-1190.1768F);
      floatArray0[2] = 748.3488F;
      floatArray0[3] = 748.3488F;
      floatArray0[4] = 748.3488F;
      floatArray0[5] = 1432.0F;
      floatArray0[6] = (-1285.6F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 748.3488F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1190.1768F), (-1190.1768F), 748.3488F, 748.3488F, 748.3488F, 1432.0F, (-1285.6F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)193;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)193, (short)1, (short)1}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)193, (short)1, (short)1}, shortArray0);
      assertEquals(0, int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)193, (short)1, (short)1}, shortArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-121), (byte) (-56), (byte) (-124), (byte) (-124), (byte) (-121), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-121), (byte) (-56), (byte) (-124), (byte) (-124), (byte) (-121), (byte) (-121)}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, int0);
      
      Integer integer1 = new Integer(14);
      assertNotNull(integer1);
      assertEquals(14, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(15);
      assertNotNull(integer2);
      assertEquals(15, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer2, object1);
      assertFalse(boolean0);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object0));
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-124), 2);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-56));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[0] = (Object) 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)1;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '#');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {3640.6921F, (-1575.66F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 3640.6921F;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) 3640.6921F;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) false;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      assertEquals(true, object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 985.8251F;
      floatArray0[1] = (float) 788;
      floatArray0[2] = 985.8251F;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 788);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788, 788}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 788, 788);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      Object[] objectArray0 = new Object[5];
      Integer integer0 = new Integer(788);
      assertNotNull(integer0);
      assertEquals(788, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer integer2 = new Integer((-305));
      assertNotNull(integer2);
      assertEquals((-305), (int)integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      
      ArrayUtils.shift((long[]) null, (-260), (int) (byte)11, 505);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)62);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2288.3936F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 2147483647L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '6';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'B');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'6'}, charArray1);
      assertArrayEquals(new char[] {'B', '6'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray2 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J');
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (byte)0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 136, (-3673L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 136, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)82;
      ArrayUtils.reverse(byteArray0, (-902), (int) (byte)82);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)106, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-3));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)106;
      shortArray0[1] = (short) (byte)82;
      shortArray0[2] = (short) (byte)82;
      shortArray0[3] = (short) (byte)82;
      shortArray0[4] = (short) (byte)82;
      shortArray0[5] = (short)78;
      shortArray0[6] = (short) (byte)82;
      shortArray0[7] = (short) (byte) (-1);
      ArrayUtils.reverse(shortArray0, (int) (byte) (-3), (-902));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)106, (short)82, (short)82, (short)82, (short)82, (short)78, (short)82, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-121));
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(floatArray0, (-1), (-2145929302), (-125));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((short[]) null, (-441), 45);
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = ArrayUtils.insert((-441), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)82;
      ArrayUtils.reverse(byteArray0, (-902), (int) (byte)82);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)106, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-3));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)106;
      shortArray0[1] = (short) (byte)82;
      shortArray0[2] = (short) (byte)82;
      shortArray0[3] = (short) (byte)82;
      shortArray0[4] = (short) (byte)82;
      shortArray0[5] = (short)78;
      shortArray0[6] = (short) (byte)82;
      shortArray0[7] = (short) (byte) (-1);
      ArrayUtils.reverse(shortArray0, 114, (-902));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)106, (short)82, (short)82, (short)82, (short)82, (short)78, (short)82, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((int[]) null, 2147030305, 2147030305);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      Integer integer1 = new Integer(20);
      assertNotNull(integer1);
      assertEquals(20, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-683));
      assertNotNull(integer2);
      assertEquals((-683), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)620;
      shortArray0[1] = (short)1487;
      shortArray0[2] = (short)85;
      shortArray0[3] = (short) (-347);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)85;
      ArrayUtils.shift(shortArray0, (-1055), (int) (short) (-1), (-2676));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)620, (short)1487, (short)85, (short) (-347), (short)4, (short) (-1), (short) (-1), (short)85}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "Index: ");
      assertNotNull(stringArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3603);
      intArray0[1] = 2;
      intArray0[2] = 2146566311;
      intArray0[3] = (-131);
      intArray0[4] = 3436;
      intArray0[5] = (-92);
      ArrayUtils.shift(intArray0, (-131), 4, (-2759));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-131), (-3603), 2, 2146566311, 3436, (-92)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.1F;
      floatArray0[1] = 0.1F;
      floatArray0[2] = 0.1F;
      floatArray0[3] = 0.1F;
      floatArray0[4] = 0.1F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3818), 110);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.1F, 0.1F, 0.1F, 0.1F, 0.1F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.1F, 0.1F, 0.1F, 0.1F, 0.1F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.1F;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, (-3818), 32, (-3818));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.10000000149011612, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (-1822.0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)183;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, 1421);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {183.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {183.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int int0 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2), (-2), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, 6155, int0);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Integer integer0 = new Integer((-2775));
      assertNotNull(integer0);
      assertEquals((-2775), (int)integer0);
      
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2775));
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
      assertFalse(integerArray0.equals((Object)integerArray2));
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      Integer integer0 = new Integer((-960));
      assertNotNull(integer0);
      assertEquals((-960), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 788;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      Integer integer1 = new Integer((int) integerArray0[1]);
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals((-960), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[4] = integer1;
      Integer integer2 = new Integer(1641);
      assertNotNull(integer2);
      assertEquals(1641, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[6] = integer2;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-960), 1323);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 788, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1803.0F, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2117));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2117), (-1), (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 5253, 5253);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)64, 97);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[1] = (double) (short)64;
      doubleArray0[2] = (double) 97;
      doubleArray0[3] = (double) 97;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {64.0, 64.0, 97.0, 97.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {64.0, 64.0, 97.0, 97.0, 64.0, 64.0, 97.0, 97.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-208), (-208));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray1, (-208), (-208));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)64);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {64.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) (short)64);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {64.0F}, floatArray1, 0.01F);
      assertEquals(0, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 3, 788, 788);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray3, booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)111;
      ArrayUtils.shift(byteArray0, 3, (-596), (-863));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)120, (byte)0, (byte)83, (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("|h!", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 1319L);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 5140L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {5140L}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4054);
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 3221.0F, (-85));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(45);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-3628), 0, 0, 0, 0, 0, 45}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte)3;
      ArrayUtils.shift(shortArray0, (int) (short)3, (-1624), (int) (byte)3);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-85), (short) (-85), (short)3}, shortArray0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte) (-85));
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)3}, byteArray1);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'x');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'x');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1086L);
      floatArray0[1] = (float) (-58L);
      floatArray0[2] = (-3004.1719F);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1L);
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-3004.1719F), (-58.0F), (-1086.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Long long0 = new Long(3355L);
      assertNotNull(long0);
      assertEquals(3355L, (long)long0);
      
      Long long1 = new Long(2682);
      assertNotNull(long1);
      assertEquals(2682L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2682);
      assertNotNull(integer0);
      assertEquals(2682, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1445));
      assertNotNull(integer1);
      assertEquals((-1445), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((short)0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(2);
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer3);
      assertNotNull(object0);
      assertEquals(2, object0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.isEquals(object0, integer3);
      assertTrue(boolean0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-1));
      assertNull(byteArray2);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-1));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 1718);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1718, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[12];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1925;
      intArray1[5] = 110;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-819));
      assertNotNull(bitSet0);
      assertNotSame(intArray1, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet1 = new BitSet();
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.xor(bitSet1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(12, intArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.set(1925, 1925);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(12, intArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 110);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'm';
      charArray0[2] = '^';
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray0, 'c');
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', 'm', '^', '\u0000'}, charArray0);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 110);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(11, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) '^';
      longArray0[3] = (long) 'm';
      longArray0[4] = (-3859L);
      longArray0[5] = (long) (-819);
      longArray0[6] = (long) 110;
      ArrayUtils.shift(longArray0, (-819));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {99L, 94L, 94L, 109L, (-3859L), (-819L), 110L}, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)83;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-97), (byte)120, (byte)89, (byte)0, (byte)0, (byte)20, (byte)2, (byte)83}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 2, 99, 99);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'f';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'f', 'G', 'G'}, charArray0);
      assertEquals(4, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      ArrayUtils.swap(intArray0, 1, 2, 6213);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      int[] intArray0 = new int[17];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(17, intArray0.length);
      assertEquals(17, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(512, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Length: 17
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(198.40955903);
      assertNotNull(double0);
      assertEquals(198.40955903, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      ArrayUtils.reverse(objectArray0, 2, 73);
      assertEquals(7, objectArray0.length);
      
      Integer integer0 = new Integer(60);
      assertNotNull(integer0);
      assertEquals(60, (int)integer0);
      
      Integer integer1 = new Integer(60);
      assertNotNull(integer1);
      assertEquals(60, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Long long0 = new Long(45L);
      assertNotNull(long0);
      assertEquals(45L, (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertNotNull(mutableInt0);
      assertEquals("198", mutableInt0.toString());
      assertEquals(198.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(198, mutableInt0.intValue());
      assertEquals((short)198, mutableInt0.shortValue());
      assertEquals(198.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals(198, (int)mutableInt0.getValue());
      assertEquals(198, (int)mutableInt0.toInteger());
      assertEquals(198L, mutableInt0.longValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(198, int0);
      assertEquals(199.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)199, mutableInt0.shortValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals("199", mutableInt0.toString());
      assertEquals(199, (int)mutableInt0.getValue());
      assertEquals(199, (int)mutableInt0.toInteger());
      assertEquals(199, mutableInt0.intValue());
      assertEquals(199.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(199L, mutableInt0.longValue());
      
      int int1 = mutableInt0.incrementAndGet();
      assertEquals(200, int1);
      assertEquals(200.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)200, mutableInt0.shortValue());
      assertEquals(200, (int)mutableInt0.getValue());
      assertEquals(200, (int)mutableInt0.toInteger());
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals("200", mutableInt0.toString());
      assertEquals(200, mutableInt0.intValue());
      assertEquals(200L, mutableInt0.longValue());
      assertEquals(200.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(int1 == int0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals(200, (int)integer2);
      assertEquals(200.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)200, mutableInt0.shortValue());
      assertEquals(200, (int)mutableInt0.getValue());
      assertEquals(200, (int)mutableInt0.toInteger());
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals("200", mutableInt0.toString());
      assertEquals(200, mutableInt0.intValue());
      assertEquals(200L, mutableInt0.longValue());
      assertEquals(200.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      
      Integer integer3 = new Integer(200);
      assertNotNull(integer3);
      assertEquals(200, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-646), 198);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 5);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((short)65);
      assertNotNull(long0);
      assertEquals(65L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {65L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      Integer integer0 = new Integer(121);
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-42));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-50)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-50)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long(1812L);
      assertNotNull(long0);
      assertEquals(1812L, (long)long0);
      
      Long long1 = new Long((byte) (-50));
      assertNotNull(long1);
      assertEquals((-50L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1812L);
      assertNotNull(long2);
      assertEquals(1812L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'T';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Q');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'T'}, charArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-50));
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-475), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      doubleArray0[1] = 3427.601;
      intArray0[0] = (-2145929302);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1855.0, 3427.601, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1855.0, 3427.601, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Long[] longArray2 = new Long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      Long long0 = Long.getLong("The character ", 638L);
      assertNotNull(long0);
      assertEquals(638L, (long)long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((-2145929302));
      assertNotNull(long1);
      assertEquals((-2145929302L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray2[1] = long1;
      Long long2 = new Long((-2145929302));
      assertNotNull(long2);
      assertEquals((-2145929302L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      longArray2[2] = long2;
      Long long3 = new Long((-1822L));
      assertNotNull(long3);
      assertEquals((-1822L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray2[3] = long3;
      Long long4 = Long.getLong("The character ", long0);
      assertNotNull(long4);
      assertEquals(638L, (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long0.equals((Object)long3));
      assertFalse(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long1));
      
      longArray2[4] = long4;
      Long long5 = new Long(638L);
      assertNotNull(long5);
      assertEquals(638L, (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      
      longArray2[5] = long5;
      Long long6 = new Long(1L);
      assertNotNull(long6);
      assertEquals(1L, (long)long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      
      longArray2[6] = long6;
      Long long7 = new Long((-2145929302));
      assertNotNull(long7);
      assertEquals((-2145929302L), (long)long7);
      assertFalse(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      
      longArray2[7] = long7;
      Long long8 = new Long(1L);
      assertNotNull(long8);
      assertEquals(1L, (long)long8);
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long0));
      assertTrue(long8.equals((Object)long6));
      
      longArray2[8] = long8;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(9, longArray3.length);
      assertEquals(9, longArray2.length);
      assertArrayEquals(new long[] {638L, (-2145929302L), (-2145929302L), (-1822L), 638L, 638L, 1L, (-2145929302L), 1L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2147483619;
      ArrayUtils.shift(longArray0, (-1847), 63, 63);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2147483619L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 2147483619;
      ArrayUtils.shift(longArray0, (-245), 2166, 2147483619);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2147483619L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 63;
      longArray0[1] = (long) 63;
      longArray0[3] = (long) 2147483619;
      ArrayUtils.shift(longArray0, 3, 2147483619, 3);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {63L, 63L, 0L, 0L, 2147483619L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {63L, 63L, 0L, 0L, 2147483619L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      long[] longArray0 = new long[12];
      longArray0[0] = 0L;
      ArrayUtils.shift(longArray0, (-1958), 1, 1);
      assertEquals(12, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      float[] floatArray0 = new float[5];
      charArray0[2] = 'z';
      floatArray0[1] = (float) 'X';
      floatArray0[2] = (float) 'z';
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift((long[]) null, 79);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.shift(longArray1, (-1), (-1), (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (-134), (-1240), (-134));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.reverse((double[]) null);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte)76, (int) (byte) (-1));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '\"';
      charArray0[2] = ')';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = 'f';
      charArray0[6] = ' ';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '&');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'I', '\"', ')', '0', '0', 'f', ' '}, charArray1);
      assertArrayEquals(new char[] {'I', '\"', ')', '0', '0', 'f', ' '}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)76;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)76}, shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short[] shortArray1 = new Short[2];
      Short short0 = new Short((short)76);
      assertNotNull(short0);
      assertEquals((short)76, (short)short0);
      
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)76;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)76, (short)76}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[0] = (Object) 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)1;
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {45, 45, 0}, intArray1);
      assertArrayEquals(new int[] {45, 45, 0, 1}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (byte)1;
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 1);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(3, intArray2.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {45, 45, 0}, intArray2);
      assertArrayEquals(new int[] {45, 45, 0, 1}, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(19, doubleArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788}, intArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'A');
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '-', '-', '-'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer integer0 = new Integer(788);
      assertNotNull(integer0);
      assertEquals(788, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", (Integer) 788);
      assertNotNull(integer1);
      assertEquals(788, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ArrayUtils.hashCode((Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)109;
      ArrayUtils.shift(byteArray0, (-2820));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-3), (byte)106, (byte)0, (byte)109}, byteArray0);
      
      ArrayUtils.swap((long[]) null, 45, 1, (int) (byte) (-3));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = 0;
      intArray0[5] = 0;
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 693, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-2146));
      assertFalse(boolean0);
      
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)32, (-1174));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.reverse((long[]) null, (int) (byte)32, (int) (short) (-2146));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1333);
      intArray0[2] = (-1333);
      intArray0[3] = (-2625);
      intArray0[4] = (-701);
      intArray0[5] = (-1333);
      intArray0[6] = (-701);
      ArrayUtils.shift(intArray0, (-2478), 4, 1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2625);
      longArray0[1] = (long) 0;
      ArrayUtils.reverse(longArray0, (-1333), 562);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2625L)}, longArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, (-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray1);
      assertArrayEquals(new int[] {(-2625), 0, (-1333), (-1333), (-701), (-1333), (-701)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1546);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1546}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1546}, intArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1090), 1546, (-1090));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      Double double1 = new Double((-1333));
      assertNotNull(double1);
      assertEquals((-1333.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1333);
      intArray0[1] = (-1333);
      intArray0[2] = 1855;
      intArray0[3] = (-1333);
      intArray0[4] = 1855;
      intArray0[5] = 1855;
      intArray0[6] = 1855;
      ArrayUtils.shift(intArray0, 1855, (-1333), (-701));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1333), (-1333), 1855, (-1333), 1855, 1855, 1855}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = ArrayUtils.insert((-2625), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2625));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-658);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (-2455));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-658), (short)0, (short)0, (short)0, (short)0, (short)1, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer(2822);
      assertNotNull(integer0);
      assertEquals(2822, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Integer integer1 = Integer.getInteger("n5Ld,~xleV<MlS`g !C", integer0);
      assertNotNull(integer1);
      assertEquals(2822, (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, (Object) integer1);
      assertNotNull(bitSet0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      charArray0[4] = 'r';
      ArrayUtils.shift((double[]) null, 2660, (-736), 79);
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[4] = 0;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-902);
      int int0 = 0;
      ArrayUtils.shift(intArray1, 0, 922, (-3427));
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-902), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)35;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 922, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      
      ArrayUtils.swap((long[]) null, 0, 0, 0);
      ArrayUtils.reverse((long[]) null);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (-1236.9934F);
      floatArray0[3] = 3221.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (-3214.4104F);
      floatArray0[7] = (float) (-58L);
      floatArray0[8] = (float) 8;
      float[] floatArray1 = ArrayUtils.insert(8, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 8.0F, (-1236.9934F), 3221.0F, 0.0F, 0.0F, (-3214.4104F), (-58.0F), 8.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2422));
      assertNotNull(integer0);
      assertEquals((-2422), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2569));
      assertNotNull(integer1);
      assertEquals((-2569), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger((String) null, (-24577));
      assertNotNull(integer2);
      assertEquals((-24577), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(42);
      assertNotNull(integer3);
      assertEquals(42, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger((String) null, 42);
      assertNotNull(integer5);
      assertEquals(42, (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2422));
      assertNotNull(integer6);
      assertEquals((-2422), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      
      integerArray0[6] = integer6;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.shift(floatArray0, (-736), 0, 1657);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-736);
      longArray0[1] = (long) 'f';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1284;
      longArray0[4] = (long) 1657;
      ArrayUtils.swap(longArray0, 1284, 14);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-736L), 102L, 0L, 1284L, 1657L}, longArray0);
      
      Integer integer0 = new Integer(1587);
      assertNotNull(integer0);
      assertEquals(1587, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)82;
      ArrayUtils.reverse(byteArray0, (-902), (int) (byte)82);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)118, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-3));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3112);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-122);
      shortArray0[4] = (short) (-5303);
      ArrayUtils.shift(shortArray0, 2541, 2, 6);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3112), (short)0, (short)2, (short) (-122), (short) (-5303)}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, (int) (short) (-122));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (int) (short)0, (int) (short)2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)11, (int) (short) (-5303));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 893.1056554, (double) (short) (-122));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-143), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -143, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0, (-1515), (-1515));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1515);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1515);
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (double) 0.0F);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      float[] floatArray0 = new float[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[6] = (Object) (byte) (-1);
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, (-346), 454);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1649);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Integer integer0 = new Integer((-1649));
      assertNotNull(integer0);
      assertEquals((-1649), (int)integer0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2429, 0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = 2;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'U';
      charArray0[2] = 'Y';
      charArray0[3] = 'D';
      charArray0[4] = '6';
      charArray0[5] = '9';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'u', 'U', 'Y', 'D', '6', '9'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (-339));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'U';
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 'U';
      doubleArray0[3] = (double) '9';
      doubleArray0[4] = (double) 'U';
      doubleArray0[5] = (double) 'U';
      doubleArray0[6] = (double) '6';
      doubleArray0[7] = (double) 'Y';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {85.0, 2.0, 85.0, 57.0, 85.0, 85.0, 54.0, 89.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 160, 50);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)75;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1539, (int) (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-1), (byte)75}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integer0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)90);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'a';
      charArray0[3] = '+';
      charArray0[4] = 'O';
      charArray0[5] = 'a';
      charArray0[6] = 'a';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '=', 1328);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'z', 'z', 'a', '+', 'O', 'a', 'a'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) floatArray0, (int) (byte)90);
      assertEquals(5, floatArray0.length);
      
      int int2 = ArrayUtils.indexOf((long[]) null, (long) (-344), 1328);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)118, (byte)16, (byte) (-1), (byte)6, (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)118, (byte)16, (byte) (-1), (byte)6, (byte) (-2), (byte) (-2)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)16);
      Double double0 = new Double((byte) (-2));
      assertNotNull(double0);
      assertEquals((-2.0), (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-1), 10, 9);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)118;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new float[] {118.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-2);
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) (byte) (-2);
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {(-2.0), 10.0, (-2.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 10.0, (-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1112.56F));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1131.854861);
      ArrayUtils.swap(doubleArray0, (-3074), (-3074), (-3074));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1131.854861)}, doubleArray0, 0.01);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-12));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = 2;
      int int1 = 88;
      ArrayUtils.shift(intArray1, 2, 88, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte byte0 = (byte)72;
      byte byte1 = (byte)59;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((int[]) null, 2147030305, 2147030305);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      Integer integer1 = new Integer(20);
      assertNotNull(integer1);
      assertEquals(20, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer((-683));
      assertNotNull(integer2);
      assertEquals((-683), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-124);
      byteArray0[4] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124), (byte)0, (byte) (-121), (byte) (-56), (byte) (-56), (byte) (-121), (byte) (-121), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124), (byte)0, (byte) (-121), (byte) (-56), (byte) (-56), (byte) (-121), (byte) (-121), (byte) (-121)}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((-810));
      assertNotNull(integer0);
      assertEquals((-810), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals((byte) (-56), integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-121);
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 90, (int) (short)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-121.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte) (-124), (int) (byte) (-56), (int) (byte) (-56));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)242, (short)0, (short)79, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3311.1400492831);
      doubleArray0[1] = (double) 1855.0F;
      doubleArray0[2] = (double) 1855.0F;
      doubleArray0[3] = (double) 1855.0F;
      doubleArray0[4] = (double) 1855.0F;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1424.856054);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-3311.1400492831), 1855.0, 1855.0, 1855.0, 1855.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3311.1400492831), 1855.0, 1855.0, 1855.0, 1855.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer integer1 = new Integer((-3166));
      assertNotNull(integer1);
      assertEquals((-3166), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      Integer integer2 = new Integer((-3166));
      assertNotNull(integer2);
      assertEquals((-3166), (int)integer2);
      assertFalse(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer1);
      assertNull(integerArray0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)144;
      shortArray0[2] = (short)3380;
      shortArray0[3] = (short)99;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MockRandom mockRandom0 = new MockRandom((short)99);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '!';
      charArray0[4] = 'f';
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      charArray0[5] = 'f';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000', 'f', 'f', '\u0000', '\u0000', '\u0000', '!'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-905));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)144, (short)0, (short)3380, (short)99}, shortArray0);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)11;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)11, (-1047));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11, (byte)11}, byteArray1);
      assertEquals(0, int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1668.889004;
      doubleArray0[1] = 2.145930193E9;
      doubleArray0[2] = (-720.310503);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1668.889004, 1416.8712971537377);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1668.889004, 2.145930193E9, (-720.310503)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Double double0 = new Double((-873.697));
      assertNotNull(double0);
      assertEquals((-873.697), (double)double0, 0.01);
      
      Double double1 = new Double(2251.8);
      assertNotNull(double1);
      assertEquals(2251.8, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-1277.04770252));
      assertNotNull(double3);
      assertEquals((-1277.04770252), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double(2.145930193E9);
      assertNotNull(double4);
      assertEquals(2.145930193E9, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[28];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) 1668.889004;
      doubleArray1[4] = double2;
      doubleArray1[5] = (Double) (-720.310503);
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) (-720.310503);
      doubleArray1[8] = double4;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1623.779955498857));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(28, doubleArray2.length);
      assertEquals(28, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)54;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)54, 58);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-1), (byte) (-19), (byte)45, (byte)0, (byte)2, (byte) (-93), (byte) (-41), (byte)54}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1627);
      shortArray0[1] = (short)1858;
      shortArray0[2] = (short) (-7255);
      shortArray0[3] = (short)913;
      shortArray0[4] = (short) (-1267);
      shortArray0[5] = (short)78;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1627), (short)1858, (short) (-7255), (short)913, (short) (-1267), (short)78}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, stringArray0.length);
      assertArrayEquals(new short[] {(short) (-1627), (short)1858, (short) (-7255), (short)913, (short) (-1267), (short)78}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-1267));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1858;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1627);
      floatArray0[3] = (float) (short)1858;
      floatArray0[4] = (-721.9271F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-121.0F), (-1045));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1858.0F, (-1.0F), (-1627.0F), 1858.0F, (-721.9271F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      
      byte byte0 = (byte) (-76);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.reverse((double[]) null);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-2.146201392E9));
      assertFalse(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, Double.NaN, (int) (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte) (-76), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -76, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1%$yTB{";
      stringArray0[1] = "]";
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 788;
      doubleArray0[1] = (double) 788;
      doubleArray0[2] = (double) 788;
      doubleArray0[3] = (double) 788;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3, (double) 788);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {788.0, 788.0, 788.0, 788.0, 788.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {788.0, 788.0, 788.0, 788.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 788;
      floatArray0[1] = (float) 788;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 788;
      floatArray0[4] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 1, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {788.0F, 788.0F, 3.0F, 788.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3235.4749F;
      floatArray0[1] = (-739.677F);
      floatArray0[2] = 194.0F;
      floatArray0[3] = (-1183.36F);
      floatArray0[4] = 1777.2F;
      floatArray0[5] = (-3628.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-3234));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {3235.4749F, (-739.677F), 194.0F, (-1183.36F), 1777.2F, (-3628.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-75);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-55), (byte)100, (byte)0, (byte) (-75)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-55), (byte)100, (byte)0, (byte) (-75)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (byte)100;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = 893.1056554;
      doubleArray0[4] = (double) (byte) (-55);
      doubleArray0[5] = 2040.38;
      doubleArray0[6] = (-2082.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (int) (byte)0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 893.1056554, (-55.0), 2040.38, (-2082.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)1299;
      shortArray0[3] = (short) (-1881);
      shortArray0[4] = (short)12;
      shortArray0[5] = (short) (-1411);
      shortArray0[6] = (short)6;
      shortArray0[7] = (short) (-428);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-428));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)88, (short)1299, (short) (-1881), (short)12, (short) (-1411), (short)6, (short) (-428)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)88, (short)1299, (short) (-1881), (short)12, (short) (-1411), (short)6}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'h');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3004.1719F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3004.1719F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '1');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1868), (-1719), (-64));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)879;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short)108;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short) (-319);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-186), (int) (short) (-186));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)879, (short)0, (short)11, (short)108, (short)116, (short) (-319)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-935.92334F), 1170.0F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3442);
      intArray0[1] = 1545;
      intArray0[2] = (-477);
      intArray0[3] = (-2143078572);
      intArray0[4] = 1214;
      intArray0[5] = (-5228);
      intArray0[6] = 89;
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-47L);
      ArrayUtils.shift(longArray0, (-1003));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-47L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (long) 4163;
      longArray0[3] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 4163L, 1L}, longArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2625.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 4163;
      intArray0[2] = 1443;
      intArray0[3] = (-1);
      int int2 = ArrayUtils.lastIndexOf(intArray0, 13, 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 4163, 1443, (-1)}, intArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '#');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-712));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-712), (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("e-");
      assertNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 847);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b', (-3478));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'e';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) characterArray0, (-1));
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(20, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 12;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1);
      intArray0[5] = (-3628);
      intArray0[6] = 12;
      intArray0[8] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 12, 0, (-1), (-3628), 12, 0, 0}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((double[]) null, (-1), 11);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(16, longArray0.length);
      assertEquals(32, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 12;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-1);
      intArray0[5] = (-3628);
      intArray0[6] = (-2416);
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 12, 0, (-1), (-3628), (-2416), 0, 0}, intArray0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((double[]) null, (-1), 11);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, object0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-4399.886535);
      doubleArray1[3] = (-4399.886535);
      doubleArray1[4] = (-4399.886535);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) doubleArray0[0];
      doubleArray1[7] = (-4399.886535);
      doubleArray1[8] = (-4399.886535);
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-2978.93284861));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertArrayEquals(new double[] {(-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2978.93284861), (-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.hashCode(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse(doubleArray1, (-90), (-90));
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535), 1.0, (-4399.886535), (-4399.886535), (-4399.886535)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 2682);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2455);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-2455);
      floatArray0[5] = (float) 411;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) 411;
      floatArray0[8] = (float) (-1);
      ArrayUtils.shift(floatArray0, 10, 80, (-2145969065));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2455.0F), 0.0F, (-1.0F), (-1.0F), (-2455.0F), 411.0F, 0.0F, 411.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'L', 'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, 80);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1624));
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 2145969065, (int) (short) (-1624));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '?', '?', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3628);
      floatArray1[1] = (float) (short)65;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)78);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)40, (byte)69, (byte) (-94), (byte)114, (byte)78, (byte)78}, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (-3628);
      intArray0[1] = (-3628);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3628, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(16, longArray0.length);
      assertEquals(32, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      longArray0[12] = 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (short)0, 411, (-2455));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'L', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 1959);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 'e';
      floatArray0[2] = (float) 'e';
      floatArray0[3] = (float) 'e';
      floatArray0[4] = (float) 1657;
      floatArray0[5] = (float) 'e';
      floatArray0[6] = (float) 'e';
      ArrayUtils.shift(floatArray0, (-736), 2, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, 101.0F, 101.0F, 101.0F, 1657.0F, 101.0F, 101.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '6');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(intArray0, (-2146716270), (-1), (-736));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 101, 0, 0}, intArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2146716270));
      assertNotNull(double0);
      assertEquals((-2.14671627E9), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2146716270));
      assertNotNull(double1);
      assertEquals((-2.14671627E9), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2);
      assertNotNull(double2);
      assertEquals(2.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1823.287027798));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.14671627E9), (-2.14671627E9), 2.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2.14671627E9', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)7;
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short)7, 1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), 29);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      int[] intArray0 = new int[3];
      intArray0[0] = 1140;
      intArray0[1] = (int) (byte) (-12);
      intArray0[2] = (int) (byte) (-12);
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-12), (-12), 1140}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = 3;
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 1319, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1319, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Long long0 = new Long(11);
      assertNotNull(long0);
      assertEquals(11L, (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertNotNull(mutableInt0);
      assertEquals(1284.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1284, (int)mutableInt0.toInteger());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals(1284, (int)mutableInt0.getValue());
      assertEquals("1284", mutableInt0.toString());
      assertEquals(1284L, mutableInt0.longValue());
      assertEquals(1284, mutableInt0.intValue());
      assertEquals(1284.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1284, mutableInt0.shortValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(1284, int0);
      assertEquals(1285, (int)mutableInt0.toInteger());
      assertEquals((byte)5, mutableInt0.byteValue());
      assertEquals("1285", mutableInt0.toString());
      assertEquals(1285L, mutableInt0.longValue());
      assertEquals(1285, (int)mutableInt0.getValue());
      assertEquals(1285.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1285, mutableInt0.intValue());
      assertEquals((short)1285, mutableInt0.shortValue());
      assertEquals(1285.0, mutableInt0.doubleValue(), 0.01);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertNotNull(mutableInt1);
      assertEquals(1284, mutableInt1.intValue());
      assertEquals("1284", mutableInt1.toString());
      assertEquals(1284L, mutableInt1.longValue());
      assertEquals(1284.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)4, mutableInt1.byteValue());
      assertEquals(1284, (int)mutableInt1.getValue());
      assertEquals(1284, (int)mutableInt1.toInteger());
      assertEquals((short)1284, mutableInt1.shortValue());
      assertEquals(1284.0, mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      int int1 = mutableInt1.incrementAndGet();
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(1285, int1);
      assertEquals("1285", mutableInt1.toString());
      assertEquals(1285L, mutableInt1.longValue());
      assertEquals(1285, (int)mutableInt1.toInteger());
      assertEquals(1285, (int)mutableInt1.getValue());
      assertEquals(1285.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)5, mutableInt1.byteValue());
      assertEquals(1285.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)1285, mutableInt1.shortValue());
      assertEquals(1285, mutableInt1.intValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      
      Integer integer2 = mutableInt1.toInteger();
      assertNotNull(integer2);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(1285, (int)integer2);
      assertEquals("1285", mutableInt1.toString());
      assertEquals(1285L, mutableInt1.longValue());
      assertEquals(1285, (int)mutableInt1.toInteger());
      assertEquals(1285, (int)mutableInt1.getValue());
      assertEquals(1285.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)5, mutableInt1.byteValue());
      assertEquals(1285.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)1285, mutableInt1.shortValue());
      assertEquals(1285, mutableInt1.intValue());
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      Integer integer3 = new Integer((-4795));
      assertNotNull(integer3);
      assertEquals((-4795), (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2145984008, 6);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 1284);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2893), (-2146242412));
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)122);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 34, (-1515));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-1515));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1515L)}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-4054);
      shortArray0[2] = (short)6132;
      ArrayUtils.swap(shortArray0, (-5735), (-1515), 127);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-4054), (short)6132}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2930.6555F);
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = 1855.0F;
      floatArray0[3] = 1855.0F;
      floatArray0[4] = (-4086.4111F);
      floatArray0[6] = (-1292.0433F);
      floatArray0[8] = 508.971F;
      ArrayUtils.shift(floatArray0, 13, Integer.MAX_VALUE, 1336);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2930.6555F), (-1575.66F), 1855.0F, 1855.0F, (-4086.4111F), 0.0F, (-1292.0433F), 0.0F, 508.971F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 1336;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[4] = (double) (-4086.4111F);
      doubleArray0[5] = (double) 508.971F;
      floatArray0[6] = (float) (short) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {13.0, 1336.0, 0.0, 0.0, (-4086.4111328125), 508.97100830078125, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, 1336.0, 0.0, 0.0, (-4086.4111328125), 508.97100830078125, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {13.0, 1336.0, 0.0, 0.0, (-4086.4111328125), 508.97100830078125, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {13.0, 1336.0, 0.0, 0.0, (-4086.4111328125), 508.97100830078125, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 72.0;
      doubleArray0[2] = (-1115.379726017057);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 72.0, (-1115.379726017057)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 72.0, (-1115.379726017057)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      longArray0[3] = 59L;
      longArray0[4] = 59L;
      longArray0[5] = 59L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 59L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L), 59L, 59L, 59L}, longArray0);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1300), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1300, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '-';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 68, 68);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) '-';
      floatArray0[3] = (float) '-';
      floatArray0[4] = (float) 782;
      floatArray0[5] = (float) 782;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 782.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 782.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 782.0F, 782.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(64, bitSet1.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        bitSet0.and((BitSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray0[0] = false;
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-720.310503));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3876.12250966, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'X');
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1319;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 70);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 1319, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 1319, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) 70;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 70.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-2134));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 1165.009F;
      floatArray0[4] = (float) (-2134);
      floatArray0[5] = (float) (-2134);
      floatArray0[6] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2134.0F), (-2134.0F), 0.0F, 1165.009F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '1');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1868), (-1719), (-64));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)879;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short)108;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short) (-319);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-186), (int) (short) (-186));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)879, (short)0, (short)11, (short)108, (short)116, (short) (-319)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      short[] shortArray2 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      short[] shortArray0 = new short[7];
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short) shortArray1[1], (-434));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      assertEquals((-1), int0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, stringArray0.length);
      
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '(');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-434);
      doubleArray0[1] = (double) (short)shortArray1[0];
      doubleArray0[2] = (double) (short)shortArray1[0];
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) (short)shortArray1[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-434.0), 0.0, 0.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) shortArray1[1]);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-434.0), 0.0, 0.0, 40.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-434.0), 0.0, 0.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-434));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)7);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(3250, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1627);
      shortArray0[1] = (short)1858;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-7261);
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-7261L)}, longArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, Integer.MAX_VALUE, (-436L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1665L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1665L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-1598), (-1598), (-4187));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(666, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = null;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object3 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object3);
      assertEquals(0, object3);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object3, (-2625));
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2455), (-1105), 788);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1190.1768F);
      floatArray0[1] = (-164.07F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-1190.1768F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-721.9271F));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1190.1768F), (-164.07F), 0.0F, (-1190.1768F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1516);
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1516), (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1516), (short)0}, shortArray0);
      assertEquals(1, int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray2 = new Boolean[4];
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean1;
      booleanArray2[3] = boolean1;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(4, booleanArray3.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1516), (short)0}, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = (-2146201392);
      Integer integer0 = new Integer((-2146201392));
      assertNotNull(integer0);
      assertEquals((-2146201392), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2146201392);
      doubleArray0[1] = (double) (-2146201392);
      doubleArray0[2] = (double) (-2146201392);
      doubleArray0[3] = (double) (-2146201392);
      doubleArray0[4] = (double) (-2146201392);
      doubleArray0[5] = (double) (-2146201392);
      doubleArray0[6] = (double) (-2146201392);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2.146201392E9));
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.146201392E9), (-2.146201392E9), (-2.146201392E9), (-2.146201392E9), (-2.146201392E9), (-2.146201392E9), (-2.146201392E9)}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 7L;
      longArray0[1] = 1655L;
      longArray0[2] = 244L;
      longArray0[3] = 2677L;
      longArray0[4] = (-1L);
      int[] intArray0 = new int[4];
      intArray0[0] = 5314;
      intArray0[1] = 2456;
      intArray0[2] = (-31);
      intArray0[3] = 79;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5314, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shuffle(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'q';
      charArray0[2] = '7';
      charArray0[3] = '5';
      charArray0[4] = 'e';
      char[] charArray1 = ArrayUtils.add(charArray0, '2');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'2', 'q', '7', '5', 'e'}, charArray0);
      assertArrayEquals(new char[] {'2', 'q', '7', '5', 'e', '2'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '5';
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-1600);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (-223);
      intArray0[6] = (int) '5';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-223), (int) (short)0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {53, 0, 0, (-1600), 0, (-223), 53}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-487), (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -487, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1333);
      intArray0[1] = 17;
      intArray0[2] = (-2145929302);
      intArray0[3] = (-2145929302);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1333), 17, (-2145929302), (-2145929302)}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), (-1333), 17, (-2145929302), (-2145929302)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (-1333));
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2145929302);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2145929302);
      doubleArray0[5] = (double) (-2145929302);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2145929302);
      doubleArray1[1] = Double.NaN;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.145929302E9), Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-2.145929302E9), (-2.145929302E9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-2.145929302E9), (-1.0), (-2.145929302E9), (-2.145929302E9)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.145929302E9), Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-2.145929302E9), (-1.0), (-2.145929302E9), (-2.145929302E9), (-2.145929302E9), Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.0), Double.NaN, (-2.145929302E9), (-1.0), (-2.145929302E9), (-2.145929302E9)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-1726.603);
      ArrayUtils.swap(doubleArray0, 1897, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-4705.1143F);
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 4198);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'z';
      charArray0[2] = 'l';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Float[] floatArray2 = new Float[6];
      floatArray2[0] = (Float) 0.0F;
      floatArray2[1] = (Float) 0.0F;
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray2[2] = float0;
      floatArray2[3] = (Float) 0.0F;
      floatArray2[4] = (Float) 0.0F;
      floatArray2[5] = (Float) 0.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 1.0F);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray3.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1515));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1515)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-72);
      doubleArray0[1] = (double) (-1515);
      doubleArray0[2] = (double) (-1515);
      doubleArray0[3] = (double) (-1515);
      doubleArray0[4] = (double) 5140L;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = 1813.3626005331291;
      doubleArray0[8] = (double) (byte) (-72);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-72.0), (-1515.0), (-1515.0), (-1515.0), 5140.0, 0.0, 0.0, 1813.3626005331291, (-72.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-72.0), (-1515.0), (-1515.0), (-1515.0), 5140.0, 0.0, 0.0, 1813.3626005331291, (-72.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-72.0), (-1515.0), (-1515.0), (-1515.0), 5140.0, 0.0, 0.0, 1813.3626005331291, (-72.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Float float0 = new Float(1428.4924914249464);
      assertNotNull(float0);
      assertEquals(1428.4924F, (float)float0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte) (-72));
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1575.66F);
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (-1199.4672F);
      floatArray0[5] = (float) 1336;
      floatArray0[6] = (float) 1336;
      ArrayUtils.shift(floatArray0, 1336, Integer.MAX_VALUE, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {13.0F, (-1.0F), (-1575.66F), 2.14748365E9F, (-1199.4672F), 1336.0F, 1336.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)1543);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1543}, shortArray0);
      
      ArrayUtils.swap(shortArray0, 13, 1336, (int) (short)1543);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1543}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)76;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)102);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)86, (byte)76}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-74);
      ArrayUtils.swap(byteArray0, (int) (byte) (-83), (-1852));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-74), (byte)106, (byte) (-74)}, byteArray0);
      
      Integer integer0 = new Integer(1287);
      assertNotNull(integer0);
      assertEquals(1287, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-2815));
      assertNotNull(integer1);
      assertEquals((-2815), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      try { 
        Integer.decode("len must be > 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"len must be > 0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      assertNotNull(byte0);
      assertEquals((byte) (-70), (byte)byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      ArrayUtils.swap(byteArray0, (int) (byte) (-70), (-1269), 32);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-70)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 0, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 0, 1204}, intArray1);
      
      short short0 = (short)0;
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, 2212);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1204;
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 2212;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1204.0, 0.0, 51.0, 0.0, 2212.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1204.0, 0.0, 51.0, 0.0, 2212.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'e');
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(0, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 2;
      longArray0[2] = (long) short0;
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 2;
      longArray0[6] = (long) '%';
      longArray0[7] = (long) 51;
      longArray0[8] = 0L;
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 411;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) 411;
      floatArray0[3] = (-3669.4F);
      floatArray0[4] = (float) (byte)1;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-2455);
      floatArray0[7] = (float) (-2455);
      ArrayUtils.shift(floatArray0, (int) (byte)1, (int) (byte)1, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {411.0F, 1.0F, 411.0F, (-3669.4F), 1.0F, 0.0F, (-2455.0F), (-2455.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2455);
      ArrayUtils.swap(intArray0, (-2455), 0, 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2455)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[3] = (short)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0, (short)2, (short)2}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (byte) (-56), (-1235), (int) (short)1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0, (short)2, (short)2}, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (-1235);
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2194.23F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 1.0F, (-1235.0F), 1.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 1.0F, (-1235.0F), 1.0F, 0.0F, 2.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (short)2;
      floatArray2[1] = (float) (byte) (-56);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray2, 1.0F);
      assertNotNull(bitSet0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {2.0F, (-56.0F)}, floatArray2, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      ArrayUtils.shift(shortArray0, 99, (int) (short)1, (int) (short)1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0, (short)2, (short)2}, shortArray0);
      
      ArrayUtils.shift(floatArray0, 2, (int) (short)2, (int) (short)2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, 1.0F, (-1235.0F), 1.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 5);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 9, 5);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 9;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {5L, 9L}, longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = (-423);
      intArray0[1] = 0;
      intArray0[4] = 0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1127), (-85));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      String string0 = "u$HL";
      try { 
        Integer.valueOf("my");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"my\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-12);
      shortArray0[1] = (short) (byte) (-12);
      shortArray0[2] = (short) (byte) (-12);
      shortArray0[3] = (short)76;
      shortArray0[4] = (short) (byte) (-12);
      shortArray0[5] = (short) (byte) (-12);
      shortArray0[6] = (short) (byte) (-12);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2822, (int) (short)76);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-12), (short) (-12), (short) (-12), (short)76, (short) (-12), (short) (-12), (short) (-12)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-12);
      objectArray0[1] = (Object) true;
      Integer integer0 = new Integer((short) (-12));
      assertNotNull(integer0);
      assertEquals((-12), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      ArrayUtils.shift(floatArray0, (-736), 11, 1657);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray0);
      assertEquals(3, int0);
      
      ArrayUtils.swap(intArray0, 1657, 11, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 2.0);
      assertNull(doubleArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {3, 788}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {3, 788}, intArray1);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {3, 788}, intArray1);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.07374182E9F);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 788;
      floatArray0[3] = 7.0F;
      floatArray0[4] = (float) 3;
      floatArray0[5] = 7.0F;
      floatArray0[6] = (float) 3;
      floatArray0[7] = 7.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2857.2F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.07374182E9F), 3.0F, 788.0F, 7.0F, 3.0F, 7.0F, 3.0F, 7.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.07374182E9F), 3.0F, 788.0F, 7.0F, 3.0F, 7.0F, 3.0F, 7.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray2 = ArrayUtils.removeElement((int[]) null, 788);
      assertNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 116);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(12, floatArray0.length);
      assertEquals(24, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-353L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-353L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 116, 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) null, 116);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)962;
      shortArray0[1] = (short) (-2547);
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-2174);
      shortArray0[4] = (short) (-591);
      shortArray0[5] = (short) (-331);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)962, (short) (-2547), (short)9, (short) (-2174), (short) (-591), (short) (-331)}, shortArray1);
      assertArrayEquals(new short[] {(short)962, (short) (-2547), (short)9, (short) (-2174), (short) (-591), (short) (-331)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-291));
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0, (-1515), (-1515));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1515);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1515);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1515));
      assertNull(intArray0);
      
      ArrayUtils.swap(floatArray0, (-1515), (-1515), 2160);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 1, (-1515));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      boolean boolean0 = ArrayUtils.contains(charArray0, '>');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1982));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1284, (-1982));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (-993.5001F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 34, (-1515));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      boolean boolean0 = ArrayUtils.contains(charArray0, '+');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+', '+', '+'}, charArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap((double[]) null, 935, 0);
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 935);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(longArray1, (-1545L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)41);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-3207L));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      bitSet0.set(2145663746, 2145663746, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2145663746;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3207L);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) (-3207L);
      boolean boolean3 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 2.14566374E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3207.0F), 0.0F, 0.0F, (-3207.0F)}, floatArray1, 0.01F);
      assertFalse(boolean3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1319L;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 59L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1319L, 1L}, longArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2100799220);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-16), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -16, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0L);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2135629554;
      Integer integer0 = new Integer(2135629554);
      assertNotNull(integer0);
      assertEquals(2135629554, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals(2135629554, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(800);
      assertNotNull(integer2);
      assertEquals(800, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertEquals(7, integerArray0.length);
      assertEquals(800, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      String string0 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-124);
      byteArray0[4] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124), (byte)0, (byte) (-121), (byte) (-56), (byte) (-56), (byte) (-121), (byte) (-121), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124), (byte)0, (byte) (-121), (byte) (-56), (byte) (-56), (byte) (-121), (byte) (-121), (byte) (-121)}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((-810));
      assertNotNull(integer0);
      assertEquals((-810), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals((byte) (-56), integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-121);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 90, (int) (short)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-121.0F), 0.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-215);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-215.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-1190.1767578125));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)2);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (long) (byte)2;
      ArrayUtils.shift(longArray0, (int) (byte)2, (int) (byte)2, 2927);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1794;
      intArray0[1] = 585;
      ArrayUtils.shift(intArray0, 585);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 585, 1, (double) 585);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'F';
      charArray0[2] = 'X';
      charArray0[3] = 'y';
      charArray0[4] = 'r';
      charArray0[5] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B');
      assertNotNull(bitSet0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'+', 'F', 'X', 'y', 'r', 'B'}, charArray0);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift(charArray0, 585);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'y', 'r', 'B', '+', 'F', 'X'}, charArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, 1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((long[]) null, Integer.MAX_VALUE, (-746), 36);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      Integer integer0 = new Integer((-2193));
      assertNotNull(integer0);
      assertEquals((-2193), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, (-1719), 16, (-64));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1719);
      floatArray0[1] = (float) (-1719);
      ArrayUtils.swap(floatArray0, (-2894), 0, (-1260));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1719.0F), (-1719.0F)}, floatArray0, 0.01F);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2193);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2193.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4043, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4043, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0L;
      objectArray1[1] = (Object) 0L;
      Integer integer0 = new Integer((-2545));
      assertNotNull(integer0);
      assertEquals((-2545), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2545), object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      objectArray1[2] = object0;
      objectArray1[3] = (Object) 0L;
      objectArray1[4] = (Object) 0L;
      Object[] objectArray2 = ArrayUtils.nullToEmpty(objectArray1);
      assertNotNull(objectArray2);
      assertNotSame(objectArray2, objectArray0);
      assertSame(objectArray2, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(objectArray1, objectArray2);
      assertEquals(5, objectArray2.length);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '1';
      charArray0[2] = 'I';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'#', '1', 'I'}, charArray0);
      assertTrue(boolean0);
      
      Short short0 = Short.valueOf((short)7807);
      assertNotNull(short0);
      assertEquals((short)7807, (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)7807}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[2] = (-1190.1768F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, (-1190.1768F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ')');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1202.4413);
      doubleArray0[1] = (double) (-1190.1768F);
      doubleArray0[2] = (double) 1.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1.0F, (int) (byte) (-53));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1202.4413), (-1190.1767578125), 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-18519);
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (-18519);
      shortArray0[4] = (short) (-18519);
      shortArray0[5] = (short) (-18519);
      shortArray0[6] = (short) (-4144);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-53));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-18519), (short) (-18519), (short) (-18519), (short) (-18519), (short) (-4144)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-18519), (short) (-53), (short) (-53), (short) (-18519), (short) (-18519), (short) (-18519), (short) (-4144)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(4, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-311);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 7);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.3626005331291;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift((int[]) null, (-1073741824));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3221;
      shortArray0[1] = (short) (-477);
      shortArray0[2] = (short) (-1542);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)3221;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)3221, (short) (-477), (short) (-1542), (short)1, (short)3221}, shortArray0);
      assertArrayEquals(new short[] {(short)3221, (short) (-477), (short) (-1542), (short)1, (short)3221}, shortArray1);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.3626005331291, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)3221, (short) (-477), (short) (-1542), (short)1, (short)3221}, shortArray0);
      assertArrayEquals(new short[] {(short)3221, (short) (-477), (short) (-1542), (short)1, (short)3221}, shortArray1);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-477), (-3107), (int) (short)3221);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1542);
      floatArray0[1] = (float) (short) (-477);
      floatArray0[2] = (float) (-1073741824);
      floatArray0[3] = (float) (short) (-477);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-3107);
      floatArray0[6] = (float) (short) (-477);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)3221);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1542.0F), (-477.0F), (-1.07374182E9F), (-477.0F), 2.0F, (-3107.0F), (-477.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 91);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1284.0F, 0.0F, 1284.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1284;
      intArray0[1] = 121;
      intArray0[2] = 11;
      intArray0[3] = 1517;
      intArray0[4] = (-1);
      intArray0[5] = 121;
      intArray0[6] = 121;
      int int0 = ArrayUtils.indexOf(intArray0, 1284, (-1));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1284, 121, 11, 1517, (-1), 121, 121}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.add(charArray1, 10, '\u0000');
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertEquals(11, charArray2.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      char[] charArray3 = ArrayUtils.subarray(charArray1, 10, 10);
      assertNotNull(charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertEquals(0, charArray3.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      char[] charArray4 = ArrayUtils.clone(charArray2);
      assertNotNull(charArray4);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray4);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray4);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertEquals(11, charArray2.length);
      assertEquals(11, charArray4.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.indexOf(charArray0, '');
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray4));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '3';
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('3', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '3';
      doubleArray0[1] = 4268.80119918795;
      doubleArray0[2] = (double) (char)character0;
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) char0;
      doubleArray0[5] = (double) (char)character0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 51.0, 12);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 4268.80119918795, 51.0, 51.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) char0;
      longArray0[2] = (long) (char)character0;
      longArray0[3] = (long) char0;
      longArray0[4] = (long) '3';
      longArray0[5] = (long) '3';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) char0, 51L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4149.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3493.529, 900.0396746023);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'U';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 51, 2011);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%');
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertEquals(3, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-86.72F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer0, (-1));
      assertEquals((-1), int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '^');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) '-';
      intArray0[4] = (-1);
      intArray0[5] = 12;
      intArray0[6] = 37;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, (-1), 45, (-1), 12, 37}, intArray1);
      assertArrayEquals(new int[] {1, (-1), (-1), 45, (-1), 12, 37}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) 12;
      doubleArray0[7] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 45.0, (-1.0), (-1.0), 37.0, 12.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2183);
      intArray0[1] = (-732);
      intArray0[2] = 1645;
      intArray0[3] = 1645;
      intArray0[4] = 1645;
      intArray0[5] = (-1431);
      intArray0[6] = 65;
      ArrayUtils.shift(intArray0, (-88), (-1431), (-451));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2183), (-732), 1645, 1645, 1645, (-1431), 65}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)72;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-732));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -732, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-12);
      ArrayUtils.shift(intArray0, (-12), (-12), (-12));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-12)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-12), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = ArrayUtils.insert((-2625), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2625));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)0, (-2455), (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'Y';
      charArray0[3] = 'L';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Y');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'L', 'L', 'Y', 'L'}, charArray1);
      assertArrayEquals(new char[] {'L', 'L', 'Y', 'L'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-2081.7666F), (int) (short)0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'e', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'e');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'e';
      intArray0[1] = 101;
      intArray0[6] = 2;
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, 0L, 2L, 2L, 101L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray1, 101);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, '*', (int) (byte)2);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '<');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) '*';
      longArray0[2] = (long) '<';
      longArray0[3] = (long) '<';
      longArray0[4] = (long) '<';
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2L, 42L, 60L, 60L, 60L, 2L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray0, 3330);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1362, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1362, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(946);
      assertNotNull(integer0);
      assertEquals(946, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(946);
      assertNotNull(integer1);
      assertEquals(946, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer integer2 = new Integer((-305));
      assertNotNull(integer2);
      assertEquals((-305), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(397);
      assertNotNull(integer3);
      assertEquals(397, (int)integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      boolean boolean0 = ArrayUtils.isEquals(integer3, integer0);
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 460);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      floatArray0[1] = (float) 'k';
      ArrayUtils.swap(charArray0, 554, (int) (byte) (-92), 554);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'k', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65;
      longArray0[1] = (long) ']';
      longArray0[2] = (long) (byte) (-92);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {65L, 93L, (-92L)}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 130.33508966145, (int) (byte) (-92), 4138.4661095265);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      ArrayUtils.shift(byteArray0, 1323, 554, 37);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-92), (byte) (-92), (byte) (-92)}, byteArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 93L;
      objectArray0[1] = (Object) (byte) (-92);
      objectArray0[2] = (Object) 93L;
      objectArray0[3] = (Object) (-92L);
      objectArray0[4] = (Object) (-92L);
      objectArray0[5] = (Object) (byte) (-92);
      objectArray0[6] = (Object) 'k';
      objectArray0[7] = (Object) (byte) (-92);
      objectArray0[8] = (Object) (byte) (-92);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(9, objectArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '?', '?', '?'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-331), (-3628));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-3628);
      floatArray1[1] = (float) (short)65;
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-3628.0F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertArrayEquals(new float[] {(-3628.0F), 65.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3628.0F), (-3628.0F), 65.0F}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "&{W");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.contains(longArray2, (-1L));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(boolean0);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1515);
      intArray0[2] = (-1515);
      intArray0[3] = 85;
      intArray0[4] = (-1515);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, Integer.MAX_VALUE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("e-");
      assertNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 847);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2146716270));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146716270, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 119;
      longArray0[2] = (long) (byte)119;
      longArray0[3] = (long) 119;
      longArray0[4] = (long) 119;
      longArray0[5] = (long) (byte)119;
      longArray0[6] = (long) 119;
      longArray0[7] = (long) 119;
      int int1 = ArrayUtils.indexOf(longArray0, (long) 119, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 119L, 119L, 119L, 119L, 119L, 119L, 119L}, longArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1291));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1291)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5128;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1291, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0L;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) '5';
      doubleArray0[6] = (double) '5';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1668.889004, 2628);
      assertEquals(20, doubleArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.reverse(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ",wZ_[][EQ@I*c~ih");
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 2628;
      intArray0[2] = 104;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2628, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (-353L);
      longArray0[1] = 672L;
      longArray0[2] = 672L;
      ArrayUtils.swap(charArray0, (-856), 1343, (-687));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((-856));
      assertNotNull(integer0);
      assertEquals((-856), (int)integer0);
      
      Integer integer1 = new Integer((-1017));
      assertNotNull(integer1);
      assertEquals((-1017), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap(doubleArray0, (-1237), 17, (-433));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3277.96299836), (-1237));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (-18519);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte) (-53);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (byte) (-53);
      shortArray0[6] = (short) (byte) (-53);
      shortArray0[7] = (short) (byte) (-53);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-4144));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-53), (short) (-18519), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-53), (short) (-18519), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 101, (-285));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'e';
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 2;
      floatArray1[3] = (float) (-285);
      floatArray1[4] = (float) 'e';
      floatArray1[5] = (float) 'e';
      floatArray1[6] = (float) 1204;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F, 2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {101.0F, 2.0F, 2.0F, (-285.0F), 101.0F, 101.0F, 1204.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 1204;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 1204;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, (Integer) 2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 944.567F);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, (-786.19824F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-786.19824F)}, floatArray1, 0.01F);
      
      ArrayUtils.reverse((Object[]) null);
      Float[] floatArray2 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((double[]) null, 159, 159, 159);
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte)77);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)77}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1L;
      floatArray0[3] = (float) (-3130);
      int[] intArray0 = new int[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-3130.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3130.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)113;
      Byte byte1 = new Byte((byte)113);
      assertNotNull(byte1);
      assertEquals((byte)113, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)113}, byteArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-433));
      assertNotNull(integer0);
      assertEquals((-433), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(890);
      assertNotNull(integer1);
      assertEquals(890, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1238), (int) byte0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1), 49);
      assertNull(integerArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((double[]) null, (-1274), (-1), (-1));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1100);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)804;
      shortArray0[1] = (short)22228;
      shortArray0[2] = (short) (-453);
      shortArray0[3] = (short)2897;
      shortArray0[4] = (short)2303;
      shortArray0[5] = (short) (-398);
      shortArray0[6] = (short) (-733);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)45;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)804, (short)22228, (short) (-453), (short)2897, (short)2303, (short) (-398), (short) (-733), (short)1, (short)45}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1), (-1));
      assertNull(integerArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 2456.118098890453;
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-405.13950063), (-1.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      
      Object[] objectArray0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1012);
      intArray0[2] = (-778);
      intArray0[3] = 571;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-63));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-63);
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[3] = (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -63, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-1), 0, (-1));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) (-3130);
      int[] intArray0 = new int[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-3130.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3130.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3130.0F);
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-3130.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-81);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -81, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.reverse(objectArray0, 2, 50);
      assertEquals(1, objectArray0.length);
      
      Integer integer0 = new Integer(3278);
      assertNotNull(integer0);
      assertEquals(3278, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long(1750L);
      assertNotNull(long0);
      assertEquals(1750L, (long)long0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertNotNull(mutableInt0);
      assertEquals((-3001), mutableInt0.intValue());
      assertEquals((-3001), (int)mutableInt0.toInteger());
      assertEquals((-3001), (int)mutableInt0.getValue());
      assertEquals((-3001.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-3001", mutableInt0.toString());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((short) (-3001), mutableInt0.shortValue());
      assertEquals((-3001.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3001L), mutableInt0.longValue());
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-3001), int0);
      assertEquals((-3000L), mutableInt0.longValue());
      assertEquals("-3000", mutableInt0.toString());
      assertEquals((-3000), mutableInt0.intValue());
      assertEquals((-3000), (int)mutableInt0.getValue());
      assertEquals((-3000), (int)mutableInt0.toInteger());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals((-3000.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-3000), mutableInt0.shortValue());
      assertEquals((-3000.0), mutableInt0.doubleValue(), 0.01);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-3000), (int)integer2);
      assertEquals((-3000L), mutableInt0.longValue());
      assertEquals("-3000", mutableInt0.toString());
      assertEquals((-3000), mutableInt0.intValue());
      assertEquals((-3000), (int)mutableInt0.getValue());
      assertEquals((-3000), (int)mutableInt0.toInteger());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals((-3000.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-3000), mutableInt0.shortValue());
      assertEquals((-3000.0), mutableInt0.doubleValue(), 0.01);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(3278);
      assertNotNull(integer3);
      assertEquals(3278, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      mutableInt0.add((-3001));
      assertEquals((byte) (-113), mutableInt0.byteValue());
      assertEquals((short) (-6001), mutableInt0.shortValue());
      assertEquals((-6001L), mutableInt0.longValue());
      assertEquals((-6001), mutableInt0.intValue());
      assertEquals((-6001.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-6001", mutableInt0.toString());
      assertEquals((-6001), (int)mutableInt0.getValue());
      assertEquals((-6001.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-6001), (int)mutableInt0.toInteger());
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer4 = new Integer(112);
      assertNotNull(integer4);
      assertEquals(112, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer3;
      integerArray0[1] = integer3;
      integerArray0[2] = integer5;
      integerArray0[3] = integer0;
      integerArray0[4] = integer4;
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      
      integerArray0[5] = integer6;
      integerArray0[6] = integer2;
      integerArray0[7] = integer4;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-87), integerArray0[3]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -87, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[10];
      BitSet bitSet0 = new BitSet('e');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(128, bitSet0.size());
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.insert((-1), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      intArray0[3] = 1284;
      intArray0[4] = (-353);
      ArrayUtils.reverse(intArray0, 1284, (-1200));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 1284, 1284, (-353)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(82);
      assertNotNull(integer0);
      assertEquals(82, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(11, object0);
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(intArray0, 16);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-353), 11, 11, 1284, 1284}, intArray0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte) (-86);
      byteArray2[2] = (byte) (-125);
      byteArray2[3] = (byte)10;
      byte[] byteArray3 = ArrayUtils.insert((-353), (byte[]) null, byteArray2);
      assertNull(byteArray3);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-86), (byte) (-125), (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((int[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-38);
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) (byte) (-86));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte) (-87), (byte) (-34), (byte) (-87), (byte) (-86), (byte) (-37), (byte) (-38)}, byteArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("4p#9z.;i7c0");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte) (-37));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1190.1768F);
      floatArray0[3] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1190.1768F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 194.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      ArrayUtils.swap(doubleArray0, (int) (short)1, 91, 79);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {194.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = (-850);
      intArray0[3] = 50;
      intArray0[5] = 2;
      intArray0[6] = (-1);
      intArray0[7] = (-850);
      intArray0[8] = 2;
      ArrayUtils.shift(intArray0, (-2034));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-850), 50, 0, 2, (-1), (-850), 2}, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-3270);
      shortArray0[2] = (short)3221;
      shortArray0[3] = (short) (-477);
      shortArray0[4] = (short) (-28078);
      shortArray0[5] = (short) (-20496);
      shortArray0[6] = (short) (-1542);
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short) (-3270), (short)3221, (short) (-477), (short) (-28078), (short) (-20496), (short) (-1542), (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short) (-3270), (short)3221, (short) (-477), (short) (-28078), (short) (-20496), (short) (-1542), (short)1}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)3221;
      doubleArray0[2] = (double) (-2034);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (short)1);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3221.0, (-2034.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2034.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short) (-3270), (short)3221, (short) (-477), (short) (-28078), (short) (-20496), (short) (-1542), (short)1}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 101, (-285));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'e';
      MutableInt mutableInt0 = new MutableInt(101.0F);
      assertNotNull(mutableInt0);
      assertEquals(101L, mutableInt0.longValue());
      assertEquals(101, (int)mutableInt0.getValue());
      assertEquals((byte)101, mutableInt0.byteValue());
      assertEquals(101, (int)mutableInt0.toInteger());
      assertEquals((short)101, mutableInt0.shortValue());
      assertEquals(101, mutableInt0.intValue());
      assertEquals("101", mutableInt0.toString());
      assertEquals(101.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(101.0, mutableInt0.doubleValue(), 0.01);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(101, int0);
      assertEquals(102L, mutableInt0.longValue());
      assertEquals(102.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(102, (int)mutableInt0.toInteger());
      assertEquals((byte)102, mutableInt0.byteValue());
      assertEquals(102, (int)mutableInt0.getValue());
      assertEquals("102", mutableInt0.toString());
      assertEquals(102, mutableInt0.intValue());
      assertEquals(102.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)102, mutableInt0.shortValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      assertEquals(102L, mutableInt0.longValue());
      assertEquals(102.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(102, (int)mutableInt0.toInteger());
      assertEquals((byte)102, mutableInt0.byteValue());
      assertEquals(102, (int)mutableInt0.getValue());
      assertEquals("102", mutableInt0.toString());
      assertEquals(102, mutableInt0.intValue());
      assertEquals(102.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)102, mutableInt0.shortValue());
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-285));
      assertNotNull(integer1);
      assertEquals((-285), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(1204);
      assertNotNull(integer2);
      assertEquals(1204, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1171, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1171, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-1726.603);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 29L;
      longArray0[1] = 1L;
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 29L}, longArray0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (-353L);
      longArray0[1] = 672L;
      longArray0[2] = 672L;
      int int0 = (-1237);
      ArrayUtils.swap(charArray0, (-856), 1343, (-687));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((-856));
      assertNotNull(integer0);
      assertEquals((-856), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1017));
      assertNotNull(integer1);
      assertEquals((-1017), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap(doubleArray0, (-1237), 17, (-433));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-433), (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -433, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-68));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      char[] charArray0 = new char[16];
      charArray0[0] = '1';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(16, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte) (-71));
      assertNotNull(byte0);
      assertEquals((byte) (-71), (byte)byte0);
      
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-126));
      assertNotNull(byte2);
      assertEquals((byte) (-126), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-126));
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2682;
      longArray0[1] = (long) '-';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {2682L, 45L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray0, (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.reverse(intArray0, (-3600), 109);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(intArray0, (-3600), 109, 109);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 8;
      intArray0[3] = 62;
      intArray0[4] = (-2147120942);
      intArray0[5] = (-732);
      intArray0[6] = 1645;
      intArray0[7] = (-2183);
      ArrayUtils.shift(intArray0, 1645, 65, 2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), Integer.MAX_VALUE, 8, 62, (-2147120942), (-732), 1645, (-2183)}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)59;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-732));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -732, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-4343));
      assertNotNull(integer0);
      assertEquals((-4343), (int)integer0);
      
      Integer integer1 = new Integer(2010);
      assertNotNull(integer1);
      assertEquals(2010, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte byte0 = (byte)64;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer integer2 = new Integer((-902));
      assertNotNull(integer2);
      assertEquals((-902), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-260);
      intArray0[2] = (-902);
      intArray0[3] = (-4343);
      intArray0[4] = (-902);
      intArray0[5] = (int) (byte)64;
      intArray0[6] = (-305);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertNotNull(objectArray0);
      assertSame(integerArray0, objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, objectArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray1, objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(946);
      assertNotNull(integer0);
      assertEquals(946, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(946);
      assertNotNull(integer1);
      assertEquals(946, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)29;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)29);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)30, (byte)27, (byte)29}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)7, (byte) (-1), (byte)30, (byte)27, (byte)29, (byte)29}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1817L));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (-260);
      doubleArray0[2] = (double) (byte)27;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (byte)30;
      doubleArray0[6] = (double) (int)integerArray0[1];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, Integer.MAX_VALUE, (-5945.23728233));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {946.0, (-260.0), 27.0, (-1.0), (-1.0), 30.0, 946.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-16);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1432.0F;
      floatArray0[1] = 1.4937966F;
      floatArray0[2] = (float) (short) (-16);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1276.47F));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1432.0F, 1.4937966F, (-16.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 's');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'s'}, charArray0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 751.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (float) (-16);
      floatArray1[4] = 1432.0F;
      floatArray1[5] = (float) 's';
      floatArray1[6] = 1432.0F;
      floatArray1[7] = (float) (-16);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {751.0F, 1.0F, 1.0F, 115.0F, 1432.0F, (-16.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1432.0F, 1.4937966F, (-16.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {751.0F, 1.0F, 1.0F, (-16.0F), 1432.0F, 115.0F, 1432.0F, (-16.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'D');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse((long[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray2 = ArrayUtils.insert((-4048), floatArray0, floatArray0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      float[] floatArray0 = new float[15];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(15, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 120);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2682;
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) 782;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {2682.0, 45.0, 45.0, 782.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2682.0, 45.0, 45.0, 782.0, 0.0, 2682.0, 45.0, 45.0, 782.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1794;
      intArray0[1] = 585;
      ArrayUtils.shift(intArray0, 585);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 585, 1, (double) 585);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2080);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1}, shortArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0, (-1515), (-1515));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1515);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1515);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1515));
      assertNull(intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1515);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-1515);
      longArray0[3] = (long) (-1515);
      longArray0[4] = (long) (-1515);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1515L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1515L), 0L, (-1515L), (-1515L), (-1515L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1515L), (-1515L), (-1515L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, 1855, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 7.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray3);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(5, intArray3.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)72, (byte) (-37), (byte)72, (byte)56, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray3);
      assertArrayEquals(new byte[] {(byte)72, (byte) (-37), (byte)72, (byte) (-37), (byte)72, (byte)56, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788}, intArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 788, 788);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.add(intArray0, (int) (short)0);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {788, 0}, intArray2);
      assertArrayEquals(new int[] {788}, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 788;
      long[] longArray1 = ArrayUtils.add(longArray0, 917L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L, 917L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(shortArray1, (-1235), 788, 0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, (-1235));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L, 917L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 788, 2);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 0L, 917L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)31, 2);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)96, (byte) (-48), (byte)109, (byte) (-1), (byte) (-83), (byte) (-30), (byte) (-1)}, byteArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-1575.66F);
      floatArray0[3] = 836.92F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1575.66F), 836.92F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 3;
      Integer integer0 = Integer.valueOf(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2530);
      assertNotNull(integer1);
      assertEquals(2530, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2530).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '3';
      charArray0[2] = '`';
      charArray0[3] = '[';
      charArray0[4] = '!';
      charArray0[5] = 'D';
      charArray0[6] = '?';
      charArray0[7] = 'L';
      charArray0[8] = '=';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '`');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'N', '3', '`', '[', '!', 'D', '?', 'L', '='}, charArray0);
      assertArrayEquals(new char[] {'`', 'N', '3', '`', '[', '!', 'D', '?', 'L', '='}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[2] = (-1190.1768F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, (-1190.1768F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ')');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, (-1190.1768F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse((long[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1515);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.3626005331291;
      doubleArray0[3] = 0.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.3626005331291, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer((-786));
      assertNotNull(integer0);
      assertEquals((-786), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-786), object0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-18));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4149.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3493.529, 900.0396746023);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int int0 = 2;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '%';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-732);
      floatArray0[1] = (float) 1812L;
      floatArray0[2] = (float) 1812L;
      floatArray0[3] = (float) (-1665L);
      floatArray0[4] = (float) (-1665L);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3207);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3207)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3207)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (short) (-3207);
      floatArray0[2] = 0.0F;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3207.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '3');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertTrue(boolean2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)1;
      ArrayUtils.shift(floatArray0, (int) (short)0, 411, (-2455));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'f');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1276));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1276)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte) (-85));
      assertNotNull(byte1);
      assertEquals((byte) (-85), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)3);
      assertNotNull(byte2);
      assertEquals((byte)3, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(45);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.swap((byte[]) null, (-3008), (-3008));
      Integer integer0 = new Integer((-3628));
      assertNotNull(integer0);
      assertEquals((-3628), (int)integer0);
      
      Integer integer1 = new Integer((byte) (-85));
      assertNotNull(integer1);
      assertEquals((-85), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      try { 
        Integer.decode("Array element ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array element \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1291));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1291)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-125);
      ArrayUtils.swap(byteArray0, 0, (int) (byte)31, (int) (byte) (-125));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-1), (byte)52, (byte)31, (byte) (-126), (byte) (-125)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)106;
      ArrayUtils.swap(byteArray0, 100, 89);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60, (byte)112, (byte)100, (byte) (-74), (byte) (-83), (byte)106}, byteArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2011);
      assertNotNull(integer0);
      assertEquals(2011, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-83));
      assertNotNull(integer1);
      assertEquals((-83), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      try { 
        Integer.decode(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '^', (int) '^');
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (int) '^', 297, 111);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)106;
      ArrayUtils.swap(byteArray0, 100, 89);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60, (byte)112, (byte)100, (byte) (-74), (byte) (-83), (byte)106}, byteArray0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 2011;
      Integer integer0 = new Integer(2011);
      assertNotNull(integer0);
      assertEquals(2011, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-83));
      assertNotNull(integer1);
      assertEquals((-83), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      String string0 = ", '";
      try { 
        Integer.decode(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 52);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {52.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4149.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3493.529, 900.0396746023);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'U';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 51, 2011);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%');
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertEquals(3, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) '%');
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)620;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)620);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)620}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shift(floatArray1, 21);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 0.0);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(floatArray1, 51, 51);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-2146869120));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2146869120));
      assertNotNull(integer0);
      assertEquals((-2146869120), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-511));
      assertNotNull(integer1);
      assertEquals((-511), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 49);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "Array is empty");
      assertNotNull(stringArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 5468);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3183));
      assertNotNull(integer0);
      assertEquals((-3183), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(847);
      assertNotNull(integer1);
      assertEquals(847, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("\"cGAN(7y");
      assertNull(integer3);
      
      integerArray0[3] = null;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2146716270));
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2592;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2592}, shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = ':';
      charArray0[2] = '1';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {':', '1'}, charArray1);
      assertArrayEquals(new char[] {'s', ':', '1'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      ArrayUtils.reverse(charArray0, (-1826), (-2445));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'C'}, charArray0);
      
      Long long0 = new Long((-2445));
      assertNotNull(long0);
      assertEquals((-2445L), (long)long0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-114L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-114L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      assertArrayEquals(new int[] {(-344)}, intArray1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1204, (-2));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-2325.783009229));
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-3166));
      assertNotNull(integer0);
      assertEquals((-3166), (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[1] = null;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[1]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1.0));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'T', (-1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      ArrayUtils.shift((Object[]) null, 1310);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = 1204;
      intArray0[1] = 1204;
      intArray0[2] = 1204;
      intArray0[3] = 1204;
      intArray0[4] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1204, 1204, 1204, 1204, 1204}, intArray0);
      assertArrayEquals(new int[] {1204, 1204, 1204, 1204, 1204}, intArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1204;
      floatArray0[1] = (float) (-285);
      floatArray0[2] = (float) 1204;
      floatArray0[3] = (float) 1204;
      ArrayUtils.swap(floatArray0, 2103, 59);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1204.0F, (-285.0F), 1204.0F, 1204.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1204, 1204, 1204, 1204, 1204}, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-240.99F), 1204);
      assertEquals((-1), int0);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, 2103);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(6, intArray2.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2103, 1204, 1204, 1204, 1204, 1204}, intArray2);
      assertArrayEquals(new int[] {1204, 1204, 1204, 1204, 1204}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1084.39), 1204);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-70.0F), 3409);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0, (-1515), (-1515));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1515);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1515);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1515.0), 0.0, (-1515.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)72;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)72;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-819);
      boolean boolean0 = ArrayUtils.contains(intArray0, 110);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-819), 0}, intArray0);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(1284);
      assertNotNull(integer0);
      assertEquals(1284, (int)integer0);
      
      objectArray0[3] = (Object) 0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      float[] floatArray0 = new float[12];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(12, floatArray0.length);
      assertEquals(12, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 3;
      intArray0[2] = 3191;
      intArray0[3] = 2;
      intArray0[4] = 4393;
      intArray0[5] = 2146968910;
      intArray0[6] = 1208;
      intArray0[7] = (-8588);
      intArray0[8] = (-797);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1), 3, 3191, 2, 4393, 2146968910, 1208, (-8588), (-797)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3, 3191, 2, 4393, 2146968910, 1208, (-8588), (-797)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '|';
      charArray0[2] = '7';
      charArray0[3] = 'm';
      ArrayUtils.shift(charArray0, 1512937987, 323, (-344));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'', '|', '7', 'm'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[0] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-720.310503));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3876.12250966, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = ' ';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'.', ' '}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray3 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray3.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '.';
      floatArray0[1] = 104.12F;
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) 70;
      floatArray0[4] = (float) 1319;
      floatArray0[5] = (float) 70;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 1319;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {46.0F, 104.12F, 32.0F, 70.0F, 1319.0F, 70.0F, 0.0F, 1319.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-521), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -521, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 12L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {12L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, (float) 12L);
      assertNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-744.691340453579);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-744.691340453579));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-744.691340453579)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '8';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 117);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertEquals(5, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '8';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) '8';
      intArray0[3] = (int) '8';
      intArray0[4] = (int) '#';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {56, 35, 56, 56, 35}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      Integer integer0 = new Integer((-2193));
      assertNotNull(integer0);
      assertEquals((-2193), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1719), 16, (-64));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1719);
      floatArray0[1] = (float) (-64);
      int[] intArray0 = new int[5];
      intArray0[0] = (-64);
      intArray0[2] = (-64);
      intArray0[3] = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '6';
      charArray0[2] = 'V';
      charArray0[3] = '.';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '6', 'V', '.'}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-477);
      intArray0[1] = (-298);
      intArray0[2] = (-477);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-477), (-298), (-477)}, intArray0);
      assertArrayEquals(new int[] {(-477), (-298), (-477), (-477), (-298), (-477)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)244;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)244;
      longArray0[4] = (long) (short)244;
      longArray0[5] = (long) (short)244;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 59L);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 244L, 244L, 244L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      BitSet bitSet1 = BitSet.valueOf(byteBuffer0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.set((int) (short)0, (int) (short)0, true);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 244L, 244L, 244L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, 0, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)244;
      intArray0[1] = (int) (short)244;
      intArray0[2] = 0;
      intArray0[3] = 8;
      intArray0[4] = (int) (short)244;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {244, 244, 0, 8, 244}, intArray0);
      assertArrayEquals(new int[] {244, 244, 0, 8, 244, 244, 244, 0, 8, 244}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (-11));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-11), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -11, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = (-423);
      intArray0[4] = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-423);
      longArray0[1] = (long) 2145;
      longArray0[2] = (long) 2145;
      longArray0[3] = (long) (-423);
      longArray0[4] = (long) 2145;
      longArray0[5] = (long) (-423);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-423L), 2145L, 2145L, (-423L), 2145L, (-423L)}, longArray0);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-401L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-423L), 2145L, 2145L, (-423L), 2145L, (-423L)}, longArray0);
      assertArrayEquals(new long[] {(-423L), 2145L, 2145L, (-423L), 2145L, (-423L), (-401L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 2145L;
      objectArray0[4] = (Object) (-423);
      objectArray0[5] = (Object) (-423);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(6, objectArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)70);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)70}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {(-423L), 2145L, 2145L, (-423L), 2145L, (-423L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-423L), 2145L, 2145L, (-423L), 2145L, (-423L)}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'G';
      intArray0[1] = 84;
      intArray0[2] = (int) 'G';
      intArray0[3] = 84;
      intArray0[4] = 84;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[23];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1847));
      assertNotNull(bitSet0);
      assertEquals(23, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(23, intArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '#';
      charArray0[3] = 's';
      charArray0[4] = '8';
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-181));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-181L)}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-46);
      ArrayUtils.reverse(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)113, (byte) (-46)}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-46);
      intArray0[1] = (int) '8';
      intArray0[2] = (int) (byte) (-46);
      intArray0[3] = (int) '8';
      intArray0[4] = (int) '8';
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)113);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-46), 56, (-46), 56, 56}, intArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'1', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 2456.118098890453, 16);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '1';
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-1), 0, (-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2660;
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) (short)1508;
      doubleArray0[3] = (double) (short)1508;
      ArrayUtils.shift(doubleArray0, 12, 3417, (-750));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2660.0, 4.0, 1508.0, 1508.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2660.0, 4.0, 1508.0, 1508.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 3417, 53);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2660.0, 4.0, 1508.0, 1508.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (-1822.0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (int) (short)0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short) (-1064));
      assertEquals(0, characterArray0.length);
      
      Integer[] integerArray1 = new Integer[9];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = null;
      integerArray1[3] = null;
      integerArray1[4] = null;
      integerArray1[5] = null;
      integerArray1[6] = null;
      integerArray1[7] = integer0;
      integerArray1[8] = integer0;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray2.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "false");
      assertNotNull(stringArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertEquals(9, stringArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1), (-1));
      assertNull(integerArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 2456.118098890453;
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-405.13950063), (-1.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 252.0177068462624, 3606);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse((Object[]) null);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ",wZ_[][EQ@I*c~ih");
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2456.118098890453, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "java.lang.Object");
      assertNotNull(stringArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      char[] charArray0 = new char[16];
      charArray0[0] = '1';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(16, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 2456.118098890453, 16);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '1';
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ",wZ_[][EQ@I*c~ih");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "yes");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = 2;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 528, 2);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-646L));
      assertNotNull(long1);
      assertEquals((-646L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(2190L);
      assertNotNull(long2);
      assertEquals(2190L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((-646L));
      assertNotNull(long3);
      assertEquals((-646L), (long)long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      try { 
        Long.valueOf("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3, 788);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 788);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, (-1423.9224F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1423.9224F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) 788);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {788.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'1', '5'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 2456.118098890453, 16);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '1';
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ArrayUtils.shift(byteArray0, (int) (byte)12);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '5';
      intArray0[1] = (int) '1';
      intArray0[2] = 3;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      Integer integer0 = new Integer(689);
      assertNotNull(integer0);
      assertEquals(689, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(689, object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1168;
      ArrayUtils.reverse(intArray0, (int) (byte)2, 721);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-1333));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      assertArrayEquals(new int[] {(-1333), 1168}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      assertArrayEquals(new int[] {(-1333), 1168}, intArray2);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-1333);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1335.8252F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1333.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1333.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray3 = ArrayUtils.removeElement(intArray2, (-1213));
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      assertArrayEquals(new int[] {1168}, intArray0);
      assertArrayEquals(new int[] {(-1333), 1168}, intArray2);
      assertArrayEquals(new int[] {(-1333), 1168}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 13.475788584241434, (-803), (double) (-803));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.shift(intArray0, (-2175));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      intArray0[3] = 1284;
      intArray0[4] = (-353);
      ArrayUtils.reverse(intArray0, 1284, (-1200));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 1284, 1284, (-353)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(82);
      assertNotNull(integer0);
      assertEquals(82, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      assertEquals(11, object0);
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integer0.equals((Object)int0));
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 11, (-1200));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = (-423);
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-423));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-423), 2145, (-423), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-423), (-423), 2145, (-423), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 101.0F;
      floatArray0[2] = (-1262.0F);
      floatArray0[3] = (float) 2845;
      floatArray0[4] = (float) (-423);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 2145;
      ArrayUtils.shift(floatArray0, 2845);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2845.0F, (-423.0F), 0.0F, 0.0F, 2145.0F, 0.0F, 101.0F, (-1262.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      float[] floatArray0 = new float[33];
      ArrayUtils.shift(floatArray0, 115);
      assertEquals(33, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      char[] charArray0 = new char[11];
      ArrayUtils.shift(charArray0, (-390));
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-4925));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1325), 56, 56);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 56;
      longArray0[1] = (long) 56;
      longArray0[2] = 3255L;
      longArray0[3] = (long) 56;
      longArray0[4] = (long) 56;
      longArray0[5] = (long) 56;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1325));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1325, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'e';
      intArray0[1] = (-905);
      intArray0[2] = 2;
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, 0L, 2L, 2L, 101L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray1, (-905));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', ')', 'e', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-1540));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, (float) 0L);
      assertNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-331), (-3628));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 36);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {36.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (-58L);
      longArray1[4] = (-1086L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-58L), (-1086L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-7261);
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-7261L)}, longArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-669.676241966);
      doubleArray0[1] = (-1085.39);
      byte byte0 = (byte)82;
      Byte byte1 = new Byte((byte)82);
      assertNotNull(byte1);
      assertEquals((byte)82, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)82);
      assertNotNull(byte2);
      assertEquals((byte)82, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(2078L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = 1813;
      intArray0[3] = (int) (byte)82;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {82, 1813, 82, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-669.676241966), (-1085.39)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) 82;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {82L, 82L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray0, (-1559));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 82;
      floatArray0[1] = (float) (-1559);
      floatArray0[2] = (float) 82;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) 5;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) (byte)0;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)0;
      floatArray1[1] = (float) 1813;
      floatArray1[2] = (float) 1813;
      floatArray1[3] = (float) 1813;
      floatArray1[4] = (float) byte0;
      floatArray1[5] = (float) (byte)0;
      float[] floatArray2 = ArrayUtils.insert(5, floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertEquals(15, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 1813.0F, 1813.0F, 1813.0F, 82.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {82.0F, (-1559.0F), 82.0F, 0.0F, 5.0F, 82.0F, 5.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 6;
      floatArray0[5] = (float) 6;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 6;
      floatArray0[8] = (-101.74069F);
      float[] floatArray1 = ArrayUtils.insert(6, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 1.0F, 6.0F, (-101.74069F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'I';
      boolean boolean1 = ArrayUtils.contains(intArray0, 73);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {73}, intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean0);
      
      byte byte0 = (byte)4;
      int int0 = 3286;
      int int1 = 2223;
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      ArrayUtils.reverse(charArray0, 0, 1780);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-124), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -124, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-423);
      longArray0[1] = (long) (-423);
      longArray0[2] = (long) (-423);
      longArray0[3] = (long) (-423);
      longArray0[4] = (long) (-423);
      longArray0[5] = (long) (-423);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-423L), (-423L), (-423L), (-423L), (-423L), (-423L)}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-423L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-423L), (-423L), (-423L), (-423L), (-423L), (-423L)}, longArray0);
      assertArrayEquals(new long[] {(-423L), (-423L), (-423L), (-423L), (-423L), (-423L), (-423L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-423L);
      objectArray0[1] = (Object) (-423L);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-423L);
      objectArray0[4] = (Object) (-423L);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (-423L);
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-423L);
      objectArray1[1] = (Object) (-423L);
      Object object1 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object1);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals((-423L), object1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[2] = object1;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(3, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(boolean1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 70;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2147054161);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 527);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1, 0, 0, 70, 1, 1, (-2147054161)}, intArray0);
      assertArrayEquals(new int[] {527, 1, 0, 0, 70, 1, 1, (-2147054161)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer1 = new Integer(70);
      assertNotNull(integer1);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '@', 5);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      byteArray0[0] = (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[3] = 751;
      intArray0[5] = (int) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 751, 0, 2}, intArray0);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)2;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[6] = 0.0;
      ArrayUtils.shift(doubleArray0, 2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 751.0, 0.0, 2.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)2, (-2891.63952653));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2891.63952653), 0.0, 2.0, 751.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2.0, 751.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = ArrayUtils.insert((-695), intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2, 2, 0, 751, 0, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 0, 751, 0, 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '`';
      charArray0[2] = 'a';
      charArray0[3] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'*', '`', 'a', '*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-41));
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      int int1 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-306));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3214.4104F);
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (-3013.293723002341);
      doubleArray0[7] = (double) int1;
      doubleArray0[8] = (double) int1;
      ArrayUtils.shift(doubleArray0, (-2));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.0), (-2.0), (-1.0), (-2.0), (-3013.293723002341), (-2.0), (-2.0), (-3214.410400390625), 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2);
      longArray0[1] = (long) int1;
      longArray0[2] = (long) int1;
      boolean boolean0 = ArrayUtils.contains(intArray0, int1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2L), (-2L), (-2L)}, longArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.reverse((double[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-76);
      longArray0[1] = (-497L);
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte) (-76);
      longArray0[4] = (long) (byte) (-76);
      longArray0[5] = 0L;
      longArray0[6] = (long) (byte) (-76);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-76L), (-497L), 0L, (-76L), (-76L), 0L, (-76L)}, longArray0);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-497L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-76L), (-497L), 0L, (-76L), (-76L), 0L, (-76L)}, longArray0);
      assertArrayEquals(new long[] {(-76L), (-497L), 0L, (-76L), (-76L), 0L, (-76L), (-497L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 2147483619;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 2147483619;
      longArray0[4] = (long) 2147483619;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483619L, (-1L), 2147483619L, 2147483619L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      ArrayUtils.shift((Object[]) shortArray0, 6);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("|h!", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 1319L);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)90;
      doubleArray0[1] = (double) (byte)90;
      doubleArray0[2] = (double) (byte)90;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (-3311.1400492831));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', (-344));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'a';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) doubleArray1, (-2));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      ArrayUtils.shift((Object[]) shortArray0, 205);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2298.5354F;
      floatArray0[1] = (float) (byte)7;
      floatArray0[2] = (float) (byte)7;
      ArrayUtils.reverse(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {7.0F, 7.0F, 2298.5354F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)7;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = object0;
      ArrayUtils.shift(objectArray0, (-1118), 2, 2120640102);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      ArrayUtils.shift((Object[]) shortArray0, (-26));
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean[] booleanArray4 = ArrayUtils.insert(3, booleanArray1, booleanArray3);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertEquals(10, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6), 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      ArrayUtils.shift(objectArray0, (-1726));
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      ArrayUtils.shift((Object[]) shortArray0, 6);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(45);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-3628), 0, 0, 0, 0, 0, 45}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = 220.60742598;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (byte)3;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 220.60742598, 0.0, 3.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 1, (-4), (-1128));
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (byte)2);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1855);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 8);
      Integer[] integerArray0 = new Integer[10];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1));
      assertEquals(10, integerArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "VDgWa6<QwpW/|#`G");
      assertNotNull(stringArray0);
      assertEquals(10, integerArray0.length);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-124);
      byteArray0[4] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-121);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-2919.74F), (int) (short)0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte) (-121);
      intArray0[2] = (int) (byte) (-121);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 160);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {160, 2, (-121), (-121)}, intArray1);
      assertArrayEquals(new int[] {2, (-121), (-121)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2, (int) (short)2);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2, (-121), (-121)}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-885));
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 11);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift((byte[]) null, 11, 11, 43);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      int[] intArray0 = new int[2];
      intArray0[0] = (-223);
      intArray0[1] = 1100;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)79);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-223), 1100}, intArray0);
      assertArrayEquals(new int[] {79, (-223), 1100}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2796), (-223));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-223), 1100}, intArray0);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1100, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (int) (byte)45);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)84, (byte)45}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (int) (byte)84;
      intArray1[2] = (int) (byte)84;
      intArray1[3] = (int) (byte)98;
      intArray1[4] = (int) (byte)84;
      int int2 = ArrayUtils.lastIndexOf(intArray1, (-19));
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1), 84, 84, 98, 84}, intArray1);
      assertEquals((-1), int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      ArrayUtils.shift((char[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1284;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 64, (-1));
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[2] = (-1190.1768F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {194.0F, 751.0F, (-1190.1768F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ')');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2, 2);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-686), 2);
      assertNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-48), (int) (byte)3);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 100, 100);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)49);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1333);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2145929297), 2146759614);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1333L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1333L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788}, intArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 788, 788);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.add(intArray0, (int) (short)0);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {788, 0}, intArray2);
      assertArrayEquals(new int[] {788}, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 788;
      longArray0[4] = (long) 788;
      long[] longArray1 = ArrayUtils.add(longArray0, 917L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L, 917L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(shortArray1, (-1235), 788, 0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, (-1235));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L, 917L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 788, 715);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 788L, 0L, 788L, 917L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(45);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-3628), 0, 0, 0, 0, 0, 45}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-1782L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-1782L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte)3;
      ArrayUtils.shift(shortArray0, (int) (short)3, (-1624), 0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-85), (short) (-85), (short)3}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-3628), 10);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 101, 302);
      assertNotNull(longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray3, (-1L), 4);
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 12);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      
      ArrayUtils.reverse((float[]) null, 12, 12);
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'A';
      charArray0[2] = 'l';
      charArray0[3] = 'M';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'A', 'l', 'M'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)46;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, 5627);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-93), (byte) (-119), (byte)37, (byte)46}, byteArray0);
      assertEquals(4, int0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)1;
      intArray1[1] = (int) (byte)1;
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, 1}, intArray1);
      assertTrue(boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1443L));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)37;
      floatArray0[1] = (-24.8074F);
      floatArray0[2] = 527.3F;
      floatArray0[3] = (float) (byte) (-119);
      floatArray0[4] = (float) (byte)46;
      floatArray0[5] = (float) (byte) (-119);
      floatArray0[6] = (-906.38196F);
      ArrayUtils.reverse(floatArray0, (int) (byte)1, 102);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {37.0F, (-906.38196F), (-119.0F), 46.0F, (-119.0F), 527.3F, (-24.8074F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1668.889004;
      doubleArray0[1] = 2.145930193E9;
      doubleArray0[2] = (-720.310503);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1668.889004, 1416.8712971537377);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1668.889004, 2.145930193E9, (-720.310503)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 356.411764552);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1668.889004, 2.145930193E9, (-720.310503)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1668.889004, 2.145930193E9, (-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2667);
      assertNotNull(integer0);
      assertEquals(2667, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3166));
      assertNotNull(integer1);
      assertEquals((-3166), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = ']';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)45, (byte)4, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)45, (byte)4, (byte)4}, byteArray1);
      
      ArrayUtils.shuffle(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)4, (byte)4, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 2919, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2146);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2146)}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-123);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)87, (byte) (-123)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)87, (byte) (-123)}, byteArray0);
      
      ArrayUtils.shuffle(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)87, (byte) (-123), (byte)45}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)87, (byte) (-123), (byte)45}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.shift(charArray0, (-2146509707));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-124);
      byteArray0[4] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-56);
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int0 = (-1948);
      ArrayUtils.reverse(charArray0, 2223, (-1948));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'H'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)79, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 110);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[0] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)1;
      ArrayUtils.shift(floatArray0, (int) (short)0, 411, (-2455));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte)1;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, (-2190), 4815);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2190, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-669.676241966);
      doubleArray0[1] = (-1085.39);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1085.39), 1813, 1.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-669.676241966), (-1085.39)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1813;
      ArrayUtils.swap(longArray0, 1, 1);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1813L}, longArray0);
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      Character character0 = Character.valueOf('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-2560L);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2560L), (-2316));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2560.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      int int1 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-344));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-344)}, intArray0);
      
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)90);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), int1);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) (byte)101);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F), (-3214.4104F)}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.145930193E9;
      ArrayUtils.shift((Object[]) null, 127);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-113), (-3217));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2.145930193E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)7);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)7, (byte)7}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1362), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Double double0 = new Double((-393.2968589811));
      assertNotNull(double0);
      assertEquals((-393.2968589811), (double)double0, 0.01);
      
      Double double1 = new Double((-1362));
      assertNotNull(double1);
      assertEquals((-1362.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0F);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(0.0F);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) double0;
      Byte[] byteArray2 = new Byte[8];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)9);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)7);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[5] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[22];
      integerArray0[11] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[3]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(21, integerArray1.length);
      assertEquals(22, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)891, (-3122));
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1064), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)66;
      Byte byte1 = new Byte((byte)66);
      assertNotNull(byte1);
      assertEquals((byte)66, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte)66, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte)66, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte)66, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)42);
      assertNotNull(byte5);
      assertEquals((byte)42, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)11);
      assertNotNull(byte6);
      assertEquals((byte)11, (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-126));
      assertNotNull(byte7);
      assertEquals((byte) (-126), (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[6] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)91);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)66, (byte)42, (byte)11, (byte) (-126)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-64), (-64), (-64));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)3210;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)110);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)3210}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)1, (short)3210}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      intArray0[3] = 1284;
      intArray0[4] = (-353);
      ArrayUtils.reverse(intArray0, 1284, (-1200));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 1284, 1284, (-353)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'R';
      char[] charArray1 = ArrayUtils.insert(1284, charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'z', 'R'}, charArray1);
      assertArrayEquals(new char[] {'z', 'R'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(floatArray0, 2845);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      long[] longArray0 = ArrayUtils.insert((-71), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, object0, (-260));
      assertEquals(2, integerArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-260);
      floatArray0[2] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-260), 27, (-1595));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-260.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 2580L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2580L;
      floatArray0[3] = (float) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2580.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2502.630634;
      doubleArray0[1] = (double) 2580.0F;
      ArrayUtils.shift(doubleArray0, 2713);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2580.0, 2502.630634}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-27), (-1018.542));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)116;
      shortArray0[2] = (short)3380;
      shortArray0[3] = (short)99;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)116, (short)0, (short)3380, (short)99}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MockRandom mockRandom0 = new MockRandom((short)99);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '!';
      charArray0[3] = 'E';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'f', '\u0000', 'E', 'f', 'f', '!'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-905));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)116, (short)0, (short)3380, (short)99}, shortArray0);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(8426.31702098712);
      assertNotNull(float2);
      assertEquals(8426.317F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((double) 0.0F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float2;
      floatArray0[1] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {8426.317F, 0.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)int0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) abstractMap_SimpleImmutableEntry0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) abstractMap_SimpleImmutableEntry0;
      objectArray0[4] = (Object) abstractMap_SimpleImmutableEntry0;
      objectArray0[5] = (Object) integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, '1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-215);
      ArrayUtils.swap(floatArray0, (-215), 3);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-215.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)183;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 183}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 1580.8595707;
      doubleArray0[2] = (double) 183;
      doubleArray0[3] = (double) 183;
      doubleArray0[4] = 3427.601;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short) (-1064);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1580.8595707, 183.0, 183.0, 3427.601, 0.0, (-1064.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 183;
      floatArray0[1] = (float) (short) (-1064);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short)0;
      ArrayUtils.swap(floatArray0, 0, (int) (short)183, (int) (short) (-1064));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {183.0F, (-1064.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-1064);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1064L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1580.8595707, 183.0, 183.0, 3427.601, 0.0, (-1064.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-27));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-27)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-449));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray0));
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1416.8712971537377}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, ':');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap(doubleArray0, (-449), (-1));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1416.8712971537377}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 1903.66F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-2135419132));
      assertNotNull(integer0);
      assertEquals((-2135419132), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(5, integerArray0.length);
      assertEquals((-2135419132), (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-449));
      assertNotNull(integer2);
      assertEquals((-449), (int)integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1954);
      assertNotNull(integer3);
      assertEquals(1954, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals(1954, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1794;
      intArray0[1] = 585;
      ArrayUtils.shift(intArray0, 585);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {585, 1794}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 585, 1, (double) 585);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)32716;
      shortArray0[2] = (short) (-4114);
      shortArray0[3] = (short)81;
      ArrayUtils.shift(shortArray0, 45, (int) (short) (-4114), (int) (short) (-4114));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)32716, (short) (-4114), (short)81}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = 1;
      intArray0[4] = 8;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[2] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 8, 0, 1, 2145, (-423)}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '~';
      charArray0[2] = 't';
      charArray0[3] = '}';
      charArray0[4] = '\"';
      charArray0[5] = 't';
      charArray0[6] = 'Q';
      charArray0[7] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '}', 3839);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'j', '~', 't', '}', '\"', 't', 'Q', 'q'}, charArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      int[] intArray0 = new int[13];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1069, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1069, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, 'e', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'e');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'e';
      intArray0[1] = 101;
      intArray0[2] = 2;
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, 0L, 2L, 2L, 101L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(charArray1, 101);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Integer integer0 = new Integer(1803);
      assertNotNull(integer0);
      assertEquals(1803, (int)integer0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1803;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) integer0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1098));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = ArrayUtils.insert(493, byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1803.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-64));
      assertNotNull(byte0);
      assertEquals((byte) (-64), (byte)byte0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-848.156133449674));
      assertNotNull(double0);
      assertEquals((-848.156133449674), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-64), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-1), 0, (-1));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[0] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-3130);
      int[] intArray0 = new int[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), (-3130.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-3130.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)65;
      byteArray1[7] = (byte)65;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-4008.131019865047);
      doubleArray0[2] = (-3571.65250184);
      doubleArray0[3] = 486.6;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2550.629955834);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4008.131019865047));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, (-4008.131019865047), (-3571.65250184), 486.6, (-1.0), (-2550.629955834)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, (-3571.65250184), 486.6, (-1.0), (-2550.629955834)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-1726.603);
      ArrayUtils.swap(doubleArray0, 1897, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-4705.1143F);
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 4198);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'z';
      charArray0[2] = 'l';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', 'z', 'l', '\\'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-4705.1143F));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '=');
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 120);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) '=';
      doubleArray0[4] = (double) 2682;
      doubleArray0[5] = (double) 'G';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertArrayEquals(new double[] {120.0, 71.0, 45.0, 61.0, 2682.0, 71.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertArrayEquals(new double[] {120.0, 71.0, 45.0, 61.0, 2682.0, 71.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'y');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '-';
      intArray0[1] = 782;
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) 'y';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2682);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {45, 782, 121, 121}, intArray0);
      assertArrayEquals(new int[] {45, 782, 121, 121}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = (double) 45;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {121.0, 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {121.0, 45.0, 121.0, 45.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {45, 782, 121, 121}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (-687), (-856), (-1237));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'X', 'z', 'i', '1', 'r'}, charArray0);
      
      Integer integer0 = new Integer((-54));
      assertNotNull(integer0);
      assertEquals((-54), (int)integer0);
      
      Integer integer1 = new Integer(1712);
      assertNotNull(integer1);
      assertEquals(1712, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(79);
      assertNotNull(integer2);
      assertEquals(79, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'X', 'z', 'i', '1', 'r'}, charArray0);
      assertFalse(boolean0);
      
      ArrayUtils.swap((double[]) null, (-379), 8, 79);
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-379), (byte)63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -379, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      int int0 = 65;
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '#';
      charArray0[3] = 's';
      charArray0[4] = '8';
      ArrayUtils.swap(charArray0, (-181), 65, (-853));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'8', '8', '#', 's', '8'}, charArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(65);
      assertNotNull(integer0);
      assertEquals(65, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(1717);
      assertNotNull(integer2);
      assertEquals(1717, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(65, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[4] = integer3;
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'8', '8', '#', 's', '8'}, charArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 65;
      doubleArray0[2] = (double) 1717;
      doubleArray0[3] = (-695.022);
      doubleArray0[4] = (double) '8';
      doubleArray0[5] = (double) int0;
      ArrayUtils.swap(doubleArray0, 8, (-853), (-181));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 65.0, 1717.0, (-695.022), 56.0, 65.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 99, (byte)63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-1778), 2690, (-1778));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      Integer integer0 = new Integer(1545);
      assertNotNull(integer0);
      assertEquals(1545, (int)integer0);
      
      ArrayUtils.swap((short[]) null, 65, 4, 4);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)242;
      longArray0[1] = (long) (-3130);
      longArray0[2] = 1L;
      longArray0[3] = (long) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-455L));
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {242L, (-3130L), 1L, 2L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)242;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)242;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)242;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)242;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)242, (short)242, (short)2, (short)242, (short)2, (short)242, (short)2, (short)242}, shortArray0);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(7, bitSet1.length());
      assertEquals("{2, 4, 6}", bitSet1.toString());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        bitSet1.set((-3333), 116, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -3333
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-73), charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-73);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1178));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-73)}, shortArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)2, (-4077), 1350);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 65, (int) (short)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.insert((-1576), charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = ArrayUtils.insert(55, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[21] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(24, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.insert(3, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)108;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)2, (byte)79, (byte)0, (byte) (-8), (byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 985.8251F;
      floatArray0[1] = (float) 788;
      floatArray0[2] = 985.8251F;
      floatArray0[3] = 985.8251F;
      floatArray0[4] = (float) 788;
      floatArray0[5] = (float) 788;
      long[] longArray0 = new long[1];
      longArray0[0] = 917L;
      long[] longArray1 = ArrayUtils.add(longArray0, 917L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {917L}, longArray0);
      assertArrayEquals(new long[] {917L, 917L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)1980;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1473;
      shortArray0[4] = (short) (-927);
      shortArray0[5] = (short)60;
      shortArray0[6] = (short)1722;
      shortArray0[7] = (short) (-2345);
      shortArray0[8] = (short) (-380);
      ArrayUtils.shift(shortArray0, 6, (int) (short) (-927), (int) (short) (-927));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short)1980, (short) (-1), (short)1473, (short) (-927), (short)60, (short)1722, (short) (-2345), (short) (-380)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 2040.6339F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shift(floatArray0, (int) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((byte)119);
      assertNotNull(short3);
      assertEquals((short)119, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = Short.valueOf((short) (-465));
      assertNotNull(short4);
      assertEquals((short) (-465), (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      
      Short short5 = new Short((short) (-1));
      assertNotNull(short5);
      assertEquals((short) (-1), (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      
      Short short6 = new Short((short)2);
      assertNotNull(short6);
      assertEquals((short)2, (short)short6);
      assertTrue(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      
      Short short7 = new Short((short)0);
      assertNotNull(short7);
      assertEquals((short)0, (short)short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2268);
      assertNotNull(short0);
      assertEquals((short)2268, (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 985.8251F;
      floatArray0[1] = (float) 788;
      floatArray0[3] = 985.8251F;
      floatArray0[4] = (float) 788;
      floatArray0[5] = (float) 788;
      floatArray0[6] = (float) 788;
      floatArray0[7] = (float) 3;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {985.8251F, 788.0F, 0.0F, 985.8251F, 788.0F, 788.0F, 788.0F, 3.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Short[] shortArray0 = new Short[7];
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      short short2 = (short)3;
      Short short3 = new Short((short)3);
      assertNotNull(short3);
      assertEquals((short)3, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      
      shortArray0[1] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertEquals((short)2, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short0 == short2);
      
      shortArray0[2] = short4;
      Short short5 = new Short((short)2948);
      assertNotNull(short5);
      assertEquals((short)2948, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      
      shortArray0[3] = short5;
      Short short6 = new Short((short)3);
      assertNotNull(short6);
      assertEquals((short)3, (short)short6);
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      
      shortArray0[4] = short6;
      Short short7 = new Short((short) shortArray0[3]);
      assertNotNull(short7);
      assertEquals(7, shortArray0.length);
      assertEquals((short)2948, (short)short7);
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      
      shortArray0[5] = short7;
      Short short8 = new Short(short2);
      assertNotNull(short8);
      assertEquals((short)3, (short)short8);
      assertFalse(short2 == short0);
      assertTrue(short8.equals((Object)short6));
      assertTrue(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short7));
      
      shortArray0[6] = short8;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertNotNull(objectArray0);
      assertSame(shortArray0, objectArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray1, objectArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Integer integer0 = new Integer(1837);
      assertNotNull(integer0);
      assertEquals(1837, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1837, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.swap(floatArray0, (-2145929302), 133, 16);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      intArray0[0] = (-1333);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1837;
      doubleArray0[3] = (double) (-1333);
      doubleArray0[4] = (double) (-1333);
      doubleArray0[5] = (double) 1837;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 1837.0, (-1333.0), (-1333.0), 1837.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1334), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1334, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(13, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      Integer integer0 = new Integer((-2193));
      assertNotNull(integer0);
      assertEquals((-2193), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, (-1719), 16, (-64));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1719);
      floatArray0[1] = (float) (-1719);
      ArrayUtils.swap(floatArray0, 122, 0, (-1260));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1719.0F), (-1719.0F)}, floatArray0, 0.01F);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2193);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2193.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4043, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4043, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 11);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift((char[]) null, 11);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 11;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 11, 76);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray1 = ArrayUtils.insert(11, (double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 788, 788);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.add(intArray0, (-1587));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0, (-1587)}, intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-1587);
      longArray0[2] = (long) 788;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 917L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1587L), 788L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1587L), 788L, 0L, 0L, 917L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(shortArray1, (-1235), 0, 0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-910), 13, (-1));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean[] booleanArray4 = ArrayUtils.insert(3, booleanArray1, booleanArray3);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertEquals(10, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1380.6), 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      ArrayUtils.reverse(booleanArray4, (-2409), 32);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertEquals(10, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray4));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray4));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'd';
      charArray0[2] = 'M';
      charArray0[3] = 'd';
      charArray0[4] = '0';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'t', 'd', 'M', 'd', '0'}, charArray0);
      assertArrayEquals(new char[] {'t', 'd', 'M', 'd', '0'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short)242;
      longArray0[4] = (long) (short)242;
      longArray0[5] = (long) (short)242;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 59L);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 242L, 242L, 242L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      bitSet0.set((int) (short)2, (int) (short)2, true);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 242L, 242L, 242L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, 0, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      ArrayUtils.reverse((int[]) null, 56, (int) (short)1508);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer((-3130));
      assertNotNull(integer1);
      assertEquals((-3130), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-181));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 78);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Object[] objectArray0 = new Object[4];
      Integer integer0 = new Integer(1284);
      assertNotNull(integer0);
      assertEquals(1284, (int)integer0);
      
      objectArray0[3] = (Object) (-819);
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (int) (byte)45);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)84, (byte)45}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (byte) (-56);
      doubleArray0[3] = (double) (-2569);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[6] = (double) (byte)4;
      ArrayUtils.shift(doubleArray0, (-2569), (-750), 2660);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-56.0), (-2569.0), 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-56.0), (-2569.0), 0.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (byte)4;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (-750);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {4.0F, 0.0F, (-750.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '^');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 2919, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2146);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2146)}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = 985.0F;
      floatArray0[3] = (float) 2919;
      floatArray0[4] = (float) (short) (-2146);
      floatArray0[5] = (float) (-1L);
      MockRandom mockRandom0 = new MockRandom(226L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 985.0F, 2919.0F, (-2146.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-2954.586637955616));
      assertNotNull(double0);
      assertEquals((-2954.586637955616), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2954.586637955616)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-1733.0));
      assertNotNull(double3);
      assertEquals((-1733.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(1778.483);
      assertNotNull(double4);
      assertEquals(1778.483, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Double double5 = new Double((-1733.0));
      assertNotNull(double5);
      assertEquals((-1733.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, (-1733.0));
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 4194.689453125);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {4194.689453125}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (-353L);
      longArray0[1] = 672L;
      longArray0[2] = 672L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-353L);
      longArray1[1] = 672L;
      longArray1[2] = (-353L);
      longArray1[3] = (-1L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {672L, (-1L)}, longArray2);
      assertArrayEquals(new long[] {(-353L), 672L, 672L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-353L), 672L, (-353L), (-1L)}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(672L, (-3092), 1);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(longArray2, (Random) mockRandom0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 672L}, longArray2);
      assertArrayEquals(new long[] {(-353L), 672L, 672L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-353L), 672L, (-353L), (-1L)}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      
      int int0 = ArrayUtils.indexOf(charArray0, '9');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) (-1.0);
      Double double0 = new Double(672L);
      assertNotNull(double0);
      assertEquals(672.0, (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) (-1.0);
      doubleArray1[8] = (Double) (-1.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1815.42707525);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 672.0, 0.0, 0.0, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3823.80821);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 672L;
      longArray0[2] = (-1L);
      longArray0[3] = 672L;
      longArray0[4] = 79L;
      longArray0[5] = 672L;
      longArray0[6] = 672L;
      longArray0[7] = (-1L);
      longArray0[8] = 558L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 672L, (-1L), 672L, 79L, 672L, 672L, (-1L), 558L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(4498L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {672L, (-1L), 672L, 79L, 672L, 672L, (-1L), 558L, (-1L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      int int0 = ArrayUtils.indexOf(charArray0, '9');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'9', '9', '9'}, charArray0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) '9';
      intArray0[3] = 0;
      intArray0[4] = (int) '9';
      intArray0[5] = (int) '9';
      intArray0[6] = (int) '9';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 57);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 57, 57, 57}, intArray1);
      assertArrayEquals(new int[] {0, 0, 57, 0, 57, 57, 57}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.swap((long[]) null, 1401, (-1397), (-1397));
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = ArrayUtils.insert(283, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[0] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {45, 45, 1, 1}, intArray0);
      assertArrayEquals(new int[] {45, 45, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 45.0, 45.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      Short short0 = Short.valueOf((short) (-2667));
      assertNotNull(short0);
      assertEquals((short) (-2667), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2682, (-331));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 2040.6339F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[4] = 771L;
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Short[] shortArray1 = new Short[1];
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      shortArray1[0] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)65}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.3626005331291;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-20);
      ArrayUtils.shift(byteArray0, (-1), 1140, (-1444));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-20)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.shift(booleanArray0, (-1493), 2, (-2478));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 788;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(788).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)9;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)11, (byte) (-1), (byte) (-40), (byte)2, (byte) (-99), (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)11, (byte) (-1), (byte) (-40), (byte)2, (byte) (-99), (byte)9}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 788);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 108L;
      longArray0[1] = 111L;
      longArray0[2] = (-1L);
      longArray0[3] = (-2330L);
      longArray0[4] = 1711L;
      longArray0[5] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {108L, 111L, (-1L), (-2330L), 1711L, 1L}, longArray0);
      assertArrayEquals(new long[] {108L, 111L, (-2330L), 1711L, 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2330L);
      doubleArray0[1] = (double) 1711L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 111L;
      doubleArray0[4] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-4640.531942356626));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-4640.531942356626), (-2330.0), 1711.0, 1.0, 111.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2330.0), 1711.0, 1.0, 111.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 709.40674F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 985.8251F;
      floatArray0[1] = (float) 788;
      floatArray0[2] = 985.8251F;
      floatArray0[3] = 985.8251F;
      floatArray0[4] = (float) 788;
      floatArray0[5] = (float) 788;
      floatArray0[6] = (float) 788;
      floatArray0[7] = (float) 3;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {985.8251F, 788.0F, 985.8251F, 985.8251F, 788.0F, 788.0F, 788.0F, 3.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 788;
      longArray0[2] = (long) 788;
      longArray0[3] = 0L;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 788;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 3L, 788L, 788L, 0L, 3L, 788L}, longArray1);
      assertArrayEquals(new long[] {3L, 788L, 788L, 0L, 3L, 788L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      ArrayUtils.shift(byteArray0, 78, 79, 2);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      ArrayUtils.shift(floatArray0, (-736), 11, 1657);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray0);
      assertEquals(3, int0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, 10308.075);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1284;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean2;
      booleanArray1[1] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = '$';
      ArrayUtils.swap(charArray0, 554, (int) (byte) (-92), 554);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'k', 'k', 'S', '$', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65;
      longArray0[1] = (long) 'S';
      longArray0[2] = (long) (byte) (-92);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {65L, 83L, (-92L)}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 130.3350896614529, (int) (byte) (-92), 4138.4661095265);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[0];
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-92));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 7L;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-1169));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1169), (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1169, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'e';
      intArray0[1] = (-905);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (int) ')';
      intArray0[5] = (-1);
      intArray0[6] = (int) ')';
      intArray0[7] = (int) ')';
      intArray0[8] = (-485);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (-223));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {101, (-905), 2, 2, 41, (-1), 41, 41, (-485)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-487), (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -487, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-905), 11);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {11, 11, 1284, 0, 0}, intArray0);
      assertArrayEquals(new int[] {11, 11, 1284, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 11);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'e';
      intArray0[1] = (-905);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (int) ')';
      intArray0[5] = (int) 'e';
      intArray0[6] = (int) ')';
      intArray0[7] = (int) ')';
      intArray0[8] = (-485);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 101, (-223));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {101, (-905), 2, 2, 41, 101, 41, 41, (-485)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-487), (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -487, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)2, (int) (byte)2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1318), (byte) (-52));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1318, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 2580L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2580L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2580.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2502.630634;
      doubleArray0[1] = (double) 2580.0F;
      ArrayUtils.swap(longArray0, Integer.MAX_VALUE, 2713);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 2580L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '\\';
      charArray0[2] = 'y';
      charArray0[3] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'.', '\\', 'y', '8'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) '.';
      intArray0[4] = (int) '\\';
      intArray0[5] = (int) '8';
      intArray0[6] = (int) 'f';
      intArray0[7] = (-1);
      ArrayUtils.swap(intArray0, 92, 1571, (-1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), 56, 46, 46, 92, 56, 102, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      floatArray0[3] = (float) 2682;
      floatArray0[4] = 2119.813F;
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 268, (-852), 268);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 2682.0F, 2119.813F, 121.0F, (-935.92334F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-852);
      intArray0[1] = 2682;
      intArray0[2] = (int) 'y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(intArray0, 2, 121, 268);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-852), 2682, 121, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (byte) (-92));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-92L)}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (-49L), 11);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'u', (int) (byte) (-92));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      char[] charArray0 = new char[0];
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[4] = '\'';
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '\'';
      intArray0[1] = (int) '\'';
      intArray0[2] = (int) '`';
      intArray0[3] = (int) '\'';
      intArray0[4] = (-2465);
      intArray0[5] = (int) '\'';
      intArray0[6] = (int) '\'';
      intArray0[7] = (int) 'U';
      intArray0[8] = (int) '\'';
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {39, 85, 39, 39, (-2465), 39, 96, 39, 39}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, 0, (-649));
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      ArrayUtils.reverse(byteArray0, (-1), (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)117, (byte)117}, byteArray0);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)117;
      byteArray1[1] = (Byte) (byte) (-124);
      Byte byte1 = Byte.valueOf((byte)16);
      assertNotNull(byte1);
      assertEquals((byte)16, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[2] = byte1;
      byteArray1[3] = byte0;
      byteArray1[4] = (Byte) (byte)117;
      byteArray1[5] = (Byte) (byte) (-124);
      byteArray1[6] = (Byte) (byte)117;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)3);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-124), (byte)16, (byte)1, (byte)117, (byte) (-124), (byte)117}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)164;
      shortArray0[2] = (short)2731;
      shortArray0[3] = (short) (-24120);
      shortArray0[4] = (short)1575;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)164, (short)2731, (short) (-24120), (short)1575}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)164, (short)2731, (short) (-24120), (short)1575, (short)2, (short)164, (short)2731, (short) (-24120), (short)1575}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)2731;
      intArray0[1] = (int) (short)1575;
      intArray0[2] = (int) (short)2731;
      intArray0[3] = 0;
      intArray0[4] = (-423);
      intArray0[5] = (int) (short)2;
      intArray0[6] = (int) (short) (-24120);
      intArray0[7] = (int) (short)1575;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1575, (-24120), 2, (-423), 0, 2731, 1575, 2731}, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)111;
      ArrayUtils.reverse(byteArray0, (-296), 2);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)9, (byte) (-86), (byte) (-38), (byte)22, (byte) (-37), (byte)111}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2040.6339F;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 2040.6339F;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2040.6339F, 0.0F, 2040.6339F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Short short0 = Short.valueOf((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertTrue(boolean0);
      
      Short short0 = Short.valueOf((short)108);
      assertNotNull(short0);
      assertEquals((short)108, (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)108}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      Float float0 = new Float(17.112588957);
      assertNotNull(float0);
      assertEquals(17.112589F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 2175;
      intArray0[3] = 2175;
      intArray0[4] = 11;
      intArray0[5] = 3593;
      intArray0[6] = (-1);
      ArrayUtils.reverse(intArray0, 0, 2175);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 2175);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 11, 82);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'Y';
      charArray0[2] = '$';
      charArray0[3] = '}';
      charArray0[4] = '\\';
      charArray0[5] = '?';
      charArray0[6] = ' ';
      charArray0[7] = '\'';
      charArray0[8] = '+';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'R', 'Y', '$', '}', '\\', '?', ' ', '\'', '+'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, 106);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'E', '!', 'E', 'E', 'f'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'f';
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {102}, intArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '!';
      floatArray0[1] = (float) 'E';
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 'E';
      floatArray0[4] = (float) 'f';
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) '!';
      floatArray0[7] = (float) (short)0;
      floatArray0[8] = (float) 1L;
      boolean boolean3 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {33.0F, 69.0F, 1.0F, 69.0F, 102.0F, 33.0F, 33.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 851.6868007753336;
      doubleArray0[2] = 2474.0;
      doubleArray0[3] = 2456.118098890453;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2455.935190113207, Integer.MAX_VALUE, (-3086.454265915));
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 851.6868007753336, 2474.0, 2456.118098890453}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)3;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1367);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)15, (short)3}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)15;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (short)3;
      doubleArray2[1] = (double) (short)15;
      doubleArray2[2] = (double) (short)0;
      doubleArray2[3] = (double) 1367;
      doubleArray2[4] = (double) 1367;
      doubleArray2[5] = (double) (short)0;
      doubleArray2[6] = (double) 1421;
      doubleArray2[7] = (double) (short)15;
      double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray2, (double) 1421);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {3.0, 15.0, 0.0, 1367.0, 1367.0, 0.0, 15.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {3.0, 15.0, 0.0, 1367.0, 1367.0, 0.0, 1421.0, 15.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\'', 14);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (byte) (-56);
      longArray0[4] = (long) (byte) (-56);
      longArray0[5] = (long) (byte) (-124);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {2L, (-56L), 0L, 0L, (-56L), (-124L), 0L}, longArray0);
      
      ArrayUtils.shift((Object[]) longArray1, (-1064), (-1064), 2120640102);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {2L, (-56L), 0L, 0L, (-56L), (-124L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-608));
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-423), 2145, 1, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, (-423), 2145, 1, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 2145;
      objectArray0[1] = (Object) (-423);
      objectArray0[2] = (Object) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer1, object1);
      assertFalse(boolean0);
      assertTrue(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-47);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-47));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)1, (byte) (-31), (byte)17, (byte)0, (byte)76, (byte)2, (byte) (-47)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)1, (byte) (-31), (byte)17, (byte)0, (byte)76, (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-2864);
      intArray0[2] = 121;
      intArray0[3] = 1537;
      intArray0[4] = (-2864);
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, (-2864), 121, 1537, (-2864)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-198);
      shortArray0[1] = (short) (-198);
      shortArray0[2] = (short) (-198);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-198), (short) (-198), (short) (-198)}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-198), (-1051), (-2879));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-198), (short) (-198), (short) (-198)}, shortArray0);
      
      ArrayUtils.swap(shortArray0, (-2879), 120, 1945);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-198), (short) (-198), (short) (-198)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(2635.62);
      assertNotNull(float0);
      assertEquals(2635.62F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {2635.62F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 417.62);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, ':', 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2809.77259);
      assertNotNull(float1);
      assertEquals(2809.7727F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(417.62);
      assertNotNull(float3);
      assertEquals(417.62F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) 0L);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1695.94553842));
      assertNotNull(float5);
      assertEquals((-1695.9456F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-2946.0F));
      assertNotNull(float6);
      assertEquals((-2946.0F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(2.145930193E9);
      assertNotNull(float7);
      assertEquals(2.14593024E9F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((-366.940610479326));
      assertNotNull(float8);
      assertEquals((-366.9406F), (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2809.7727F, 0.0F, 417.62F, 0.0F, (-1695.9456F), (-2946.0F), 2.14593024E9F, (-366.9406F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int)  (-90));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = new double[13];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-90);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (byte) (-90);
      doubleArray2[3] = (double) (byte) (-90);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) (byte) (-90);
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-605.0);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      doubleArray0[1] = 3427.601;
      doubleArray0[2] = (double) (-2145929302);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1855.0, 3427.601, (-2.145929302E9)}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, (-2145929302), (-2145929302), 2160);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2160;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2160.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1855.0, 3427.601, (-2.145929302E9)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert(97, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {45, (-3628), 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = 220.60742598;
      doubleArray0[5] = (double) 0L;
      Integer integer0 = new Integer(583);
      assertNotNull(integer0);
      assertEquals(583, (int)integer0);
      
      Integer integer1 = new Integer(583);
      assertNotNull(integer1);
      assertEquals(583, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = ArrayUtils.insert((-523), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 751;
      intArray0[5] = (int) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 751, 2}, intArray0);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 5034;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = 0.0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 2919, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2146);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2146)}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      ArrayUtils.shift(doubleArray0, (-2815), 1833, 1992);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(longArray0, (-1), (-37));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)183;
      ArrayUtils.reverse(intArray0, 848, 54);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 183}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 183}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)183;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-1064);
      ArrayUtils.swap(floatArray0, 2160, (-1201), 1609);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1064.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-235));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-2924));
      assertNull(intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short)99;
      shortArray0[2] = (short)2006;
      shortArray0[3] = (short)3;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)434);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-344), (short)99, (short)2006, (short)3}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      long[] longArray0 = new long[5];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2930.6555F);
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = 1855.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-4086.4111F);
      floatArray0[5] = 836.92F;
      floatArray0[6] = (-1292.0433F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 508.971F;
      ArrayUtils.shift(floatArray0, 13, Integer.MAX_VALUE, 1336);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2930.6555F), (-1575.66F), 1855.0F, (-1.0F), (-4086.4111F), 836.92F, (-1292.0433F), 0.0F, 508.971F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1));
      assertNotNull(shortArray0);
      
      ArrayUtils.swap(shortArray0, (-1147), 810, 1336);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\'';
      int int0 = ArrayUtils.indexOf(intArray0, 191);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {39}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {39}, intArray0);
      assertArrayEquals(new int[] {39}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray1 = Character.toChars(39);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\''}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {39}, intArray0);
      assertTrue(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("EE`ENpTI[");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 97, (-116));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, 97);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {39}, intArray0);
      assertArrayEquals(new int[] {97, 39}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-2282), 122);
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '@';
      charArray0[2] = '}';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2282);
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 64.0, (-2282.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)87, (byte) (-41), (byte) (-17)}, byteArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "";
      stringArray0[2] = "5J`";
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1061.4442860473157));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1061.4442860473157), 0.0, 64.0, (-2282.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 64.0, (-2282.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap((float[]) null, (-1), (-1), (int) (byte) (-76));
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Double double0 = new Double((short) (-7));
      assertNotNull(double0);
      assertEquals((-7.0), (double)double0, 0.01);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray1 = new float[0];
      ArrayUtils.swap(floatArray1, (int) (short) (-7), (int) (short) (-7), (int) (short) (-7));
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'b'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-347);
      ArrayUtils.shift(shortArray0, (-4443), (-1055), 1284);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-347)}, shortArray0);
      
      Integer integer0 = new Integer((short) (-347));
      assertNotNull(integer0);
      assertEquals((-347), (int)integer0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shift((Object[]) null, (int) (short) (-347));
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-347);
      longArray0[1] = (long) (short) (-347);
      longArray0[2] = (long) 1284;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-347L), (-347L), 1284L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1575.66F);
      floatArray0[3] = 836.92F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1575.66F), 836.92F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2530);
      assertNotNull(integer1);
      assertEquals(2530, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2530).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, Integer.MAX_VALUE);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'V';
      Character character0 = Character.valueOf('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('V');
      assertNotNull(character1);
      assertEquals('V', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'V', 'V'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) 2530;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) char0, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (-353);
      floatArray0[2] = (float) (-353);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-353.0F), (-353.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-353.0F), (-353.0F), 0.0F, (-353.0F), (-353.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) 79);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {79L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)113;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)32, (byte)113, (byte) (-46), (byte) (-104), (byte) (-121)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, (int) (byte)36);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1638.04F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?');
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) '?';
      longArray0[5] = (long) (-3628);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '?';
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(5, longArray2.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {63L}, longArray1);
      assertArrayEquals(new long[] {63L, (-1L), (-1L), 63L, (-3628L)}, longArray2);
      assertArrayEquals(new long[] {63L, 63L, (-1L), (-1L), 63L, (-3628L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      
      ArrayUtils.shift(charArray0, (int) (byte)36);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (-353L);
      longArray0[1] = 672L;
      longArray0[2] = 672L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-353L);
      longArray1[1] = 672L;
      longArray1[2] = (-353L);
      longArray1[3] = (-1L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {672L, (-1L)}, longArray2);
      assertArrayEquals(new long[] {(-353L), 672L, 672L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-353L), 672L, (-353L), (-1L)}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray2, (Random) mockRandom0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 672L}, longArray2);
      assertArrayEquals(new long[] {(-353L), 672L, 672L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-353L), 672L, (-353L), (-1L)}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(charArray0, '9');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = 1973.53F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (-1292.0433F);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = 1973.53F;
      floatArray0[7] = 1973.53F;
      floatArray0[8] = (-1292.0433F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1292.0433F), 1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1973.53F, 0.0F, (-1292.0433F), 0.0F, (-1.0F), 1973.53F, 1973.53F, (-1292.0433F)}, floatArray0, 0.01F);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, 1431655765);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 1431655765);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1855;
      longArray0[1] = (long) 1855;
      longArray0[2] = (long) 1855;
      longArray0[3] = (long) 1855;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L}, longArray0);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      byte byte0 = (byte)117;
      byte byte1 = (byte) (-124);
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ArrayUtils.reverse(charArray0, (int) (byte) (-124), (int) (short)79);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1948), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1948, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, 443);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1143), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1143, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.reverse((char[]) null, (int) (byte) (-56), (int) (byte)4);
      char[] charArray0 = ArrayUtils.insert((int) (byte) (-56), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Double double0 = new Double(192.351149381);
      assertNotNull(double0);
      assertEquals(192.351149381, (double)double0, 0.01);
      
      Double double1 = new Double((-941.2487315784));
      assertNotNull(double1);
      assertEquals((-941.2487315784), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((byte)4);
      assertNotNull(double2);
      assertEquals(4.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {192.351149381, 192.351149381}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      ArrayUtils.shuffle(charArray0, (Random) null);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-73));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 512, (int) (short) (-73), 21);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(charArray0, (int) (short)0, (int) (short)0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1648), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1648, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 53, 872);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Long long0 = new Long(53);
      assertNotNull(long0);
      assertEquals(53L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {53L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'z');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(11, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 65, 65, 65);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = 1;
      intArray0[4] = 0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 1, 2145, (-423)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2145929302);
      intArray0[1] = (int) (byte) (-10);
      intArray0[2] = (-2145929302);
      intArray0[3] = (-2145929302);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = (int) (byte) (-10);
      intArray0[6] = 117;
      intArray0[7] = (-1333);
      ArrayUtils.reverse(intArray0, 91, 1773);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302), (-10), (-2145929302), (-2145929302), (-10), (-10), 117, (-1333)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302), (-10), (-2145929302), (-2145929302), (-10), (-10), 117, (-1333)}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), (-10), (-2145929302), (-2145929302), (-10), (-10), 117, (-1333)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2145929302);
      doubleArray0[1] = (double) (-10);
      doubleArray0[2] = (double) (-1333);
      doubleArray0[3] = (-1980.53636249113);
      doubleArray0[4] = (double) (-1333);
      doubleArray0[5] = 2229.264;
      doubleArray0[6] = (double) (-10);
      doubleArray0[7] = 1.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.145929302E9), (-10.0), (-1333.0), (-1980.53636249113), (-1333.0), 2229.264, (-10.0), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", (-2));
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.insert(599, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 599;
      intArray0[1] = 599;
      intArray0[2] = (-1614);
      intArray0[3] = 599;
      intArray0[4] = (-2);
      intArray0[5] = 3680;
      intArray0[6] = 599;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1614);
      intArray1[1] = (-2);
      intArray1[2] = 599;
      intArray1[3] = 3680;
      intArray1[4] = 3680;
      intArray1[5] = 599;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {599, 599}, intArray2);
      assertArrayEquals(new int[] {599, 599, (-1614), 599, (-2), 3680, 599}, intArray0);
      assertArrayEquals(new int[] {(-1614), (-2), 599, 3680, 3680, 599}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Integer integer0 = new Integer(30);
      assertNotNull(integer0);
      assertEquals(30, (int)integer0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 30;
      floatArray0[2] = (float) 30;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)111;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)38;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-23), (byte)1, (byte) (-29), (byte)127, (byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)1, (byte) (-29), (byte)127, (byte)111}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)47;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)36, (byte)85, (byte) (-94), (byte)1, (byte)47}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)47;
      floatArray0[1] = (float) (byte)47;
      floatArray0[2] = (float) (byte)85;
      floatArray0[3] = (float) (byte) (-94);
      floatArray0[4] = (-2889.7F);
      floatArray0[5] = (float) (byte) (-94);
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) (byte)85;
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 1.0F, (-94.0F), (-2889.7F), (-94.0F), 85.0F, 47.0F, 47.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte)85, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Integer integer0 = new Integer(1827);
      assertNotNull(integer0);
      assertEquals(1827, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1827, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1827;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1827.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      Integer integer1 = new Integer((byte) (-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object1);
      assertEquals((-1), object1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)integer0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte) (-1);
      objectArray0[7] = (Object) (byte) (-1);
      objectArray0[8] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte)7, 102, 2120640102);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-1), 0, (-1));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-3130);
      int[] intArray0 = new int[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F), (-1.0F), (-3130.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-3130.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) 0);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F), (-1.0F), (-3130.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), (-1.0F), (-3130.0F), 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 1496.2769F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1496.2769F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Integer integer0 = Integer.valueOf(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(2530);
      assertNotNull(integer1);
      assertEquals(2530, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 902, 9);
      assertNull(booleanArray0);
      
      char char0 = 'V';
      Character character0 = Character.valueOf('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      Character character1 = Character.valueOf('V');
      assertNotNull(character1);
      assertEquals('V', (char)character1);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) char0, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)3;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1367);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)15, (short)3}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)15;
      doubleArray0[1] = (double) (-1);
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-85));
      assertNotNull(byte1);
      assertEquals((byte) (-85), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      Integer integer0 = new Integer(1367);
      assertNotNull(integer0);
      assertEquals(1367, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)3, Integer.MAX_VALUE);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer1 = new Integer((short)0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer1, (int) (short)3);
      assertEquals((-1), int1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 116);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-353L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-353L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 116, 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-353L)}, longArray0);
      assertArrayEquals(new long[] {(-353L)}, longArray1);
      
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, (float) 116);
      assertNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2940);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      byte byte0 = (byte) (-76);
      byte byte1 = (byte)46;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)46);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, 0, 0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-1048), (int) (byte)46, 5881);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1438));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-353);
      longArray0[1] = (long) (-353);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-353);
      longArray0[4] = (long) 79;
      long[] longArray1 = ArrayUtils.add(longArray0, (-1471L));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-353L), (-353L), 0L, (-353L), 79L, (-1471L)}, longArray1);
      assertArrayEquals(new long[] {(-353L), (-353L), 0L, (-353L), 79L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 1303L, 79);
      assertNotNull(bitSet0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-353L), (-353L), 0L, (-353L), 79L, (-1471L)}, longArray1);
      assertArrayEquals(new long[] {(-353L), (-353L), 0L, (-353L), 79L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-72);
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)113, (byte) (-127), (byte)87, (byte) (-121), (byte)6, (byte)32, (byte) (-46), (byte) (-104)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      short short0 = (short)0;
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) short0);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 101);
      assertNull(floatArray1);
      
      char[] charArray1 = Character.toChars((int) (short)0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-93);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)92, (byte)6, (byte) (-93)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)92, (byte)6, (byte) (-93)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shuffle(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 'e');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray1 = Character.toChars((int) (short)0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-93);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)92, (byte)6, (byte) (-93)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)92, (byte)6, (byte) (-93)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shuffle(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2146642538);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertNotNull(byte8);
      assertEquals((byte)0, (byte)byte8);
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertNotNull(byte9);
      assertEquals((byte)0, (byte)byte9);
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte2;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) byte2;
      byteArray0[6] = (Byte) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) byte2;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      ArrayUtils.shift(charArray0, (int) byte2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertFalse(byte2 == byte0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((int) (short)0, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-1726.603);
      ArrayUtils.swap(doubleArray0, 1897, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-4705.1143F);
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 4198);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, int2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'z';
      charArray0[2] = 'l';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', 'z', 'l', '\\'}, charArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1588;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)2066;
      int int3 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1588, (short)0, (short)0, (short)0, (short)0, (short)2066}, shortArray0);
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 17;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {17}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 17;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3288.2013587087;
      doubleArray0[1] = (-4781.901108119453);
      doubleArray0[2] = 2055.58427328;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (-534.67171845115);
      int[] intArray0 = new int[5];
      int int0 = (-1750);
      intArray0[0] = (-1750);
      intArray0[1] = 1506;
      intArray0[2] = 34;
      int int1 = 21;
      intArray0[3] = 21;
      intArray0[4] = 2146966182;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146966182, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1801.97243, (-2997.65257));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1508;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1508.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 196, 0);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 9, (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2295.6685177702093, 1.5);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-4149);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 2040.6339F;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 2040.6339F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-4149.0F), 0.0F, 2040.6339F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-1L);
      longArray0[2] = 111L;
      longArray0[3] = (long) (short)0;
      longArray0[4] = 771L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 111L, 0L, 771L}, longArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-4149.0F), 0.0F, 2040.6339F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(393);
      assertNotNull(integer0);
      assertEquals(393, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("", 97);
      assertNotNull(integer2);
      assertEquals(97, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertNotNull(integer3);
      assertEquals(6, integerArray0.length);
      assertEquals(393, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2393));
      assertNotNull(integer4);
      assertEquals((-2393), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1);
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      boolean boolean3 = ArrayUtils.isSorted(integerArray0);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      ArrayUtils.reverse((boolean[]) null, 1782, 0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)integerArray0[2];
      longArray0[1] = (long) (short)1513;
      longArray0[2] = (long) 1782;
      longArray0[3] = (long) (int)integerArray0[2];
      longArray0[4] = (long) 3;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {788L, 1513L, 1782L, 788L, 3L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      ArrayUtils.reverse((boolean[]) null, (-260), (int) integerArray0[0]);
      assertEquals(2, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte) (-20), 672, 672);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-63));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-63), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -63, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 2040.6339F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (short)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2, 2, (int) (short)0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer(7807);
      assertNotNull(integer0);
      assertEquals(7807, (int)integer0);
      
      Integer integer1 = new Integer((-1017));
      assertNotNull(integer1);
      assertEquals((-1017), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int) 0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'y';
      charArray0[2] = 'o';
      charArray0[3] = 'O';
      ArrayUtils.swap(booleanArray0, (-719), (-719), (int) 'O');
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'I';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {73L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer((-1174));
      assertNotNull(integer0);
      assertEquals((-1174), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-223), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -223, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-56));
      assertNotNull(integer0);
      assertEquals((-56), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer integer1 = new Integer(1651);
      assertNotNull(integer1);
      assertEquals(1651, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 3561, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3561, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'y', (-344));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray1 = Character.toChars((int) 'y');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean("V`rp8fuJN9qX");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      
      boolean[] booleanArray1 = new boolean[0];
      ArrayUtils.reverse(booleanArray1, (-2409), 65);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-104);
      ArrayUtils.shift(byteArray0, (int) (byte) (-10), 1316, 65);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)111, (byte)97, (byte)106, (byte)41, (byte) (-10), (byte) (-113), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)1, (int) (byte) (-92), 5057);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 69, 69, 69);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[3] = '1';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'z';
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) '1';
      floatArray0[4] = (float) 'i';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 771.0F, 2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {122.0F, 0.0F, 0.0F, 49.0F, 105.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)41;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)105, (byte)7, (byte)105, (byte)41, (byte)41}, byteArray1);
      assertArrayEquals(new byte[] {(byte)7, (byte)105, (byte)41}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)36);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      Integer integer1 = new Integer((-2145929302));
      assertNotNull(integer1);
      assertEquals((-2145929302), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)14);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 84);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(788).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)9;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)11, (byte) (-1), (byte) (-40), (byte)2, (byte) (-99), (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)11, (byte) (-1), (byte) (-40), (byte)2, (byte) (-99), (byte)9}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift((boolean[]) null, (-1333), (-1333), (-1333));
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-2940.98));
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-2145929302);
      integerArray0[1] = (Integer) object0;
      integerArray0[2] = (Integer) (-2145929302);
      integerArray0[3] = (Integer) (-2145929302);
      integerArray0[4] = (Integer) object0;
      Integer integer1 = new Integer((int) integerArray0[3]);
      assertNotNull(integer1);
      assertEquals(6, integerArray0.length);
      assertEquals((-2145929302), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      
      integerArray0[5] = integer1;
      Integer integer2 = new Integer((-490));
      assertNotNull(integer2);
      assertEquals((-490), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer2);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)84;
      shortArray0[1] = (short)891;
      shortArray0[2] = (short)891;
      shortArray0[3] = (short)891;
      shortArray0[4] = (short)891;
      shortArray0[5] = (short)891;
      shortArray0[6] = (short)891;
      shortArray0[7] = (short)891;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)891, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)84, (short)891, (short)891, (short)891, (short)891, (short)891, (short)891, (short)891}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (int)integerArray0[2];
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (short)891, (-2.145929302E9));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2.145929302E9)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1812L, (-732));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1665L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1665L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1001;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-2307);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)562;
      shortArray0[5] = (short)58;
      shortArray0[6] = (short) (-3724);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1001, (short)4, (short) (-2307), (short) (-1), (short)562, (short)58, (short) (-3724)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-291), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.insert(1994, intArray1, intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-2282), 122);
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '@';
      charArray0[2] = '}';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2282);
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 64.0, (-2282.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)87, (byte) (-41), (byte) (-17)}, byteArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "";
      stringArray0[2] = "5J`";
      stringArray0[3] = " R\"OP;U2~2F";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)87, (byte) (-41), (byte) (-17)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)87, (byte) (-41), (byte) (-17)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-530);
      intArray0[1] = (int) '}';
      intArray0[2] = (int) (byte)87;
      intArray0[3] = (int) 'B';
      int[] intArray1 = ArrayUtils.insert(5796, intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-530), 125, 87, 66}, intArray0);
      assertArrayEquals(new int[] {(-530), 125, 87, 66}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      Character[] characterArray0 = new Character[14];
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(15, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1740.6282F;
      floatArray0[2] = (-1200.0F);
      floatArray0[3] = 3488.6965F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-2148.5664F), 1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1740.6282F, (-1200.0F), 3488.6965F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      ArrayUtils.shift(byteArray0, 1431655765);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-23);
      floatArray1[1] = (-2148.5664F);
      floatArray1[2] = (float) (-1);
      floatArray1[3] = (float) (byte) (-23);
      floatArray1[4] = (float) (byte) (-23);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(853, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 853, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      float[] floatArray0 = new float[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 45, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 45, 0, 0, 0, 0, 0, 0}, intArray1);
      
      Short short0 = new Short((short) (-225));
      assertNotNull(short0);
      assertEquals((short) (-225), (short)short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (-28078L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-225L), (-225L), (-28078L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray1 = ArrayUtils.insert(2087, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1086);
      floatArray0[1] = (float) (-1086);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1086), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1086, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer((-10));
      assertNotNull(integer0);
      assertEquals((-10), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-10));
      assertNotNull(bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = 479;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 479;
      floatArray0[1] = (float) 479;
      floatArray0[2] = (float) (-10);
      floatArray0[3] = (float) 479;
      floatArray0[4] = (float) (-10);
      floatArray0[5] = (float) (-10);
      floatArray0[6] = (-550.0F);
      floatArray0[7] = (float) 479;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-10), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146956740;
      intArray0[1] = 0;
      intArray0[2] = 751;
      intArray0[3] = 751;
      intArray0[4] = 4633;
      intArray0[5] = 751;
      intArray0[6] = (int) (byte)58;
      intArray0[7] = 751;
      intArray0[8] = 19;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 10, 751);
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2146956740, 0, 751, 751, 4633, 751, 58, 751, 19}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = 1490.0;
      doubleArray0[2] = (double) 2580L;
      doubleArray0[3] = (double) 2146956740;
      doubleArray0[4] = (double) 5034;
      doubleArray0[5] = (double) (-1);
      ArrayUtils.shift(doubleArray0, 2146956740);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5034.0, (-1.0), 751.0, 1490.0, 2580.0, 2.14695674E9}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 4633, (double) 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4633, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = 751;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 116, 751);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5034;
      ArrayUtils.shift(doubleArray0, 751);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {5034.0}, doubleArray0, 0.01);
      
      int int1 = 2206;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2206, (double) (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2206, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray0 = bitSet0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-76);
      shortArray0[1] = (short) (byte) (-76);
      shortArray0[2] = (short) (byte) (-76);
      shortArray0[3] = (short) (byte) (-76);
      shortArray0[4] = (short) (byte) (-76);
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)69);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-5031));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {3640.6921F, (-1575.66F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[15];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-5031);
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(15, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift((double[]) null, (-5031));
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-1), (double) (-5031L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 0);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((-1932), integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = '!';
      charArray0[6] = 'd';
      ArrayUtils.swap(charArray0, (-853), (-853), 86);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\'', '`', 'p', 'U', '\'', '!', 'd', '\u0000', '\u0000'}, charArray0);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer integer1 = new Integer((-757));
      assertNotNull(integer1);
      assertEquals((-757), (int)integer1);
      
      Integer integer2 = new Integer(120);
      assertNotNull(integer2);
      assertEquals(120, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer((-181));
      assertNotNull(integer4);
      assertEquals((-181), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer(5092);
      assertNotNull(integer5);
      assertEquals(5092, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(43, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      MockRandom mockRandom0 = new MockRandom((-353));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 79;
      intArray0[1] = 79;
      intArray0[2] = 79;
      intArray0[3] = (-353);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {79, 79, (-353), 79}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2138646265);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2138646265, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1123.877));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'e';
      intArray0[1] = (int) 'e';
      intArray0[2] = (int) 'e';
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {101, 101, 101, 1204}, intArray0);
      assertArrayEquals(new int[] {101, 101, 101, 1204}, intArray1);
      
      short short0 = (short)0;
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) short0);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 477.2F);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      assertNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-201), 2212);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)98;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1204, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      float[] floatArray0 = new float[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 45, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 45, 0, 0, 0, 0, 0, 0}, intArray1);
      
      Short short0 = new Short((short) (-225));
      assertNotNull(short0);
      assertEquals((short) (-225), (short)short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-225), (short) (-225), (short) (-225)}, shortArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(3, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) shortArray0[1]);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (float) 45);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 45, (int) shortArray0[0]);
      assertNull(charArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)557);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(502L);
      assertNotNull(doubleStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      Short short0 = new Short((short)90);
      assertNotNull(short0);
      assertEquals((short)90, (short)short0);
      
      Short short1 = new Short((short)90);
      assertNotNull(short1);
      assertEquals((short)90, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      short[] shortArray2 = ArrayUtils.toPrimitive((Short[]) null, (short) (-2589));
      assertNull(shortArray2);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (short)1);
      assertNull(floatArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 1L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 1L);
      assertNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 101, Integer.MAX_VALUE);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, (-1L), 2L, 2L, 101L, 101L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 2L;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-367.06);
      doubleArray0[4] = (double) 'e';
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 101L;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, (-1.0), 101.0, (-367.06), 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(2L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, (-1L), 2L, 2L, 101L, 101L, (-1L), (-1L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int1 = ArrayUtils.indexOf(charArray1, ')');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertEquals(8, int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1627);
      shortArray0[1] = (short)1828;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-3146));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3763.118F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-2946);
      floatArray0[3] = (float) (-3146);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (short) (-2946);
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, 1855.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'V';
      charArray0[2] = 'P';
      charArray0[3] = 'G';
      charArray0[4] = '0';
      charArray0[5] = '5';
      charArray0[6] = '.';
      charArray0[7] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {')', 'V', 'P', 'G', '0', '5', '.', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (-2864);
      intArray0[1] = (-4514);
      intArray0[2] = 7;
      intArray0[3] = (-2864);
      intArray0[4] = 64;
      int int0 = ArrayUtils.indexOf(intArray0, 0, Integer.MAX_VALUE);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2864), (-4514), 7, (-2864), 64}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 1.0);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 7;
      longArray0[1] = 109L;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) (-4514);
      longArray0[4] = (long) 7;
      longArray0[5] = (long) (-2864);
      longArray0[6] = (long) (-4514);
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-4514));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {7L, 109L, 7L, (-4514L), 7L, (-2864L), (-4514L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-4514L), 7L, 109L, 7L, (-4514L), 7L, (-2864L), (-4514L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 30.0;
      doubleArray0[1] = (-973.43537);
      doubleArray0[2] = 30.0;
      doubleArray0[3] = (-1992.2994);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1282.0160164284);
      doubleArray0[6] = (-1291.0);
      doubleArray0[7] = 1.5;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {30.0, (-973.43537), 30.0, (-1992.2994), 0.0, (-1282.0160164284), (-1291.0), 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {30.0, (-973.43537), 30.0, (-1992.2994), 0.0, (-1282.0160164284), (-1291.0), 1.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-5031));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {3640.6921F, (-1575.66F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-5031);
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-5031L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-5031L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 1338);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'E', '!', 'E', 'E', 'f'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-11);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -11, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      int int0 = (-3628);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3628));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[3] = '?';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '?', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-3628));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-3628L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-3628), (-3628));
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-3628);
      doubleArray0[2] = (double) '?';
      doubleArray0[3] = (double) (-3628);
      doubleArray0[4] = (double) '?';
      doubleArray0[5] = (double) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3628), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3628, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-44));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)64;
      byteArray0[3] = (byte)45;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-44);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)64, (int) (byte)64);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)67, (byte)45, (byte)0, (byte) (-67), (byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (-2869.5553));
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2869.5553)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      Integer integer0 = new Integer((-3598));
      assertNotNull(integer0);
      assertEquals((-3598), (int)integer0);
      
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, 0, 389, Integer.MAX_VALUE);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertArrayEquals(new char[] {'u', 'u'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, 1284, 1284, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 1284;
      intArray0[1] = (-353);
      intArray0[2] = (-353);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1284, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2320.75400307);
      assertNotNull(double0);
      assertEquals(2320.75400307, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((double[]) null, (-1274), 0, 0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = new Integer(1100);
      assertEquals(1100, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)804;
      shortArray0[1] = (short)804;
      Short short0 = new Short((short)804);
      assertNotNull(short0);
      assertEquals((short)804, (short)short0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (int) (short)804);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      intArray0[1] = (-105);
      intArray0[2] = 11;
      intArray0[4] = 3593;
      intArray0[5] = 71;
      intArray0[6] = 3593;
      ArrayUtils.reverse(intArray0, 15, 3993);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {15, (-105), 11, 0, 3593, 71, 3593, 0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1733));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1733, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short) (-3085));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'b');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = new Byte((byte)119);
      assertEquals((byte)119, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (byte)119;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, 119}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (byte)119, 0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'Z';
      charArray0[3] = '\"';
      charArray0[4] = 'k';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'R', 'R', 'Z', '\"', 'k'}, charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'Z', '\"', 'k'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (-3004.1719F);
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) 119;
      floatArray0[5] = (float) 119;
      floatArray0[6] = (float) 119;
      floatArray0[7] = (float) 0;
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 119.0F, 119.0F, 119.0F, 82.0F, (-3004.1719F), 83.0F, 107.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 43;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3581L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true}, booleanArray0));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3286.963428333426));
      assertNotNull(double0);
      assertEquals((-3286.963428333426), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4715.0008894552);
      assertNotNull(double1);
      assertEquals(4715.0008894552, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-281));
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 751;
      intArray0[5] = (int) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 751, 2}, intArray0);
      assertEquals(6, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 5}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 5034;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = 0.0;
      ArrayUtils.shift(doubleArray0, 2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 5034.0, 751.0, 2.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)2, (-2891.63952653));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 5034.0, 751.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-2891.63952653), 0.0, 2.0, 5034.0, 751.0, 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 751, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 751, 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'n';
      charArray0[2] = 'g';
      charArray0[3] = 'k';
      charArray0[4] = 'y';
      charArray0[5] = 'G';
      charArray0[6] = 'b';
      charArray0[7] = '`';
      charArray0[8] = '3';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'G');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'/', 'n', 'g', 'k', 'y', 'G', 'b', '`', '3'}, charArray0);
      assertArrayEquals(new char[] {'/', 'n', 'g', 'k', 'y', 'b', '`', '3'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 2147197384;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 2147197384);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4138.4661095265);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 999.469071529, 1485);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 1319, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1319, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4149.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3493.529, 900.0396746023);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'U';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 51, 2011);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '%');
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%', 'U'}, charArray0);
      assertEquals(3, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-86.72F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)620;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)620);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)620}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.shift(floatArray1, 21);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1284;
      floatArray0[1] = (float) 1284;
      floatArray0[2] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-431.0F));
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 1284.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer integer0 = Integer.valueOf(1284);
      assertNotNull(integer0);
      assertEquals(1284, (int)integer0);
      
      Integer integer1 = new Integer(19);
      assertNotNull(integer1);
      assertEquals(19, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[23];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(23, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 1);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2682;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 64.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 2141;
      floatArray0[3] = (float) 2141;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 45.0F, (int) (short)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {45.0F, 0.0F, 2141.0F, 2141.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2580L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2580L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2580.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      floatArray1[1] = (float) 1L;
      floatArray1[3] = (float) 1L;
      ArrayUtils.swap(floatArray1, 0, (-215));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 109;
      intArray0[4] = (-215);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 109, 0, (-215)}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 109);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2580.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 109;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 1567.70181;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1567.70181, 1.0, 1.0, 109.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)113;
      Byte byte1 = new Byte((byte)113);
      assertNotNull(byte1);
      assertEquals((byte)113, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)113}, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', 0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) byte0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-412), (int) (short) (-412));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)113}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)7;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short) (-412);
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) (-1280);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 2);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, (-412.0F), (-1.0F), (-1.0F), (-1280.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 7.0F, 0.0F, (-412.0F), (-1.0F), (-1.0F), (-1280.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-3757.0F));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 7.0F, 0.0F, (-412.0F), (-1.0F), (-1.0F), (-1280.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 7.0F, 0.0F, (-412.0F), (-1.0F), (-1.0F), (-1280.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(19, booleanArray0.length);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(19, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(21, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-720.310503));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3876.12250966, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, 0, false);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      boolean[] booleanArray4 = new boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3577, booleanArray4, booleanArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3577, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      byte[] byteArray0 = null;
      byte byte0 = (byte) (-76);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-76);
      shortArray0[1] = (short) (byte) (-76);
      shortArray0[2] = (short) (byte) (-76);
      shortArray0[3] = (short) (byte) (-76);
      shortArray0[4] = (short) (byte) (-76);
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)69);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        bitSet1.get((int) (short) (-76), (-3124));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -76
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)34);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[2] = 492;
      intArray0[3] = 0;
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 349, 0);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-76), (-76), 492, 0}, intArray0);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bitSet1;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (-76);
      objectArray0[3] = (Object) bitSet2;
      objectArray0[4] = (Object) "";
      ArrayUtils.swap(objectArray0, (-181), 5034);
      assertEquals(6, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals("", object0);
      
      Integer integer2 = new Integer(5034);
      assertNotNull(integer2);
      assertEquals(5034, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      ArrayUtils.reverse(intArray0, (-181), (-76));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-76), (-76), 492, 0}, intArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet3 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet3);
      assertNotSame(bitSet3, bitSet1);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, bitSet3.length());
      assertTrue(bitSet3.isEmpty());
      assertEquals(64, bitSet3.size());
      assertEquals("{}", bitSet3.toString());
      assertEquals(0, bitSet3.cardinality());
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 3);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(int1 == int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[21] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(24, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3147));
      assertNotNull(integer0);
      assertEquals((-3147), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-3193));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3193)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-3193);
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) (short) (-3193);
      longArray0[4] = (long) (short) (-3193);
      longArray0[5] = (long) (-3147);
      longArray0[6] = (long) (int)integerArray0[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-3193L), 3L, 3L, (-3193L), (-3193L), (-3147L), (-3147L)}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = '!';
      charArray0[6] = 'd';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) 'p';
      floatArray0[2] = (float) 'd';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 'd';
      floatArray0[5] = (float) 'p';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 112.0F, 100.0F, 33.0F, 100.0F, 112.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 396, (-215));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 112.0F, 100.0F, 33.0F, 100.0F, 112.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) '!';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) '`';
      longArray0[5] = 1104L;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {100L, 112L, 33L, 112L, 96L, 1104L}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '#');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '#', 876);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertArrayEquals(new float[] {3640.6921F, (-1575.66F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      Integer integer0 = new Integer((short)183);
      assertNotNull(integer0);
      assertEquals(183, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'e', (-2021));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, (int) (byte) (-56), (int) (byte) (-56));
      Long long0 = new Long((byte) (-56));
      assertNotNull(long0);
      assertEquals((-56L), (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'v', 1911);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-7499.77424647712);
      doubleArray0[1] = 2569.0;
      doubleArray0[3] = 926.54277451;
      doubleArray0[4] = (-1366.298);
      doubleArray0[5] = 3493.529;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2569.0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-7499.77424647712), 2569.0, 0.0, 926.54277451, (-1366.298), 3493.529}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '0';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'a', '0'}, charArray0);
      assertArrayEquals(new char[] {'a', '0'}, charArray1);
      
      ArrayUtils.shift(doubleArray0, (-2144954219));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3493.529, (-7499.77424647712), 2569.0, 0.0, 926.54277451, (-1366.298)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '0';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, 2031, (-5151.89011606187));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2031, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 63, 63, 63);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-7499.77424647712);
      doubleArray0[1] = 2569.0;
      doubleArray0[2] = 486.50207549;
      doubleArray0[3] = 926.54277451;
      doubleArray0[4] = (-1366.298);
      doubleArray0[5] = 3493.529;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2569.0, 486.50207549);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-7499.77424647712), 2569.0, 486.50207549, 926.54277451, (-1366.298), 3493.529}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'T';
      charArray0[2] = 'n';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'n');
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'#', 'T', 'n'}, charArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'n';
      floatArray0[2] = (float) '#';
      floatArray0[3] = (float) '#';
      floatArray0[4] = (float) '#';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 110.0F, 876);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, 110.0F, 35.0F, 35.0F, 35.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1), 91);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-373.0));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = 3250L;
      int int1 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 91L, (-1L), (-1L), (-1L), 3250L}, longArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 91L, (-1L), (-1L), (-1L), 3250L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 3250L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-1L);
      ArrayUtils.shift(floatArray0, 91, 0, (-1416));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 3250.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)3;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1367);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)15, (short)3}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)15;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {15.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {15.0, (-1.0), 0.0}, doubleArray1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((short)15);
      assertNotNull(integer2);
      assertEquals(15, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Integer integer3 = new Integer(1367);
      assertNotNull(integer3);
      assertEquals(1367, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer(16);
      assertNotNull(integer4);
      assertEquals(16, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer(2097);
      assertNotNull(integer6);
      assertEquals(2097, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer5, integer6);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Integer integer7 = new Integer(2097);
      assertNotNull(integer7);
      assertEquals(2097, (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      
      Integer integer8 = new Integer((short)15);
      assertNotNull(integer8);
      assertEquals(15, (int)integer8);
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer7, integer8);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry5);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer8));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer7));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer7));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer8));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-105);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-105), (int) byte2, (double) (byte) (-105));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-105.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(byte2 == byte0);
      
      long[] longArray0 = new long[6];
      longArray0[2] = (long) byte0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)116;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short) byte0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-408), (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)116, (short)0, (short)0, (short) (-105), (short)116, (short) (-105)}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-516.560159));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.92707525, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, Double.NaN);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.92707525, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.92707525, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2212);
      assertNotNull(bitSet0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 1284);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      short short0 = (short)0;
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, 2212);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1204;
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 2212;
      doubleArray0[5] = (double) '%';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1204.0, 0.0, 51.0, 0.0, 2212.0, 37.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1204.0, 0.0, 51.0, 0.0, 2212.0, 37.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'e');
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(0, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) short0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) short0;
      longArray0[3] = (long) 51;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) '%';
      longArray0[7] = (long) 51;
      longArray0[8] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {6L, 2L, 0L, 51L, 2L, 101L, 37L, 51L, 0L}, longArray1);
      assertArrayEquals(new long[] {6L, 2L, 0L, 51L, 2L, 101L, 37L, 51L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 775;
      intArray0[1] = (-2026);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {775, (-2026)}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 7.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2145929302);
      intArray3[1] = (-1213);
      intArray3[2] = (-2145929302);
      intArray3[3] = (-2145929302);
      intArray3[4] = (-2145929302);
      int[] intArray4 = ArrayUtils.removeElement(intArray3, (-2145929302));
      assertNotNull(intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertEquals(4, intArray4.length);
      assertEquals(5, intArray3.length);
      assertArrayEquals(new int[] {(-1213), (-2145929302), (-2145929302), (-2145929302)}, intArray4);
      assertArrayEquals(new int[] {(-2145929302), (-1213), (-2145929302), (-2145929302), (-2145929302)}, intArray3);
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1259));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1259)}, intArray0);
      
      Long[] longArray0 = new Long[5];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 613L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {613L, 613L, 613L, 613L, 613L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2580L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2580L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2580.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      floatArray1[1] = (float) 1L;
      floatArray1[3] = (float) 1L;
      ArrayUtils.swap(floatArray1, 0, (-215));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 109;
      intArray0[3] = 0;
      intArray0[4] = (-215);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 109, 0, (-215)}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[3]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)0, (-2096), 2163.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1421.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, 1055);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-235));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      Float float0 = new Float(17.112588957);
      assertNotNull(float0);
      assertEquals(17.112589F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 2175;
      intArray0[3] = 2175;
      intArray0[4] = 11;
      intArray0[5] = 3593;
      intArray0[6] = (-1);
      ArrayUtils.reverse(intArray0, 0, 2175);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 2175);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '`';
      charArray0[2] = '@';
      charArray0[3] = 'c';
      charArray0[4] = '(';
      charArray0[5] = '^';
      charArray0[6] = 'L';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '`');
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'m', '`', '@', 'c', '(', '^', 'L'}, charArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2147483646);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 3593, 11, 2175, 2175, (-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (-11));
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-11), (-11), (-3392.420222739));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) (-11));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-11.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-4149.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4418.153), (-1822.0));
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = 1167.52F;
      floatArray0[2] = (-2946.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {3640.6921F, 1167.52F, (-2946.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 1242);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1242}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)91, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (short)0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shift(shortArray0, (int) (short)2, 2, (int) (short)2);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-381), 2145407540, 2145407540);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788}, intArray1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 788, 788);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      
      int[] intArray2 = ArrayUtils.add(intArray0, (-1587));
      assertNotNull(intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {788}, intArray0);
      assertArrayEquals(new int[] {788, (-1587)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-1587);
      longArray0[2] = (long) 788;
      longArray0[3] = (long) 788;
      longArray0[4] = (long) 788;
      long[] longArray1 = ArrayUtils.add(longArray0, 917L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1587L), 788L, 788L, 788L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1587L), 788L, 788L, 788L, 917L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(shortArray1, (-1235), 788, 0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'y', (-344));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray1 = Character.toChars((int) 'y');
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean("V`rp8fuJN9qX");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2409);
      floatArray0[1] = (float) (-344);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2409.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-2409.0F), (-344.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-344.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Integer integer0 = new Integer((-1391));
      assertNotNull(integer0);
      assertEquals((-1391), (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals((-1391), (int)integer1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 116);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 116;
      floatArray0[1] = (float) (-2924);
      floatArray0[2] = (float) (-2924);
      floatArray0[3] = (float) 116;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {116.0F, (-2924.0F), (-2924.0F), 116.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, (-2924.0F), (-2924.0F), 116.0F, 116.0F, (-2924.0F), (-2924.0F), 116.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-2924));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2924L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (-1391), (-101));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2924L)}, longArray1);
      assertArrayEquals(new long[] {(-2924L)}, longArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive((Float[]) null, 116.0F);
      assertNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[0];
      int int0 = (-2569);
      ArrayUtils.shift(doubleArray0, (-1628), (-1628), (-2569));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int1 = 1829;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1829, 835);
      assertNull(intArray0);
      
      int int2 = (-2143078572);
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-2143078572), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2143078572, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shift(byteArray0, (-1458), 63, 63);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Integer integer0 = new Integer((-3598));
      assertNotNull(integer0);
      assertEquals((-3598), (int)integer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      ArrayUtils.shift(byteArray0, 0, 389, (-2147483636));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1458), 63, 63);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1462), 69, (-1462));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'-', '3'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-3207);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3207), (short)1}, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (byte)1, 5034, (int) (byte)1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)3, (byte)1, (byte)69, (byte) (-52), (byte)46, (byte)46, (byte) (-87), (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2580L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'T';
      charArray0[2] = 'l';
      charArray0[3] = 'T';
      char[] charArray1 = ArrayUtils.add(charArray0, 'T');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'l', 'T', 'l', 'T'}, charArray0);
      assertArrayEquals(new char[] {'l', 'T', 'l', 'T', 'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {2580L, 0L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {2580L, 0L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-105));
      assertNotNull(byte0);
      assertEquals((byte) (-105), (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-105);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      ArrayUtils.swap(longArray0, (int) (byte) (-105), (int) (byte) (-105));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Integer integer0 = new Integer((-60));
      assertNotNull(integer0);
      assertEquals((-60), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      char[] charArray0 = new char[9];
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[2] = 8;
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 8);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 91);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {8, 0, 8, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = '!';
      charArray0[6] = 'd';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) 'p';
      floatArray0[2] = (float) 'd';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 'd';
      floatArray0[5] = (float) 'p';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 112.0F, 100.0F, 33.0F, 100.0F, 112.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 396, (-215));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, 112.0F, 100.0F, 33.0F, 100.0F, 112.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) '!';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) '`';
      longArray0[5] = 1104L;
      ArrayUtils.swap(longArray0, 396, 1083);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {100L, 112L, 33L, 112L, 96L, 1104L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\'', '`', 'p', 'U', '\'', '!', 'd', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-119), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[2] = (int) (byte) (-119);
      intArray0[1] = (int) (byte) (-119);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-119);
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-119), 0, 0, (-119), (-1)}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, (-119), 0, 0, (-119), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-119), 0, 0, (-119)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      long[] longArray0 = new long[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-2196L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (-2144758414);
      intArray0[1] = 56;
      intArray0[2] = 1;
      intArray0[3] = (-1916);
      intArray0[4] = 205;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 205, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ArrayUtils.shift(byteArray0, (-1462), 2834, (int) (byte)2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1, 1, (-523));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1468), (-1468), (-1468));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object3);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)128;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-670);
      shortArray0[3] = (short)1828;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-670), (short)1828, (short)128}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)1;
      ArrayUtils.shift(byteArray0, 5034, 2212, 2212);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-87), (byte)82, (byte) (-52), (byte)69, (byte)3, (byte)105, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0, (-373), (-489));
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer(112);
      assertNotNull(integer0);
      assertEquals(112, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-489));
      assertNotNull(long0);
      assertEquals((-489L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals("-489", mutableInt0.toString());
      assertEquals((-489), mutableInt0.intValue());
      assertEquals((-489), (int)mutableInt0.toInteger());
      assertEquals((-489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-489), mutableInt0.shortValue());
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((-489), (int)mutableInt0.getValue());
      assertEquals((-489.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-489L), mutableInt0.longValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-489), int0);
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((short) (-488), mutableInt0.shortValue());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-488", mutableInt0.toString());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-488), (int)integer2);
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((short) (-488), mutableInt0.shortValue());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-488", mutableInt0.toString());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(3049);
      assertNotNull(integer3);
      assertEquals(3049, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = new Integer((-1733));
      assertNotNull(integer4);
      assertEquals((-1733), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      short short0 = (short)0;
      Short[] shortArray0 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) short0);
      assertNull(floatArray0);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 477.2F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      assertNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-201), 2212);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 2212;
      doubleArray0[2] = (double) 477.2F;
      doubleArray0[3] = (double) 'e';
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-1197.154037886486);
      doubleArray0[7] = (double) 2212;
      doubleArray0[8] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2212, 1204, (double) (-201));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 2212.0, 477.20001220703125, 101.0, 2.0, 2.0, (-1197.154037886486), 2212.0, 2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap((Object[]) null, 2146122465, 2146122465);
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(2146122465);
      assertNotNull(long0);
      assertEquals(2146122465L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2146122465);
      assertNotNull(long1);
      assertEquals(2146122465L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[2] = long3;
      Long long4 = new Long(0L);
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long2);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {2146122465L, 2146122465L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[2] = (double) (-1575.66F);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1512.66, (-2721), 660.9731992246665);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.146122465E9, 2.146122465E9, (-1575.6600341796875)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145929302);
      ArrayUtils.reverse(intArray0, (-1333), (-2145929302));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2145929302)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[4] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      floatArray0[3] = 2119.813F;
      floatArray0[4] = 2119.813F;
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 268, (-852), 268);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1170.0F, (-935.92334F), 2119.813F, 2119.813F, 121.0F, (-935.92334F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-852);
      intArray0[1] = 2682;
      intArray0[2] = (int) 'y';
      intArray0[3] = (-581);
      intArray0[4] = (int) 'y';
      intArray0[5] = (-852);
      intArray0[6] = (-852);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-852), 2682, 121, (-581), 121, (-852), (-852)}, intArray1);
      assertArrayEquals(new int[] {(-852), 2682, 121, (-581), 121, (-852), (-852)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-852));
      assertNotNull(integer0);
      assertEquals((-852), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1170.0F, (-935.92334F), 2119.813F, 2119.813F, 121.0F, (-935.92334F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-103), (byte) (-103), (byte) (-1), (byte)43, (byte) (-1)}, byteArray0);
      assertEquals("{3, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) 0;
      objectArray0[4] = (Object) "";
      ArrayUtils.swap(objectArray0, (-181), 5034);
      assertEquals(6, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals("", object0);
      
      Integer integer2 = new Integer(5034);
      assertNotNull(integer2);
      assertEquals(5034, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer2);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2064.354F);
      int int1 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2064.354F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2064.354F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)58, (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 751;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = 751;
      intArray0[3] = (int) (byte)58;
      intArray0[4] = (int) (byte)58;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 4633, 2146956740);
      assertNotNull(bitSet0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {751, 2, 751, 58, 58}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5034;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = Double.NaN;
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, Double.NaN, 5034.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 58, 2163.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)6);
      assertNotNull(byte2);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-1733);
      intArray0[2] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (byte)2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2, (-1733), 2}, intArray0);
      assertArrayEquals(new int[] {2, (-1733)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)2;
      ArrayUtils.swap(longArray0, (-539), 8, (-1551));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1010);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147005942, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147005942, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1), (-1));
      assertNull(integerArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((double[]) null, (-1274), (-1), (-1));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1100);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)804;
      shortArray0[1] = (short)804;
      shortArray0[2] = (short) (-453);
      shortArray0[3] = (short)2897;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)804, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 804, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)2, (int) (byte)2);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)2;
      byteArray0[2] = (byte)2;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(4803, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0, (-373), (-489));
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer(112);
      assertNotNull(integer0);
      assertEquals(112, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-489));
      assertNotNull(long0);
      assertEquals((-489L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals((-489L), mutableInt0.longValue());
      assertEquals("-489", mutableInt0.toString());
      assertEquals((-489), mutableInt0.intValue());
      assertEquals((short) (-489), mutableInt0.shortValue());
      assertEquals((-489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((-489), (int)mutableInt0.toInteger());
      assertEquals((-489), (int)mutableInt0.getValue());
      assertEquals((-489.0F), mutableInt0.floatValue(), 0.01F);
      
      mutableInt0.add((Number) integer1);
      assertEquals((-3490.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3490), (int)mutableInt0.getValue());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals((-3490), (int)mutableInt0.toInteger());
      assertEquals((-3490L), mutableInt0.longValue());
      assertEquals("-3490", mutableInt0.toString());
      assertEquals((-3490.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3490), mutableInt0.intValue());
      assertEquals((short) (-3490), mutableInt0.shortValue());
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-3490), int0);
      assertEquals((short) (-3489), mutableInt0.shortValue());
      assertEquals((-3489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)95, mutableInt0.byteValue());
      assertEquals((-3489), (int)mutableInt0.toInteger());
      assertEquals((-3489), (int)mutableInt0.getValue());
      assertEquals("-3489", mutableInt0.toString());
      assertEquals((-3489), mutableInt0.intValue());
      assertEquals((-3489L), mutableInt0.longValue());
      assertEquals((-3489.0F), mutableInt0.floatValue(), 0.01F);
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-3489), (int)integer2);
      assertEquals((short) (-3489), mutableInt0.shortValue());
      assertEquals((-3489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)95, mutableInt0.byteValue());
      assertEquals((-3489), (int)mutableInt0.toInteger());
      assertEquals((-3489), (int)mutableInt0.getValue());
      assertEquals("-3489", mutableInt0.toString());
      assertEquals((-3489), mutableInt0.intValue());
      assertEquals((-3489L), mutableInt0.longValue());
      assertEquals((-3489.0F), mutableInt0.floatValue(), 0.01F);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer(3049);
      assertNotNull(integer3);
      assertEquals(3049, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-1733));
      assertNotNull(integer4);
      assertEquals((-1733), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = Integer.getInteger((String) null, (-1850));
      assertNotNull(integer5);
      assertEquals((-1850), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      
      Integer integer6 = new Integer((-1326));
      assertNotNull(integer6);
      assertEquals((-1326), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      
      Integer integer7 = new Integer((-1733));
      assertNotNull(integer7);
      assertEquals((-1733), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer4));
      
      Integer integer8 = new Integer((-373));
      assertNotNull(integer8);
      assertEquals((-373), (int)integer8);
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      
      boolean boolean0 = ArrayUtils.isSameType(integer8, integer7);
      assertTrue(boolean0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-3001));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)114;
      shortArray0[1] = (short)2371;
      shortArray0[2] = (short)363;
      shortArray0[3] = (short) (-308);
      shortArray0[4] = (short)202;
      shortArray0[5] = (short) (-3637);
      shortArray0[6] = (short) (-704);
      shortArray0[7] = (short)110;
      shortArray0[8] = (short)1772;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-290);
      shortArray1[1] = (short)202;
      shortArray1[2] = (short)202;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1733), shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1733, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r', 15);
      assertNotSame(charArray0, charArray1);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.shift((Object[]) characterArray0, 15);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1123.877));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', 5007);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1628), (-1628), (-2569));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1628), 51);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!');
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) 1.0F;
      floatArray1[1] = (Float) 1.0F;
      floatArray1[2] = (Float) 1.0F;
      floatArray1[3] = (Float) 1.0F;
      floatArray1[4] = (Float) 1.0F;
      floatArray1[5] = (Float) 1.0F;
      floatArray1[6] = (Float) 1.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 51);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1.0));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '.';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2368), (-2368));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '.', 'U', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '%');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '.', 'U', 'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(782.0F);
      assertNotNull(float1);
      assertEquals(782.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 782.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)242;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)117;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-124), (byte)117, (byte)117, (byte) (-56), (byte) (-56), (byte) (-121), (byte)117, (byte)117}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-124), (byte)117, (byte)117, (byte) (-56), (byte) (-56), (byte) (-121), (byte)117, (byte)117}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals((-1), int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer((-810));
      assertNotNull(integer0);
      assertEquals((-810), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)117;
      floatArray0[1] = (float) (byte)4;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (-2916.106F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 70, (int) (short)242);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {117.0F, 4.0F, 2.0F, (-2916.106F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 50);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, (long) 2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1628), (-1628), (-2569));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1628), 51);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Integer integer0 = new Integer(627);
      assertNotNull(integer0);
      assertEquals(627, (int)integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray1, (Object) integer0, 51);
      assertNotNull(bitSet1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, objectArray1.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-4149);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (-2034.0F);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 2040.6339F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-4149.0F), 0.0F, (-2034.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-1L);
      longArray0[2] = 111L;
      longArray0[3] = (long) (short)0;
      longArray0[4] = 771L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 111L, 0L, 771L}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.insert((int) (short)0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shift(floatArray0, (int) (short) (-4149));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-4149.0F), 0.0F, (-2034.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-2024), (-2024), (-1111));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'y';
      charArray0[2] = 'o';
      charArray0[3] = 'O';
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'O';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      ArrayUtils.swap(booleanArray0, (-719), (-719), (int) characterArray0[0]);
      assertSame(characterArray0, characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0, 114, 24);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'I';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {73L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)65, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4051;
      shortArray0[1] = (short) (-2941);
      shortArray0[2] = (short)53;
      shortArray0[3] = (short)675;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-3085);
      ArrayUtils.shift(shortArray0, Integer.MAX_VALUE);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3085), (short)4051, (short) (-2941), (short)53, (short)675, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1740.6282F;
      floatArray0[1] = 3488.6965F;
      floatArray0[3] = 3488.6965F;
      floatArray0[4] = 1740.6282F;
      floatArray0[5] = 1740.6282F;
      floatArray0[6] = (-1200.0F);
      floatArray0[7] = 3488.6965F;
      floatArray0[8] = 3488.6965F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertArrayEquals(new float[] {1740.6282F, 3488.6965F, 0.0F, 3488.6965F, 1740.6282F, 1740.6282F, (-1200.0F), 3488.6965F, 3488.6965F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("L0u{3~Ty");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertArrayEquals(new float[] {1740.6282F, 3488.6965F, 0.0F, 3488.6965F, 1740.6282F, 1740.6282F, (-1200.0F), 3488.6965F, 3488.6965F}, floatArray0, 0.01F);
      assertFalse(boolean3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 83, 83);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 2124878542, 2124878542);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2124878542, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3550.6F);
      floatArray0[1] = 1740.6282F;
      floatArray0[2] = (-1200.0F);
      float float0 = 3488.6965F;
      floatArray0[3] = 3488.6965F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-3550.6F), 1740.6282F, (-1200.0F), 3488.6965F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3550.6F), 1740.6282F, (-1200.0F), 3488.6965F, (-3550.6F), 1740.6282F, (-1200.0F), 3488.6965F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, Integer.MAX_VALUE, ':');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4149.0);
      doubleArray0[3] = 1416.8712971537377;
      doubleArray0[4] = (-1177.815209);
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-4149.0), 1416.8712971537377, (-1177.815209), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2040.6339F;
      floatArray0[1] = (-964.0F);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2034.0F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2040.6339F, (-964.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-56L);
      longArray0[3] = 0L;
      longArray0[4] = (-56L);
      longArray0[5] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 111L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-56L), 0L, (-56L), (-1L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-105), (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 492;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1582, (int) (byte) (-105));
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {492}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      ArrayUtils.swap(objectArray0, 492, 5034);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 428);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {492}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4149);
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4149), (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-4149));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4149), (short)0}, shortArray0);
      assertEquals(0, int0);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-4149));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-4149);
      floatArray0[1] = (float) (short) (-4149);
      floatArray0[2] = 1164.9F;
      floatArray0[3] = (float) (short) (-4149);
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-4149.0F), (-4149.0F), 1164.9F, (-4149.0F), 0.0F, (-4149.0F), (-4149.0F), 1164.9F, (-4149.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-4149.0F), (-4149.0F), 1164.9F, (-4149.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short)0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 0L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1284);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1284, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2467);
      intArray0[1] = 2145827746;
      intArray0[2] = 5034;
      intArray0[3] = 34;
      intArray0[4] = (-4514);
      intArray0[5] = (-2864);
      int int0 = ArrayUtils.indexOf(intArray0, (-4514), 788);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2467), 2145827746, 5034, 34, (-4514), (-2864)}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'h';
      Character character0 = Character.valueOf('h');
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('h');
      assertNotNull(character1);
      assertEquals('h', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('h', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('h');
      assertNotNull(character3);
      assertEquals('h', (char)character3);
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('A');
      assertNotNull(character4);
      assertEquals('A', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      
      characterArray0[4] = character4;
      Character character5 = new Character('h');
      assertNotNull(character5);
      assertEquals('h', (char)character5);
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      
      characterArray0[5] = character5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4514);
      doubleArray0[1] = (double) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(doubleArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)3}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      int int0 = (-972);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-972));
      assertNotNull(integer0);
      assertEquals((-972), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-972), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -972, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      int[] intArray0 = new int[5];
      intArray0[1] = (-2864);
      Integer integer0 = new Integer(121);
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      Integer integer1 = new Integer((byte)2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) (-2864);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) (-2864);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2864), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2864, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      Double double0 = new Double(5);
      assertNotNull(double0);
      assertEquals(5.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Integer integer0 = new Integer(2919);
      assertNotNull(integer0);
      assertEquals(2919, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2919, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2919, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (byte)2, (int) (byte)2);
      assertNull(intArray0);
      
      Integer integer0 = new Integer(3172);
      assertNotNull(integer0);
      assertEquals(3172, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.insert((int) 2, integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      String string0 = ArrayUtils.toString((Object) integerArray0[1]);
      assertNotNull(string0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals("3172", string0);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[1]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '2';
      ArrayUtils.swap(charArray0, (-2079), 5, (-1954));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2698.209404314);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-2698.209404314), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = 65;
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'C';
      charArray0[2] = '#';
      charArray0[3] = 's';
      charArray0[4] = 'C';
      ArrayUtils.swap(charArray0, (-181), 65, (-853));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'8', 'C', '#', 's', 'C'}, charArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer(65);
      assertNotNull(integer1);
      assertEquals(65, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1717);
      assertNotNull(integer3);
      assertEquals(1717, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals(65, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-853));
      assertNotNull(integer5);
      assertEquals((-853), (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(85, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      ArrayUtils.shift((boolean[]) null, 51, (-1), 35);
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 51);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)122;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)122}, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-3146));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3763.118F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-2946);
      floatArray0[3] = (float) (-3146);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (short) (-2946);
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, 1855.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3763.118F), 0.0F, (-2946.0F), (-3146.0F), (-1.0F), (-2946.0F), 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.shift(booleanArray0, 413, 51, (-2257));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-56L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-56L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)122;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)122}, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      long[] longArray0 = new long[12];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(12, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      intArray0[3] = 1284;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-905), 11);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {11, 11, 1284, 1284, 0}, intArray0);
      assertArrayEquals(new int[] {11, 11, 1284, 1284, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-487), (byte) (-52));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -487, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1259), (-1259));
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[5];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 579L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {579L, 579L, 579L, 579L, 579L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-113), (byte) (-113));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -113, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-7499.77424647712);
      short[] shortArray0 = new short[1];
      short short0 = (short) (-20098);
      shortArray0[0] = (short) (-20098);
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20098)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-20098));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20098)}, shortArray0);
      assertEquals(0, int0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 2885);
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'w';
      charArray0[2] = '0';
      charArray0[3] = 'J';
      charArray0[4] = '6';
      charArray0[5] = 'r';
      charArray0[6] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', 788);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'r', 'w', '0', 'J', '6', 'r', 'S'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Integer integer0 = Integer.getInteger("j]z{uQjrToe<a");
      assertNull(integer0);
      
      Integer integer1 = Integer.getInteger("j]z{uQjrToe<a", 41);
      assertNotNull(integer1);
      assertEquals(41, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer1, "r{9CJ@t+");
      assertNotNull(string0);
      assertEquals("41", string0);
      assertFalse(integer1.equals((Object)int0));
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), 1078);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2000);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)65);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2696));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2696);
      intArray0[1] = (int) (short)65;
      intArray0[2] = (int) (short) (-2696);
      intArray0[3] = (int) (short) (-2696);
      intArray0[4] = (int) (short)65;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 2, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1310;
      intArray0[1] = 2175;
      intArray0[2] = (int) '\'';
      intArray0[3] = 1310;
      intArray0[4] = (int) '\'';
      ArrayUtils.reverse(intArray0, (-3146), (-2145106519));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1310, 2175, 39, 1310, 39}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2145627496);
      floatArray0[1] = (float) 39;
      floatArray0[2] = (float) (-3146);
      floatArray0[3] = (float) '\'';
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 39;
      floatArray0[6] = (float) 2175;
      floatArray0[7] = (float) (-3146);
      floatArray0[8] = (float) 11;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (-4278));
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2.14562752E9F), 39.0F, (-3146.0F), 39.0F, (-1.0F), 39.0F, 2175.0F, (-3146.0F), 11.0F}, floatArray0, 0.01F);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2.14562752E9F), 39.0F, (-3146.0F), 39.0F, (-1.0F), 39.0F, 2175.0F, (-3146.0F), 11.0F}, floatArray0, 0.01F);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.indexOf(floatArray0, 1354.0F);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-30354);
      shortArray0[1] = (short) (-969);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)8;
      shortArray0[7] = (short)8;
      ArrayUtils.swap(shortArray0, (int) (short)8, 4753);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30354), (short) (-969), (short)8, (short)8, (short)8, (short)8, (short)8, (short)8}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, (int) 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[2] = 492;
      intArray0[3] = 0;
      BitSet bitSet2 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76), (int) (byte) (-76));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bitSet1;
      int int0 = bitSet2.previousClearBit(492);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(492, int0);
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (-76);
      objectArray0[3] = (Object) bitSet2;
      objectArray0[4] = (Object) "";
      ArrayUtils.swap(objectArray0, (-181), 5034);
      assertEquals(6, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals("", object0);
      
      Integer integer2 = new Integer(5034);
      assertNotNull(integer2);
      assertEquals(5034, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer2);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 349;
      floatArray0[1] = (float) (-76);
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {349.0F, (-76.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {349.0F, (-76.0F), 0.0F, 349.0F, (-76.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 108L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {108L}, longArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-76);
      integerArray0[1] = (Integer) 492;
      integerArray0[2] = (Integer) (-76);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 1391;
      floatArray0[2] = (float) 3;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {3.0F, 1391.0F, 3.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte) (-92));
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1605, (int) (byte) (-92));
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (int) (byte)1, (byte) (-25));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Integer integer0 = new Integer((-37));
      assertNotNull(integer0);
      assertEquals((-37), (int)integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)59);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)80}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte) (-75);
      intArray0[2] = 1421;
      intArray0[3] = (int) (byte) (-75);
      intArray0[4] = 467;
      intArray0[5] = (int) (short)183;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2146431802);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-75), 1421, (-75), 467, 183}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 467;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-75);
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 926.54277451;
      doubleArray0[1] = 3493.529;
      doubleArray0[2] = 926.54277451;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = 926.54277451;
      doubleArray0[5] = (double) (short) (-4149);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 926.54277451, (-7499.77424647712));
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {926.54277451, 3493.529, 926.54277451, 0.0, 926.54277451, (-4149.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-4149);
      floatArray0[4] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4149.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short) (-4149), (-4523));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, Integer.MAX_VALUE, (byte) (-56));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      floatArray0[4] = 2119.813F;
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 268, (-852), 268);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 2119.813F, 0.0F, (-935.92334F)}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 0.0F, 2119.813F, 0.0F, (-935.92334F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-90);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-90), (byte)0, (byte) (-1), (byte)43, (byte) (-1)}, byteArray0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{3, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-852);
      doubleArray0[1] = (double) (byte)43;
      doubleArray0[2] = (double) 2119.813F;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-358.02101293);
      doubleArray0[5] = (-1482.629476);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte)43, (double) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1170;
      floatArray0[2] = (-935.92334F);
      floatArray0[3] = 2119.813F;
      floatArray0[4] = 2119.813F;
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 268, (-852), 268);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 2119.813F, 2119.813F, 121.0F, (-935.92334F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-852);
      intArray0[1] = 2682;
      intArray0[2] = (int) 'y';
      intArray0[3] = (-581);
      intArray0[4] = (int) 'y';
      intArray0[5] = (-852);
      intArray0[6] = (-852);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-852), 2682, 121, (-581), 121, (-852), (-852)}, intArray1);
      assertArrayEquals(new int[] {(-852), 2682, 121, (-581), 121, (-852), (-852)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-852));
      assertNotNull(integer0);
      assertEquals((-852), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1170.0F, (-935.92334F), 2119.813F, 2119.813F, 121.0F, (-935.92334F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean2);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-90), (byte) (-103), (byte) (-1), (byte)43, (byte) (-1)}, byteArray0);
      assertEquals("{3, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 79);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(36);
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 1734, 1734);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(11, booleanArray0.length);
      assertEquals(10, int0);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(3667);
      assertNotNull(integer1);
      assertEquals(3667, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean0 = ArrayUtils.isEquals(object1, object2);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(boolean0);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, 110);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 110;
      floatArray0[1] = (float) (byte) (-124);
      floatArray0[2] = (float) 110;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1440, (-107));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {110.0F, (-124.0F), 110.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1276));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1276)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)11;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte) (-7), (byte)11, (byte)11, (byte)11}, byteArray1);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11, (byte)11, (byte) (-7), (byte)11, (byte)11, (byte)11}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(559);
      assertNotNull(integer0);
      assertEquals(559, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(2647);
      assertNotNull(integer1);
      assertEquals(2647, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2146431671), (-2146431671));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(20, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      ArrayUtils.reverse(intArray0, (-1333), (-4418));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(20, longArray1.length);
      assertEquals(20, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)117;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-124), (byte)117, (byte)117, (byte) (-56), (byte) (-56), (byte) (-121), (byte)117, (byte)117}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-124), (byte)117, (byte)117, (byte) (-56), (byte) (-56), (byte) (-121), (byte)117, (byte)117}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals((-1), int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Integer integer0 = new Integer((-810));
      assertNotNull(integer0);
      assertEquals((-810), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)117;
      floatArray0[1] = (float) (byte)4;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (-2916.106F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 90, (int) (short)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {117.0F, 4.0F, 2.0F, (-2916.106F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-1477), doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1820L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1820L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.swap(doubleArray0, 2919, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-652));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 770.7);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {770.7, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      
      ArrayUtils.shift(booleanArray1, 3, 788, 788);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 788, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = Character.valueOf(';');
      assertNotNull(character1);
      assertEquals(';', (char)character1);
      
      Character character2 = new Character(';');
      assertNotNull(character2);
      assertEquals(';', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      Character character3 = new Character(';');
      assertNotNull(character3);
      assertEquals(';', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      
      Character character4 = Character.valueOf(';');
      assertNotNull(character4);
      assertEquals(';', (char)character4);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      
      Character[] characterArray0 = new Character[4];
      char char0 = '=';
      Character character5 = Character.valueOf('=');
      assertNotNull(character5);
      assertEquals('=', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      
      characterArray0[0] = character5;
      characterArray0[1] = character3;
      characterArray0[2] = character0;
      characterArray0[3] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils.swap(booleanArray0, (int) (short)2, (-719), (int) (short)242);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse(booleanArray1, (-2598), (int) char0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1593.775F);
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2144954219));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('#');
      assertNotNull(character1);
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('U');
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('\"');
      assertNotNull(character3);
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 2919);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2919, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("V`rp8fuJN9qX");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      
      ArrayUtils.reverse(booleanArray0, 788, 4);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      byte[] byteArray0 = null;
      byte byte0 = (byte) (-76);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-76);
      shortArray0[1] = (short) (byte) (-76);
      shortArray0[2] = (short) (byte) (-76);
      shortArray0[3] = (short) (byte) (-76);
      shortArray0[4] = (short) (byte) (-76);
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)69);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-76), (short) (-76), (short) (-76), (short) (-76), (short) (-76)}, shortArray0);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray1, true, (-3124));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertEquals("{0}", bitSet2.toString());
      assertFalse(bitSet2.isEmpty());
      assertEquals(1, bitSet2.cardinality());
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)11;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-10);
      shortArray0[1] = (short) (byte)11;
      shortArray0[2] = (short) (byte) (-10);
      shortArray0[3] = (short) (byte) (-49);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)79);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-10), (short)11, (short) (-10), (short) (-49)}, shortArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-49));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)5, (byte) (-49), (byte)109, (byte)11, (byte)0}, byteArray0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2, (int) (short)2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 188L);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2L, 2L, 2L, 2L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)2);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 2L;
      ArrayUtils.shift(doubleArray0, 117, (int) (short)2, (int) (short)2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2467);
      intArray0[1] = 2145827746;
      intArray0[3] = 34;
      intArray0[3] = (-2864);
      int int0 = ArrayUtils.indexOf(intArray0, (-4514), 7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2467), 2145827746, 0, (-2864), 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1810;
      shortArray0[1] = (short)349;
      shortArray0[2] = (short) (-2701);
      shortArray0[3] = (short)867;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1810);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1810, (short)349, (short) (-2701), (short)867}, shortArray0);
      assertArrayEquals(new short[] {(short)349, (short) (-2701), (short)867}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2682;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(2682);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom0.nextInt();
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals(0, int0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      MockRandom mockRandom2 = new MockRandom((-2330L));
      assertNotNull(mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      
      int int1 = ArrayUtils.indexOf(charArray0, 'y');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(doubleArray0, 17, 2080);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (-2330L);
      longArray2[1] = (long) 'y';
      longArray2[2] = (-1L);
      longArray2[3] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray2.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {(-2330L), 121L, (-1L), (-1L)}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3188);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-3186);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (int) (short) (-3186));
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-3186L)}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = (-3130);
      int int1 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      int int2 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int3 = 2146305653;
      // Undeclared exception!
      try { 
        bitSet0.set(2146305653, 2145663746, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 2146305653 > toIndex: 2145663746
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, 46);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2859.68F;
      floatArray0[1] = 1520.067F;
      floatArray0[2] = 85.0F;
      floatArray0[3] = 212.7865F;
      floatArray0[4] = (-431.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-721.0F);
      floatArray0[7] = 403.9987F;
      floatArray0[8] = 1692.132F;
      ArrayUtils.shift(floatArray0, 1746);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2859.68F, 1520.067F, 85.0F, 212.7865F, (-431.0F), 1.0F, (-721.0F), 403.9987F, 1692.132F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      ArrayUtils.swap(doubleArray0, 1, 121, 121);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)109);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)109}, byteArray1);
      assertArrayEquals(new byte[] {(byte)109}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1822L), 226L, (-1L)}, longArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 2919, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2146);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2146)}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)117, (byte) (-56)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)117, (byte) (-56)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 788, 32);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2904.223F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2914.9F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2914.9F, (-1279));
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2904.223F, (-1.0F), 2914.9F}, floatArray0, 0.01F);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1631;
      shortArray0[1] = (short) (-2946);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-2946);
      floatArray0[1] = (float) (short)1631;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (short)1631;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) (short)1631;
      floatArray0[7] = (float) (short) (-2946);
      int int1 = ArrayUtils.indexOf(floatArray0, (-2946.0F));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-2946.0F), 1631.0F, (-1.0F), (-1.0F), 1631.0F, (-1.0F), 1631.0F, (-2946.0F)}, floatArray0, 0.01F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-2946);
      floatArray1[1] = (float) (-1);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) (short) (-2946);
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-2946.0F), (-1.0F), 0.0F, 0.0F, 0.0F, (-2946.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-2946.0F), (-1.0F), 0.0F, 0.0F, 0.0F, (-2946.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      ArrayUtils.shift(booleanArray1, 891, (-1), 0);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1631, (short) (-2946), (short)0}, shortArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1256));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-9), (int) (byte) (-9), (double) (byte) (-9));
      assertEquals(17, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1822L);
      doubleArray0[1] = (double) (-1822L);
      doubleArray0[2] = (double) (-1822L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1756.36772251);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1644), (double) (-1822L));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), 0.0, 0.0, (-1756.36772251)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1644));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1709.025998779297);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), 0.0, 0.0, (-1756.36772251)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1));
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1822.0), (-1822.0), (-1822.0), 0.0, 0.0, (-1756.36772251)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals("{3, 4}", bitSet0.toString());
      
      int int2 = 5068;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 5068, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5068, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      int[] intArray0 = new int[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[2] = 1668.889004;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 1668.889004, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 1668.889004, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-720.310503), 1668.889004}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom(1528L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1528L;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      doubleArray2[1] = (double) 1528L;
      ArrayUtils.shuffle(doubleArray2, (Random) mockRandom0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1528.0, 1528.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 't';
      floatArray0[1] = (float) 1528L;
      floatArray0[2] = (float) (-215);
      floatArray0[3] = (float) 3;
      ArrayUtils.swap(floatArray0, 3711, 3);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {116.0F, 1528.0F, (-215.0F), 3.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (short)16);
      assertNotNull(float0);
      assertEquals(16.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {16.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-306));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-3214.4104F)}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)90);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      int int1 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-306));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      
      Float float0 = new Float((double) int1);
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      assertFalse(int1 == int0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-2.0F)}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)101);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-6));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      int int1 = (-2);
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-306));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-306)}, intArray0);
      
      Float float0 = new Float((double) int1);
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      assertFalse(int1 == int0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3214.4104F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-2.0F)}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)90);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-12), (byte) (-12)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-7499.77424647712);
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1310;
      intArray0[1] = (-2145627496);
      intArray0[2] = 1310;
      intArray0[3] = 1310;
      intArray0[4] = 2175;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 2175;
      ArrayUtils.reverse(intArray0, 11, (-1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1310, (-2145627496), 1310, 1310, 2175, (-1), (-1), 2175}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1310;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2658.0F, 2175);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1310.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1310.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(432);
      assertNotNull(integer0);
      assertEquals(432, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 2175;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) 1310;
      integerArray0[4] = (Integer) 1310;
      integerArray0[5] = (Integer) 1310;
      integerArray0[6] = (Integer) 1310;
      Integer integer1 = new Integer((-1201));
      assertNotNull(integer1);
      assertEquals((-1201), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) (-1);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = 3640.6921F;
      floatArray0[2] = (-460.78F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-460.78F);
      doubleArray0[4] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1248.246, (double) (-460.78F));
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-460.7799987792969), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1527;
      intArray0[1] = 1060;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1060, 0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1527, 1060}, intArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)59);
      assertNotNull(byte0);
      assertEquals((byte)59, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)59);
      assertNotNull(byte3);
      assertEquals((byte)59, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-275L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[0]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte2;
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (byte)0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, (-105), 0}, intArray0);
      assertArrayEquals(new int[] {(-105), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) byte2;
      ArrayUtils.swap(longArray0, (int) (byte) (-105), 0, (int) (byte) (-105));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertNotNull(byte8);
      assertEquals((byte)0, (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte7));
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertNotNull(byte9);
      assertEquals((byte)0, (byte)byte9);
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte4));
      
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte2;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-105.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) byte2;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1342L);
      boolean boolean1 = ArrayUtils.contains(longArray0, 11L);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-105L), 0L, (-1342L)}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4149);
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4149), (short)0}, shortArray0);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (-4149));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals((-1), int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray3, false, (int) (short) (-4149));
      assertNotNull(bitSet0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5}, byteArray0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-863));
      assertNotNull(integer0);
      assertEquals((-863), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(711);
      assertNotNull(integer1);
      assertEquals(711, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2144979067), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2144979067, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2569L;
      longArray0[3] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 1363L;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      intArray0[3] = 3341;
      intArray0[4] = (-537);
      intArray0[5] = 48;
      intArray0[6] = 120;
      intArray0[7] = (-1912);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-223));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-2), 45, (-3628), 3341, (-537), 48, 120, (-1912)}, intArray0);
      assertArrayEquals(new int[] {(-223), (-2), 45, (-3628), 3341, (-537), 48, 120, (-1912)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(49, object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 48;
      objectArray0[1] = (Object) (-2);
      objectArray0[2] = (Object) 48;
      objectArray0[3] = (Object) (-2);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-537));
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2), 45, (-3628), 3341, (-537), 48, 120, (-1912)}, intArray0);
      assertTrue(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-85);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-107), (byte) (-94), (byte)90, (byte) (-85)}, byteArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      char[] charArray0 = new char[9];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'L');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'p';
      charArray0[2] = '}';
      charArray0[3] = '=';
      charArray0[5] = 'I';
      charArray0[6] = '%';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ')');
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'.', 'p', '}', '=', '\u0000', 'I', '%'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '(');
      assertNull(charArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '}';
      intArray0[1] = (-1);
      intArray0[2] = (int) '%';
      intArray0[3] = (int) '.';
      intArray0[4] = (int) '.';
      intArray0[5] = (int) 'I';
      ArrayUtils.shift(intArray0, (-3641), 19, 73);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {73, 125, (-1), 37, 46, 46}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short)1925;
      shortArray0[3] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1925, (int) (byte)2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1925, (short)2}, shortArray0);
      assertEquals(2, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      char char0 = 'b';
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      floatArray0[2] = (float) (char)character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'b', 'Y', 'b', 'b', 'b', 'b', 'b'}, charArray0);
      
      ArrayUtils.shift((int[]) null, (int) (short)1925, (int) char0, (int) (byte)2);
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 3, (-1749));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1749);
      doubleArray0[4] = (double) char0;
      doubleArray0[5] = (double) 'Y';
      doubleArray0[6] = (double) (short)2;
      ArrayUtils.swap(doubleArray0, 16, (-1), 2146552257);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {98.0, 3.0, 0.0, (-1749.0), 98.0, 89.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '#');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-500));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2467);
      intArray0[1] = 2145827746;
      intArray0[2] = 5034;
      intArray0[3] = 34;
      intArray0[4] = (-4514);
      intArray0[5] = (-2864);
      int int0 = ArrayUtils.indexOf(intArray0, (-4514), 788);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2467), 2145827746, 5034, 34, (-4514), (-2864)}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'h';
      Character character0 = Character.valueOf('h');
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('h');
      assertNotNull(character1);
      assertEquals('h', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('h', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('h');
      assertNotNull(character3);
      assertEquals('h', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('A');
      assertNotNull(character4);
      assertEquals('A', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      
      characterArray0[4] = character4;
      Character character5 = new Character('h');
      assertNotNull(character5);
      assertEquals('h', (char)character5);
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      
      characterArray0[5] = character5;
      Character character6 = new Character('+');
      assertNotNull(character6);
      assertEquals('+', (char)character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertNotNull(character7);
      assertEquals('h', (char)character7);
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character2));
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'S');
      assertNotNull(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h', 'A', 'h', '+', 'h'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2291;
      shortArray0[2] = (short) (-1935);
      shortArray0[3] = (short) (-15);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2291);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1935), (short) (-15)}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2291, (short) (-1935), (short) (-15)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1314));
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = (-10);
      Integer integer0 = new Integer((-10));
      assertNotNull(integer0);
      assertEquals((-10), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-10));
      assertNotNull(bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1284;
      intArray0[3] = 1284;
      intArray0[4] = (-353);
      ArrayUtils.swap(floatArray0, (-215), (-2427));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Character character0 = Character.valueOf('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '_';
      ArrayUtils.swap(floatArray0, (-1), (-1013));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {95.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-215);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-215.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      float[] floatArray0 = new float[20];
      ArrayUtils.shift(floatArray0, 98);
      assertEquals(20, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.swap(floatArray0, 231, 231);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-3119L));
      assertNotNull(long0);
      assertEquals((-3119L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3119L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3119L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-865L));
      assertNotNull(long1);
      assertEquals((-865L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1515L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-865L), (-1515L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap((Object[]) null, 2146122465, 2146122465);
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(2146122465);
      assertNotNull(long0);
      assertEquals(2146122465L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2146122465);
      assertNotNull(long1);
      assertEquals(2146122465L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[2] = long3;
      Long long4 = new Long(0L);
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long2);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {2146122465L, 2146122465L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false}, booleanArray0));
      assertEquals("{0, 3, 4, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1973.53F;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (-2679.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 901.3943F, 1855);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1973.53F, 113.0F, (-2679.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-18));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      characterArray0[0] = character0;
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-85);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-56), (int) (byte)109);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)5, (byte) (-49), (byte)109, (byte)11, (byte) (-85)}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-10);
      longArray0[1] = (long) (byte) (-49);
      longArray0[2] = (long) (byte)11;
      longArray0[3] = (long) (byte)109;
      longArray0[4] = (-5504L);
      longArray0[5] = (long) (byte) (-85);
      longArray0[6] = (long) (byte)109;
      longArray0[7] = (long) (byte) (-56);
      longArray0[8] = (long) (byte)109;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1130L);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-10L), (-49L), 11L, 109L, (-5504L), (-85L), 109L, (-56L), 109L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '3');
      assertNull(charArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean[] booleanArray4 = ArrayUtils.insert(3, booleanArray1, booleanArray3);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(10, booleanArray4.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray4);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(10, booleanArray4.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(boolean1);
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray4));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-49);
      shortArray0[1] = (short) (-49);
      shortArray0[2] = (short) (-49);
      shortArray0[3] = (short) (-49);
      shortArray0[4] = (short) (-49);
      shortArray0[5] = (short) (-49);
      shortArray0[6] = (short) (-49);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-49), (int) (short) (-49));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-49), (short) (-49), (short) (-49), (short) (-49), (short) (-49), (short) (-49), (short) (-49)}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(booleanArray0, (-2202), (-1), (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[2] = 492;
      intArray0[3] = 0;
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 349, 0);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-76), (-76), 492, 0}, intArray0);
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bitSet1;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (-76);
      objectArray0[3] = (Object) bitSet2;
      objectArray0[4] = (Object) "";
      ArrayUtils.swap(objectArray0, (-181), 5034);
      assertEquals(6, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals("", object0);
      
      Integer integer2 = new Integer(5034);
      assertNotNull(integer2);
      assertEquals(5034, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer2);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2064.354F);
      int int1 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2064.354F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      ArrayUtils.swap(shortArray0, 2, 0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-5504L));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)119;
      shortArray0[1] = (short) (byte)119;
      shortArray0[2] = (short) (byte)119;
      shortArray0[3] = (short) (byte)119;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-49), 14);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)119, (short)119, (short)119, (short)119}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-5504L);
      floatArray0[1] = (float) 119;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-5504.0F), 119.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5504.0F), 119.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)76);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)76}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1513, 788);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1513);
      assertNotNull(integer0);
      assertEquals(1513, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 788;
      integerArray0[2] = (Integer) 788;
      integerArray0[3] = (Integer) 788;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1513);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {(short)1513}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1593.775F);
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2144954219));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '#';
      Character character1 = Character.valueOf('#');
      assertNotNull(character1);
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('U');
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('\"');
      assertNotNull(character3);
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertNotNull(character4);
      assertEquals('#', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertNotNull(character5);
      assertEquals('#', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character3;
      Character character6 = new Character('\\');
      assertNotNull(character6);
      assertEquals('\\', (char)character6);
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      
      characterArray0[6] = character6;
      Character character7 = new Character('R');
      assertNotNull(character7);
      assertEquals('R', (char)character7);
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('\'');
      assertNotNull(character8);
      assertEquals('\'', (char)character8);
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character7));
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (int) character3, 1, 1766);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character8));
      assertFalse(character3.equals((Object)character4));
      assertFalse(character3.equals((Object)character6));
      assertFalse(character3.equals((Object)character7));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)char0));
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-517.7551);
      doubleArray0[1] = (-1349.2);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1349.2), 2871, (-1913.316));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-517.7551), (-1349.2)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1), 2871, (-205));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((boolean[]) null, 0, 344, 0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '}';
      doubleArray0[5] = (double) '}';
      doubleArray0[6] = (double) 'B';
      doubleArray0[7] = (double) '}';
      doubleArray0[8] = (double) '@';
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 125.0, 66.0, 125.0, 125.0, 64.0, 0.0, 0.0, 64.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]5JT";
      stringArray0[1] = "1rguments cannotvboth be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-2803));
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0, (-373), (-489));
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer(112);
      assertNotNull(integer0);
      assertEquals(112, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-489));
      assertNotNull(long0);
      assertEquals((-489L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals("-489", mutableInt0.toString());
      assertEquals((-489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-489.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-489L), mutableInt0.longValue());
      assertEquals((-489), (int)mutableInt0.getValue());
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((-489), (int)mutableInt0.toInteger());
      assertEquals((-489), mutableInt0.intValue());
      assertEquals((short) (-489), mutableInt0.shortValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-489), int0);
      assertEquals((short) (-488), mutableInt0.shortValue());
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-488", mutableInt0.toString());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((byte)24, mutableInt0.byteValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-488), (int)integer2);
      assertEquals((short) (-488), mutableInt0.shortValue());
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-488", mutableInt0.toString());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((byte)24, mutableInt0.byteValue());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer(3049);
      assertNotNull(integer3);
      assertEquals(3049, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = new Integer((-1733));
      assertNotNull(integer4);
      assertEquals((-1733), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = Integer.getInteger((String) null, (-1850));
      assertNotNull(integer5);
      assertEquals((-1850), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer((-1326));
      assertNotNull(integer6);
      assertEquals((-1326), (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      
      Integer integer7 = new Integer((-1733));
      assertNotNull(integer7);
      assertEquals((-1733), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      
      Integer integer8 = new Integer((-373));
      assertNotNull(integer8);
      assertEquals((-373), (int)integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      
      boolean boolean0 = ArrayUtils.isSameType(integer8, integer7);
      assertTrue(boolean0);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-3001));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 3049, 1375, (-1326));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 14L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {14L}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      ArrayUtils.swap(charArray0, 111, 2117, 111);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 57);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      ArrayUtils.shift(intArray0, (-72));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 0;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean[] booleanArray4 = ArrayUtils.insert(3, booleanArray1, booleanArray3);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(10, booleanArray4.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1380.6), 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      ArrayUtils.reverse(booleanArray4, (-2409), 32);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(10, booleanArray4.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray4));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[2] = 492;
      intArray0[3] = 0;
      BitSet bitSet2 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76), (int) (byte) (-76));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bitSet1;
      int int0 = bitSet2.previousClearBit(492);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(492, int0);
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (-76);
      objectArray0[3] = (Object) bitSet2;
      objectArray0[4] = (Object) "";
      ArrayUtils.swap(objectArray0, (-181), 5034);
      assertEquals(6, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals("", object0);
      
      Integer integer2 = new Integer(5034);
      assertNotNull(integer2);
      assertEquals(5034, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer2);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int1);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2064.354F);
      int int2 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2064.354F)}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      ArrayUtils.swap(shortArray0, 2, 0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)8}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, 788, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'p'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1973.53F;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (-2679.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 901.3943F, 1855);
      assertEquals(19, floatArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-2679.0F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertNotNull(objectArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'y';
      charArray0[2] = 'o';
      charArray0[3] = 'O';
      charArray0[4] = 'i';
      charArray0[5] = 'p';
      charArray0[6] = ')';
      charArray0[7] = 'N';
      charArray0[8] = 'T';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'I', 'y', 'o', 'O', 'i', 'p', ')', 'N', 'T'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 4;
      intArray0[2] = (-2034);
      intArray0[3] = 50;
      intArray0[4] = 4;
      intArray0[5] = 2;
      intArray0[6] = (-850);
      intArray0[7] = 0;
      intArray0[8] = 2;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 4, (-2034), 50, 4, 2, (-850), 0, 2}, intArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)53;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)38, (byte)127, (byte)2, (byte) (-4), (byte)57, (byte)9, (byte)53}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-49);
      byteArray0[4] = (byte)109;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-85);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-56), (int) (byte)0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)5, (byte) (-49), (byte)0, (byte)11, (byte) (-85)}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-10);
      longArray0[1] = (long) (byte) (-49);
      longArray0[3] = (long) (byte)109;
      longArray0[4] = (-5504L);
      longArray0[5] = (long) (byte) (-85);
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte) (-56);
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) (byte) (-49));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-10L), (-49L), 0L, 109L, (-5504L), (-85L), 0L, (-56L), 0L}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = Integer.getInteger("9R]>Fz\"y", integer0);
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 38L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-12L));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {38L}, longArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, Float.NaN);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-2.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {38L}, longArray0);
      assertArrayEquals(new long[] {38L, 38L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2034);
      intArray0[1] = 0;
      intArray0[3] = 4;
      intArray0[3] = 0;
      intArray0[4] = 70;
      intArray0[5] = 0;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray1, 2190);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 70;
      objectArray0[1] = (Object) (-2034);
      objectArray0[2] = (Object) 1.5;
      objectArray0[3] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2034);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-2034);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 70;
      longArray0[6] = (long) (-2034);
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertArrayEquals(new long[] {(-2034L), 0L, 0L, (-2034L), 0L, 70L, (-2034L), 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1204;
      intArray1[1] = 1204;
      intArray1[2] = (-423);
      intArray1[3] = 1204;
      intArray1[4] = 11;
      intArray1[5] = 1204;
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotNull(intArray2);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {1204, 1204, (-423), 1204, 11, 1204}, intArray1);
      assertArrayEquals(new int[] {1204, 1204, (-423), 1204, 11, 1204}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 11;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 1204, 13);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray2);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {1204, 1204, (-423), 1204, 11, 1204}, intArray1);
      assertArrayEquals(new int[] {1204, 1204, (-423), 1204, 11, 1204}, intArray2);
      assertFalse(boolean1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 11, (-632));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray3 = ArrayUtils.addFirst(intArray0, 1204);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertEquals(7, intArray3.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1204, 0, 0, 0, 0, 0, 0}, intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-423);
      intArray4[1] = (-423);
      intArray4[2] = 1073741824;
      intArray4[3] = (-423);
      boolean boolean2 = ArrayUtils.isSameLength(intArray4, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertEquals(4, intArray4.length);
      assertArrayEquals(new int[] {(-423), (-423), 1073741824, (-423)}, intArray4);
      assertTrue(boolean2);
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray1);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1204, 1204, (-423), 1204, 11, 1204}, intArray1);
      assertFalse(boolean3);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.swap(floatArray0, 101, (-285));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 771L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) 'e';
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {771L, 2L, 101L, 101L}, longArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'e';
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 2;
      floatArray1[3] = (float) 101;
      floatArray1[4] = (float) 'e';
      floatArray1[5] = (float) 771L;
      floatArray1[6] = (float) 101L;
      floatArray1[7] = (float) 771L;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F, 2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {101.0F, 2.0F, 2.0F, 101.0F, 101.0F, 771.0F, 101.0F, 771.0F}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, 2175, (-1200));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1200), 0, (-1)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '2';
      charArray0[2] = 'X';
      charArray0[3] = 'z';
      charArray0[4] = 'U';
      charArray0[5] = '!';
      charArray0[6] = 'U';
      ArrayUtils.swap(charArray0, (-1830), (-1830));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'e', '2', 'X', 'z', 'U', '!', 'U'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1200);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'U';
      floatArray0[3] = (float) 'X';
      floatArray0[4] = (float) '!';
      floatArray0[5] = (float) 'e';
      floatArray0[6] = (float) 'e';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2859.68F, 3077);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1200.0F), 0.0F, 85.0F, 88.0F, 33.0F, 101.0F, 101.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-2145696400), 1907);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = (-460.78F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 836.92F;
      Float float0 = new Float((-82.9));
      assertNotNull(float0);
      assertEquals((-82.9F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 2175;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 2175;
      intArray0[5] = 2175;
      ArrayUtils.reverse(intArray0, (-1), 1310);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2175, 2175, (-1), (-1), 2175, (-1)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1560);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-92), (int) (short) (-1560));
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1560)}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) (-1540);
      doubleArray0[1] = (double) (-1540);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1540), (-1540.0));
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {(-1540.0), (-1540.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN, Double.NaN);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (-1203.2712294662);
      doubleArray0[2] = (double) '-';
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) '-';
      doubleArray0[5] = (double) '-';
      doubleArray0[6] = (double) '-';
      doubleArray0[7] = (double) '-';
      doubleArray0[8] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 45.0, 45.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {45.0, (-1203.2712294662), 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 1.5}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-5504L));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-2848.2082280191203), 1.5);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Character character1 = new Character('L');
      assertNotNull(character1);
      assertEquals('L', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('b');
      assertNotNull(character2);
      assertEquals('b', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('Q');
      assertNotNull(character3);
      assertEquals('Q', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("ykoFp>e?H[Y|YP4s");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = true;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean0;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1150.8542348701815), (-1150.8542348701815));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      int[] intArray0 = new int[6];
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-688.4F);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(93L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, int0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = 93L;
      longArray0[1] = (long) 0;
      longArray0[2] = 93L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {93L, 93L, 0L, 0L, 0L}, longArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints();
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      double double0 = mockRandom1.nextGaussian();
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0.1, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      doubleArray0[1] = (double) 93L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 93.0}, doubleArray0, 0.01);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {93L, 93L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 93.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1843L), 0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {93L, 93L, 0L, 0L, 0L}, longArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((-2146956739), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2146956739), 1.0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1416.8712971537377;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1034.072, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 3, true);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      boolean[] booleanArray4 = ArrayUtils.insert(3, booleanArray1, booleanArray3);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray4);
      assertEquals(10, booleanArray4.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1380.6), 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1416.8712971537377}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('M');
      assertNotNull(character1);
      assertEquals('M', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('M');
      assertNotNull(character2);
      assertEquals('M', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character1);
      assertNotNull(character3);
      assertEquals('M', (char)character3);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)4;
      Short short1 = new Short((short)4);
      assertNotNull(short1);
      assertEquals((short)4, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)4}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1204;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray0);
      assertArrayEquals(new int[] {2, 101, 2, 1204}, intArray1);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 35.0F);
      assertNull(floatArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) 1204;
      objectArray0[2] = (Object) 'e';
      objectArray0[5] = (Object) shortArray0[0];
      objectArray0[0] = (Object) 1204;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(7, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (-466.22247F));
      assertNull(floatArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-36), 2);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 70;
      intArray0[1] = 70;
      intArray0[2] = 70;
      intArray0[3] = 70;
      intArray0[4] = 0;
      intArray0[5] = 2239;
      intArray0[6] = 70;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {70, 70, 70, 70, 0, 2239, 70}, intArray0);
      assertArrayEquals(new int[] {70, 70, 70, 70, 0, 2239, 70}, intArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2868);
      assertNotNull(short0);
      assertEquals((short)2868, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)54);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2868}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) shortArray0[0]);
      assertNull(floatArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(1, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 127.0F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 70);
      assertNull(floatArray1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = Integer.getInteger("}", 557);
      assertNotNull(integer2);
      assertEquals(557, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Integer integer3 = new Integer(1705);
      assertNotNull(integer3);
      assertEquals(1705, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer3);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      Integer integer4 = new Integer(6);
      assertNotNull(integer4);
      assertEquals(6, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer((short)54);
      assertNotNull(integer5);
      assertEquals(54, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, integer5);
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry8);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(9, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-5424));
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-5424), (short) (-5424), (short) (-5424), (short) (-5424)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)10, (int) (byte)0, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1028.553);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1165.951951;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-749.174865218), 245, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1165.951951}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[2] = 1668.889004;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-720.310503), 1668.889004, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 228.58463F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 917.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {228.58463F, (-1.0F), 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {917.0F, 228.58463F, (-1.0F), 2.0F, 2.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse((int[]) null, (-2475), (-2475));
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 3, 3);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-26.211184F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-457.58F);
      floatArray0[3] = (-4086.4111F);
      floatArray0[4] = (-2148.5664F);
      floatArray0[5] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-26.211184F), 0.0F, (-457.58F), (-4086.4111F), (-2148.5664F), 1.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = true;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-4086.4111F);
      floatArray0[1] = (-2148.5664F);
      floatArray0[2] = (-4086.4111F);
      floatArray0[3] = 901.3943F;
      floatArray0[4] = (-4086.4111F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-457.58F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-4086.4111F), (-2148.5664F), (-4086.4111F), 901.3943F, (-4086.4111F), 0.0F, (-457.58F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 1137;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1137, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 14;
      intArray0[1] = 492;
      intArray0[2] = (int) (byte) (-105);
      intArray0[3] = 1138;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 108, 1);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {14, 492, (-105), 1138}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 1138, 14);
      assertEquals(0, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertSame(object0, object1);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 492;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (-1.0F);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (byte)2);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 492.0F, 2.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 492.0F, 2.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 492.0F, 2.0F, (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((boolean[]) null, 1375, (int) (byte) (-105), 1138);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 836.92F;
      ArrayUtils.shift(floatArray0, (-2144407022), 902, 1336);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 836.92F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      ArrayUtils.swap((short[]) null, (int) (short) (-1), 13, (-1147));
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)34);
      assertNotNull(short0);
      assertEquals((short)34, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)34}, shortArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)34;
      intArray0[1] = (int) (short)34;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {34, 34}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((Object[]) shortArray0, (-1), 34, (int) (short)34);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      int[] intArray0 = new int[23];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1847));
      assertNotNull(bitSet0);
      assertEquals(23, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1847);
      longArray0[1] = 2010L;
      longArray0[2] = (long) (-1847);
      longArray0[3] = (long) (-1847);
      longArray0[4] = (long) (-1847);
      ArrayUtils.swap(longArray0, (-1847), 17, (-1554));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1847L), 2010L, (-1847L), (-1847L), (-1847L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-428);
      intArray0[1] = 2145;
      intArray0[2] = (-12);
      intArray0[4] = 0;
      intArray0[5] = 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-12);
      longArray0[2] = (long) 0;
      ArrayUtils.swap(longArray0, (-3580), 1137, 2145);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-12L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      ArrayUtils.reverse((int[]) null, 3593, (int) (short)2);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2302));
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-847), (int) (short)2);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 78);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3217.864F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F), (-3217.864F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-891);
      longArray0[1] = (long) (-891);
      longArray0[2] = (long) (-891);
      char[] charArray0 = ArrayUtils.insert((-891), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[9];
      int int0 = 1421;
      intArray0[0] = 1421;
      intArray0[1] = (-891);
      intArray0[2] = (-891);
      intArray0[3] = (-891);
      intArray0[4] = (-891);
      intArray0[5] = (-891);
      intArray0[6] = (-891);
      intArray0[7] = (-891);
      intArray0[8] = (-891);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1421, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 82);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 11);
      Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(11, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3207);
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-4683.9F);
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 97, 5);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-4683.9F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-850);
      intArray0[3] = 50;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = (-1);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2, 5143);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-2145929302));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2145929302), 0}, intArray2);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 7.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2145929302);
      intArray3[1] = (-1213);
      intArray3[2] = (-2145929302);
      intArray3[3] = (-2145929302);
      intArray3[4] = (-2145929302);
      int[] intArray4 = ArrayUtils.removeElement(intArray3, (-2145929302));
      assertNotNull(intArray4);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertEquals(4, intArray4.length);
      assertEquals(5, intArray3.length);
      assertArrayEquals(new int[] {(-1213), (-2145929302), (-2145929302), (-2145929302)}, intArray4);
      assertArrayEquals(new int[] {(-2145929302), (-1213), (-2145929302), (-2145929302), (-2145929302)}, intArray3);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      Short short0 = Short.valueOf((short) (-2667));
      assertNotNull(short0);
      assertEquals((short) (-2667), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2682, (-331));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1575.66F);
      floatArray0[3] = 836.92F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1575.66F), 836.92F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(2146216695);
      assertNotNull(integer0);
      assertEquals(2146216695, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2530);
      assertNotNull(integer1);
      assertEquals(2530, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, Integer.MAX_VALUE);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1582;
      intArray0[1] = (int) (byte) (-105);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 65;
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (byte)2;
      intArray0[7] = 3;
      intArray0[8] = (int) (byte) (-105);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1685, 3);
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1582, (-105), (-1), 2, 65, (-1), 2, 3, (-105)}, intArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 4, 3);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer(5034);
      assertNotNull(integer0);
      assertEquals(5034, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(5034, object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) (byte) (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-3166));
      assertNotNull(integer0);
      assertEquals((-3166), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = null;
      integerArray0[7] = null;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[3]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2940);
      assertNotNull(integer0);
      assertEquals(2940, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Integer integer0 = new Integer((-2147118677));
      assertNotNull(integer0);
      assertEquals((-2147118677), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[0]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer1 = new Integer((-2147118677));
      assertNotNull(integer1);
      assertEquals((-2147118677), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray2 = ArrayUtils.addFirst(integerArray1, integer1);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      Float[] floatArray0 = new Float[24];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(24, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      char char0 = 'y';
      int int0 = (-344);
      int int1 = ArrayUtils.indexOf(charArray0, 'y', (-344));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[1];
      int int2 = 65;
      int int3 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = (-460.78F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 836.92F;
      Float float0 = new Float((-82.9));
      assertNotNull(float0);
      assertEquals((-82.9F), (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 0.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'w';
      charArray0[2] = 'z';
      charArray0[3] = ' ';
      charArray0[4] = 'V';
      charArray0[5] = 'e';
      charArray0[6] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';', 51);
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'[', 'w', 'z', ' ', 'V', 'e', 'V'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 'w';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) 'e';
      longArray0[4] = (long) 51;
      longArray0[5] = (long) ';';
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 51);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {119L, 119L, 59L, 101L, 51L, 59L}, longArray0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{4}", bitSet1.toString());
      assertEquals(5, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-59));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-59));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 349;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-59), 1794);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {349L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 349;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (double) 2919;
      ArrayUtils.swap(doubleArray0, 2146396055, (-1500));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {349.0, (-1.0), 104.0, 1.5, 2919.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (-5458.5366F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1822L);
      longArray0[2] = 226L;
      longArray0[3] = (-1L);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2751);
      intArray0[1] = (-2751);
      intArray0[2] = (-1479);
      intArray0[3] = (-2751);
      intArray0[4] = (-2751);
      intArray0[5] = (-537);
      ArrayUtils.swap(intArray0, (-2751), (-537));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2751), (-2751), (-1479), (-2751), (-2751), (-537)}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '~';
      charArray0[2] = '!';
      charArray0[3] = 'Y';
      charArray0[4] = 'u';
      charArray0[5] = 'Y';
      charArray0[6] = 'N';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'!', '~', '!', 'Y', 'u', 'Y', 'N'}, charArray1);
      assertArrayEquals(new char[] {'!', '~', '!', 'Y', 'u', 'Y', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1736L));
      assertEquals((-1), int0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = (-1200);
      intArray0[1] = (-1200);
      intArray0[2] = (-1);
      intArray0[3] = (int) 'e';
      ArrayUtils.reverse(intArray0, 554, (-4997));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1200), (-1200), (-1), 101}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2L, 0L, 2L, 2L, 101L, 0L, 0L}, longArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char[] charArray2 = ArrayUtils.insert((-1), (char[]) null, (char[]) null);
      assertNull(charArray2);
      
      ArrayUtils.shift((float[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      long[] longArray0 = new long[2];
      longArray0[1] = (-1126L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 316);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1126L)}, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-1726.603);
      ArrayUtils.swap(doubleArray0, 1897, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {294.0, (-1726.603)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-4705.1143F);
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 4198);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-4705.1143F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, int2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'z';
      charArray0[2] = 'l';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', 'z', 'l', '\\'}, charArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) byte0;
      longArray1[1] = (long) 'o';
      longArray1[2] = (long) 'o';
      longArray1[3] = (long) 'l';
      longArray1[4] = (long) 'z';
      int int3 = ArrayUtils.lastIndexOf(longArray1, 1694L);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {0L, 111L, 111L, 108L, 122L}, longArray1);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2.0F, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(7, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      assertNotNull(integer0);
      assertEquals(1855, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1855, object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1855;
      longArray0[1] = (long) 1855;
      longArray0[2] = (long) 1855;
      longArray0[3] = (long) 1855;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L}, longArray0);
      assertArrayEquals(new long[] {1855L, 1855L, 1855L, 1855L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1855L;
      objectArray0[1] = (Object) 1855L;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) 1855L;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(6, objectArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2075);
      shortArray0[1] = (short) (-2075);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2075);
      shortArray0[4] = (short) (-2075);
      shortArray0[5] = (short)26519;
      shortArray0[6] = (short) (-2075);
      shortArray0[7] = (short) (-2075);
      shortArray0[8] = (short) (-2075);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)26519);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2075), (short) (-2075), (short)0, (short) (-2075), (short) (-2075), (short)26519, (short) (-2075), (short) (-2075), (short) (-2075)}, shortArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (-613), 43, (-613));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)53;
      shortArray0[5] = (short)675;
      ArrayUtils.shift(shortArray0, (int) (short) (-3085));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)53, (short)2, (short)2, (short)53, (short)675, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-318), 63, (-318));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      short[] shortArray0 = new short[10];
      ArrayUtils.shift(shortArray0, 2, 109, (-510));
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-3085));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-950), (-950), (-950));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = new Short[6];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shift(shortArray0, (int) (short)2);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(shortArray2, (int) (short)2, 0, 0);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4051;
      shortArray0[1] = (short) (-2941);
      shortArray0[2] = (short)53;
      shortArray0[3] = (short)675;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-3085);
      ArrayUtils.shift(shortArray0, (int) (short)53);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2941), (short)53, (short)675, (short)2, (short) (-3085), (short)4051}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte) (-105), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte) (-105);
      doubleArray0[2] = 719.0459412;
      doubleArray0[3] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 1.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-105.0), (-105.0), 719.0459412, 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-105.0), (-105.0), 719.0459412, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-105.0), (-105.0), 719.0459412, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)102);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)103);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)36);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)35, (byte)48, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)35, (byte)48}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-119);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-119));
      assertNotNull(bitSet0);
      assertEquals(18, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(403.9987);
      assertNotNull(float0);
      assertEquals(403.9987F, (float)float0, 0.01F);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotNull(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      ArrayUtils.swap((int[]) null, 102, 102);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      charArray0[4] = 'u';
      charArray0[5] = 'Y';
      Integer integer0 = new Integer((byte)42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)3);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(403.9987);
      assertNotNull(float0);
      assertEquals(403.9987F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotNull(bitSet1);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertNotSame(bitSet0, bitSet1);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      BitSet bitSet2 = ArrayUtils.indexesOf(byteArray0, (byte)42);
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertFalse(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(1, bitSet2.cardinality());
      assertEquals(1, bitSet2.length());
      assertEquals("{0}", bitSet2.toString());
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      
      ArrayUtils.swap((int[]) null, 102, 102);
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'r';
      charArray0[2] = 'u';
      charArray0[3] = 'Y';
      charArray0[4] = '(';
      charArray0[5] = 'Y';
      charArray0[6] = 'u';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'(', 'r', 'u', 'Y', '(', 'Y', 'u'}, charArray1);
      assertArrayEquals(new char[] {'(', 'r', 'u', 'Y', '(', 'Y', 'u'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)50);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)101);
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      long[] longArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = (-1200);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-1200));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1200, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 117);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(741, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 741, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.reverse(objectArray0, 2, 50);
      assertEquals(1, objectArray0.length);
      
      Integer integer0 = new Integer(3278);
      assertNotNull(integer0);
      assertEquals(3278, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long(1750L);
      assertNotNull(long0);
      assertEquals(1750L, (long)long0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertNotNull(mutableInt0);
      assertEquals("-3001", mutableInt0.toString());
      assertEquals((-3001L), mutableInt0.longValue());
      assertEquals((-3001.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3001), mutableInt0.intValue());
      assertEquals((short) (-3001), mutableInt0.shortValue());
      assertEquals((-3001.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3001), (int)mutableInt0.toInteger());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((-3001), (int)mutableInt0.getValue());
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-3001), int0);
      assertEquals((-3000L), mutableInt0.longValue());
      assertEquals((-3000), mutableInt0.intValue());
      assertEquals("-3000", mutableInt0.toString());
      assertEquals((-3000.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-3000), mutableInt0.shortValue());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals((-3000.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3000), (int)mutableInt0.toInteger());
      assertEquals((-3000), (int)mutableInt0.getValue());
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-3000), (int)integer2);
      assertEquals((-3000L), mutableInt0.longValue());
      assertEquals((-3000), mutableInt0.intValue());
      assertEquals("-3000", mutableInt0.toString());
      assertEquals((-3000.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-3000), mutableInt0.shortValue());
      assertEquals((byte)72, mutableInt0.byteValue());
      assertEquals((-3000.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3000), (int)mutableInt0.toInteger());
      assertEquals((-3000), (int)mutableInt0.getValue());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(3278);
      assertNotNull(integer3);
      assertEquals(3278, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(112);
      assertNotNull(integer4);
      assertEquals(112, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray1, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (-791));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1123.87688713));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-105.0), 1813, 1865.5161756115822);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), (-1));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 117);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      assertNotNull(byte1);
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-105), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-105);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4010.35668768819), (int) byte2, (double) (byte) (-105));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-105.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(byte2 == byte0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      ArrayUtils.swap(longArray0, (int) (byte) (-105), (int) (byte) (-105));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-105L), (-105L), 0L, (-105L), (-105L)}, longArray0);
      
      Integer integer0 = new Integer((-60));
      assertNotNull(integer0);
      assertEquals((-60), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-1765), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1765, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 788);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 70, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-720.310503));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3876.12250966, 1319);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, 0, false);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      boolean[] booleanArray4 = new boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3593, booleanArray4, booleanArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3593, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      ArrayUtils.reverse(intArray0, (-1200), 2175);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1200)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double(1284);
      assertNotNull(double0);
      assertEquals(1284.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1284.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1284.0F, 0.0F, 1284.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'h');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'W');
      assertNull(charArray0);
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1284.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1284;
      intArray0[1] = 1284;
      intArray0[2] = (int) 'W';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1284);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1284, 1284, 87}, intArray0);
      assertArrayEquals(new int[] {87}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1284, 1284, 87}, intArray0);
      assertArrayEquals(new int[] {87}, intArray1);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -22, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '^', 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 2, 2, 2);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-119);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3207);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3207)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3207)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-4683.9F);
      floatArray0[2] = 0.0F;
      floatArray0[5] = (float) (short) (-3207);
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3207.0F), 0.0F, 0.0F, 0.0F, (-4683.9F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)87}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)87);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {87.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.reverse((double[]) null);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = ArrayUtils.insert((int) (byte) (-76), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dRij";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-2282), 122);
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '@';
      charArray0[2] = '}';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2282);
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 64.0, (-2282.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)87, (byte) (-41), (byte) (-17)}, byteArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "";
      stringArray0[2] = "]5JT";
      stringArray0[3] = " R\"OP;U2~2F";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(0, int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.swap(longArray0, 888, 2158, 10);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 127;
      intArray0[1] = (-721);
      intArray0[2] = 64;
      intArray0[3] = 1293;
      intArray0[4] = 1855;
      ArrayUtils.swap(intArray0, 127, (-431));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {127, (-721), 64, 1293, 1855}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'u';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) 'u';
      ArrayUtils.swap(longArray0, 128, (-721), (-721));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {64L, 117L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {119, 119, 0, 0, 119, (-1)}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-5504L));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)119;
      shortArray0[1] = (short) (byte)119;
      shortArray0[2] = (short) (byte)119;
      shortArray0[3] = (short) (byte)119;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-49), 14);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)119, (short)119, (short)119, (short)119}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 751;
      intArray0[5] = (int) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 751, 2}, intArray0);
      assertEquals("{2, 3, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) 2;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) 2;
      objectArray0[5] = (Object) 2;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) 751;
      ArrayUtils.swap(objectArray0, 5034, 2146122465);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, object0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3216));
      assertNotNull(integer0);
      assertEquals((-3216), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-105), (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 492;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1582, (int) (byte) (-105));
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {492}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      ArrayUtils.swap(objectArray0, 492, 5034);
      assertEquals(1, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertEquals((byte) (-1), object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 3245.47F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      Integer integer0 = new Integer(38);
      assertNotNull(integer0);
      assertEquals(38, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, 2175, (-1200));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1200), 0, (-1)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1628), (-1628), (-2569));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 0L);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 116);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((Object[]) null, 116, 0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 116, (-2145929302));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 14;
      intArray0[1] = 492;
      intArray0[2] = (int) (byte) (-105);
      intArray0[3] = 1138;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 108, 1);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {14, 492, (-105), 1138}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 1138, 14);
      assertEquals(0, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertSame(object0, object1);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 492;
      floatArray0[2] = (float) (byte)2;
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.swap(charArray0, 1138, 492);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      ArrayUtils.swap(charArray0, (-728), (-728), (-728));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'p'}, charArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-728));
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1382);
      assertNotNull(short0);
      assertEquals((short)1382, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1382}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.reverse(objectArray0, (-373), (-489));
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer(112);
      assertNotNull(integer0);
      assertEquals(112, (int)integer0);
      
      Integer integer1 = new Integer((-3001));
      assertNotNull(integer1);
      assertEquals((-3001), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Long long0 = new Long((-489));
      assertNotNull(long0);
      assertEquals((-489L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertNotNull(mutableInt0);
      assertEquals((short) (-489), mutableInt0.shortValue());
      assertEquals((-489.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-489), (int)mutableInt0.toInteger());
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((-489.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-489), (int)mutableInt0.getValue());
      assertEquals("-489", mutableInt0.toString());
      assertEquals((-489L), mutableInt0.longValue());
      assertEquals((-489), mutableInt0.intValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-489), int0);
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals("-488", mutableInt0.toString());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-488), mutableInt0.shortValue());
      
      Integer integer2 = mutableInt0.toInteger();
      assertNotNull(integer2);
      assertEquals((-488), (int)integer2);
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals((-488), (int)mutableInt0.toInteger());
      assertEquals((-488), (int)mutableInt0.getValue());
      assertEquals((-488.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-488), mutableInt0.intValue());
      assertEquals((-488L), mutableInt0.longValue());
      assertEquals("-488", mutableInt0.toString());
      assertEquals((-488.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-488), mutableInt0.shortValue());
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(3049);
      assertNotNull(integer3);
      assertEquals(3049, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = new Integer((-1733));
      assertNotNull(integer4);
      assertEquals((-1733), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = Integer.getInteger((String) null, (-1850));
      assertNotNull(integer5);
      assertEquals((-1850), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      
      Integer integer6 = new Integer((-1326));
      assertNotNull(integer6);
      assertEquals((-1326), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      
      Integer integer7 = new Integer((-1733));
      assertNotNull(integer7);
      assertEquals((-1733), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      
      Integer integer8 = new Integer((-373));
      assertNotNull(integer8);
      assertEquals((-373), (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.isSameType(integer8, integer7);
      assertTrue(boolean0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)int0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'i';
      charArray0[2] = 'M';
      ArrayUtils.swap(charArray0, (-1733), (-373));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'O', 'i', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1163);
      assertNotNull(integer0);
      assertEquals(1163, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[6];
      short short0 = (short)606;
      Short short1 = new Short((short)606);
      assertNotNull(short1);
      assertEquals((short)606, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)606);
      assertNotNull(short2);
      assertEquals((short)606, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      try { 
        Short.valueOf("Cannot store ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot store \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 1813.92707525;
      doubleArray0[4] = (-1902.47977);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1813.92707525, (-41));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.92707525, 1813.92707525, (-1902.47977)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 228.58463F;
      floatArray0[1] = (float) (-41);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-41);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-41.0F));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {228.58463F, (-41.0F), (-1.0F), (-41.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-41.0F), 228.58463F, (-41.0F), (-1.0F), (-41.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-4095);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      ArrayUtils.reverse(intArray0, 509, (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4095), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 1813.92707525;
      doubleArray0[4] = (-1902.47977);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1813.92707525, (-41));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-516.560159), 0.0, 1813.92707525, 1813.92707525, (-1902.47977)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-41);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1242));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1242), 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(intArray0, (-888), (-888), (-500));
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 349;
      int[] intArray0 = new int[4];
      intArray0[0] = 349;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte) (-76);
      ArrayUtils.swap(intArray0, 0, (-2751));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {349, 0, 0, (-76)}, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'u';
      charArray0[2] = '!';
      charArray0[3] = '~';
      charArray0[4] = '!';
      charArray0[5] = '(';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'u', '!', '~', '!', '('}, charArray1);
      assertArrayEquals(new char[] {'Y', 'u', '!', '~', '!', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[9];
      longArray0[0] = (-382L);
      longArray0[1] = 2425L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      longArray0[7] = 1L;
      longArray0[8] = 0L;
      ArrayUtils.swap(longArray0, (-1351), (-1351), 1073741824);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-382L), 2425L, (-1L), 0L, (-1L), 1L, 1L, 1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (-791));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.shift(booleanArray0, (-353));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-688.4F);
      floatArray0[0] = (-657.3543F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-657.3543F), (-688.4F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, 103);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Double double0 = new Double(527.0);
      assertNotNull(double0);
      assertEquals(527.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-657.3543F), (-688.4F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-657.3543F), (-688.4F), 0.0F, (-657.3543F), (-688.4F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 103;
      longArray0[1] = (long) 103;
      longArray0[2] = (long) 1284;
      longArray0[3] = (long) 1284;
      longArray0[4] = 5386L;
      longArray0[5] = (long) 103;
      longArray0[6] = (long) 103;
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {103L, 103L, 1284L, 1284L, 5386L, 103L, 103L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {103L, 103L, 1284L, 1284L, 5386L, 103L, 103L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short[] shortArray0 = new Short[2];
      try { 
        Short.decode("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.shift(doubleArray0, (-8));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-574), (double) (-574));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -574, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = (-460.78F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 836.92F;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 808.76;
      doubleArray0[1] = (double) 3640.6921F;
      doubleArray0[2] = (double) (-1575.66F);
      doubleArray0[3] = (double) (-1575.66F);
      doubleArray0[4] = (double) (-1575.66F);
      doubleArray0[5] = (double) (-1575.66F);
      doubleArray0[6] = (double) 3640.6921F;
      ArrayUtils.shift(doubleArray0, (-2144954219));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), 3640.692138671875, 808.76, 3640.692138671875}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 6, 2325.99934285963);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), 3640.692138671875, 808.76, 2325.99934285963, 3640.692138671875}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), (-1575.6600341796875), 3640.692138671875, 808.76, 3640.692138671875}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (-380), (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0, 34, 34);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm');
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 10L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1937, 1937, 15);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1163);
      assertNotNull(integer0);
      assertEquals(1163, (int)integer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1163;
      intArray0[1] = 1163;
      intArray0[2] = 1163;
      intArray0[3] = 1163;
      intArray0[4] = 1163;
      intArray0[5] = 1163;
      intArray0[6] = 1163;
      intArray0[7] = 1163;
      intArray0[8] = 1163;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163}, intArray0);
      assertArrayEquals(new int[] {1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163}, intArray1);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.removeAll(intArray2, intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[6];
      short short0 = (short)606;
      Short short1 = new Short((short)606);
      assertNotNull(short1);
      assertEquals((short)606, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)606);
      assertNotNull(short2);
      assertEquals((short)606, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      try { 
        Short.valueOf("Cannot store ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot store \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      ArrayUtils.reverse(intArray0, 788, 0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1200), 0, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1200), 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, 2175, (-1200));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1200), 0, (-1)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1200), 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      Integer integer0 = new Integer(1133);
      assertNotNull(integer0);
      assertEquals(1133, (int)integer0);
      
      Integer integer1 = Integer.getInteger("\"<", integer0);
      assertNotNull(integer1);
      assertEquals(1133, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      integerArray0[8] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1044.2F;
      floatArray0[4] = 2119.813F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 1170, 2682, 263);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1044.2F, 2119.813F, 0.0F, (-935.92334F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2682;
      intArray0[1] = 1170;
      intArray0[2] = 263;
      intArray0[3] = 2682;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {2682, 1170, 263, 2682}, intArray0);
      assertArrayEquals(new int[] {2682, 1170, 263, 2682}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2682);
      assertNotNull(integer0);
      assertEquals(2682, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1135L), 979);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (long) 4163;
      longArray0[3] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 4163L, 1L}, longArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2625.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      classArray0[7] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray1.length);
      assertEquals(8, classArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 39.828);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      boolean[] booleanArray1 = ArrayUtils.insert((int) (short)0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2682;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 64.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2682.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = Short.valueOf((short) (-899));
      assertNotNull(short0);
      assertEquals((short) (-899), (short)short0);
      
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2682.0;
      boolean boolean4 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int int0 = ArrayUtils.indexOf(charArray0, ')', 2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Integer integer0 = Integer.getInteger("j]z{uQjrToe<a");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, "j]z{uQjrToe<a");
      assertNotNull(string0);
      assertEquals("j]z{uQjrToe<a", string0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 2;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 2, (-56));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {101L, 2L}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      assertNotNull(double0);
      assertEquals((-4399.886535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Short short0 = Short.valueOf((short)1952);
      assertNotNull(short0);
      assertEquals((short)1952, (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1952}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) shortArray0[0]);
      assertNotNull(floatArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1952.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "&{W");
      assertNotNull(stringArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 917L;
      longArray0[1] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {917L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 917L;
      floatArray0[1] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1163.1827F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {917.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 3);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'r';
      charArray0[2] = 'G';
      charArray0[3] = ':';
      charArray0[4] = '}';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'r', 'G', ':', '}'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Byte byte0 = new Byte((byte) (-70));
      assertNotNull(byte0);
      assertEquals((byte) (-70), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-473.0F), 2145355319);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayUtils.reverse(intArray0, 1391, 3);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'E', '!', 'E', 'E', 'f'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'f';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2569L;
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2569L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 2569L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2569.0F, 1.0F, 2569.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1L;
      floatArray1[1] = (float) 1L;
      floatArray1[2] = (float) (-2071);
      floatArray1[3] = (float) 1L;
      ArrayUtils.swap(floatArray1, 0, (-215));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-2071.0F), 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      short[] shortArray0 = new short[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2347));
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1064);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)183;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      Integer integer0 = new Integer(1421);
      assertNotNull(integer0);
      assertEquals(1421, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = null;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integerArray0[3]);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)891, (-3122));
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1064), (short)0, (short)183, (short)0, (short) (-1064), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-83), (-83));
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      ArrayUtils.swap((float[]) null, (-2282), 122);
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '@';
      charArray0[2] = '}';
      charArray0[3] = 'T';
      charArray0[4] = 'E';
      charArray0[5] = 'f';
      charArray0[6] = '!';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'B', '}', 'T', 'E', 'f', '!', '@'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-824);
      shortArray0[2] = (short) (-1510);
      shortArray0[3] = (short)833;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)57;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)274;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1064));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-824), (short) (-1510), (short)833, (short)0, (short)57, (short)0, (short)274}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)99;
      doubleArray0[1] = (double) (short)99;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 99.0, (int) (short)99, (-941.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {99.0, 99.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2803), (-2803));
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1483L;
      longArray0[2] = 91L;
      longArray0[3] = 91L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 91L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 1483L, 91L, 91L}, longArray0);
      assertArrayEquals(new long[] {0L, 1483L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2940.97));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1353L), (-732));
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-2214.2422F), (-34));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-34);
      doubleArray0[1] = (double) (-732);
      doubleArray0[2] = (double) (-732);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 2071.315656);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-34.0), (-732.0), (-732.0)}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 2146.21012);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)122;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 122L);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {122L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-457.58F);
      floatArray0[3] = (-4086.4111F);
      floatArray0[4] = (-2148.5664F);
      floatArray0[5] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-457.58F), (-4086.4111F), (-2148.5664F), 1.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      char[] charArray0 = new char[10];
      ArrayUtils.shift(charArray0, 3402);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)122);
      mockRandom0.nextFloat();
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(45L);
      mockRandom0.ints();
      mockRandom0.nextBoolean();
      char[] charArray0 = new char[2];
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1), (short)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'U';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      charArray0[4] = 'h';
      charArray0[5] = '';
      charArray0[6] = '&';
      charArray0[7] = 'w';
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'U', 'i', 'a', 'h', '', '&', 'w', 'y'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1182;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)256;
      shortArray0[4] = (short)3778;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)1182, (short)0, (short)0, (short)256, (short)3778, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      ArrayUtils.nullToEmpty(intArray0);
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      ArrayUtils.lastIndexOf(shortArray1, (short) (-408), (int) (short)1);
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      ArrayUtils.nullToEmpty(intArray0);
      Short[] shortArray0 = new Short[3];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      ArrayUtils.lastIndexOf(shortArray1, (short) (-408), (int) (short)1);
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)79;
      shortArray0[4] = (short) (-2075);
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2075));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)8066;
      shortArray0[1] = (short) (-124);
      shortArray0[2] = (short)3698;
      shortArray0[3] = (short) (-1600);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1600));
      assertEquals(3, int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 3);
      Integer integer0 = mutableInt0.getValue();
      boolean boolean0 = ArrayUtils.contains((Object[]) booleanArray0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 1973.53F;
      floatArray0[2] = (-1292.0433F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 1973.53F;
      floatArray0[6] = (-1292.0433F);
      floatArray0[7] = (float) (-1);
      ArrayUtils.indexOf(floatArray0, (-1.0F), 2227);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(3, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1292.0433F);
      doubleArray0[2] = (double) (-1292.0433F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-448.163224483);
      doubleArray0[5] = (double) (-1292.0433F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1);
      ArrayUtils.swap(doubleArray0, (-1), (-1));
      assertArrayEquals(new double[] {(-1.0), (-1292.0433349609375), (-1292.0433349609375), 0.0, (-448.163224483), (-1292.0433349609375), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[3] = 0.0;
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2456.118098890453);
      ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom(1528L);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-720.310503), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      ArrayUtils.clone(byteArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)84;
      doubleArray0[5] = (double) (byte)9;
      doubleArray0[6] = (double) (byte)0;
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 84.0, 9.0, 0.0, 9.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'T';
      charArray0[2] = 't';
      charArray0[3] = 'I';
      charArray0[4] = 'U';
      charArray0[5] = 'D';
      charArray0[6] = 'V';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[2] = 1668.889004;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-720.310503), 1668.889004}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[24];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[21] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3166));
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) null);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object object0 = new Object();
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, object0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.toObject(longArray0);
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I');
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-688.4F);
      floatArray0[2] = (-657.3543F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-688.4F);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 0.0F;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 3049);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = 's';
      charArray0[4] = 'G';
      charArray0[5] = 'E';
      charArray0[6] = '9';
      charArray0[7] = 's';
      charArray0[8] = '8';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'v');
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(7, bitSet0.cardinality());
      
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-776L));
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1200);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)9;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-76));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 91L);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 0);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1168));
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 161L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      ArrayUtils.removeElement((float[]) null, 1.0F);
      ArrayUtils.shuffle((Object[]) shortArray0);
      ArrayUtils.indexesOf((float[]) null, 0.0F);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2564.2F);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      ArrayUtils.nullToEmpty(intArray0);
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0, (short)0);
      ArrayUtils.removeElement((float[]) null, 1.0F);
      ArrayUtils.shuffle((Object[]) shortArray0);
      ArrayUtils.indexesOf((float[]) null, 0.0F);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1519.039F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)42;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 42);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-353));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1527;
      intArray0[0] = 1527;
      int int1 = 1060;
      intArray0[1] = 1060;
      ArrayUtils.indexesOf(intArray0, 1060, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)36, (-1073741823));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, 1, 46, 46);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      int[] intArray0 = new int[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 36);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      Integer integer0 = new Integer((-2193));
      ArrayUtils.isSorted(booleanArray1);
      ArrayUtils.shift(booleanArray1, (-1719), 16, (-64));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1719);
      floatArray0[1] = (float) (-64);
      int[] intArray0 = new int[5];
      intArray0[0] = (-64);
      intArray0[1] = 0;
      intArray0[2] = (-64);
      intArray0[3] = 0;
      intArray0[4] = (-1719);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-571.9940742398252));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-571.9940742398252)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.removeAllOccurences(booleanArray0, true);
      float[] floatArray0 = new float[0];
      ArrayUtils.isNotEmpty(floatArray0);
      ArrayUtils.shift((boolean[]) null, 1284);
      Double double0 = new Double((short)2);
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      ArrayUtils.toPrimitive(doubleArray0);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) (short)2;
      floatArray1[1] = (float) (short)2;
      floatArray1[2] = (-657.3543F);
      floatArray1[3] = (float) 1284;
      floatArray1[4] = (-688.4F);
      floatArray1[5] = (float) 1284;
      floatArray1[6] = (float) (short)2;
      ArrayUtils.addAll(floatArray1, floatArray1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Double double0 = new Double(0.0F);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(42, floatArray1.length);
      
      Integer.getInteger("c]t0M`N#r\u0002X9<t,.2:");
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, (-921.885));
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-346));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 1284);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, true, true}, booleanArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-4399.886535));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-4399.886535)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1284;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1284.0F, 1284.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1284;
      longArray0[1] = (long) 1284;
      longArray0[2] = (long) 1284;
      longArray0[3] = (long) 1284;
      longArray0[4] = (long) 1284;
      longArray0[5] = 5386L;
      long[] longArray1 = ArrayUtils.add(longArray0, 1284L);
      assertArrayEquals(new long[] {1284L, 1284L, 1284L, 1284L, 1284L, 5386L, 1284L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      ArrayUtils.shuffle(booleanArray0);
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-353));
      ArrayUtils.shuffle(booleanArray0);
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-353));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-346));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1631;
      shortArray0[1] = (short) (-2946);
      shortArray0[2] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-2946), (short)0, (short)1631}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      ArrayUtils.toPrimitive((Object) integer0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1855;
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, (-1333), 0);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1855;
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (-2145929302));
      ArrayUtils.isSameLength(intArray2, intArray0);
      ArrayUtils.isSorted(intArray2);
      ArrayUtils.removeAllOccurences(floatArray0, 7.0F);
      int[] intArray3 = new int[6];
      intArray3[0] = (-2145929302);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.nullToEmpty(byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2440, intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2440, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1285));
      assertArrayEquals(new int[] {(-1285), 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = (Object) "";
      ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 9, (-387), (-886));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      Integer integer0 = new Integer(1952);
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      
      Integer integer1 = new Integer(1952);
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1, 2429);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (-1309));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = (-423);
      intArray0[1] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      Integer integer0 = new Integer(0);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byte0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-70);
      doubleArray0[1] = (double) (byte) (-70);
      doubleArray0[2] = (double) (byte) (-70);
      doubleArray0[3] = (double) (byte) (-70);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)242;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1380.6);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 719.0459412;
      doubleArray0[5] = 1034.072;
      doubleArray0[6] = 808.76;
      doubleArray0[7] = 2163.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2190.1993469847, 503);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-516.560159);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1813.92707525;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1902.47977);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      float[] floatArray0 = new float[4];
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (-2.503896961513788);
      doubleArray0[2] = (-2.503896961513788);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-3184L));
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2.503896961513788));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)56);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      bitSet0.stream();
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 349;
      longArray0[1] = 2598L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte) (-76);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 349;
      longArray0[7] = (long) 0;
      BitSet.valueOf(longArray0);
      bitSet0.or(bitSet1);
      // Undeclared exception!
      try { 
        bitSet0.set(349, (int) (byte) (-76));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -76
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-743.57F);
      floatArray0[3] = 1044.2F;
      floatArray0[4] = 2119.813F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-935.92334F);
      ArrayUtils.shift(floatArray0, 1170, 2682, 263);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-743.57F), 1044.2F, 2119.813F, 0.0F, (-935.92334F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.isSorted(intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 557);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 557, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[0]);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1866.0F;
      floatArray0[1] = 2788.274F;
      floatArray0[2] = 648.22595F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-3535.1F);
      floatArray0[5] = (-1882.5514F);
      floatArray0[6] = (-1288.7004F);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      long[] longArray0 = new long[11];
      ArrayUtils.toObject(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3165, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3165, Length: 11
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.removeElements(charArray0, charArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.addFirst(longArray0, 0L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-48), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-891);
      longArray0[1] = (long) (-891);
      longArray0[2] = (long) (-891);
      longArray0[3] = (long) (-891);
      longArray0[4] = (long) (-891);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-891), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -891, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      ArrayUtils.nullToEmpty((char[]) null);
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2144954219));
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2031, (double) (-2144954219));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2031, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0, (float) (short) (-2500));
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-2500), (int) (short) (-2500), 48);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 4;
      intArray0[2] = (-2034);
      intArray0[3] = 50;
      intArray0[4] = 4;
      intArray0[5] = 2;
      intArray0[6] = (-850);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2034);
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-2034);
      floatArray0[3] = (float) (-850);
      floatArray0[4] = (float) 4;
      int int0 = ArrayUtils.indexOf(floatArray0, 2.0F, (-3185));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2564.2F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2564.2F);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      ArrayUtils.shift((double[]) null, (int) (byte)4, 1684, (-46));
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3640.6921F;
      floatArray0[1] = (-1575.66F);
      floatArray0[2] = (-460.78F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 836.92F;
      floatArray0[6] = 1692.132F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      bitSet0.stream();
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[2] = 492;
      intArray0[3] = 0;
      BitSet bitSet2 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76), (int) (byte) (-76));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) bitSet1;
      bitSet2.previousClearBit(492);
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (-76);
      objectArray0[3] = (Object) bitSet2;
      objectArray0[4] = (Object) "";
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-76);
      doubleArray0[1] = (double) 2175;
      doubleArray0[2] = (double) 492;
      ArrayUtils.lastIndexOf(doubleArray0, 4138.4661095265, 2175);
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean boolean1 = Boolean.valueOf(true);
      Boolean boolean2 = Boolean.TRUE;
      ArrayUtils.shift((short[]) null, 5172);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) boolean2;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) boolean2;
      objectArray0[4] = (Object) boolean0;
      objectArray0[5] = (Object) boolean1;
      objectArray0[6] = (Object) boolean0;
      objectArray0[7] = (Object) boolean1;
      objectArray0[8] = (Object) boolean1;
      ArrayUtils.reverse(objectArray0, (-400), 110);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1834.4537F));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-8));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1));
      ArrayUtils.reverse((Object[]) floatArray0);
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      ArrayUtils.indexesOf(floatArray0, 1.0F);
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1628), (-1628), (-2569));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0F;
      objectArray0[1] = (Object) 1.0F;
      ArrayUtils.reverse(objectArray0, (-373), (-489));
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-489));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1733));
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[1]);
      Integer integer2 = mutableInt0.toInteger();
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-489));
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger(":N", 242);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-907));
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      ArrayUtils.indexesOf((double[]) null, 0.0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-3130));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1508);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      ArrayUtils.toPrimitive((Double[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (-1);
      longArray1[3] = (long) (-1);
      long[] longArray2 = ArrayUtils.add(longArray1, 372L);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), 372L}, longArray2);
      
      ArrayUtils.indexesOf((long[]) null, 776L, 0);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)102);
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-98));
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-105);
      Byte byte1 = new Byte((byte) (-105));
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)0);
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)0);
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte2;
      MockRandom mockRandom0 = new MockRandom(0);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (int) 'e';
      intArray0[2] = 2;
      intArray0[3] = 1187;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      ArrayUtils.isEmpty(floatArray0);
      ArrayUtils.shift(intArray1, (-285));
      assertArrayEquals(new int[] {101, 2, 1187, 2}, intArray1);
      assertArrayEquals(new int[] {101, 2, 1187, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      ArrayUtils.clone((byte[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-850);
      intArray0[3] = 50;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = (-1);
      intArray0[7] = 4;
      intArray0[8] = 2;
      ArrayUtils.shift(intArray0, (-2034));
      assertArrayEquals(new int[] {0, 0, (-850), 50, 0, 2, (-1), 4, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int[] intArray0 = new int[8];
      intArray0[1] = 45;
      intArray0[2] = (-3628);
      Byte byte0 = new Byte((byte) (-85));
      Byte byte1 = new Byte((byte)3);
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      MockRandom mockRandom0 = new MockRandom(45);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 16;
      intArray0[1] = (-1);
      intArray0[2] = 720;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 49;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 2077;
      MockRandom mockRandom0 = new MockRandom(1);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1), 720, 1, 0, 49, 0, 0, 2077, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      Long long0 = new Long((-325L));
      Long[] longArray0 = new Long[9];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long0;
      longArray0[7] = long0;
      longArray0[8] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-325L), (-325L), (-325L), (-325L), (-325L), (-325L), (-325L), (-325L), (-325L)}, longArray1);
      
      ArrayUtils.insert(382, (char[]) null, (char[]) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short) (-636);
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)12, (short) (-636), (short)12, (short) (-636), (short)2, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(11);
      ArrayUtils.contains((float[]) null, (float) 11);
      Short short0 = new Short((short)76);
      ArrayUtils.reverse((float[]) null);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 11, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      ArrayUtils.reverse(floatArray0, (-2666), (-2666));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2376;
      shortArray0[1] = (short)459;
      shortArray0[2] = (short)65;
      shortArray0[3] = (short)102;
      shortArray0[4] = (short) (-3308);
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1356;
      ArrayUtils.isEmpty(shortArray0);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(floatArray1);
      ArrayUtils.removeAllOccurences((int[]) null, 1897);
      ArrayUtils.reverse(floatArray1, (-589), (-589));
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.isSorted(shortArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-8);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-76);
      intArray0[1] = (int) (byte) (-76);
      intArray0[3] = 0;
      ArrayUtils.indexesOf(intArray0, 349, 0);
      int int1 = 0;
      ArrayUtils.isSorted((boolean[]) null);
      int int2 = 3;
      int int3 = (-266);
      ArrayUtils.shift((boolean[]) null, 3, (-266), (-76));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -76, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayUtils.isSorted(doubleArray0);
      ArrayUtils.shift(doubleArray0, 2);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) 2);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[3] = (float) (byte)2;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-695));
      assertArrayEquals(new short[] {(short) (-695), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      Integer integer0 = new Integer(88);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 88);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.add(charArray0, 10, '\u0000');
      assertEquals(11, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '3';
      ArrayUtils.isEmpty(charArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-3207);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (-4683.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short) (-3207);
      floatArray0[6] = (float) (short)1;
      ArrayUtils.reverse(floatArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (-1106.3));
      ArrayUtils.add(floatArray0, 0, 1.0F);
      ArrayUtils.add((boolean[]) null, false);
      ArrayUtils.addAll(shortArray1, shortArray1);
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '3';
      intArray0[1] = 1;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.isSorted(intArray0);
      Short short0 = new Short((short) (-26));
      Short[] shortArray0 = new Short[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)9);
      ArrayUtils.swap(intArray0, (int) (short)9, 1183, 117);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 127;
      intArray0[1] = 127;
      intArray0[2] = 127;
      intArray0[3] = 1293;
      intArray0[4] = 1855;
      ArrayUtils.swap(intArray0, 127, (-431));
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 127;
      longArray0[1] = (long) 'P';
      ArrayUtils.swap(longArray0, 128, 127, 127);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 127;
      intArray0[1] = (-721);
      intArray0[2] = 64;
      intArray0[3] = 1293;
      intArray0[4] = 1855;
      ArrayUtils.swap(intArray0, 127, (-431));
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'u';
      charArray0[2] = '(';
      charArray0[3] = '.';
      charArray0[4] = '!';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)1;
      shortArray1[1] = (short) (-7);
      shortArray1[2] = (short)97;
      shortArray1[3] = (short) (-5634);
      shortArray1[4] = (short) (-1);
      shortArray1[5] = (short) (-7);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom1.nextInt();
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray1.length);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElements(shortArray0, shortArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-771.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-843.134);
      doubleArray0[5] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-843.134), 1.0, 0.0, (-771.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      ArrayUtils.removeElement((float[]) null, 53.14821F);
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-1459), 53.14821F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1459, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = 49;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 49, (float) 49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2564.2F);
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 2564.2F);
      assertArrayEquals(new float[] {0.0F, 2564.2F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      ArrayUtils.clone((byte[]) null);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.valueOf(true);
      Boolean.valueOf(true);
      Boolean boolean1 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(12, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)53;
      longArray0[1] = (long) (short)53;
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short)53;
      longArray0[4] = (long) (short)53;
      longArray0[5] = (long) (short)2;
      longArray0[6] = (long) (short)53;
      longArray0[7] = (long) (short)53;
      longArray0[8] = (long) (short)53;
      long[] longArray1 = ArrayUtils.insert((int) (short)2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(18, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 31.411164836724;
      doubleArray0[1] = 1.5;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      BitSet bitSet0 = new BitSet();
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1628), 51);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(3355L);
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)67;
      ArrayUtils.shift(byteArray0, (-717));
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)64, (int) (byte) (-44));
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-44), (byte)67, (byte)45}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (long)longArray0[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-152.33));
      assertArrayEquals(new double[] {(-1.0), 3355.0, (-152.33)}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-720.310503);
      doubleArray0[2] = 1668.889004;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2325.783009229), 2456.118098890453);
      assertEquals(3, int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-720.310503), 1668.889004}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 116);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 279.921297104658;
      ArrayUtils.isSorted(doubleArray0);
      ArrayUtils.add(doubleArray0, (double) 0);
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 50L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("", integer0);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1012);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      longBuffer0.rewind();
      longBuffer0.put((long) (byte) (-76));
      BitSet.valueOf(longBuffer0);
      bitSet0.toByteArray();
      bitSet0.stream();
      ArrayUtils.indexesOf((byte[]) null, (byte) (-76));
      Short short0 = new Short((short) (-1));
      Integer integer2 = new Integer(0);
      ArrayUtils.toPrimitive((Object) integer1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (byte) (-76);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (byte) (-76);
      ArrayUtils.subarray((char[]) null, (-387), 13);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 10, '\u0000');
      char[] charArray3 = ArrayUtils.subarray(charArray1, 10, 10);
      assertNotSame(charArray1, charArray2);
      assertEquals(0, charArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      ArrayUtils.addFirst((int[]) null, 651);
      ArrayUtils.shift((int[]) null, 18, 651, 651);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 224.0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      ArrayUtils.lastIndexOf((long[]) null, (-1L), (-260));
      Integer[] integerArray0 = new Integer[2];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3279.4F);
      ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.addFirst((long[]) null, (long) (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 'u');
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {117L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2557.03316164;
      doubleArray0[2] = 1476.264;
      doubleArray0[3] = (-1.0);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      ArrayUtils.shift((int[]) null, 2, 78, 78);
      ArrayUtils.isSorted(doubleArray0);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.indexesOf(doubleArray0, 64.07393916886, 1276);
      long[] longArray0 = new long[9];
      longArray0[0] = 2894L;
      longArray0[1] = (long) 1276;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 1276;
      longArray0[4] = (long) 78;
      longArray0[5] = 0L;
      longArray0[6] = (long) 1276;
      longArray0[7] = (long) 1276;
      longArray0[8] = (long) 2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 688L);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {688L, 2894L, 1276L, 2L, 1276L, 78L, 0L, 1276L, 1276L, 2L}, longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'D';
      charArray0[2] = 'H';
      charArray0[3] = '`';
      charArray0[4] = 'U';
      charArray0[5] = 'V';
      charArray0[6] = ';';
      charArray0[7] = '*';
      charArray0[8] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 78, 78);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-37);
      doubleArray0[1] = (double) (byte) (-37);
      doubleArray0[2] = (double) (byte) (-37);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3207);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3207)}, shortArray1);
      
      Short[] shortArray2 = new Short[8];
      shortArray2[0] = (Short) (short) (-3207);
      shortArray2[1] = (Short) (short) (-3207);
      Short short0 = new Short((short) shortArray2[0]);
      shortArray2[2] = short0;
      shortArray2[3] = (Short) (short) (-3207);
      shortArray2[4] = (Short) (short) (-3207);
      shortArray2[5] = (Short) (short) (-3207);
      shortArray2[6] = (Short) (short) (-3207);
      shortArray2[7] = (Short) (short) (-3207);
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) shortArray2[1]);
      assertArrayEquals(new short[] {(short) (-3207), (short) (-3207), (short) (-3207), (short) (-3207), (short) (-3207), (short) (-3207), (short) (-3207), (short) (-3207)}, shortArray3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)shortArray2[0];
      floatArray0[1] = (float) (short)shortArray2[7];
      floatArray0[2] = (float) (short)shortArray2[0];
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)shortArray2[6];
      floatArray0[6] = (float) (short)shortArray2[5];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3207.0F));
      ArrayUtils.shuffle((Object[]) shortArray2);
      ArrayUtils.indexesOf(floatArray0, (float) shortArray2[3]);
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-3207.0F));
      assertArrayEquals(new float[] {(-3207.0F), (-3207.0F), 51.0F, 1.0F, (-3207.0F), (-3207.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {51.0F, 1.0F}, floatArray2, 0.01F);
      
      ArrayUtils.subarray(charArray0, 8, (int) shortArray2[7]);
      long[] longArray0 = new long[5];
      longArray0[0] = (-17L);
      longArray0[1] = (long) '3';
      longArray0[2] = (long) (short)shortArray2[1];
      longArray0[3] = 109L;
      longArray0[4] = (long) (short)shortArray2[6];
      int int0 = ArrayUtils.indexOf(longArray0, (long) shortArray2[4]);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 2146130476, 2146130476);
      char[] charArray0 = ArrayUtils.insert((-1), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 1138, 1138);
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '@';
      charArray0[2] = 'r';
      char[] charArray1 = ArrayUtils.insert(0, (char[]) null, charArray0);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      char[] charArray0 = ArrayUtils.insert(57, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, object0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      ArrayUtils.reverse(shortArray0);
      ArrayUtils.shift(shortArray0, (int) (byte) (-56), (-1235), (int) (short)1);
      ArrayUtils.shift((short[]) null, (-1235), (-1235), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 194.0F;
      floatArray0[1] = 751.0F;
      floatArray0[2] = (-1190.1768F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1432.0F);
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.toPrimitive(booleanArray0);
      Object object0 = new Object();
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      Float float0 = new Float(17.112588957);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 2175;
      intArray0[3] = 2175;
      intArray0[4] = 11;
      intArray0[5] = 3593;
      intArray0[6] = (-1);
      ArrayUtils.reverse(intArray0, (-1), 2175);
      Object object0 = new Object();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.indexesOf(booleanArray0, false);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2175);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2175, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      short[] shortArray0 = new short[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      ArrayUtils.reverse(shortArray0);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)5028);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = new Object();
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'w';
      charArray0[2] = 'Y';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1809));
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.removeAllOccurences(booleanArray0, false);
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4149);
      ArrayUtils.reverse(shortArray0);
      ArrayUtils.indexOf(shortArray0, (short) (-4149));
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray2, false, (int) (short) (-4149));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      ArrayUtils.removeAllOccurences((boolean[]) null, true);
      ArrayUtils.swap((float[]) null, 0, 4213);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '/', (-711));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1034.072;
      doubleArray0[1] = 1034.072;
      int int0 = (-48);
      ArrayUtils.indexesOf(doubleArray0, (-3861.37), (-48));
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-48), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)113);
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)113}, byteArray1);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      char char0 = 'g';
      charArray0[0] = 'g';
      char char1 = 'p';
      ArrayUtils.indexesOf(charArray0, 'p', 0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 3274, 'g');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3274, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.isSorted(charArray0);
      ArrayUtils.indexOf(charArray0, 'y', (-344));
      int[] intArray0 = new int[0];
      ArrayUtils.indexOf(intArray0, 65);
      ArrayUtils.removeAllOccurences(intArray0, (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 10, '\u0000');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 0, 3);
      ArrayUtils.indexOf((float[]) null, (float) 0);
      ArrayUtils.isSorted((short[]) null);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray1 = new int[9];
      intArray1[0] = 788;
      intArray1[1] = 0;
      intArray1[2] = 612;
      intArray1[3] = 3;
      intArray1[4] = 788;
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      intArray1[7] = (-1);
      intArray1[8] = 3;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      Integer integer0 = new Integer(1855);
      ArrayUtils.toPrimitive((Object) integer0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = 'e';
      charArray0[4] = 'L';
      charArray0[5] = 'd';
      charArray0[6] = 'h';
      ArrayUtils.indexOf(charArray0, 'L', 2);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      Integer.getInteger("j]z{uQjrToe<a");
      String string0 = ArrayUtils.toString((Object) null, "j]z{uQjrToe<a");
      assertEquals("j]z{uQjrToe<a", string0);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      char[] charArray0 = new char[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', (int) (short) (-26));
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1998), '\u0000');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1998, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'C');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1400);
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.swap(shortArray0, (int) (short) (-1400), (-1366), (-1366));
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "java.lang.Object@ad82e0f";
      ArrayUtils.swap(objectArray0, 205, 205);
      ArrayUtils.toPrimitive(object0);
      Integer integer0 = new Integer((-3317));
      ArrayUtils.indexOf(objectArray0, object0);
      float[] floatArray0 = new float[0];
      ArrayUtils.indexOf(floatArray0, 1.0F);
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 79, (-42));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)119;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      long[] longArray0 = new long[0];
      ArrayUtils.indexesOf(longArray0, (-5504L));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2859.68F;
      floatArray0[1] = 1520.067F;
      floatArray0[2] = 85.0F;
      floatArray0[3] = 212.7865F;
      floatArray0[4] = (-431.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-721.0F);
      floatArray0[7] = 403.9987F;
      floatArray0[8] = 1692.132F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      ArrayUtils.swap(shortArray0, (int) (short)8, (int) (short)8);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-311), 63, (-311));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-118);
      shortArray0[1] = (short) (-824);
      shortArray0[2] = (short)2226;
      shortArray0[3] = (short)1212;
      shortArray0[4] = (short) (-2745);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)0;
      ArrayUtils.swap(shortArray0, (-1184), (-648));
      assertArrayEquals(new short[] {(short) (-118), (short) (-824), (short)2226, (short)1212, (short) (-2745), (short)1, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      ArrayUtils.addAll((short[]) null, (short[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-423);
      intArray0[1] = 2145;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertArrayEquals(new int[] {1, (-423), 2145, 1, 2, 0, 0}, intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 2145;
      objectArray0[1] = (Object) (-423);
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (-423);
      Integer integer0 = new Integer(0);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      ArrayUtils.toPrimitive((Object) null);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      ArrayUtils.swap(doubleArray0, 2, 2, 2);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 54.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, 733);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'I');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 788;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 788);
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.6));
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.contains(charArray0, '+');
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap(doubleArray0, 0, 3);
      int int1 = ArrayUtils.indexOf((float[]) null, (float) 0);
      assertEquals((-1), int1);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      long[] longArray0 = new long[2];
      MockRandom mockRandom0 = new MockRandom();
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2569L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 1363L;
      longArray0[4] = 217L;
      ArrayUtils.swap(longArray0, (-64), 0, (-1114));
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(6, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1148;
      long[] longArray1 = new long[0];
      long[] longArray2 = ArrayUtils.insert(1148, longArray0, longArray1);
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray1);
      assertNotNull(longArray3);
      assertEquals(1, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-771.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 985.8251F;
      floatArray0[1] = 985.8251F;
      floatArray0[2] = 985.8251F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '$');
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'p';
      charArray0[2] = 'u';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = 'l';
      char[] charArray1 = ArrayUtils.add(charArray0, '<');
      assertArrayEquals(new char[] {'!', 'p', 'u', 'U', '\'', 'l', '<'}, charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'p';
      longArray0[1] = (long) 'u';
      longArray0[2] = 0L;
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 'T';
      longArray0[5] = (long) 'U';
      longArray0[6] = (long) 'U';
      longArray0[7] = (long) '!';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 1171L);
      assertArrayEquals(new long[] {1171L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.isSorted(intArray0);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2288.3936F));
      assertEquals(7, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (float) Integer.MAX_VALUE;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = '!';
      charArray0[6] = 'd';
      charArray0[7] = 'l';
      charArray0[8] = 'T';
      char[] charArray1 = ArrayUtils.add(charArray0, '`');
      assertArrayEquals(new char[] {'\'', '`', 'p', 'U', '\'', '!', 'd', 'l', 'T', '`'}, charArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '`';
      floatArray0[1] = (float) '\'';
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) 'U';
      floatArray0[4] = (float) 'T';
      float[] floatArray1 = new float[7];
      floatArray1[0] = 985.8251F;
      floatArray1[1] = (float) 'U';
      floatArray1[2] = (float) 'p';
      floatArray1[3] = (float) 'l';
      floatArray1[4] = (float) 'd';
      floatArray1[5] = (float) 'T';
      floatArray1[6] = (float) 'p';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2281L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.getInteger("", integer0);
      Float float0 = new Float((float) 0);
      Float float1 = new Float(801.9117F);
      Float float2 = new Float((-1.0F));
      Float float3 = new Float((-1.0F));
      Float float4 = new Float((float) 0);
      Float float5 = new Float((double) 1.0F);
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      ArrayUtils.nullToEmpty(floatArray1);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(788, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(403.9987);
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      floatArray0[3] = float3;
      Float float4 = new Float(1.0F);
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[2]);
      floatArray0[5] = float5;
      Float float6 = new Float((-2586.2));
      floatArray0[6] = float6;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray1.length);
  }
}
