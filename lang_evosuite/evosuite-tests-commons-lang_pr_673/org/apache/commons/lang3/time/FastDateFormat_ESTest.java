/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 08:08:46 GMT 2025
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VM-o)");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1837, (-1), timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      MockDate mockDate0 = new MockDate((-2895), (-1743), 4674, 0, (-2895), 4674);
      FastDateFormat fastDateFormat0 = new FastDateFormat("s,*", timeZone0, locale0, mockDate0);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = new Locale("Y5:7sik$XE*}Mp");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateFormat0.parseObject("q7<&y7|^<;?+|", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = new Locale("Y5:7sik$XE*}Mp");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = fastDateFormat0.parse("", parsePosition0, calendar0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Calendar calendar0 = MockCalendar.getInstance();
      boolean boolean0 = fastDateFormat0.parse("ReportEntry", parsePosition0, calendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateFormat0.parse("", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = new Locale("Y5:7sik$XE*}Mp");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateFormat0.parse("q7<&y7|^<;?+|", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ul.fg52&");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, (Locale) null);
      Date date0 = fastDateFormat0.parse("ul.fg52&");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ", ");
      Locale locale0 = new Locale("CartesianProductTest can not have a non-empty display name");
      FastDateFormat fastDateFormat0 = new FastDateFormat(", ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(", ", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("N#");
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals(3, FastDateFormat.SHORT);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, locale0);
      assertEquals(1, FastDateFormat.LONG);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      assertEquals("M/d/yy h:mm a", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 3, timeZone0, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, (TimeZone) null, locale0);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      MockDate mockDate0 = new MockDate(1, 3, (-436), 8, 0);
      StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate(3);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(0L);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MockFileWriter mockFileWriter0 = fastDateFormat0.format(date0, (MockFileWriter) null);
      assertNull(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      StringBuffer stringBuffer0 = fastDateFormat0.format(calendar0, (StringBuffer) null);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockPrintStream mockPrintStream0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, (MockPrintStream) null);
      assertNull(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 3750);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(0L);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1320);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("1/1/70 12:00 AM", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) 1, stringBuffer0);
      assertEquals(15, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      PipedWriter pipedWriter0 = fastDateFormat0.format(279L, (PipedWriter) null);
      assertNull(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("T-~-xuqd$#zV}(7", true);
      OutputStreamWriter outputStreamWriter0 = fastDateFormat0.format((-1L), (OutputStreamWriter) mockFileWriter0);
      assertSame(mockFileWriter0, outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ul.fg52&");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, (Locale) null);
      String string0 = fastDateFormat0.format((-1L));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      StringBuffer stringBuffer0 = fastDateFormat0.applyRules((Calendar) null, (StringBuffer) null);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, (Locale) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1549), 0, 0);
      StringWriter stringWriter0 = new StringWriter(2910);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("12/31/51 12:00 AM", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition((-743));
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("X%P'c$d4g/|X", parsePosition0, (Calendar) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition((-2124));
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("=h]kd2k/]", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      try { 
        fastDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      FastDateFormat.getTimeInstance(1, (TimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-4142), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4142
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("printWriter", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Locale locale0 = new Locale(" m; 8r\"\"6RdC2 =SQ1t");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" m; 8r\"\"6RdC2 =SQ1t", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" 8(|IJ!U@9,WdTL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2583), (-2583), (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2583
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(92, 92, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 92
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-4764), timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -4764
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1709
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, (PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(calendar0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MIN_VALUE, (-2229), 1, 1, 3);
      mockGregorianCalendar0.set(0, 3);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) mockDate0, (StringBuffer) null, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) stringBuffer0, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.StringBuffer
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(1L, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat(",*@W++7zVC)", (TimeZone) null, locale0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      MockDate mockDate0 = new MockDate();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("V ycdkI+Qq3JI3_bd:", timeZone0, locale0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("QqB", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat("Ps=/iUi|g&{", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2);
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      MockDate mockDate0 = new MockDate(80, 0, 2);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "");
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      StringBuffer stringBuffer0 = fastDateFormat0.format(0L, (StringBuffer) null);
      assertNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format((-1L));
      assertEquals("12/31/69 11:59 PM", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate((-1L));
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.format(1L, stringBuffer0);
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2636), timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2636
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[M/d/yy h:mm a,en,GMT]");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(3, 0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 1);
      assertEquals(2, FastDateFormat.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MIN_VALUE, (-2229), 1, 1, 3);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("11/19/24 3:19 PM", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 450);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(3090, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3090
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      FastDateFormat.getTimeInstance(1, locale0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      FastDateFormat.getInstance("Z", locale0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 1, 1, 2, 0, 2, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) simpleTimeZone0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      FastDateFormat.getDateTimeInstance(2, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-1L), charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 1, (BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2476), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2476
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=HQ6=}Y");
      MockPrintWriter mockPrintWriter1 = fastDateFormat0.format(date0, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = fastDateFormat0.getLocale();
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.parse("org.junitpioneer.jupiter.params.IntRange", (ParsePosition) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2748, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2748
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
      String string0 = fastDateFormat0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser$NumberStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      FastDateFormat.getInstance("z", (TimeZone) null, locale0);
  }
}
