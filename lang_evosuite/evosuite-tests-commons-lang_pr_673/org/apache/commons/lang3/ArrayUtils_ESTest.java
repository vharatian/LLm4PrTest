/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 08:06:26 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, (-767));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-767);
      doubleArray0[3] = (-412.85629213002494);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, (-767.0), (-412.85629213002494)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, (-767.0), (-412.85629213002494)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-413.0F);
      floatArray0[2] = (-1400.687F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1412.1F);
      floatArray0[6] = (-1460.3976F);
      floatArray0[2] = (-300.0F);
      floatArray0[8] = 148.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, (-1680));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {Float.NaN, (-413.0F), (-300.0F), 1.0F, 1.0F, (-1412.1F), (-1460.3976F), 0.0F, 148.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "r");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = '9';
      charArray0[2] = '[';
      charArray0[3] = 'O';
      charArray0[4] = '[';
      charArray0[5] = '9';
      charArray0[6] = '}';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', '9', '[', 'O', '[', '9', '}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("-109", string0);
      assertNotNull(string0);
      
      Byte byte1 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-5957);
      shortArray0[1] = (short)771;
      shortArray0[2] = (short) (-5957);
      shortArray0[3] = (short) (-1902);
      shortArray0[4] = (short)115;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-765);
      shortArray0[7] = (short)2464;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-5957), (short)771, (short) (-5957), (short) (-1902), (short)115, (short) (-1), (short) (-765), (short)2464}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)771;
      objectArray0[1] = (Object) (short) (-1902);
      objectArray0[2] = (Object) (short) (-5957);
      objectArray0[3] = (Object) (short) (-765);
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) (short)2464;
      objectArray0[6] = (Object) (short) (-765);
      objectArray0[7] = (Object) (short) (-765);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)127);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)2859;
      shortArray0[4] = (short)127;
      shortArray0[5] = (short)127;
      shortArray0[6] = (short)127;
      shortArray0[7] = (short)127;
      shortArray0[8] = (short)127;
      ArrayUtils.swap(shortArray0, (-930), 9, 51);
      assertArrayEquals(new short[] {(short)127, (short)127, (short)127, (short)2859, (short)127, (short)127, (short)127, (short)127, (short)127}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, 91);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf("s <c@nc;vDIm0");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("Field names are mandatory when using JsonToStringStyle");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("Field names are mandatory when using JsonToStringStyle");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 91;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {91.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, intArray0.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-4507);
      shortArray0[4] = (short)2757;
      shortArray0[5] = (short)3;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-4507), (short)2757, (short)3}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray2 = new Byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      byte byte1 = (byte) (-40);
      Byte byte2 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray2[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte) (-40), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray2[2] = byte3;
      Byte[] byteArray3 = ArrayUtils.insert((int) 0, byteArray1, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(3, byteArray3.length);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray2.length);
      
      ArrayUtils.swap(shortArray1, 121, (int) byte1, (-1708));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-4507), (short)2757, (short)3}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1133);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-4507), (short)2757, (short)3}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) comparator0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 580.093F;
      floatArray0[1] = (-1617.0F);
      floatArray0[2] = (-1908.7821F);
      ArrayUtils.swap(floatArray0, 3, 1, 3);
      assertArrayEquals(new float[] {580.093F, (-1617.0F), (-1908.7821F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 522.0F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 3124L;
      longArray0[1] = 193L;
      longArray0[2] = (-986L);
      longArray0[3] = 178L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 178L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3124L, 193L, (-986L), 178L}, longArray0);
      assertArrayEquals(new long[] {3124L, 193L, (-986L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 3124L, 120);
      assertEquals(0, int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {3124L, 193L, (-986L), 178L}, longArray0);
      assertArrayEquals(new long[] {3124L, 193L, (-986L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) 'h';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) 'h';
      longArray0[4] = (long) 'h';
      longArray0[5] = (long) 'h';
      longArray0[6] = 15L;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {104L, 104L, 104L, 104L, 104L, 104L, 15L}, longArray0);
      assertArrayEquals(new long[] {104L, 104L, 104L, 104L, 104L, 104L, 15L, 1L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Byte");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2273);
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2273)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 631);
      assertNull(intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 631;
      longArray0[1] = (-1578L);
      longArray0[2] = (long) 631;
      longArray0[3] = (long) 631;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 631L, 2);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{2, 3}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {631L, (-1578L), 631L, 631L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, (boolean) boolean0);
      assertEquals(0, int0);
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byte byte2 = (byte)10;
      Byte byte3 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte2;
      ArrayUtils.swap(longArray0, 1, 0, (int) (byte) (-128));
      assertArrayEquals(new long[] {10L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 1);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)93;
      Byte byte2 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)93, (byte)byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte1);
      assertEquals((byte)93, (byte)byte7);
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte1);
      assertEquals((byte)93, (byte)byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte(byte1);
      assertEquals((byte)93, (byte)byte9);
      assertTrue(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte7));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-102);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)18);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)35, (byte)85, (byte)67, (byte)18, (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-24), (byte)35, (byte)85, (byte)67, (byte)18, (byte) (-102)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '$';
      ArrayUtils.shift(charArray0, (-1780), 2486, (int) (byte) (-102));
      assertArrayEquals(new char[] {'$', '$'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 41.0857270199, 3.0);
      assertFalse(boolean1);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray3.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)1, (-1300), (int) (short)1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-79);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-1), (byte) (-84), (byte) (-53), (byte) (-79)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-1), (byte) (-84), (byte) (-53), (byte) (-79)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.swap((Object[]) byteArray2, (int) (byte) (-53), (int) (byte) (-79), (int) (byte) (-53));
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)96, (byte) (-1), (byte) (-84), (byte) (-53), (byte) (-79)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-84);
      shortArray0[1] = (short) (byte) (-79);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2173));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2173, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-97);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-60));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)71, (byte)72, (byte)110, (byte)67, (byte) (-97)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-1), (byte)1, (byte)71, (byte)72, (byte)110, (byte)67, (byte) (-97)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'C';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      ArrayUtils.shift(charArray0, 1, 110, (int) (byte)67);
      assertArrayEquals(new char[] {'$', '$', 'C', '$', '$', '$', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)72;
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) (byte)71;
      floatArray0[3] = (float) '$';
      floatArray0[4] = (float) '$';
      floatArray0[5] = (float) (byte) (-97);
      floatArray0[6] = (float) (byte)67;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-2295));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2295, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[1]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (long)longArray0[0];
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1676L);
      longArray0[1] = 796L;
      longArray0[0] = (-4005L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-4005L), 796L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray1.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (-1676L);
      longArray2[1] = (long) (byte) (-1);
      longArray2[2] = (long) (byte) (-1);
      longArray2[3] = (-4005L);
      longArray2[4] = (long) (byte) (-1);
      boolean boolean2 = ArrayUtils.isSameLength(longArray2, longArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-4005L), 796L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1676L), (-1L), (-1L), (-4005L), (-1L)}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-84));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      int[] intArray0 = new int[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)109);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 't';
      charArray0[2] = '1';
      charArray0[3] = '[';
      charArray0[4] = 'U';
      charArray0[5] = 'r';
      charArray0[6] = '1';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'G', 't', '1', '[', 'U', 'r', '1'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'O';
      charArray0[2] = '!';
      charArray0[3] = 'O';
      charArray0[5] = '!';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ':');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'O', '!', 'O', '\u0000', '!'}, charArray0);
      assertArrayEquals(new char[] {':', '\u0000', 'O', '!', 'O', '\u0000', '!'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-896));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'O';
      objectArray0[1] = (Object) '!';
      objectArray0[2] = (Object) '!';
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) 'O';
      Object object0 = ArrayUtils.get(objectArray0, (-896));
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[5] = null;
      objectArray0[6] = (Object) 'O';
      objectArray0[7] = (Object) '!';
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{5}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 76L;
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) '!';
      longArray0[3] = (long) 'O';
      longArray0[4] = (long) ':';
      int int0 = ArrayUtils.indexOf(longArray0, 58L, (-896));
      assertEquals(4, int0);
      assertArrayEquals(new long[] {76L, 79L, 33L, 79L, 58L}, longArray0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 4, (-1957.080271422686));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-98.68479F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, (-98.68479F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)2;
      ArrayUtils.swap(byteArray0, 2, 1460, (-1));
      assertArrayEquals(new byte[] {(byte)120, (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)120;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)120;
      shortArray0[5] = (short) (byte)120;
      shortArray0[6] = (short) (byte)120;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)120, (short)2, (short)2, (short)2, (short)120, (short)120, (short)120}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-10));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-48);
      ArrayUtils.shift(byteArray0, (-1965), (int) (byte)67, (-10));
      assertArrayEquals(new byte[] {(byte)67, (byte) (-48)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2903.036F));
      assertEquals((-2903.036F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = new Long[0];
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 0, 3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-413));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(charArray0, (-413));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-413);
      intArray0[1] = (-413);
      intArray0[2] = (-413);
      intArray0[3] = (-413);
      intArray0[4] = (-413);
      intArray0[5] = (-413);
      intArray0[6] = (-413);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-413));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-413), (-413), (-413), (-413), (-413), (-413), (-413)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      Float float0 = new Float((double) (-2543));
      assertEquals((-2543.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1868.5F);
      floatArray0[1] = (float) (-2543);
      floatArray0[2] = (float) (-1987);
      floatArray0[3] = (float) 1170;
      floatArray0[4] = (float) 1170;
      ArrayUtils.swap(floatArray0, 2, 2, 1297);
      assertArrayEquals(new float[] {(-1868.5F), (-2543.0F), (-1987.0F), 1170.0F, 1170.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 1170);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1868.5F), (-2543.0F), (-1987.0F), 1170.0F, 1170.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3216);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-27896);
      shortArray0[3] = (short) (-580);
      shortArray0[4] = (short) (-300);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)2;
      intArray0[1] = 2;
      intArray0[2] = (int) (short) (-580);
      intArray0[3] = (int) (short) (-580);
      intArray0[4] = (int) (short)2;
      intArray0[5] = 2;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(1.5, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(1.5, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) doubleArray0[2], 0, (-1184.416572195682));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[0] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 2093.2275F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2093.2275F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, 0.0F, Float.NaN, Float.NaN, Float.NaN, 2093.2275F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, 0.0F, Float.NaN, Float.NaN, Float.NaN, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (-632), (-216));
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, 0.0F, Float.NaN, Float.NaN, Float.NaN, 2093.2275F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, 0.0F, Float.NaN, Float.NaN, Float.NaN, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-12);
      Byte byte1 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-12), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-12), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'w';
      Character character1 = Character.valueOf('w');
      assertEquals('w', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'_', 'w'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (int) char0, 18688, (int) char0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      Character character0 = Character.valueOf('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      characterArray0[8] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1677.8007653989716);
      Character character0 = Character.valueOf('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 2409);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) (-1677.8007653989716);
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) character1;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) (-1677.8007653989716);
      Object object1 = ArrayUtils.get(objectArray0, (int) 50, (Object) null);
      assertNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[8] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[6]);
      assertEquals(1, int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'M';
      charArray0[2] = 'T';
      charArray0[3] = 'O';
      charArray0[4] = '&';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 5, 5);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', 'M', 'T', 'O', '&'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)322;
      shortArray0[1] = (short)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)322, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'M';
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1683.50247752787);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {77.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~";
      stringArray0[1] = "java.lang.Byte";
      stringArray0[2] = "java.lang.Character";
      stringArray0[3] = "java.lang.Object";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "java.lang.Object";
      stringArray0[6] = "O eNlbul";
      stringArray0[7] = "java.lang.Character";
      stringArray0[8] = "uol8CW";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "The String did not match either specified value");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, stringArray0.length);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)2935);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2935, (short)0}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      
      short[] shortArray3 = ArrayUtils.add(shortArray2, 1, (short) (-2285));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2935, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)2935, (short) (-2285), (short)0}, shortArray3);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte0);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1722L);
      longArray0[1] = (-831L);
      longArray0[2] = (-831L);
      longArray0[3] = (-831L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1755L));
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1722L), (-831L), (-831L), (-831L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = ArrayUtils.insert((-682), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-831L);
      doubleArray0[1] = (double) (-831L);
      doubleArray0[2] = (double) (-831L);
      doubleArray0[3] = (-929.198463233);
      doubleArray0[4] = (double) (-1722L);
      doubleArray0[5] = (double) (-831L);
      doubleArray0[6] = (double) (-1722L);
      doubleArray0[7] = (double) (-831L);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2699.4015678018814);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2699.4015678018814, (-831.0), (-831.0), (-831.0), (-929.198463233), (-1722.0), (-831.0), (-1722.0), (-831.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-831.0), (-831.0), (-831.0), (-929.198463233), (-1722.0), (-831.0), (-1722.0), (-831.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte byte0 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (Object) byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, Double.NaN, (-1));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '{';
      charArray0[2] = '`';
      charArray0[3] = '{';
      charArray0[4] = 'B';
      charArray0[5] = '1';
      ArrayUtils.shift(charArray0, (-1852), Integer.MAX_VALUE, 4);
      assertArrayEquals(new char[] {'`', '{', 'B', '1', '~', '{'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      charArray1[1] = '{';
      charArray1[2] = '`';
      charArray1[3] = '`';
      charArray1[4] = '{';
      charArray1[5] = '{';
      charArray1[6] = 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, '~', (-1852));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'B', '{', '`', '`', '{', '{', 'T'}, charArray1);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Short short0 = new Short((short)102);
      assertEquals((short)102, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-35);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-35)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray2 = ArrayUtils.remove(charArray0, (int) (short)0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 't'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray2.length);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      try { 
        Byte.valueOf("du;UtSI]C3sGK~md", (int) (byte)1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1475));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8192, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-389), longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Double double0 = Double.valueOf((double) (byte)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)119;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte)2, (byte)2, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)2, (byte)2, (byte)119}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)2, (int) (byte)2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)119, (byte)2, (byte)2, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)2, (byte)2, (byte)119}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      short[] shortArray0 = new short[6];
      byteArray0[0] = (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.swap(shortArray0, (int) (short)2, (-2015), (int) (byte)2);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)2, (short)2, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)2, (short)2, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('o');
      assertEquals('o', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('<');
      assertEquals('<', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('o');
      assertEquals('o', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      ArrayUtils.shift((Object[]) shortArray1, (-385));
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)2, (short)2, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(0, intArray2.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)83;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte) (-101);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-101);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)106, (byte) (-101), (byte) (-123), (byte) (-1), (byte)83}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-1), (byte) (-123), (byte) (-101), (byte) (-123), (byte) (-101), (byte) (-1), (byte) (-1), (byte) (-101)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 0);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[1] = object1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-60.95127), 0.1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 635.10675F;
      floatArray0[1] = (-2253.2827F);
      floatArray0[3] = (-3282.0F);
      floatArray0[4] = (-46.599064F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {635.10675F, (-2253.2827F), 0.0F, (-3282.0F), (-46.599064F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte byte3 = (byte)5;
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte8);
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) byte3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short)0;
      longArray0[2] = 6L;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-1);
      ArrayUtils.swap(longArray0, (int) (short) (-1), (int) (short)0, 531);
      assertArrayEquals(new long[] {(-1L), 0L, 6L, (-1L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.swap(longArray0, 156, (-3146), (int) (short) (-1));
      assertArrayEquals(new long[] {(-1L), 0L, 6L, (-1L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = 1749.3F;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = 2567.19F;
      floatArray0[6] = (float) 6L;
      floatArray0[7] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 531);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {(-1.0F), 1749.3F, (-1.0F), (-1.0F), (-1.0F), 2567.19F, 6.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2543));
      assertEquals((-2543), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-5064));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2543);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-5064);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) (-5064);
      doubleArray0[7] = (double) (-2543);
      doubleArray0[8] = (double) 1;
      ArrayUtils.swap(doubleArray0, 1, (-5064), (-5064));
      assertArrayEquals(new double[] {(-2543.0), 1.0, 1.0, (-5064.0), 1.0, 1.0, (-5064.0), (-2543.0), 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2543), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2543, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)7, (-582));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-582));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-582)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte)46;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3822L);
      assertEquals(3822L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3822L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(floatArray0, (-3451), (int) (byte)46, (-929));
      assertArrayEquals(new float[] {46.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3451), doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3451, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'S';
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {83L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      
      ArrayUtils.shift(longArray0, (int) (short)0, (int) (short)1639, (-2764));
      assertArrayEquals(new long[] {83L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-28), (int) (byte) (-28));
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-28)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '5');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray1 = new int[4];
      intArray1[0] = (int) '5';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 53;
      objectArray0[1] = (Object) 53;
      objectArray0[2] = (Object) 53;
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean2 = ArrayUtils.isEquals(byte0, objectArray0[0]);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, objectArray0.length);
      
      Byte byte1 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)10, (byte)10, (byte)10, (byte) (-57), (byte) (-57), (byte)10, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0081';
      charArray0[2] = 'x';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character character0 = new Character('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      IntStream intStream0 = mockRandom0.ints((-26870), (-9));
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-26870);
      floatArray0[1] = (float) '\u0081';
      floatArray0[2] = (float) '\u0081';
      floatArray0[3] = (float) (-26870);
      floatArray0[4] = 102.65398F;
      floatArray0[5] = (float) '\u0000';
      floatArray0[6] = (float) 'x';
      floatArray0[7] = (float) '\u0081';
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(5, int0);
      assertArrayEquals(new float[] {(-26870.0F), 129.0F, 129.0F, (-26870.0F), 102.65398F, 0.0F, 120.0F, 129.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0081', '\u0000', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'x', '\u0081'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-420);
      longArray0[1] = (long) (short)742;
      longArray0[2] = (long) 111;
      longArray0[3] = (long) (short)742;
      longArray0[4] = (long) (-420);
      longArray0[5] = (long) 111;
      longArray0[6] = (long) (-420);
      longArray0[7] = (long) 111;
      longArray0[8] = (long) (-420);
      ArrayUtils.shift(longArray0, 1, 89, 111);
      assertArrayEquals(new long[] {(-420L), 111L, 742L, (-420L), 111L, (-420L), 111L, (-420L), 742L}, longArray0);
      assertEquals(9, longArray0.length);
      
      ArrayUtils.swap((float[]) null, 322, 1, 111);
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (-420L));
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '*', 12);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)95;
      Byte byte2 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)95, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-19);
      Byte byte5 = new Byte((byte) (-19));
      assertEquals((byte) (-19), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertEquals((byte) (-19), (byte)byte6);
      assertFalse(byte4 == byte1);
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-19));
      assertEquals((byte) (-19), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = ArrayUtils.get(byteArray0, (int) byte1);
      assertFalse(byte1 == byte4);
      assertNull(byte8);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-33), (int) (byte) (-105), (-33));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      char[] charArray3 = new char[0];
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      char[] charArray4 = ArrayUtils.addAll(charArray3, charArray3);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray4);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertNotNull(charArray4);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray4);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray4.length);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2739L);
      longArray0[3] = 0L;
      longArray0[4] = (long) 786;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 5);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, (-2739L), 0L, 786L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'h');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {}, charArray3);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(0, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) 'g';
      floatArray0[1] = (float) (-3100);
      floatArray0[3] = (float) (-785);
      floatArray0[4] = (float) (-785);
      floatArray0[5] = (float) 'x';
      floatArray0[6] = (float) 'g';
      ArrayUtils.swap(floatArray0, (-3100), 1, (-573));
      assertArrayEquals(new float[] {120.0F, (-3100.0F), 0.0F, (-785.0F), (-785.0F), 120.0F, 103.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1908.4F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {120.0F, (-3100.0F), 0.0F, (-785.0F), (-785.0F), 120.0F, 103.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'x', 'g', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-420), (-420), (double) (-420));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-4);
      intArray0[1] = (int) (byte) (-4);
      intArray0[2] = (-1);
      ArrayUtils.shift(intArray0, 1072, (-2144572200), (-420));
      assertArrayEquals(new int[] {(-4), (-4), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-4);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 680);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4)}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift(intArray0, (int) (byte) (-105), (-33), (-33));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '|';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray1);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '|'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(8, characterArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '#';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-27), 4, 763.6);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {35.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) '#';
      floatArray0[5] = (float) (byte) (-27);
      floatArray0[6] = (float) 4;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {4.0F, 4.0F, 35.0F, 4.0F, 3.0F, 35.0F, (-27.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)42;
      longArray0[1] = (long) (byte)42;
      int[] intArray0 = new int[9];
      intArray0[0] = (-3927);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (int) (short)2013;
      intArray0[4] = (int) (byte)42;
      intArray0[5] = (int) (short)2013;
      intArray0[6] = 4;
      intArray0[7] = (int) (short)2013;
      intArray0[8] = (-3927);
      ArrayUtils.shift(intArray0, 525, 0, 1);
      assertArrayEquals(new int[] {(-3927), 2, 2, 2013, 42, 2013, 4, 2013, (-3927)}, intArray0);
      assertEquals(9, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2013;
      shortArray0[1] = (short)2013;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2013, (short)2013, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)2013, (short)2013, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.shift(shortArray1, 1, 1, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2013, (short)2013, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)2013, (short)2013, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2189.0F;
      floatArray0[1] = (-498.0F);
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2189.0F, (-498.0F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 107;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 778;
      longArray0[1] = 45L;
      longArray0[2] = (long) (-847);
      longArray0[3] = (long) 107;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 107;
      longArray0[6] = (long) 107;
      ArrayUtils.swap(longArray0, 0, 1, (-1));
      assertArrayEquals(new long[] {778L, 45L, (-847L), 107L, (-1L), 107L, 107L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.reverse((float[]) null, 0, 778);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-772));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(732, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 732, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)46;
      floatArray0[1] = (float) (byte)46;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3822L);
      assertEquals(3822L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3822L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 2, 4098, (int) (byte)46);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1848);
      intArray0[8] = 72;
      intArray0[2] = (-1848);
      intArray0[3] = (-1848);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1848));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1848.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-102);
      ArrayUtils.swap(byteArray0, 2, (-1848), 2);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-102), (byte) (-102), (byte) (-122)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '%';
      charArray0[2] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f', 122);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'5', '%', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'f';
      intArray1[1] = (int) (byte) (-122);
      int[] intArray2 = ArrayUtils.add(intArray1, 2, (-1848));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {102, (-122)}, intArray1);
      assertArrayEquals(new int[] {102, (-122), (-1848)}, intArray2);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      ArrayUtils.shift(shortArray0, (int) (short)1, (int) (short)1, (-767));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte[] byteArray1 = new Byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)965;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)965}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)965}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shift(shortArray0, (-16), (int) (short) (-1), (-2725));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)965}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '`';
      charArray0[2] = 'Y';
      charArray0[3] = 'n';
      charArray0[4] = 'b';
      ArrayUtils.shift(charArray0, 0, 0, (-1848));
      assertArrayEquals(new char[] {'V', '`', 'Y', 'n', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 661);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 661, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = (-1678.3117);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2110458067));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 84;
      longArray0[1] = (long) (-2110458067);
      longArray0[2] = (long) (-2110458067);
      longArray0[3] = (long) (-2110458067);
      longArray0[4] = (long) (-2110458067);
      doubleArray0[3] = (double) 45;
      longArray0[6] = (long) (-2110458067);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 84L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {84L, (-2110458067L), (-2110458067L), (-2110458067L), (-2110458067L), 0L, (-2110458067L)}, longArray0);
      assertArrayEquals(new long[] {84L, 84L, (-2110458067L), (-2110458067L), (-2110458067L), (-2110458067L), 0L, (-2110458067L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Long long0 = new Long((-659L));
      assertEquals((-659L), (long)long0);
      assertNotNull(long0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1598);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1598);
      floatArray0[1] = (-2.2046F);
      floatArray0[2] = (float) (-659L);
      floatArray0[3] = (-2857.0F);
      floatArray0[4] = (float) (short) (-1598);
      floatArray0[5] = (float) 1170;
      floatArray0[6] = (float) (short) (-1598);
      ArrayUtils.swap(floatArray0, (int) (short) (-1598), (int) (short) (-1598), (int) (short) (-1598));
      assertArrayEquals(new float[] {(-1598.0F), (-2.2046F), (-659.0F), (-2857.0F), (-1598.0F), 1170.0F, (-1598.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2014.6F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1598.0F), (-2.2046F), (-659.0F), (-2857.0F), (-1598.0F), 1170.0F, (-1598.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'E';
      charArray0[2] = 'p';
      charArray0[3] = '~';
      charArray0[4] = 'I';
      charArray0[5] = 'H';
      charArray0[6] = '=';
      ArrayUtils.shift(charArray0, 2, (int) (short)1, 3749);
      assertArrayEquals(new char[] {'H', 'E', 'p', '~', 'I', 'H', '='}, charArray0);
      assertEquals(7, charArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 1169.54557;
      doubleArray0[4] = 1169.54557;
      doubleArray0[5] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 7, 873);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {7.0, 0.7, 7.0, 1169.54557, 1169.54557, 1169.54557}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Long long0 = new Long((-2962L));
      assertEquals((-2962L), (long)long0);
      assertNotNull(long0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2340L;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 2;
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (-2962L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2340L, 7L, (-2962L), 2L}, longArray1);
      assertArrayEquals(new long[] {2340L, 7L, 2L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2784L;
      longArray1[1] = 2784L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {2784L, 2784L}, longArray1);
      assertArrayEquals(new long[] {0L, 2784L, 2784L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 276.06004, 1813.3776);
      assertEquals((-1), int0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1954.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1749.945F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-2285.82F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = Float.NaN;
      ArrayUtils.shift(floatArray0, 1, 1, 2970);
      assertArrayEquals(new float[] {(-1954.0F), (-1.0F), 1749.945F, Float.NaN, (-2285.82F), 1.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'k';
      charArray0[2] = 'L';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = '(';
      charArray0[7] = 'q';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'q', 'k', 'L', 'k', 'k', 'k', '(', 'q'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (-41.22752F);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {40.0F, (-41.22752F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, (-41.22752F), 40.0F, (-41.22752F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '-';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 45.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 45.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-110);
      ArrayUtils.swap(byteArray0, 0, 0, (-555));
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-102), (byte)6, (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte) (-110);
      byteArray1[1] = byte0;
      byteArray1[2] = (Byte) (byte)6;
      byteArray1[3] = (Byte) (byte) (-102);
      byteArray1[4] = (Byte) (byte)6;
      byteArray1[5] = (Byte) (byte) (-122);
      byteArray1[6] = (Byte) (byte) (-122);
      Byte byte1 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[7] = byte1;
      byteArray1[8] = (Byte) (byte) (-102);
      Byte byte2 = ArrayUtils.get(byteArray1, (-697));
      assertNull(byte2);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2045), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2045), 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "The String did not match either specified value");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2045);
      floatArray0[1] = (float) (byte) (-127);
      ArrayUtils.shift(floatArray0, (-786));
      assertArrayEquals(new float[] {(-2045.0F), (-127.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte) (-127);
      ArrayUtils.reverse(byteArray0, (int) (byte)11, (int) (byte)11);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11, (byte) (-67), (byte)11, (byte)11, (byte) (-127), (byte) (-127)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-374));
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-374));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray1 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1516));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-374);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1052);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1052, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (int) (short) (-18);
      intArray0[2] = (-1589);
      intArray0[3] = (int) (short) (-18);
      intArray0[4] = (-3927);
      intArray0[5] = (-3927);
      intArray0[6] = (-3927);
      ArrayUtils.shift(intArray0, (-2333), (-1), 2);
      assertArrayEquals(new int[] {2, (-18), (-1589), (-18), (-3927), (-3927), (-3927)}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-18);
      shortArray0[1] = (short) (-18);
      shortArray0[2] = (short)2013;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short)2013}, shortArray0);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18), (short)2013}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)2013;
      shortArray2[1] = (short)2013;
      shortArray2[2] = (short)2013;
      shortArray2[3] = (short) (-18);
      shortArray2[4] = (short)5;
      shortArray2[5] = (short)2013;
      shortArray2[6] = (short)2013;
      shortArray2[7] = (short)2013;
      ArrayUtils.shift(shortArray2, (-3927), 2508, 102);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)2013, (short) (-18), (short)5, (short)2013, (short)2013, (short)2013, (short)2013, (short)2013}, shortArray2);
      assertEquals(8, shortArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((boolean[]) null, (int) (short) (-18), (int) (short)5, (-3927));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '-';
      charArray0[2] = ' ';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = '-';
      charArray0[6] = 'X';
      charArray0[7] = 'X';
      charArray0[8] = 'X';
      ArrayUtils.shift(charArray0, 2143393202);
      assertArrayEquals(new char[] {'X', 'X', 'S', '-', ' ', 'S', 'S', '-', 'X'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)31, object0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) 2143393202;
      int int1 = ArrayUtils.indexOf(longArray0, (-215L), (-255));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {1L, 2143393202L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4023.09);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4023.09), (-108), 1.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-4023.09)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (-1.0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-4023.09)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('Q');
      assertEquals('Q', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('Q', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('A');
      assertEquals('A', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'A'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shift(charArray0, 0, 1323, (-2810));
      assertArrayEquals(new char[] {'A', 'Q', 'Q'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 997;
      intArray0[1] = 997;
      intArray0[2] = 5;
      intArray0[3] = (int) (byte)64;
      intArray0[4] = (int) (byte)64;
      intArray0[5] = (int) (byte)64;
      int[] intArray1 = ArrayUtils.add(intArray0, 69);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {997, 997, 5, 64, 64, 64}, intArray0);
      assertArrayEquals(new int[] {997, 997, 5, 64, 64, 64, 69}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (byte)28;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1973L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, 5L, 28L}, longArray0);
      assertArrayEquals(new long[] {5L, 5L, 28L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 5;
      longArray2[1] = (long) (byte)64;
      longArray2[2] = (long) 997;
      longArray2[3] = (long) (byte)28;
      longArray2[4] = 1973L;
      longArray2[5] = 1973L;
      longArray2[6] = (long) (byte)64;
      boolean boolean0 = ArrayUtils.contains(longArray2, (-1239L));
      assertFalse(boolean0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {5L, 64L, 997L, 28L, 1973L, 1973L, 64L}, longArray2);
      assertEquals(7, longArray2.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)28;
      shortArray0[1] = (short) (byte)28;
      shortArray0[2] = (short) (byte)64;
      shortArray0[3] = (short) (byte)64;
      shortArray0[4] = (short) (byte)28;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)28, (short)28, (short)64, (short)64, (short)28}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-9735));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)28, (short)28, (short)64, (short)64, (short)28}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      Object object0 = ArrayUtils.get(objectArray0, 0, objectArray0[0]);
      assertEquals(0, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) 0.0F;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1442;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-1410);
      shortArray0[3] = (short)1777;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1156));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1442, (short)4, (short) (-1410), (short)1777}, shortArray1);
      assertArrayEquals(new short[] {(short)1442, (short)4, (short) (-1410), (short)1777}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, intArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-28);
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte) (-28);
      shortArray0[3] = (short) (-773);
      shortArray0[4] = (short) (byte)43;
      shortArray0[5] = (short) (byte) (-28);
      ArrayUtils.shift(shortArray0, 0, 15, (int) (short) (-28));
      assertArrayEquals(new short[] {(short)43, (short) (-28), (short) (-28), (short)43, (short) (-28), (short) (-773)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.builder.HashCodeBuilder");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert(13, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3927);
      intArray0[1] = 2;
      intArray0[2] = (int) (short)2013;
      ArrayUtils.shift(intArray0, 2013, 2, (-2420));
      assertArrayEquals(new int[] {(-3927), 2, 2013}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2013;
      shortArray0[1] = (short) (-265);
      shortArray0[2] = (short) (-18);
      shortArray0[3] = (short)2013;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2013, (short) (-265), (short) (-18), (short)2013}, shortArray0);
      assertArrayEquals(new short[] {(short)2013, (short) (-265), (short) (-18), (short)2013}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 115, (-3927), (int) (short) (-265));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2013, (short) (-265), (short) (-18), (short)2013}, shortArray0);
      assertArrayEquals(new short[] {(short)2013, (short) (-265), (short) (-18), (short)2013}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 115);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3927), 2, 2013}, intArray0);
      assertArrayEquals(new int[] {(-3927), 2, 2013, 115}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)6;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-68));
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte) (-68), (byte)121, (byte)6}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      char[] charArray2 = ArrayUtils.removeElements(charArray1, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertArrayEquals(new char[] {'x'}, charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap(charArray0, 2, (-2089), 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Byte byte0 = Byte.valueOf((byte)37);
      assertEquals((byte)37, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertEquals(5, objectArray0.length);
      
      Byte byte1 = new Byte((byte) (-37));
      assertEquals((byte) (-37), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2);
      assertEquals((-1), int0);
      assertSame(object0, object1);
      
      Object[] objectArray1 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-2035.296924038609);
      doubleArray0[2] = (double) (byte)37;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-464.1518934107), 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), (-2035.296924038609), 37.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 2712.96305826116, 2133891979);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {(-1.0), (-2035.296924038609), 37.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4213.048908596026);
      doubleArray0[1] = (-2035.296924038609);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 1856.0;
      doubleArray0[5] = 2465.4932147793;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 4);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {(-4213.048908596026), (-2035.296924038609), 1.0, 0.7, 1856.0, 2465.4932147793}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)49;
      shortArray0[1] = (short) (byte)49;
      shortArray0[3] = (short) (byte)49;
      ArrayUtils.shift(shortArray0, (-1346), (int) (byte)49, (int) (short)0);
      assertArrayEquals(new short[] {(short)49, (short)49, (short)0, (short)49}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (long) Integer.MAX_VALUE;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'Y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, (-2146684536), Integer.MAX_VALUE, 45);
      assertArrayEquals(new long[] {0L, 0L, 2147483647L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-9), (int) (byte) (-9));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (-2146684536), 117, (double) 45);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 2147483647L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 2147483647L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Short short0 = new Short((short)59);
      assertEquals((short)59, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1203));
      assertEquals((short) (-1203), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)59;
      floatArray0[1] = (float) (short)59;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 59.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {59.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-118);
      Byte byte1 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-24);
      Byte byte3 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-118), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte0 == byte2);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte) (-24), (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte2 == byte0);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte) (-24), (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte2 == byte0);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte2);
      assertEquals((byte) (-24), (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte2 == byte0);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      boolean boolean3 = ArrayUtils.isArrayIndexValid(byteArray0, 1);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean4 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-618L));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Byte[] byteArray0 = new Byte[10];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(20, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)9;
      ArrayUtils.swap(byteArray0, (int) (byte)100, (int) (byte)9, (int) (byte)111);
      assertArrayEquals(new byte[] {(byte)100, (byte)2, (byte)76, (byte)103, (byte)95, (byte)111, (byte) (-94), (byte)65, (byte)9}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray1);
      assertSame(floatArray1, objectArray0);
      assertNotNull(objectArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 6);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte)2, (byte)76, (byte)103, (byte)95, (byte)111, (byte) (-94), (byte)65, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)2, (byte)76, (byte)103, (byte)95, (byte)111, (byte)65, (byte)9}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'V', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'V', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.shift((Object[]) byteArray0, (-568));
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'V';
      doubleArray0[1] = (double) 't';
      doubleArray0[2] = (double) '}';
      doubleArray0[1] = (double) 't';
      ArrayUtils.shift(doubleArray0, (-2461));
      assertArrayEquals(new double[] {116.0, 125.0, 0.0, 86.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)23;
      byteArray2[1] = (byte) (-32);
      byteArray2[2] = (byte)5;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte)23);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-32), (byte)5}, byteArray2);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2543);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1153);
      assertEquals((-1), int0);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.TYPE;
      assertFalse(class2.equals((Object)class1));
      assertFalse(class2.equals((Object)class0));
      assertNotSame(class2, class1);
      assertNotSame(class2, class0);
      assertFalse(class2.isEnum());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<Byte> class3 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class3;
      classArray0[2] = class1;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class2;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[3];
      ArrayUtils.shift((char[]) null, 1);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (byte)115;
      shortArray0[2] = (short) (byte) (-48);
      shortArray0[3] = (short) (byte)115;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-48);
      ArrayUtils.shift(floatArray0, 114);
      assertArrayEquals(new float[] {(-48.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 90.0F;
      floatArray1[1] = (float) 1335;
      floatArray1[2] = (float) (short)115;
      floatArray1[3] = (float) (short)0;
      floatArray1[4] = 1065.0F;
      floatArray1[6] = (float) 114;
      floatArray1[7] = (-1.0F);
      floatArray1[8] = (float) 1335;
      int int1 = ArrayUtils.indexOf(floatArray1, 1065.0F, 0);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {90.0F, 1335.0F, 115.0F, 0.0F, 1065.0F, 0.0F, 114.0F, (-1.0F), 1335.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1203);
      Double double0 = new Double((short) (-1203));
      assertEquals((-1203.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 32, (int) (short) (-1203), (int) (short) (-1203));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-84));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short short0 = new Short((short)120);
      assertEquals((short)120, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[1] = byte1;
      Byte byte2 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray2[2] = byte2;
      byte byte3 = (byte) (-4);
      Byte byte4 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray2[3] = byte4;
      Byte byte5 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray2[4] = byte5;
      Byte byte6 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray2[5] = byte6;
      Byte byte7 = Byte.valueOf((byte) (-84));
      assertEquals((byte) (-84), (byte)byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      
      byteArray2[6] = byte7;
      try { 
        Byte.valueOf("h>`5I_(Y-%m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h>`5I_(Y-%m\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("Y+#TZ4U_'>7-qwHQOQ");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)58);
      assertEquals((byte)58, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[5] = 3482.9329F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[6] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'q';
      charArray0[2] = '=';
      charArray0[3] = 'k';
      charArray0[4] = 'L';
      charArray0[5] = '(';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'W', 'q', '=', 'k', 'L', '('}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(5, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 3482.9329F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = (double) 5;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {61.0, 5.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61.0, 5.0}, doubleArray1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'P', 'P'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'P';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {80L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'P');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P', 'P'}, charArray0);
      assertArrayEquals(new char[] {'P', 'P', 'P'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 1027L;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-648);
      intArray0[2] = (-1);
      intArray0[3] = 8192;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 2114;
      intArray0[6] = (-1526);
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, (-648), (-1), 8192, Integer.MAX_VALUE, 2114, (-1526), 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Byte byte0 = new Byte((byte) (-83));
      assertEquals((byte) (-83), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 15, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'c';
      charArray0[5] = 'b';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'c';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'c', 'b'}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray1);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(5, charArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-79);
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) 'b';
      intArray0[3] = (-78);
      intArray0[4] = (int) 'b';
      intArray0[5] = (int) 'c';
      intArray0[6] = (int) 'c';
      intArray0[7] = (int) 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'S';
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      char[] charArray3 = ArrayUtils.removeElements(charArray1, charArray2);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertArrayEquals(new char[] {'S'}, charArray3);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      Float float0 = new Float((-1035.3314F));
      assertEquals((-1035.3314F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      intArray0[3] = (int) (short)2013;
      ArrayUtils.shift(intArray0, (int) (short) (-18), 0, (-3924));
      assertArrayEquals(new int[] {0, 2, 0, 2013, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 0, (int) (short)2013, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)95;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)120);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)64, (byte)95}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)64, (byte)95}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte)64, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 107;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 107, 1}, intArray0);
      assertArrayEquals(new int[] {0, 107, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 107;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 107;
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 0L, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'M';
      ArrayUtils.shift(charArray0, 107);
      assertArrayEquals(new char[] {'M', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2680, 'M');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2680, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'n';
      intArray0[1] = 586;
      doubleArray0[0] = (double) 1856;
      intArray0[3] = (int) 'n';
      intArray0[4] = 586;
      int[] intArray1 = ArrayUtils.add(intArray0, 2146204860);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {110, 586, 0, 110, 586}, intArray0);
      assertArrayEquals(new int[] {110, 586, 0, 110, 586, 2146204860}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Character[] characterArray0 = new Character[16];
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[13] = character1;
      Character character2 = new Character('n');
      assertEquals('n', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      characterArray0[3] = character2;
      Character character3 = new Character('`');
      assertEquals('`', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      float[] floatArray3 = ArrayUtils.addFirst(floatArray1, (float) 586);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {586.0F}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray3.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-122);
      ArrayUtils.swap(byteArray0, (-2161), 2, (-1));
      assertArrayEquals(new byte[] {(byte) (-40), (byte)2, (byte) (-40), (byte)110, (byte) (-102), (byte) (-110), (byte) (-122)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'W';
      intArray0[1] = (-2543);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)98;
      doubleArray0[1] = (double) 3543L;
      doubleArray0[2] = (double) 87;
      doubleArray0[3] = (double) (short)98;
      doubleArray0[4] = (double) (short)98;
      ArrayUtils.reverse(doubleArray0, (-1), 3156);
      assertArrayEquals(new double[] {98.0, 98.0, 87.0, 3543.0, 98.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert((-114), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 117, (-350), 117);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1219L), (-525));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 117;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {117, (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-46);
      Byte byte1 = new Byte((byte) (-46));
      assertEquals((byte) (-46), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-46));
      assertEquals((byte) (-46), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)71);
      assertEquals((byte)71, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte3);
      assertEquals((byte)0, (byte)byte6);
      assertFalse(byte3 == byte0);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte) (-46), (byte)byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte0 == byte3);
      assertNotNull(byte8);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 117, byte8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(4029.80243192181);
      assertEquals(4029.80243192181, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short) (-1203));
      assertEquals((-1203.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-1203.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertEquals(1.5, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1977.842);
      assertEquals(1977.842, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(78.0);
      assertEquals(78.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4029.80243192181, (-1203.0), (-1203.0), 1.5, 1977.842, 78.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-1203), (-265));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2013;
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 1460, 102);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("33", string0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertNotNull(string0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (short)2013);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) byte0);
      assertFalse(boolean0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (float) (short)2013);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2013.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 81);
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-127.0);
      doubleArray0[2] = (double) 'x';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 'x';
      doubleArray0[5] = (-127.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 694.0, 2, 694.0);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {2.0, (-127.0), 120.0, 0.0, 120.0, (-127.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)19, (-2691));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      
      ArrayUtils.shift((short[]) null, (-1513));
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray2, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray3));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertEquals(5, booleanArray3.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'Q';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 5228;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = (double) 'Q';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2133, (double) 5228);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2133, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 344;
      longArray0[1] = (long) 344;
      longArray0[2] = (long) 344;
      longArray0[3] = (long) 344;
      ArrayUtils.shift(longArray0, (-1), 1816, 111);
      assertArrayEquals(new long[] {344L, 344L, 344L, 344L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2480.0F);
      doubleArray0[1] = (double) 344L;
      ArrayUtils.shift(floatArray0, (-2146325683));
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 43);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'p');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-27);
      shortArray0[1] = (short) (byte) (-27);
      shortArray0[2] = (short) (byte) (-27);
      shortArray0[3] = (short) (byte) (-27);
      ArrayUtils.reverse(shortArray0, 1114111, (-1300));
      assertArrayEquals(new short[] {(short) (-27), (short) (-27), (short) (-27), (short) (-27)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)444);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = new Byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'P';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'P'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'P';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {80L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'P'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'P'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)102);
      assertEquals((short)102, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2747);
      assertEquals((short)2747, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'S';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = 'V';
      charArray0[5] = 'P';
      charArray0[6] = '#';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '#';
      charArray1[1] = 'V';
      charArray1[2] = 'H';
      charArray1[3] = '}';
      charArray1[4] = 'S';
      charArray1[5] = 'V';
      charArray1[6] = 'V';
      charArray1[7] = 'P';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'#', 'V', 'H', '}', 'S', 'V', 'V', 'P'}, charArray1);
      assertArrayEquals(new char[] {'}', 'S', '}', '}', 'V', 'P', '#'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)127);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 57);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-63), (-803));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[16];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-555);
      ArrayUtils.shift(doubleArray1, (-520));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = (boolean) boolean1;
      booleanArray2[2] = true;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = (boolean) boolean0;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray2));
      assertEquals(0, booleanArray3.length);
      assertEquals(5, booleanArray2.length);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)444;
      shortArray0[2] = (short) (-986);
      shortArray0[4] = (short) (-986);
      shortArray0[6] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-144));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)444, (short) (-986), (short)0, (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      int int1 = ArrayUtils.indexOf((long[]) null, 2365L, (int) (short) (-986));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1598);
      shortArray0[1] = (short)2013;
      int[] intArray0 = new int[7];
      intArray0[0] = 1728;
      intArray0[1] = (int) (short)2013;
      intArray0[2] = 0;
      intArray0[3] = (-4593);
      intArray0[4] = (-4593);
      intArray0[5] = (-4593);
      intArray0[6] = (int) (short) (-1598);
      int int0 = ArrayUtils.indexOf(intArray0, (-4593), (-4593));
      assertEquals(3, int0);
      assertArrayEquals(new int[] {1728, 2013, 0, (-4593), (-4593), (-4593), (-1598)}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1728;
      doubleArray0[2] = (double) 1728;
      doubleArray0[3] = (double) (-1598);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)2013;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2762.554783103), (double) 2013);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 1728.0, 1728.0, (-1598.0), 0.0, 2013.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-1598);
      objectArray0[1] = (Object) 2013;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2013, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (byte) (-103), (int) (byte) (-103), 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 34;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 89;
      intArray0[3] = (-1);
      intArray0[4] = (-212);
      intArray0[5] = (-2748);
      intArray0[6] = 2867;
      intArray0[7] = (-3160);
      ArrayUtils.shift(intArray0, 89, (-2748), 4922);
      assertArrayEquals(new int[] {34, Integer.MAX_VALUE, 89, (-1), (-212), (-2748), 2867, (-3160)}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2867;
      longArray0[1] = (long) 4922;
      longArray0[2] = (long) (-2748);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 2867, (-47));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2867L, 4922L, (-2748L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'G';
      charArray0[2] = '&';
      charArray0[3] = 'n';
      charArray0[4] = 'I';
      charArray0[5] = '}';
      charArray0[6] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n', (-1257));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'', 'G', '&', 'n', 'I', '}', '\\'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      byte byte0 = (byte) (-84);
      Byte[] byteArray0 = new Byte[4];
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.insert(774, byteArray2, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = Double.valueOf((double) (byte)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)119;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-45), (byte)2, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-45), (byte)2, (byte)119}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)81, (int) (byte) (-45));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-45), (byte)2, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-45), (byte)2, (byte)119}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      short[] shortArray0 = new short[6];
      byteArray0[0] = (byte)81;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)81;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)81;
      shortArray0[5] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)2, (-2015), (int) (byte) (-45));
      assertArrayEquals(new short[] {(short)0, (short)2, (short)81, (short)2, (short)81, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)81, (short)2, (short)81, (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 0;
      intArray0[2] = (int) (short)5;
      intArray0[3] = 0;
      intArray0[4] = 49;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 0, 5, 0, 49}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 5, 0, 49}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "The String did not match either specified value");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 49;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 49;
      floatArray0[4] = (float) (short)5;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {49.0F, 0.0F, 0.0F, 49.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (short)5);
      assertArrayEquals(new float[] {49.0F, 0.0F, 0.0F, 49.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 21.69F, (int) (short)5);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {49.0F, 0.0F, 0.0F, 49.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1598);
      shortArray0[1] = (short)2013;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1598), 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1598), (short)2013}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1598), (short)2013}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1268L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1268L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.indexOf(charArray0, 'Y');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'x';
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-27));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {120, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte)30, (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)30, (byte)30}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)115);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {120, (-1)}, intArray0);
      assertArrayEquals(new int[] {115, 120, (-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray1, (byte)115, 0);
      assertEquals(0, int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)30, (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)30, (byte)30}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float float0 = new Float((double) (byte)60);
      assertEquals(60.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-429), 57);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      ArrayUtils.swap((char[]) null, 2, (-420));
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '&');
      assertNull(charArray0);
      
      char[] charArray1 = new char[9];
      charArray1[0] = '&';
      charArray1[1] = '&';
      charArray1[2] = '&';
      charArray1[3] = '&';
      charArray1[4] = '&';
      charArray1[5] = '&';
      charArray1[6] = 'e';
      charArray1[7] = '&';
      charArray1[8] = '&';
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&', '&', 'e', '&', '&'}, charArray1);
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&', '&', 'e', '&', '&'}, charArray2);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.swap((long[]) null, (-1), 0, (int) (byte) (-48));
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '}';
      charArray0[2] = 'Z';
      charArray0[3] = '4';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'Z', '}', 'Z', '4'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Byte byte1 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte3 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      // Undeclared exception!
      try { 
        ArrayUtils.sort(abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4616.802039033944);
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 0.7;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4616.802039033944), 7);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-4616.802039033944), (-4616.802039033944), 0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.reverse((float[]) null, (-2236), 1557);
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-2236);
      intArray0[2] = (int) (byte)92;
      intArray0[3] = 331;
      intArray0[4] = 1557;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {7, (-2236), 92, 331, 1557}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Float float0 = new Float((-4616.802039033944));
      assertEquals((-4616.8022F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 1.5);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '5';
      charArray0[2] = 'T';
      charArray0[3] = '\"';
      charArray0[4] = '3';
      charArray0[5] = '&';
      charArray0[6] = '#';
      charArray0[7] = 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1557);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1557, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Byte byte0 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = '(';
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('+');
      assertEquals('+', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char1 = 'g';
      Character character2 = Character.valueOf('g');
      assertEquals('g', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('&');
      assertEquals('&', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)char1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('?');
      assertEquals('?', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('g');
      assertEquals('g', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'(', '+', 'g', '&', '?', 'g'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 2, (-1516), 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) char1;
      floatArray0[1] = (float) 'g';
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) (byte)9;
      floatArray0[4] = (float) (byte)9;
      floatArray0[5] = (float) char1;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) 'g';
      ArrayUtils.swap(floatArray0, (-5538), (-4624), 1);
      assertArrayEquals(new float[] {103.0F, 103.0F, 40.0F, 9.0F, 9.0F, 103.0F, (-1.0F), 103.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1467.5F);
      floatArray0[1] = (-4726.639F);
      ArrayUtils.shift(floatArray0, 7, 832, 10);
      assertArrayEquals(new float[] {(-1467.5F), (-4726.639F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, (-1734));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertTrue(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift(floatArray1, (-117), 2137997927, 53);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-117);
      doubleArray0[1] = (double) 2137997927;
      doubleArray0[2] = (double) (-4726.639F);
      doubleArray0[3] = (double) (-117);
      doubleArray0[4] = (double) 53;
      doubleArray0[5] = (double) 10;
      ArrayUtils.reverse(doubleArray0, 7, 2552);
      assertArrayEquals(new double[] {(-117.0), 2.137997927E9, (-4726.63916015625), (-117.0), 53.0, 10.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5809;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5809);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)5809}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-1), 2, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {88.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-120);
      shortArray0[1] = (short) (byte) (-120);
      shortArray0[2] = (short) (byte) (-120);
      shortArray0[3] = (short) (byte) (-120);
      shortArray0[4] = (short) (byte) (-120);
      shortArray0[5] = (short) (byte) (-120);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-120));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-120), (short) (-120), (short) (-120), (short) (-120), (short) (-120), (short) (-120)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, (-328), (-1), 2146583647);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-328);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 45;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-328.0), (-1.0), 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-328.0), (-1.0), 45.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ArrayUtils.swap(charArray0, (-328), 1, 2118066063);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1848);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 779, (int) (byte) (-68));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (byte) (-68));
      assertNull(longArray0);
      
      ArrayUtils.swap(byteArray1, 1846, 0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1846;
      doubleArray0[1] = (double) (byte) (-68);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-68.0), (double) 72);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1846.0, (-68.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 1846.0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) (byte) (-68);
      objectArray0[4] = null;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) bitSet0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-1848));
      assertEquals(4, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)74, (-2343), (int) (byte)74);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-39.61920928955078));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      doubleArray0[2] = (double) (-757L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1076;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1076}, intArray0);
      assertArrayEquals(new int[] {1076, 1076}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1278.25F));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)444;
      shortArray0[2] = (short) (-986);
      shortArray0[4] = (short) (-986);
      shortArray0[6] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals(6, int0);
      assertArrayEquals(new short[] {(short)0, (short)444, (short) (-986), (short)0, (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2311.90759927863, 3865, (double) 6);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 9);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0, (int) (byte) (-78));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)1559);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)1559);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1559.0F, 1559.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.insert(0, floatArray1, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 1559.0F, 1559.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1559.0F, 1559.0F, 0.0F, 1559.0F, 1559.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)68;
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte)66;
      byteArray2[3] = (byte)1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte)66;
      intArray0[2] = (int) (byte) (-78);
      intArray0[3] = (-2773);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[3]);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 763.6;
      doubleArray0[2] = (double) (byte) (-27);
      doubleArray0[3] = (double) 's';
      doubleArray0[4] = (double) (byte) (-27);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, (int) (byte) (-27), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 763.6, (-27.0), 115.0, (-27.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (int)  (-1));
      assertNull(byte1);
      assertEquals(3, byteArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[5]);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf((Object[]) byteArray0, object0, (int) (byte) (-27));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(8, objectArray0.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Float float0 = new Float((double) (byte)58);
      assertEquals(58.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte) (-114));
      assertEquals((-114.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (float) (byte)58;
      floatArray0[2] = (float) 128;
      floatArray0[3] = (float) (byte)58;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-1928), 1170);
      assertArrayEquals(new float[] {128.0F, 58.0F, 128.0F, 58.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Short short0 = new Short((short)1016);
      assertEquals((short)1016, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-114));
      assertEquals((short) (-114), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1170;
      floatArray1[1] = (float) (byte)58;
      floatArray1[2] = (float) (byte) (-1);
      floatArray1[3] = Float.NaN;
      floatArray1[4] = (float) (-1928);
      floatArray1[5] = (float) 1170;
      floatArray1[6] = (float) 1170;
      floatArray1[7] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {128.0F, 58.0F, 128.0F, 58.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1170.0F, 58.0F, (-1.0F), Float.NaN, (-1928.0F), 1170.0F, 1170.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-114);
      doubleArray0[1] = (double) (-1928);
      doubleArray0[2] = (double) 128.0F;
      doubleArray0[3] = (double) 1170;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (-1928);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-605.343347), (double) 128);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-114.0), (-1928.0), 128.0, 1170.0, (-1.0), (-1928.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 22, 2473);
      assertNull(booleanArray0);
      
      Byte byte1 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byte1;
      Byte byte2 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte2, (int) (byte)31);
      assertEquals((-1), int0);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals(1, objectArray0.length);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      String string0 = ArrayUtils.toString((Object) byte4);
      assertEquals("70", string0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (-110.98834568623266);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 2688.34F;
      ArrayUtils.swap(doubleArray0, 0, (-3332), 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1.0), 0.0, (-110.98834568623266), 0.0, 2688.340087890625}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3763.5394, 2895, (-1.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1.0), 0.0, (-110.98834568623266), 0.0, 2688.340087890625}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.swap((int[]) null, (-2331), (-1), 2895);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'D';
      floatArray0[5] = 3487.26F;
      ArrayUtils.shift((boolean[]) null, 31, (-420), 45);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'L', 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'L';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)81, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 76L;
      floatArray0[4] = (float) 'L';
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (byte)81;
      floatArray0[7] = (float) (byte)81;
      floatArray0[8] = (float) 76L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 76.0F, 76.0F, 0.0F, 81.0F, 81.0F, 76.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 967.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(165, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1202;
      shortArray0[1] = (short)1202;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1202);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1202, (short)1202, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Float float0 = new Float((float) (short)1202);
      assertEquals(1202.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-555));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.insert((-33), floatArray1, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-555);
      intArray0[2] = (int) (short)1202;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)1202;
      intArray0[5] = (int) (short)1202;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-555), 1202, 0, 1202, 1202}, intArray1);
      assertArrayEquals(new int[] {0, (-555), 1202, 0, 1202, 1202}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (-420);
      floatArray0[3] = (float) 'D';
      floatArray0[5] = 3487.26F;
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 3487.26F);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-28);
      Byte byte1 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-28), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-28), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-28), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 1557, 104);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)14;
      ArrayUtils.shift(byteArray0, 104, 1268, 1557);
      assertArrayEquals(new byte[] {(byte)1, (byte)14}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 104;
      longArray0[1] = (long) 1268;
      int int0 = ArrayUtils.indexOf(longArray0, 1268L);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {104L, 1268L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 's';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 4, 763.6);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (int)  (-27));
      assertNull(byte1);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null, 4);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, 12);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = (boolean) boolean0;
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(1, booleanArray3.length);
      assertEquals(1, booleanArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) 'L';
      intArray0[2] = (int) 'L';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 76, 76}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      ArrayUtils.shift(doubleArray1, (-1873), 12, 76);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1169.54557;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = 0.7;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse((float[]) null, (-2236), 1557);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ArrayUtils.shift(byteArray0, (-2236), 5, (int) (byte)92);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(3773.389374749);
      assertEquals(3773.389374749, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(3773.389374749, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[1] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(3773.389374749, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(274.758495997);
      assertEquals(274.758495997, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1050), 2146890850);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-245);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-245));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-245)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = ';';
      Character character1 = Character.valueOf(';');
      assertEquals(';', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals(';', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals(';', (char)character3);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertEquals(';', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1847);
      assertEquals((short)1847, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)1847, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(3, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)11397);
      assertEquals((short)11397, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) shortArray0[1];
      shortArray2[1] = (short)1847;
      shortArray2[2] = (short) shortArray0[0];
      shortArray2[3] = (short)1847;
      shortArray2[4] = (short)59;
      shortArray2[5] = (short) shortArray0[1];
      shortArray2[6] = (short)11397;
      short[] shortArray3 = ArrayUtils.removeElement(shortArray2, (short) shortArray0[1]);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)1847, (short)1847, (short)1847, (short)1847, (short)59, (short)1847, (short)11397}, shortArray2);
      assertArrayEquals(new short[] {(short)1847, (short)1847, (short)1847, (short)59, (short)1847, (short)11397}, shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(6, shortArray3.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4901.0F);
      floatArray0[1] = 1412.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4901.0F), 1412.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-4901.0F), 1412.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Float float0 = new Float((-264.52181355645666));
      assertEquals((-264.52182F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 1016L);
      assertEquals(1016.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      ArrayUtils.shift(doubleArray0, (int) (byte)46, 1843, (-1302));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1185.3151F));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Byte[]) null, (-63));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) (byte)38;
      objectArray0[2] = (Object) (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'C';
      charArray0[2] = 'e';
      charArray0[3] = '-';
      charArray0[4] = 'k';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'C', 'e', '-', 'k'}, charArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new char[] {',', 'C', 'e', '-', 'k'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(2, intArray0.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (-215L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1896;
      intArray0[1] = 1896;
      intArray0[2] = (-1455);
      intArray0[3] = (-1455);
      intArray0[4] = 54;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1896, (-1455), (-1455), 54, 1896}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1896, (-1455), (-1455), 54, 1896}, intArray0);
      assertArrayEquals(new int[] {1896, (-1455), (-1455), 54, 1896}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte byte0 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 843);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 1, (-1629.9638630172299));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 's';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 4, 763.6);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 170, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 170, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '7';
      charArray0[2] = 'c';
      charArray0[3] = 'o';
      charArray0[4] = 'I';
      charArray0[5] = 'O';
      charArray0[6] = 'n';
      charArray0[7] = 'v';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\"', '7', 'c', 'o', 'I', 'O', 'n', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.shift(charArray1, (-2183), 3108, (-2183));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\"', '7', 'c', 'o', 'I', 'O', 'n', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      char[] charArray0 = new char[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'G', (-265));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-265), 65, (-265));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-655.0272F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-655.0272F));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-655.0272F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 2831.6315656;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      Long[] longArray0 = new Long[6];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3084L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3084L, 3084L, 3084L, 3084L, 3084L, 3084L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      ArrayUtils.shift(charArray0, (-3793), 3, (int) (byte)92);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)92;
      floatArray0[1] = (float) '`';
      floatArray0[2] = (float) 3084L;
      floatArray0[3] = (float) (-3793);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) (-3793);
      floatArray0[7] = 1098.42F;
      floatArray0[8] = (float) (byte)92;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {92.0F, 96.0F, 3084.0F, (-3793.0F), 2.0F, 3.0F, (-3793.0F), 1098.42F, 92.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-48));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'W';
      intArray0[1] = (-2543);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long long0 = new Long(3543L);
      assertEquals(3543L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-214L));
      assertEquals((-214L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-214L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'E', (-1350));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(shortArray1, (-325), (-1), (-822));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive((Short[]) null, (short)98);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4445.86F);
      floatArray0[1] = (-1304.0547F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1304.0547F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4445.86F), (-1304.0547F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4445.86F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1304.0547F);
      doubleArray0[1] = (double) (-4445.86F);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-4445.86F));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1304.0546875), (-4445.85986328125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1304.0546875), (-4445.85986328125), (-4445.85986328125)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 2057.5201);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1304.0546875), (-4445.85986328125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1304.0546875), (-4445.85986328125), (-4445.85986328125)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[] longArray0 = ArrayUtils.insert(138, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2125;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1583);
      shortArray0[3] = (short) (-770);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1628;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short) (-2769);
      shortArray0[8] = (short) (-542);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2125, (short) (-1), (short) (-1583), (short) (-770), (short)0, (short)1628, (short)10, (short) (-2769), (short) (-542)}, shortArray1);
      assertArrayEquals(new short[] {(short)2125, (short) (-1), (short) (-1583), (short) (-770), (short)0, (short)1628, (short)10, (short) (-2769), (short) (-542)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 1, 1, (int) (short)965);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)46);
      assertEquals((byte)46, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Object[] objectArray0 = new Object[0];
      Byte byte3 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte3);
      assertFalse(boolean0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      ArrayUtils.reverse(byteArray0, 558, 1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)46, (byte)46, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) 558;
      doubleArray0[2] = (double) 558;
      doubleArray0[3] = (-92.260353758);
      doubleArray0[4] = (double) (byte) (-91);
      doubleArray0[5] = (double) (byte)46;
      ArrayUtils.shift((short[]) null, 2, (int) (byte)46, (-2147117328));
      ArrayUtils.shift((int[]) null, (int) (byte)46);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)46, (-2147117328));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)46, (byte)46, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 91);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'W';
      intArray0[1] = (-2543);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long long0 = new Long(3543L);
      assertEquals(3543L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-214L));
      assertEquals((-214L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-214L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'E', (-1350));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3543L;
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-325));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {3543.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)58, (byte)58, (byte)46, (byte)58, (byte) (-114), (byte) (-1), (byte) (-114)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte)58);
      assertEquals(58.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1275), 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)46;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 111);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {46}, intArray0);
      assertEquals(1, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1571, (int) (byte) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {46}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)81;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)74;
      floatArray0[1] = 2021.9F;
      floatArray0[2] = (float) 780;
      floatArray0[3] = (float) 780;
      floatArray0[4] = (float) (byte) (-99);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)81, (-3673));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {74.0F, 2021.9F, 780.0F, 780.0F, (-99.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-549), 1995);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2021.9F, 780.0F, 780.0F, (-99.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {74.0F, 2021.9F, 780.0F, 780.0F, (-99.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(4, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-265.0), (-265.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1800, (-1145));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap((long[]) null, 122, 3, (-265));
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-411);
      longArray0[1] = (long) (-411);
      longArray0[2] = 1767L;
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray3);
      assertEquals(1, longArray1.length);
      assertEquals(3, longArray2.length);
      assertEquals(2, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      int int0 = (-2442);
      ArrayUtils.swap(byteArray0, (-2442), (-4064), (-4064));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-126);
      longArray0[1] = (long) (-4064);
      longArray0[2] = 121L;
      longArray0[3] = (long) (-4064);
      longArray0[4] = (long) (byte) (-126);
      longArray0[5] = 997L;
      longArray0[6] = (long) (-2442);
      longArray0[7] = (long) (-4064);
      longArray0[8] = (long) (byte) (-126);
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-4064);
      longArray1[1] = (long) (-4064);
      longArray1[2] = (long) (byte) (-126);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-4064L), (-4064L), (-126L)}, longArray1);
      assertArrayEquals(new long[] {121L, (-126L), 997L, (-2442L), (-4064L), (-126L)}, longArray2);
      assertArrayEquals(new long[] {(-126L), (-4064L), 121L, (-4064L), (-126L), 997L, (-2442L), (-4064L), (-126L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(6, longArray2.length);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-4064), '&');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4064, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 40);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Long long0 = new Long((byte)92);
      assertEquals(92L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3541);
      floatArray0[1] = (float) (-3541);
      floatArray0[2] = (float) (-3541);
      floatArray0[3] = (float) (-3541);
      floatArray0[4] = (float) 0;
      ArrayUtils.reverse(floatArray0, (-3541), (-4480));
      assertArrayEquals(new float[] {(-3541.0F), (-3541.0F), (-3541.0F), (-3541.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.shift(byteArray0, (-1040), 3980, (-2543));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((int) (byte) (-105), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)69;
      ArrayUtils.shift(byteArray0, 3254);
      assertArrayEquals(new byte[] {(byte)46, (byte)69, (byte)46, (byte) (-105), (byte)46, (byte)46}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Float float0 = new Float((-189.7));
      assertEquals((-189.7F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2113.2158F;
      floatArray0[1] = (float) (byte)69;
      floatArray0[2] = (-3086.666F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)46, (int) (byte)46);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2113.2158F, 69.0F, (-3086.666F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)46;
      intArray0[1] = 780;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)46);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {46, 780}, intArray0);
      assertEquals(2, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3285, (int) (byte)69);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {46, 780}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)69;
      ArrayUtils.swap(byteArray1, 46, (int) (byte)69, (-1482));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)69}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float(2688.34F);
      assertEquals(2688.34F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[8];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1978.6F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1978.6F, 1978.6F, 1978.6F, 1978.6F, 1978.6F, 1978.6F, 1978.6F, 1978.6F}, floatArray2, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      
      ArrayUtils.swap(intArray0, 319, (int) '/', 319);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2431L;
      longArray0[1] = (long) '/';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2431L, 47L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-126);
      byte byte1 = (byte)17;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)17, (int) (byte) (-126));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap((short[]) null, 3032, 8, (int) (byte) (-126));
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)83, 0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'W';
      charArray0[2] = 'e';
      charArray0[3] = 'N';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4064, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-98));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-98);
      Byte byte0 = ArrayUtils.get((Byte[]) null, (int)  (-98));
      assertNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) byte0;
      doubleArray0[7] = (double) (byte)1;
      ArrayUtils.shift(doubleArray0, (int) byte0, 5204, (int) byte0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) byte0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((boolean[]) null, 8, 6, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3457;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {3457}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = (-419);
      int int1 = 0;
      ArrayUtils.swap((Object[]) null, (-419), 3457, 0);
      byte byte0 = (byte)62;
      Byte byte1 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean1 = ArrayUtils.isEquals(byte1, byte1);
      assertTrue(boolean1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-419);
      doubleArray0[1] = (double) 3457;
      doubleArray0[2] = (double) 3457;
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 3.0, (-1540.19));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-419.0), 3457.0, 3457.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {3457}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)62, object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, '2');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '2');
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)65;
      shortArray0[2] = (short)29;
      shortArray0[3] = (short)583;
      shortArray0[4] = (short)692;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)1, (short)65, (short)29, (short)583, (short)692}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, (-1), (int) (short)65);
      assertArrayEquals(new short[] {(short)692, (short)583, (short)29, (short)65, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)692, (short)583, (short)29, (short)65, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)8, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)692, (short)583, (short)29, (short)65, (short)1}, shortArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)692, (short)583, (short)29, (short)65, (short)1}, shortArray0);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 's';
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-27), 121);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '-';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '-'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) 'S';
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shift(booleanArray0, (-419), 1058, 1058);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 3892.45453);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {46.0, 1058.0, 83.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {46.0, 1058.0, 83.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte) (-120), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap(charArray0, (-3317), (-1073741823), (int) (short)1639);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'S';
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) (-3317);
      doubleArray0[5] = (double) (-1073741823);
      doubleArray0[6] = (double) (-1073741823);
      doubleArray0[7] = (double) 'S';
      doubleArray0[8] = (double) 'S';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1639, 4, 2253.45453);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {83.0, 0.0, 0.0, 83.0, (-3317.0), (-1.073741823E9), (-1.073741823E9), 83.0, 83.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shuffle((Object[]) shortArray0, (Random) null);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'S';
      intArray0[1] = (-1073741823);
      intArray0[2] = (-3317);
      intArray0[3] = (int) 'S';
      intArray0[4] = 3;
      intArray0[5] = 193;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 505, (-3317));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {83, (-1073741823), (-3317), 83, 3, 193}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1247));
      assertEquals((-1247), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1247));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1247)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1247));
      assertEquals((short) (-1247), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1247)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-986));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1247)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1247);
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (-1L);
      longArray0[4] = (long) (short)shortArray0[0];
      longArray0[5] = (long) (short)shortArray0[0];
      longArray0[6] = (long) (int)integerArray0[0];
      longArray0[7] = (long) (short)shortArray0[0];
      ArrayUtils.shift(longArray0, (-986));
      assertArrayEquals(new long[] {(-1247L), (-1L), (-1247L), (-1247L), (-1247L), (-1247L), (-1247L), (-1247L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1346), (int) (short)127, 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1346);
      intArray0[1] = (int) (short)127;
      intArray0[2] = (int) (short)127;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {127, 127, (-1346)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1346);
      floatArray0[1] = (float) 127;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-1346);
      floatArray0[4] = (float) 127;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1346), 1);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1346.0F), 127.0F, 1.0F, (-1346.0F), 127.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      ArrayUtils.shift((long[]) null, (int) (short)1639, 1816, (int) (short)1639);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 831, (int) (short)1639);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'S';
      intArray0[1] = 831;
      intArray0[2] = (int) 'S';
      intArray0[3] = 831;
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      intArray0[4] = 1816;
      intArray0[5] = 1816;
      intArray0[6] = (int) 'S';
      intArray0[7] = (-113);
      intArray0[8] = (int) 'S';
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {83, 83, 831, 1816, 1816, 83, (-113), 83, 831}, intArray0);
      assertEquals(9, intArray0.length);
      
      Double[] doubleArray2 = new Double[0];
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = booleanArray1[5];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-772), 9, (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-772);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-394.7347F);
      floatArray0[3] = (float) 1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 1923);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-772.0F), (-1.0F), (-394.7347F), 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = (-265);
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), (-265)}, intArray0);
      assertArrayEquals(new int[] {0, (-265), (-265), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-29);
      longArray0[2] = (long) (-29);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-265);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 1;
      ArrayUtils.shift(longArray0, (-29), 0, (-265));
      assertArrayEquals(new long[] {0L, (-29L), (-29L), 1L, (-265L), 0L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      byte byte0 = (byte)74;
      Byte byte1 = Byte.valueOf((byte)74);
      assertEquals((byte)74, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = Byte.valueOf((byte)74);
      assertEquals((byte)74, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 128);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4, 4}, intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 4}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      MockRandom mockRandom1 = new MockRandom(253L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new float[] {4.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)74;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short)1468;
      shortArray0[4] = (short) (byte)74;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)74, (short)74, (short)74, (short)1468, (short)74, (short)74, (short)74, (short)74}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)3);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-144);
      shortArray0[1] = (short) (-144);
      shortArray0[2] = (short) (-144);
      shortArray0[3] = (short) (-144);
      shortArray0[4] = (short) (-1489);
      shortArray0[5] = (short) (-144);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-144));
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short) (-144), (short) (-144), (short) (-144), (short) (-144), (short) (-1489), (short) (-144)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-63);
      Byte byte3 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte4;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = byte2;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)120;
      byteArray1[8] = byte2;
      int int1 = ArrayUtils.indexOf(byteArray1, byte2);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-68), (byte)120, (byte)120, (byte) (-63), (byte)1, (byte)1, (byte)120, (byte) (-63)}, byteArray1);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray2.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = 3500;
      intArray0[3] = (-1045);
      intArray0[4] = (-2145015274);
      ArrayUtils.shift(intArray0, (-2145015274), 1, 14);
      assertArrayEquals(new int[] {1, 1, 3500, (-1045), (-2145015274)}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, (-3927), (-4452), (-2145015274));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)1, (-2145015274));
      assertEquals(0, int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (short)1, shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(14, shortArray2.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      ArrayUtils.shift(byteArray0, (int) (byte)46);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Float float0 = new Float((float) 1016L);
      assertEquals(1016.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)46;
      intArray0[1] = (int) (byte)46;
      intArray0[2] = (int) (byte)46;
      intArray0[3] = (int) (byte)46;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)81, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'<', 'f'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap((boolean[]) null, 0, 46, 46);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.95969));
      assertEquals((-974.95969), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      doubleArray0[2] = (double) 870;
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[1] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-123L), 870L, 870L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-123L), 870L, 870L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1542.090316324), (double) (-33));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 870.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-33));
      assertEquals(0, int0);
      assertEquals(4, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Byte[] byteArray3 = new Byte[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 870;
      intArray0[1] = (int) (byte) (-123);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (-33);
      intArray0[4] = 870;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray3, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 870, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)20);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3055.4383));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)20;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 20.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 20.0F, 0.0F, 20.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(6, intArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7526687669542281);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      floatArray0[8] = (float) 2;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2543);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1167);
      assertEquals((-1), int0);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'k';
      charArray0[2] = 'W';
      charArray0[3] = '=';
      charArray0[4] = 'k';
      charArray0[5] = 'L';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'L', 'k', 'W', '=', 'k', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((-1), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 56;
      intArray0[1] = (-266);
      intArray0[2] = 62;
      ArrayUtils.swap(intArray0, 2, 62, 14);
      assertArrayEquals(new int[] {56, (-266), 62}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'I');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 'I';
      doubleArray0[2] = (double) 'I';
      doubleArray0[3] = (double) 'I';
      doubleArray0[4] = (double) 'I';
      ArrayUtils.shift(doubleArray0, (-1), 2, (-1));
      assertArrayEquals(new double[] {73.0, 73.0, 73.0, 73.0, 73.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1121);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1121));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1121)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1121), (short) (-1121)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1412.0F);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1121);
      longArray0[1] = (long) (short) (-1121);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1121L), (-2156));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1121L), (-1121L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-2156));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = mockRandom0.nextGaussian();
      assertEquals(0.1, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      IntStream intStream0 = mockRandom0.ints((-3318), (int) (short) (-1121));
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(2L, long0);
      
      int int1 = mockRandom0.nextInt((-5853));
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, 0, (int) (byte)81);
      assertNull(byteArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)55;
      floatArray0[1] = (-45.0F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-48);
      floatArray0[4] = (float) (byte) (-48);
      floatArray0[5] = (float) 444;
      floatArray0[6] = (float) (byte)115;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {55.0F, (-45.0F), 0.0F, (-48.0F), (-48.0F), 444.0F, 115.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      Long[] longArray2 = new Long[2];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((byte) (-48));
      assertEquals((-48L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray2[1] = long1;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray3.length);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-48);
      byteArray2[1] = (Byte) (byte) (-48);
      byteArray2[2] = (Byte) (byte) (-48);
      byteArray2[3] = (Byte) (byte) (-48);
      byteArray2[4] = (Byte) (byte) (-48);
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte) (-48), (int)(byte) (-48), 0, 1).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray2, comparator0);
      assertFalse(boolean0);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      short[] shortArray0 = new short[18];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
      assertEquals(18, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertEquals(18, shortArray3.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-43);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-43)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-43)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2688.34F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0.0F, (int) (byte)2, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 0.0, 2688.340087890625}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short)53;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short)3071;
      shortArray0[8] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)2, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)53, (short)2, (short)3071, (short)2}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short) (-2155);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short) (-2155), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short) (-2155), (short)0, (short)0, (short)127, (short) (-2155), (short) (-2155), (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (short)127;
      longArray0[3] = 45L;
      longArray0[1] = (long) 'x';
      longArray0[5] = (long) (short) (-2155);
      longArray0[6] = (long) 'x';
      longArray0[7] = (long) 'g';
      longArray0[8] = (long) (short)127;
      ArrayUtils.swap(longArray0, (-1), (-847), 778);
      assertArrayEquals(new long[] {1L, 120L, 127L, 45L, 0L, (-2155L), 120L, 103L, 127L}, longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-3541), (int) (short) (-2155));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-2155L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2155);
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) (short) (-2155);
      intArray0[4] = (int) (short)127;
      int[] intArray1 = ArrayUtils.add(intArray0, 127);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2155), 120, 120, (-2155), 127}, intArray0);
      assertArrayEquals(new int[] {(-2155), 120, 120, (-2155), 127, 127}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'D';
      charArray0[2] = ':';
      charArray0[3] = '6';
      charArray0[4] = '3';
      charArray0[5] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'A', 'D', ':', '6', '3', '3'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'D');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'A', 'D', ':', '6', '3', '3'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      
      Float float0 = new Float(211.568972);
      assertEquals(211.56897F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-25));
      assertEquals((byte) (-25), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (byte)122);
      assertEquals(122.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {122.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Byte byte2 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte1));
      assertNull(byteArray0);
      
      ArrayUtils.reverse(floatArray1, (int) (byte)75, (-3550));
      assertArrayEquals(new float[] {122.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Byte byte3 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      String string0 = ArrayUtils.toString((Object) byte3);
      assertEquals("12", string0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)75;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)122;
      byteArray1[7] = (byte) (-25);
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)122;
      byte[] byteArray3 = ArrayUtils.addAll(byteArray1, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)122, (byte)12, (byte)66, (byte)75, (byte)75, (byte)122, (byte) (-25)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)122}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)122, (byte)12, (byte)66, (byte)75, (byte)75, (byte)122, (byte) (-25), (byte)122}, byteArray3);
      assertEquals(8, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(9, byteArray3.length);
      
      Byte byte4 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) byte4, (int) (byte) (-25));
      assertEquals((-1), int0);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 497.5925F;
      floatArray0[2] = 497.5925F;
      floatArray0[3] = 299.0F;
      floatArray0[4] = 1937.926F;
      floatArray0[5] = (-3910.428F);
      floatArray0[6] = (-5460.6284F);
      floatArray0[7] = (float) (byte)74;
      floatArray0[8] = (float) 0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 74.0F, (-5460.6284F), (-3910.428F), 1937.926F, 299.0F, 497.5925F, 497.5925F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)81, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-291), (-291));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (-1), 4649, (-1390));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1150.14F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-582.27F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 1170;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 856, (-1009));
      assertArrayEquals(new float[] {1150.14F, 0.0F, 0.0F, (-582.27F), 0.0F, 0.0F, 1170.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Short short0 = new Short((byte) (-28));
      assertEquals((short) (-28), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1262);
      assertEquals((short)1262, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-265.0), (-265.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1800, (-1145));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray3 = new char[8];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      
      charArray3[0] = '6';
      charArray3[1] = 'P';
      charArray3[2] = '6';
      charArray3[3] = 'x';
      charArray3[4] = '.';
      charArray3[5] = '.';
      charArray3[6] = '6';
      charArray3[7] = 'P';
      char[] charArray4 = ArrayUtils.clone(charArray3);
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray4);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotNull(charArray4);
      assertArrayEquals(new char[] {'6', 'P', '6', 'x', '.', '.', '6', 'P'}, charArray4);
      assertArrayEquals(new char[] {'6', 'P', '6', 'x', '.', '.', '6', 'P'}, charArray3);
      assertEquals(8, charArray4.length);
      assertEquals(8, charArray3.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'n';
      intArray0[1] = 586;
      doubleArray0[0] = (double) 1856;
      intArray0[3] = (int) 'n';
      intArray0[4] = 586;
      int[] intArray1 = ArrayUtils.add(intArray0, 2146204860);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {110, 586, 0, 110, 586}, intArray0);
      assertArrayEquals(new int[] {110, 586, 0, 110, 586, 2146204860}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Character[] characterArray0 = new Character[16];
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      char char0 = 'j';
      Character character1 = Character.valueOf('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[13] = character1;
      Character character2 = new Character('n');
      assertEquals('n', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      characterArray0[3] = character2;
      Character character3 = new Character('`');
      assertEquals('`', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(16, characterArray1.length);
      assertEquals(16, characterArray0.length);
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray1, (float) 586);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {586.0F}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray3.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 110;
      longArray0[2] = (long) '`';
      longArray0[3] = (long) (char)character3;
      longArray0[4] = (long) 'n';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (int) char0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 110L, 96L, 96L, 110L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)22;
      Byte byte1 = new Byte((byte)22);
      assertEquals((byte)22, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)22, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)22, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)17);
      assertEquals((byte)17, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte8);
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte(byte0);
      assertEquals((byte)22, (byte)byte9);
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte3));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-986);
      shortArray0[1] = (short)444;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)444;
      shortArray0[6] = (short)444;
      shortArray0[7] = (short)444;
      shortArray0[8] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)444);
      assertEquals(7, int0);
      assertArrayEquals(new short[] {(short) (-986), (short)444, (short)0, (short)0, (short)0, (short)444, (short)444, (short)444, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert(7, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '?';
      charArray0[2] = '%';
      charArray0[3] = '@';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'`', '?', '%', '@'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0, (short)127, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[3] = 45L;
      longArray0[4] = (long) 'x';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (-45.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {120.0F, (-45.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      Long long0 = new Long((short) (-2155));
      assertEquals((-2155L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-423L));
      assertEquals((-423L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte) (-124));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray2.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 501.10602F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {120.0F, (-45.0F), 501.10602F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-45.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[1] = (-4726.639F);
      ArrayUtils.shift(floatArray0, 7, 832, 10);
      assertEquals(18, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, (-1734));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.junitpioneer.jupiter.params.DisableIfNameExtension";
      stringArray0[1] = "-ava.lang.Obje.t";
      stringArray0[2] = "%|YD@=-0J";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = ":";
      stringArray0[5] = "=y$D@d]Jd";
      stringArray0[6] = "HUVy$sevo76 Gp.!:";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 832);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 2, 1933, 2);
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-38);
      int[] intArray0 = new int[1];
      intArray0[0] = (-620);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(",jV+1\"");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(",jV+1\"");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(",jV+1\"");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3086.666F);
      floatArray0[1] = (float) (byte) (-38);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte) (-38));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3086.666F), (-38.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3086.666F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      ArrayUtils.reverse((long[]) null, (int) (byte) (-38), 2057);
      boolean boolean7 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (-38.0F);
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) boolean3;
      objectArray0[4] = (Object) boolean4;
      objectArray0[5] = (Object) boolean2;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-38);
      shortArray0[1] = (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)859);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-38), (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 2, 1933, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-620);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(",jV+1\"");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(",jV+1\"");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(",jV+1\"");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.reverse((long[]) null, (int) (byte)0, 2057);
      boolean boolean7 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) boolean3;
      objectArray0[4] = (Object) boolean4;
      objectArray0[5] = (Object) boolean2;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)859);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      int[] intArray3 = ArrayUtils.addFirst(intArray1, 2223);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {2223, 0, 0}, intArray3);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray3.length);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0);
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 2, 2, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[4];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "XOBJ3;mn>DSMI[>JJ");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 950;
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1), 950}, intArray1);
      assertArrayEquals(new int[] {(-1), 950}, intArray2);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 950}, intArray1);
      assertArrayEquals(new int[] {(-1), 950}, intArray3);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2378.61692;
      ArrayUtils.reverse(doubleArray0, (-738), 3520);
      assertArrayEquals(new double[] {2378.61692}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-738);
      intArray0[2] = 3520;
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)80, 3520);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-60));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-126.0F);
      floatArray0[1] = (float) (-738);
      floatArray0[2] = (float) (-738);
      floatArray0[3] = (float) 3520;
      floatArray0[4] = (float) (-738);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-60), 3520);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-126.0F), (-738.0F), (-738.0F), 3520.0F, (-738.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray1, (byte) (-60), 3520);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-126.0F);
      objectArray0[1] = (Object) 2378.61692;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-738.0F);
      doubleArray1[1] = 3.0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-738.0F);
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray1, (double) (-738.0F), 515.60880778345);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(64, bitSet2.size());
      assertEquals("{0, 3}", bitSet2.toString());
      assertEquals(4, bitSet2.length());
      assertEquals(2, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertNotNull(bitSet2);
      assertArrayEquals(new double[] {(-738.0), 3.0, (-1.0), (-738.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (-2255));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray3 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray3.equals((Object)longArray2));
      assertSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray3.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray4 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray4.equals((Object)longArray2));
      assertSame(longArray4, longArray3);
      assertSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray4.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)19;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      Byte byte0 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte) (-33));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 4, 199, (double) (short) (-101));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Long[] longArray5 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray5);
      assertSame(longArray5, longArray0);
      assertNotNull(longArray5);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray5.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((short) (-101));
      assertEquals((-101.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)122;
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)10, (int) (byte)30);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)122, (byte)30, (byte)122}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[7];
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      try { 
        Float.valueOf("java.lang.Short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(charArray0, (-364));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-364);
      floatArray0[1] = (float) (-364);
      floatArray0[2] = (float) (-364);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-364.0F), (-364.0F), (-364.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-364.0F), (-364.0F), (-364.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = (-364);
      intArray0[2] = (-364);
      intArray0[3] = (-364);
      intArray0[4] = (-364);
      intArray0[5] = (-364);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-364), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -364, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-91), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)object1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)object1));
      assertNotNull(byte2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)122;
      longArray0[1] = (long) (byte) (-91);
      longArray0[2] = (long) (byte) (-91);
      longArray0[3] = (long) (byte)122;
      ArrayUtils.shift(longArray0, 385, 385, 385);
      assertArrayEquals(new long[] {122L, (-91L), (-91L), 122L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.1;
      doubleArray0[4] = (double) 122L;
      doubleArray0[5] = (double) 122L;
      doubleArray0[6] = (double) (-91L);
      doubleArray0[7] = (double) (byte)122;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 36, 36);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.1, 0.0, 0.0, 122.0, 122.0, (-91.0), 122.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte) (-91));
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-91));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (byte) (-91));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (byte) (-15), (int) (byte) (-15));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      int[] intArray0 = new int[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.reverse(intArray0, 48, (int) (byte) (-62));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 48);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 48}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray2);
      assertTrue(boolean2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      
      int[] intArray3 = ArrayUtils.removeAll(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 48}, intArray1);
      assertArrayEquals(new int[] {48}, intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, Integer.MAX_VALUE, (short)1305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1488.5;
      doubleArray0[1] = (-10.425448711331866);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      intArray0[3] = (int) '(';
      intArray0[4] = (int) '(';
      intArray0[5] = (int) '(';
      intArray0[6] = (int) '(';
      intArray0[7] = (int) '(';
      intArray0[8] = (int) '(';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {40, 40, 40, 40, 40, 40, 40, 40, 40}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float float0 = new Float(4616.38);
      assertEquals(4616.38F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 40);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 9, (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, 1579, 1579, (-1269));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1816;
      doubleArray0[1] = (double) 1579;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 127);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1816.0, 1579.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1816.0, 1579.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = 'm';
      charArray0[3] = 'k';
      charArray0[4] = 't';
      charArray0[5] = 'z';
      charArray0[6] = 'j';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'3', 'R', 'm', 'k', 't', 'z', 'j'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-91), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)object1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)object1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)122;
      longArray0[1] = (long) (byte) (-91);
      longArray0[2] = (long) (byte) (-91);
      longArray0[3] = (long) (byte)122;
      ArrayUtils.shift(longArray0, 385, 385, 385);
      assertArrayEquals(new long[] {122L, (-91L), (-91L), 122L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (-91L);
      doubleArray0[4] = (double) 122L;
      doubleArray0[5] = (double) 122L;
      doubleArray0[6] = (double) (-91L);
      doubleArray0[7] = (double) (byte)122;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 36, 36);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.1, (-91.0), 0.0, 122.0, 122.0, (-91.0), 122.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-91)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte) (-91));
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-91));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.shift(shortArray0, 1, (-2690), (-2690));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'W';
      intArray0[1] = (-2543);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long long0 = new Long(3543L);
      assertEquals(3543L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-214L));
      assertEquals((-214L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-214L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '6', (-1350));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(shortArray1, (-325), (-1), (-822));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 2, 1933, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-620);
      ArrayUtils.shift(intArray0, (int) (byte) (-38), (-620), (int) (short)444);
      assertArrayEquals(new int[] {(-620)}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-38);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38), (byte) (-48), (byte)0, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte) (-48), (byte) (-38), (byte) (-38)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte) (-48), (byte) (-38), (byte) (-38)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-620);
      integerArray0[1] = (Integer) (-620);
      integerArray0[2] = (Integer) (-620);
      integerArray0[3] = (Integer) (-620);
      integerArray0[4] = (Integer) (-620);
      integerArray0[5] = (Integer) (-620);
      Integer integer0 = new Integer(1253);
      assertEquals(1253, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) (-620);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 2145017754, 1085);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 344;
      longArray0[1] = (long) 344;
      longArray0[2] = (long) 344;
      longArray0[3] = (long) 344;
      ArrayUtils.shift(longArray0, (-1), 1816, 111);
      assertArrayEquals(new long[] {344L, 344L, 344L, 344L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2480.0F);
      doubleArray0[1] = (double) 344L;
      doubleArray0[2] = (double) (-1.0F);
      floatArray0[3] = (float) 344L;
      doubleArray0[4] = (double) 344L;
      doubleArray0[5] = (double) (-2480.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 337.438347387, (double) 344L);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 6, 7, 8}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2480.0), 344.0, (-1.0), 0.0, 344.0, (-2480.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) null, 344);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 344.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), 344.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3055.4383);
      int int0 = 0;
      int[] intArray0 = new int[3];
      doubleArray0[2] = (double) 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 0;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0}, intArray2);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      
      ArrayUtils.swap(intArray0, int0, 0, 2);
      assertTrue(int0 == int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1639;
      doubleArray0[1] = (double) (short)1639;
      doubleArray0[2] = (double) (short)1639;
      doubleArray0[3] = (-111.0);
      doubleArray0[4] = (double) (short)1639;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1639.0, 1639.0, 1639.0, (-111.0), 1639.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'A';
      ArrayUtils.swap(charArray0, 1800, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'b', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'b');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', 'A'}, charArray0);
      assertArrayEquals(new char[] {'A'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'b', 'A'}, charArray0);
      assertArrayEquals(new char[] {'A'}, charArray1);
      assertArrayEquals(new char[] {'A'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'b', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 5L;
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-2203), (-1258));
      assertArrayEquals(new long[] {5L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, 1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1L), 5L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (short)1639, (-1653), 90);
      assertArrayEquals(new long[] {(-1L), 5L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1412;
      shortArray0[3] = (short) (-2833);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 649.65173F;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-2833);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 649.65173F, 0.0F, (-2833.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {649.65173F, (-2833.0F)}, floatArray1, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1412;
      ArrayUtils.reverse(longArray0, (-2431), (int) (short)70);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 1412L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 2, 1933, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-620);
      ArrayUtils.shift(intArray0, (int) (byte) (-38), (-620), (int) (short)444);
      assertArrayEquals(new int[] {(-620)}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      ArrayUtils.swap(byteArray0, 2, (int) (short)444, (int) (short) (-986));
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte)0, (byte) (-38)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Boolean boolean1 = new Boolean(",jV+1\"");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(",jV+1\"");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(",jV+1\"");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(",jV+1\"");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean6;
      booleanArray0[1] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-620)}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte)0, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1467.5F);
      floatArray0[1] = (-4726.639F);
      ArrayUtils.shift(floatArray0, 7, 832, 10);
      assertArrayEquals(new float[] {(-1467.5F), (-4726.639F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, (-1734));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.junitpioneer.jupiter.params.DisableIfNameExtension";
      stringArray0[1] = "java.lang.Object";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      ArrayUtils.shift(byteArray0, 10);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 10);
      assertEquals(10.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (-1734));
      assertEquals((-1734.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-284));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1144;
      intArray2[1] = (-151);
      intArray2[2] = 1625;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1625, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-114), (byte)58, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Float float0 = new Float((double) (byte) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)46;
      floatArray0[2] = (float) (byte)46;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte)58;
      floatArray0[5] = (float) (byte)58;
      floatArray0[6] = (float) (-4064);
      floatArray0[7] = (float) (byte)46;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 780, (int) (byte) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 46.0F, 46.0F, (-1.0F), 58.0F, 58.0F, (-4064.0F), 46.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)58);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, (-4064), (-4064), 0, (-4064)}, intArray0);
      assertEquals(6, intArray0.length);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)58;
      byteArray1[1] = (Byte) (byte) (-114);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      ArrayUtils.shift((Object[]) booleanArray0, 12);
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 12;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(12, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-2918.8606252), (int) byte0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) byte0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-78)}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1829, floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1829, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1390);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1390), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1390, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1467.5F);
      floatArray0[1] = (-4726.639F);
      ArrayUtils.shift(floatArray0, 7, 832, 10);
      assertArrayEquals(new float[] {(-1467.5F), (-4726.639F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, (-1734));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.junitpioneer.jupiter.params.DisableIfNameExtension";
      stringArray0[1] = "java.lang.Object";
      stringArray0[2] = "%|YD@=-0J";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = ":";
      stringArray0[5] = "=y$D@d]Jd";
      stringArray0[6] = "HUVy$sevo76 Gp.!:";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 832);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byte byte5 = (byte) (-57);
      Byte byte6 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[11];
      byteArray0[0] = byte4;
      byteArray0[1] = byte1;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[2] = byte7;
      byteArray0[3] = byte4;
      byteArray0[4] = byte6;
      byteArray0[5] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)48);
      assertNotNull(byteArray1);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1526.6921702033328);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2127.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1526.6921702033328), 0.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) byte5, (int) byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte5);
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2147117328), 10, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer integer0 = new Integer((-772));
      assertEquals((-772), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'k', 102);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 252;
      intArray0[2] = (-2147117328);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-837));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {252, 0, (-2147117328)}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'k';
      charArray1[1] = 'k';
      charArray1[2] = 'k';
      charArray1[3] = 'k';
      charArray1[4] = 'k';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-2147117328));
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', '\u0000', '\u0000', 'k'}, charArray1);
      assertEquals(7, charArray1.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = byte0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = byte0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 125;
      longArray0[2] = 0L;
      longArray0[4] = (long) 125;
      byte byte0 = (byte) (-57);
      Byte byte1 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      longArray0[2] = (long) 125;
      floatArray0[2] = (float) 125L;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) 1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 125.0F, (-57.0F), 1.0F, (-57.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-57);
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-57), (short) (-57), (short) (-57), (short) (-57), (short) (-57), (short) (-57), (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short) (-57), (short) (-57), (short) (-57), (short) (-57), (short) (-57), (short) (-57)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = boolean0;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      ArrayUtils.swap((long[]) null, 122, (-1), 2);
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 2);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-265.0), (-265.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1800, (-1145));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap((long[]) null, 122, 3, (-265));
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[7] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'I', 'I', '\u0000', 'I', 'I', 'I', '\u0000', 'I'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Long long0 = new Long((-772));
      assertEquals((-772L), (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-772);
      floatArray0[1] = (float) 'I';
      floatArray0[2] = (float) 'I';
      floatArray0[3] = (float) (-772);
      floatArray0[4] = (float) (-772);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 3516.97F;
      MockRandom mockRandom0 = new MockRandom((-571L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {73.0F, 73.0F, (-772.0F), (-772.0F), 1.0F, 3516.97F, (-772.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1468;
      shortArray0[1] = (short)1468;
      shortArray0[2] = (short)1468;
      shortArray0[3] = (short)1468;
      shortArray0[4] = (short)1468;
      shortArray0[5] = (short)1468;
      shortArray0[6] = (short)1468;
      shortArray0[7] = (short)1468;
      shortArray0[8] = (short)1468;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1468, (short)1468, (short)1468, (short)1468, (short)1468, (short)1468, (short)1468, (short)1468, (short)1468}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      charArray0[7] = '0';
      ArrayUtils.swap(charArray0, 19, 170, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'S', 'S', 'S', 'S', 'S', 'S', 'S', '0'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-127.0), 2, 694.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)102;
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)122;
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)30, (int) (byte)85);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)102, (byte)85, (byte)102, (byte)102, (byte)85, (byte)122}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1.0F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1346);
      longArray0[1] = (long) (-1346);
      ArrayUtils.shift(longArray0, (-2143648854), 1, (-841));
      assertArrayEquals(new long[] {(-1346L), (-1346L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      Long long0 = new Long(173L);
      assertEquals(173L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {173L, 173L, 173L, 173L, 173L, 173L, 173L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shift(longArray1, (-1304), 1, 1);
      assertArrayEquals(new long[] {173L, 173L, 173L, 173L, 173L, 173L, 173L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Character character0 = Character.valueOf('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'A');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 40);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Long long0 = new Long((byte)92);
      assertEquals(92L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[4] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\"', (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'Q', '.', 'Q', 'P', 'x', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, (byte)92);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)92, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, (-1444), 1316);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short) (-2155);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short) (-2155), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short) (-2155), (short)0, (short)0, (short)127, (short) (-2155), (short) (-2155), (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (short)127;
      longArray0[3] = 45L;
      longArray0[4] = (long) 'x';
      longArray0[5] = (long) (short) (-2155);
      longArray0[8] = (long) (short)127;
      ArrayUtils.shift((Object[]) null, (int) (short) (-2155), (int) (short)127, 2118);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-993), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.clone(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'g';
      charArray0[4] = 'x';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'g', 'x'}, charArray0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'g', 'x'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-2155), (int) (short) (-2155), 2987);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short) (-2155), (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'W';
      intArray0[1] = (-2543);
      intArray0[2] = (-2543);
      intArray0[3] = (-2543);
      intArray0[4] = (-2543);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {87, (-2543), (-2543), (-2543), (-2543)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1059));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {87, (-2543), (-2543), (-2543), (-2543)}, intArray0);
      assertArrayEquals(new int[] {(-1059), 87, (-2543), (-2543), (-2543), (-2543)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-48);
      shortArray0[1] = (short) (byte)115;
      shortArray0[2] = (short)3081;
      shortArray0[3] = (short) (byte)30;
      shortArray0[4] = (short) (byte)30;
      shortArray0[5] = (short) (byte) (-48);
      shortArray0[6] = (short) (byte)30;
      shortArray0[7] = (short) (byte)30;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-48), (short)115, (short)3081, (short)30, (short)30, (short) (-48), (short)30, (short)30}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 125;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 125;
      int int0 = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '!';
      charArray0[2] = 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '!', (-33));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'@', '!', 'y'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 45, 84, 84);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 84);
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-39.61920928955078));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-27);
      doubleArray0[1] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-27), Integer.MAX_VALUE, (int) (byte) (-27));
      assertArrayEquals(new double[] {(-27.0), (-27.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'f', '\\', '\\', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.95969));
      assertEquals((-974.95969), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      doubleArray0[2] = (double) 870;
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[1] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-123L), 870L, 870L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-123L), 870L, 870L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1542.090316324), (double) (-33));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 870.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-33));
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)444;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)444;
      intArray0[1] = (int) (short) (-986);
      intArray0[2] = (int) (short) (-986);
      intArray0[3] = 1;
      intArray0[4] = (int) (short)444;
      intArray0[5] = (int) (short)444;
      int[] intArray1 = ArrayUtils.add(intArray0, 1782);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {444, (-986), (-986), 1, 444, 444}, intArray0);
      assertArrayEquals(new int[] {444, (-986), (-986), 1, 444, 444, 1782}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 444;
      longArray0[1] = (long) 444;
      longArray0[2] = (long) 997;
      longArray0[3] = (long) (-986);
      longArray0[4] = (long) 444;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)444;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) 1;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-50L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {444L, 444L, 997L, (-986L), 444L, 0L, 444L, 0L, 1L}, longArray1);
      assertArrayEquals(new long[] {444L, 444L, 997L, (-986L), 444L, 0L, 444L, 0L, 1L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 444;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 444L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {444.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2055.2315368314603));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {444.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {444.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {444.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-360.0), (-415), (-876.0));
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {444.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {444.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ArrayUtils.swap(byteArray0, (-577), (int) (byte)31, (-577));
      assertArrayEquals(new byte[] {(byte)31}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Float float0 = new Float((double) (byte)58);
      assertEquals(58.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte) (-114));
      assertEquals((-114.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 306;
      ArrayUtils.shift(intArray0, 0, (-265), (int) (byte)58);
      assertArrayEquals(new int[] {306}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (float) (byte)46;
      floatArray0[2] = (float) 128;
      floatArray0[3] = (float) (byte)46;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-1928), 1170);
      assertArrayEquals(new float[] {128.0F, 46.0F, 128.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Short short0 = new Short((short)1016);
      assertEquals((short)1016, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((byte) (-114));
      assertEquals((short) (-114), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.swap((byte[]) null, (-409), 126, (-409));
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(intArray0, (-265));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 3230, (-525));
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(booleanArray0, 5, (-2543), 1767);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-2543);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3230;
      doubleArray0[4] = (double) (-525);
      doubleArray0[5] = (double) (-265);
      doubleArray0[6] = (double) (-2543);
      doubleArray0[7] = (double) 3230;
      doubleArray0[8] = (-659.620389357);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0), (-2543.0), 1.0, 3230.0, (-525.0), (-265.0), (-2543.0), 3230.0, (-659.620389357)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 120, 0);
      assertNull(byteArray0);
      
      ArrayUtils.swap((byte[]) null, (-863), (-2046), (-2543));
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (-2958);
      shortArray0[2] = (short) (-1666);
      shortArray0[3] = (short)608;
      shortArray0[4] = (short) (-5840);
      shortArray0[5] = (short) (-753);
      shortArray0[6] = (short)476;
      shortArray0[7] = (short)7664;
      shortArray0[8] = (short) (-1169);
      ArrayUtils.reverse(shortArray0, (int) (short) (-2958), (-2046));
      assertArrayEquals(new short[] {(short)32, (short) (-2958), (short) (-1666), (short)608, (short) (-5840), (short) (-753), (short)476, (short)7664, (short) (-1169)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      ArrayUtils.reverse((short[]) null, 3700, 3700);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1198, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1198, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) bitSet0;
      Object object0 = ArrayUtils.get(objectArray0, (-1482), (Object) null);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[6] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(6, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = ':';
      charArray0[0] = ':';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'D';
      longArray0[1] = (long) ':';
      longArray0[2] = (long) ':';
      byte byte0 = (byte) (-72);
      Byte byte1 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[2] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 125;
      intArray0[2] = 2132292907;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 2132292907}, intArray0);
      assertArrayEquals(new int[] {0, 125, 2132292907, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2132292907, (-2336));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 125;
      floatArray0[1] = (float) 2132292907;
      floatArray0[2] = (float) 125;
      floatArray0[3] = (float) (byte)81;
      floatArray0[4] = (float) 2132292907;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {125.0F, 2.13229286E9F, 125.0F, 81.0F, 2.13229286E9F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)0, (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)115);
      assertNull(byteArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1819.0F);
      floatArray0[1] = (float) (byte) (-48);
      floatArray0[2] = (float) (byte)115;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-48);
      floatArray0[5] = (float) (byte)76;
      floatArray0[6] = (float) (byte)115;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (int) (byte) (-48));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1819.0F), (-48.0F), 115.0F, 0.0F, (-48.0F), 76.0F, 115.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte)115, (-4414));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)0, (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-105));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '<';
      charArray0[2] = 'K';
      charArray0[3] = '.';
      charArray0[4] = 'a';
      charArray0[5] = '|';
      charArray0[6] = '~';
      charArray0[7] = 'w';
      charArray0[8] = 'y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', '<', 'K', '.', 'a', '|', '~', 'w', 'y'}, charArray1);
      assertArrayEquals(new char[] {'J', '<', 'K', '.', 'a', '|', '~', 'w', 'y'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 'a';
      longArray0[2] = (long) 'w';
      longArray0[3] = (-1175L);
      longArray0[4] = (long) 'y';
      longArray0[5] = (long) '|';
      longArray0[6] = (long) (short) (-105);
      longArray0[7] = (long) 'w';
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {75L, 97L, 119L, (-1175L), 121L, 124L, (-105L), 119L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {75L, 97L, 119L, (-1175L), 121L, 124L, (-105L), 119L}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, 0, (int) (byte)81);
      assertNull(byteArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)74;
      floatArray0[1] = (-45.0F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-48);
      floatArray0[4] = (float) (byte) (-48);
      floatArray0[5] = (float) 444;
      floatArray0[6] = (float) (byte)115;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {74.0F, (-45.0F), 0.0F, (-48.0F), (-48.0F), 444.0F, 115.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      Long[] longArray2 = new Long[2];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((byte) (-48));
      assertEquals((-48L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray2[1] = long1;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray3.length);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-48);
      byteArray2[1] = (Byte) (byte) (-48);
      byteArray2[2] = (Byte) (byte) (-48);
      byteArray2[3] = (Byte) (byte) (-48);
      byteArray2[4] = (Byte) (byte) (-48);
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray2, comparator0);
      assertTrue(boolean0);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      ArrayUtils.shift((long[]) null, (int) (short)1639, 1816, (int) (short)1639);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 831, (int) (short)1639);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)62);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "(5)`S:;#/'");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(charArray0, 'o');
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      Float float0 = new Float((double) 2688.34F);
      assertEquals(2688.34F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean3 = ArrayUtils.contains(shortArray0, (short) (-1251));
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap((Object[]) stringArray0, (-2322), (-2543), 83);
      assertSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.getInteger("O;?]=nj9Gi3");
      assertNull(integer0);
      
      integerArray0[0] = null;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short)0, 3491);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 585, 'J');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 585, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 128.9301725;
      doubleArray0[1] = 1738.8495;
      doubleArray0[2] = (-737.2);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (-383.164388);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-237.61407);
      ArrayUtils.shift(doubleArray0, 2144619975);
      assertArrayEquals(new double[] {(-237.61407), 128.9301725, 1738.8495, (-737.2), 100.0, (-383.164388), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2144619975;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2144619975L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1740);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-237.61407), 128.9301725, 1738.8495, (-737.2), 100.0, (-383.164388), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-237.61407), 128.9301725, 1738.8495, (-737.2), 100.0, (-383.164388), (-1.0)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1740;
      intArray0[1] = 2144619975;
      intArray0[2] = 1740;
      intArray0[3] = 2144619975;
      intArray0[4] = 1740;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1740, (-932));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {1740, 2144619975, 1740, 2144619975, 1740}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "+7l)n9+DU&xyy-ldUk");
      assertNotNull(stringArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)2013;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)444;
      shortArray0[2] = (short) (-986);
      shortArray0[4] = (short) (-986);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-144));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)444, (short) (-986), (short)0, (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-986);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-986);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)444;
      doubleArray0[5] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1019.673802));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-986.0), 0.0, (-986.0), 0.0, 444.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-986);
      floatArray0[1] = (float) (short) (-986);
      floatArray0[2] = (float) (short) (-986);
      floatArray0[3] = (float) (short) (-986);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-986.0F), (-986.0F), (-986.0F), (-986.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-986.0F), (-986.0F), (-986.0F), (-986.0F), 0.0F, (-986.0F), (-986.0F), (-986.0F), (-986.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-1247);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1247)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Float float0 = new Float((double) (-1247));
      assertEquals((-1247.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)121;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)19, (byte)121}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'D';
      charArray0[2] = 'a';
      charArray0[3] = '!';
      charArray0[4] = 'o';
      charArray0[5] = 'i';
      charArray0[6] = '`';
      charArray0[7] = '{';
      ArrayUtils.shift(charArray0, (int) (byte)19, (int) (byte)19, (int) (byte)19);
      assertArrayEquals(new char[] {'a', 'D', 'a', '!', 'o', 'i', '`', '{'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2147117328), 10, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = new Integer((-772));
      assertEquals((-772), int0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', 102);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 252;
      intArray0[1] = (int) short0;
      intArray0[2] = (-3416);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-837));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {252, 2, (-3416)}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'k';
      charArray1[1] = 'k';
      charArray1[2] = 'k';
      charArray1[3] = 'k';
      charArray1[4] = 'k';
      charArray1[5] = 'k';
      charArray1[6] = 'k';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray1);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Character character0 = Character.valueOf('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 94L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {94L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'L', 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'L';
      longArray0[3] = 0L;
      longArray0[4] = (long) 'L';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 786, (-2109610334));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 76L, 0L, 76L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-33), (int) (byte) (-105), (-33));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '+');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-105);
      shortArray0[1] = (short) (byte) (-105);
      shortArray0[2] = (short) (byte) (-105);
      shortArray0[3] = (short) (byte) (-105);
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte) (-105);
      shortArray0[6] = (short) (byte) (-105);
      shortArray0[7] = (short) (byte) (-105);
      shortArray0[8] = (short) (byte) (-105);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-105));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105)}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-123);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)117, 486);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-126), 0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte) (-126), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[6];
      ArrayUtils.swap(shortArray0, (-365), (int) (byte) (-45), (-365));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-126);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-269), 486);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 0.0, (double) (byte) (-126));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 2146517381);
      assertNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.insert(8, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.clone(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 1.5);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)719;
      shortArray0[1] = (short)1262;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)268;
      shortArray0[4] = (short)102;
      shortArray0[5] = (short)55;
      shortArray0[6] = (short)70;
      shortArray0[7] = (short)1498;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)719, (short)1262, (short) (-1), (short)268, (short)102, (short)55, (short)70, (short)1498}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 27;
      intArray0[1] = (-265);
      intArray0[2] = (-265);
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {27, (-265), (-265)}, intArray0);
      assertArrayEquals(new int[] {27, (-265), (-265), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 27;
      longArray0[1] = (long) (-29);
      longArray0[2] = (long) (-29);
      longArray0[3] = (long) (-1569);
      longArray0[4] = (long) (-1569);
      longArray0[5] = (long) 27;
      longArray0[6] = (long) 1;
      ArrayUtils.shift(longArray0, (-29), 27, (-265));
      assertArrayEquals(new long[] {1L, 27L, (-29L), (-29L), (-1569L), (-1569L), 27L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1569), 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)32;
      shortArray0[1] = (short) (byte)32;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)32, (short)32}, shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)32, (short)32, (short)32}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-227L);
      longArray0[1] = (long) (short)32;
      longArray0[2] = (long) 121;
      longArray0[3] = 1045L;
      longArray0[4] = (long) 121;
      longArray0[5] = (long) 121;
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2039L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-227L), 32L, 121L, 1045L, 121L, 121L, (-1L), 1L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-699.717031);
      doubleArray0[1] = (double) (-3810);
      doubleArray0[2] = (double) 121L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 121L, 2);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-699.717031), (-3810.0), 121.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'l';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'D';
      intArray0[3] = (-265);
      int[] intArray1 = ArrayUtils.add(intArray0, (-265));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {108, 108, 68, (-265)}, intArray0);
      assertArrayEquals(new int[] {108, 108, 68, (-265), (-265)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 1);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) 108;
      doubleArray0[2] = (-2158.5755955);
      doubleArray0[3] = (double) 108;
      doubleArray0[4] = (double) 68;
      doubleArray0[5] = (double) 108;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (-265);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-265));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-265.0), 108.0, (-2158.5755955), 108.0, 68.0, 108.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 108);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-265.0), 108.0, (-2158.5755955), 108.0, 68.0, 108.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)20);
      assertNull(byteArray0);
      
      ArrayUtils.shift(booleanArray0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)20;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 20.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      Double double0 = new Double('?');
      assertEquals(63.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte)20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-453));
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.add((int[]) null, (-248));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-248)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1569);
      ArrayUtils.shift(longArray0, (-248), 1, 344);
      assertArrayEquals(new long[] {(-1569L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-29);
      doubleArray0[2] = (double) (-1569);
      doubleArray0[3] = (double) 997;
      doubleArray0[4] = (double) 997;
      doubleArray0[5] = (double) 344;
      doubleArray0[6] = (double) 997;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-248));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-29.0), (-1569.0), 997.0, 997.0, 344.0, 997.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 997;
      floatArray0[1] = (float) (-248);
      floatArray0[2] = (float) (-1569L);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 180.53928F;
      floatArray0[5] = (float) (-1569L);
      floatArray0[6] = (float) (-29);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-248)}, intArray0);
      assertArrayEquals(new int[] {(-248)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-248.0F);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((-248.0F), object0);
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)92;
      intArray0[1] = (int) (byte)92;
      intArray0[2] = (int) (byte)92;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {92, 92, 92}, intArray0);
      assertArrayEquals(new int[] {92, 92, 92}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = '4';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      charArray0[7] = 'q';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'q', '4', 'q', 'q', 'q'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) 'q';
      intArray2[1] = (int) '4';
      intArray2[2] = (int) '4';
      intArray2[3] = (int) 'q';
      int[] intArray3 = ArrayUtils.removeElements(intArray1, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {113, 52, 52, 113}, intArray2);
      assertArrayEquals(new int[] {92, 92, 92}, intArray0);
      assertArrayEquals(new int[] {92, 92, 92}, intArray3);
      assertArrayEquals(new int[] {92, 92, 92}, intArray1);
      assertEquals(4, intArray2.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray3.length);
      assertEquals(3, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {92, 92, 92}, intArray0);
      assertArrayEquals(new int[] {92, 92, 92}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      
      Float float0 = new Float((double) 92);
      assertEquals(92.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1, 1}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 125;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 125;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 125L, 0L, 0L, 125L}, longArray0);
      assertArrayEquals(new long[] {125L, 125L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0L);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 1;
      longArray2[3] = (long) (-1);
      longArray2[4] = (long) 1;
      longArray2[5] = (long) 997;
      longArray2[6] = 0L;
      int int2 = ArrayUtils.lastIndexOf(longArray2, 0L, 1);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1L, (-1L), 1L, 997L, 0L}, longArray2);
      assertEquals(7, longArray2.length);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      ArrayUtils.shift(longArray0, (-1569), 344, 0);
      assertArrayEquals(new long[] {4L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1569);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)58, 95);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1569.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 4;
      floatArray0[1] = 180.53928F;
      floatArray0[2] = (float) (-4908);
      floatArray0[3] = (float) 4;
      floatArray0[4] = 5.0F;
      floatArray0[5] = (float) 'x';
      floatArray0[6] = (float) (byte)58;
      floatArray0[7] = (float) 'x';
      floatArray0[8] = (float) 4;
      ArrayUtils.shift(floatArray0, 0, 113, 4);
      assertArrayEquals(new float[] {120.0F, 58.0F, 120.0F, 4.0F, 4.0F, 180.53928F, (-4908.0F), 4.0F, 5.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)58;
      shortArray0[1] = (short) (byte)58;
      shortArray0[2] = (short) (byte)58;
      shortArray0[3] = (short) (byte)58;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)58, (short)58, (short)58, (short)58}, shortArray0);
      assertArrayEquals(new short[] {(short)58, (short)58, (short)58, (short)58}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 's';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {115}, intArray0);
      assertArrayEquals(new int[] {115}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "The String did not match either specified value");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)74;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {74.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {74.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '/';
      charArray0[2] = 's';
      charArray0[3] = 's';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'s', '/', 's', 's'}, charArray1);
      assertArrayEquals(new char[] {'s', '/', 's', 's'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (-147), (int) (byte)74);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'s', '/', 's', 's'}, charArray2);
      assertArrayEquals(new char[] {'s', '/', 's', 's'}, charArray0);
      assertEquals(4, charArray2.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(7, shortArray2.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1073741823), (int) (short)1639);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap(charArray0, (-3317), (-1073741823), 115);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) (-3317);
      doubleArray0[2] = (double) (short)1639;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) (-3317);
      doubleArray0[5] = (double) (-1073741823);
      doubleArray0[6] = (double) (-1073741823);
      doubleArray0[7] = (double) 'S';
      doubleArray0[8] = (double) 'S';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 115, 4, 2253.45453);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {83.0, (-3317.0), 1639.0, 83.0, (-3317.0), (-1.073741823E9), (-1.073741823E9), 83.0, 83.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.reverse(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.swap(booleanArray0, 3897, 121, 713);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, 95, 'S');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 95, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 344;
      longArray0[1] = (long) 344;
      longArray0[2] = (long) 344;
      longArray0[3] = (long) 344;
      ArrayUtils.shift(longArray0, (-1), 1816, 113);
      assertArrayEquals(new long[] {344L, 344L, 344L, 344L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2480.0F);
      doubleArray0[1] = (double) 344L;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 344L;
      doubleArray0[4] = (double) 344L;
      doubleArray0[5] = (double) (-2480.0F);
      doubleArray0[6] = (-473.2023006954341);
      doubleArray0[7] = (double) 1816;
      doubleArray0[8] = (double) (-2480.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 113);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2480.0), 344.0, (-1.0), 344.0, 344.0, (-2480.0), (-473.2023006954341), 1816.0, (-2480.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2480.0), 344.0, (-1.0), 344.0, 344.0, (-2480.0), (-473.2023006954341), 1816.0, (-2480.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-128)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(floatArray0, 344, (-1), 48);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1412;
      shortArray0[1] = (short)1855;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2833);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1412, (short)1855, (short)0, (short) (-2833), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)7;
      ArrayUtils.shift(byteArray0, (int) (short)0, (int) (short)0, 1972);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-36), (byte)32, (byte)76, (byte) (-31), (byte)65, (byte) (-1), (byte)7}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 463.3F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap(floatArray0, 117, 2, 117);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Float float0 = new Float((-666.43997));
      assertEquals((-666.43994F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)4249;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 12);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)4249, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)4249, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      Float float0 = new Float(1529.721);
      assertEquals(1529.721F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new short[] {(short)92, (short)2, (short)92}, shortArray1);
      assertArrayEquals(new short[] {(short)92, (short)2, (short)92, (short)92}, shortArray0);
      assertEquals(1, intArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '(';
      charArray0[2] = '[';
      charArray0[3] = '`';
      charArray0[4] = 'k';
      charArray0[5] = 'F';
      charArray0[6] = 'v';
      charArray0[7] = '\\';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '+');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'[', '(', '[', '`', 'k', 'F', 'v', '\\'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 3084L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'C';
      charArray0[2] = '#';
      ArrayUtils.reverse(charArray0, 76, 0);
      assertArrayEquals(new char[] {'g', 'C', '#'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1986.0, (-896.03844448));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-265);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Long long0 = new Long((-265));
      assertEquals((-265L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      Long long1 = new Long((long) longArray0[4]);
      assertEquals((-265L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(6, longArray0.length);
      
      longArray0[5] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L), (-265L), (-265L), (-265L)}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.shift(longArray1, 648, (-1258), (-84));
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L), (-265L), (-265L), (-265L)}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Character character0 = Character.valueOf('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'A');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 46);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      try { 
        Byte.valueOf("Aa", (int) (short)0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)20);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(booleanArray0, 0, (-2143327774), 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)20;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 20.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 20.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 20.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'z';
      charArray0[2] = '=';
      charArray0[3] = ' ';
      charArray0[4] = 'Q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', 'z', '=', ' ', 'Q'}, charArray1);
      assertArrayEquals(new char[] {'?', 'z', '=', ' ', 'Q'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3810);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-3055.4383);
      doubleArray0[4] = (double) 121;
      doubleArray0[5] = (double) (byte)32;
      doubleArray0[6] = (-3055.4383);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2.0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-3810.0), 2.0, 2.0, (-3055.4383), 121.0, 32.0, (-3055.4383)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 121;
      floatArray0[1] = (float) 121;
      floatArray0[2] = 510.0F;
      floatArray0[3] = (float) 121;
      floatArray0[4] = (float) (-3810);
      floatArray0[5] = (float) (byte)32;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {121.0F, 121.0F, 510.0F, 121.0F, (-3810.0F), 32.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {121.0F, 121.0F, 510.0F, 121.0F, (-3810.0F), 32.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      ArrayUtils.shift((boolean[]) null, 84, 53, 84);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-39.61920928955078);
      doubleArray0[1] = (double) 45;
      doubleArray0[2] = (-39.61920928955078);
      doubleArray0[3] = (double) '/';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 2688.34F);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-39.61920928955078), 45.0, (-39.61920928955078), 47.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-39.61920928955078), 45.0, (-39.61920928955078), 47.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap(charArray0, 9, Integer.MAX_VALUE, (-302));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-29);
      doubleArray0[4] = (double) (byte) (-112);
      byteArray0[3] = (byte) (-59);
      ArrayUtils.shift(byteArray0, (int) (byte)78, 848, 6);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-29), (byte)0, (byte) (-59)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(84, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short) (-986);
      shortArray0[3] = (short) (-986);
      shortArray0[4] = (short) (-986);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-144));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)8, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)8, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(shortArray0, (-2996), (int) (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)8, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Integer integer0 = new Integer((short) (-986));
      assertEquals((-986), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-986), (-986), (-986)}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-667L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (-2255));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray3 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray3.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray4 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertNotSame(longArray4, longArray2);
      assertSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray4.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)19;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      Byte byte0 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte) (-33));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      Byte[] byteArray4 = ArrayUtils.nullToEmpty(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray4, byteArray2);
      assertSame(byteArray2, byteArray4);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(6, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2529, longArray1, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2529, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte byte0 = (byte) (-123);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 870;
      longArray0[1] = (long) 870;
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[4] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 3.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-634L), 715);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-123L));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int3 = ArrayUtils.indexOf((short[]) null, (short)0);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      Byte[] byteArray2 = new Byte[7];
      Byte byte1 = new Byte((byte) (-123));
      assertEquals((byte) (-123), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-123), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray2[1] = byte2;
      Byte byte3 = new Byte((byte) (-123));
      assertEquals((byte) (-123), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray2[2] = byte3;
      byte byte4 = (byte)123;
      Byte byte5 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray2[3] = byte5;
      Byte byte6 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray2[4] = byte6;
      // Undeclared exception!
      try { 
        Byte.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)13);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-25);
      Byte byte1 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object1, 15);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-25);
      longArray0[1] = (long) 15;
      longArray0[2] = (long) (byte) (-25);
      longArray0[3] = (long) 15;
      longArray0[4] = (long) (byte) (-25);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 15, (-1380));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(4, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{1, 3}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {(-25L), 15L, (-25L), 15L, (-25L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      bitSet0.and(bitSet1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(object1, object0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet1.size());
      assertEquals(4, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{1, 3}", bitSet1.toString());
      assertArrayEquals(new long[] {(-25L), 15L, (-25L), 15L, (-25L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1027L;
      longArray0[1] = (long) (byte)42;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1027L, 42L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {1027L, 42L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1639;
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 125;
      intArray0[1] = 125;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 125, (-1), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 125;
      longArray0[2] = 0L;
      longArray0[4] = (long) 125;
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shift(intArray1, (-2946), (-2946), Integer.MAX_VALUE);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 125, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 125, (-1), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 997, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float(2688.34F);
      assertEquals(2688.34F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1978.6F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      ArrayUtils.swap(intArray0, 319, (-2143319716), 319);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-77));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-77);
      intArray0[1] = (int) (byte) (-77);
      intArray0[2] = (int) (byte) (-77);
      intArray0[3] = (int) (byte) (-77);
      intArray0[4] = (int) (byte) (-77);
      intArray0[5] = (int) (byte) (-77);
      intArray0[6] = (int) (byte) (-77);
      intArray0[7] = (-1);
      intArray0[8] = 243;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-77));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-77), (-77), (-77), (-77), (-77), (-77), (-77), (-1), 243}, intArray0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-77);
      floatArray0[1] = (float) (-77);
      floatArray0[2] = (float) (-77);
      floatArray0[3] = (float) 243;
      floatArray0[4] = (float) 243;
      floatArray0[5] = 1853.7F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte) (-77));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-77.0F), (-77.0F), (-77.0F), 243.0F, 243.0F, 1853.7F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Float float0 = new Float((double) (byte) (-90));
      assertEquals((-90.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(559.3586114034456);
      assertEquals(559.3586F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte0));
      assertNull(byteArray0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-113), 2);
      Byte byte5 = ArrayUtils.get((Byte[]) null, 346, byte4);
      assertEquals((byte)75, (byte)byte5);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      String string0 = ArrayUtils.toString((Object) byte5);
      assertEquals("75", string0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3362), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3362, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Float float0 = new Float((double) (short)444);
      assertEquals(444.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1429.8828647806);
      assertEquals(1429.8828F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte4;
      byteArray0[1] = byte4;
      Byte byte5 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (short)0, (int) byte0);
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("2", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (short)444;
      intArray2[1] = (int) byte0;
      intArray2[2] = (int) (short)0;
      intArray2[3] = (int) (short)0;
      intArray2[4] = (int) byte0;
      intArray2[5] = (int) (byte) (-113);
      intArray2[6] = (int) byte0;
      intArray2[7] = (int) (short)0;
      intArray2[8] = (int) (byte) (-43);
      int[] intArray3 = ArrayUtils.add(intArray2, 2, 1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {444, 2, 0, 0, 2, (-113), 2, 0, (-43)}, intArray2);
      assertArrayEquals(new int[] {444, 2, 1, 0, 0, 2, (-113), 2, 0, (-43)}, intArray3);
      assertEquals(9, intArray2.length);
      assertEquals(10, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1414), byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1414, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 64, (int) (byte)57);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1643.84137307), (double) 1069);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[7];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 97);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.reverse((int[]) null, (-1), 1);
      Byte byte1 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-26));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-2949.1401F), 290);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 6);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short) (-986), (-1964));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray1, (Object[]) doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)76, 534);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (byte) (-128);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      ArrayUtils.shift(longArray0, 445, (int) (byte) (-128), 110);
      assertArrayEquals(new long[] {0L, (-128L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1073741823), (int) (short)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1073741823);
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-1073741823L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      
      ArrayUtils.shift(longArray0, (int) (short)0, (int) (short)1639, (-2764));
      assertArrayEquals(new long[] {(-1073741823L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (-1464L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 104L;
      longArray0[5] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1464L), 0L, 0L, 0L, 104L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'c', 'b', 'b', 'b', 'b'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(':');
      assertEquals(':', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf(')');
      assertEquals(')', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('y');
      assertEquals('y', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) ')';
      floatArray0[1] = (float) ')';
      floatArray0[2] = (float) '7';
      floatArray0[3] = (-394.7347F);
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 'y';
      floatArray0[7] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3285.1382F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {41.0F, 41.0F, 55.0F, (-394.7347F), 2.0F, 1.0F, 121.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, 107.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {41.0F, 41.0F, 55.0F, (-394.7347F), 2.0F, 1.0F, 121.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {41.0F, 41.0F, 107.0F, 55.0F, (-394.7347F), 2.0F, 1.0F, 121.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 47.0F, (-1209));
      assertEquals((-1), int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int1 == int0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {41.0F, 41.0F, 55.0F, (-394.7347F), 2.0F, 1.0F, 121.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {')', ':'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Long long0 = new Long((-772));
      assertEquals((-772L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-772L), (-772L), (-772L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.shift(longArray1, (-1304), 648, 116);
      assertArrayEquals(new long[] {(-772L), (-772L), (-772L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-260);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character character0 = Character.valueOf('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '/', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertArrayEquals(new char[] {'-', 'R'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) '-';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 1553.448913201);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {82.0, 45.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {82.0, 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 45.0, 82.0, 45.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 36, 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (int) 'R';
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-87);
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short) (-586);
      shortArray0[3] = (short) (-2155);
      shortArray0[4] = (short) (-87);
      shortArray0[5] = (short) (-2155);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short) (-2155), (short) (-586), (short) (-2155), (short) (-87), (short) (-2155)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-421L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-2155), 13);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)87, object0);
      assertNotNull(object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-2155), (-2146492653));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{1, 3, 5}", bitSet1.toString());
      assertEquals(3, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short) (-87), (short) (-2155), (short) (-586), (short) (-2155), (short) (-87), (short) (-2155)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2155);
      floatArray0[1] = (float) (short) (-2155);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-4064);
      floatArray0[4] = (float) (short) (-586);
      floatArray0[5] = 2.0F;
      floatArray0[6] = (float) (short) (-87);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2155.0F), (-2155.0F), 1.0F, (-4064.0F), (-586.0F), 2.0F, (-87.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2155.0F), (-2155.0F), 1.0F, (-4064.0F), (-586.0F), 2.0F, (-87.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-555));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-555);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) '~';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 767.9090000000001);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-555.0), 0.0, 126.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {767.9090000000001, (-555.0), 0.0, 126.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)7);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 1813.3776);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte)32, object0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Byte byte3 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte3);
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)122;
      shortArray0[1] = (short) (byte)78;
      shortArray0[2] = (short) (byte)122;
      shortArray0[3] = (short) (byte)32;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)78);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)122, (short)78, (short)122, (short)32}, shortArray0);
      assertArrayEquals(new short[] {(short)78, (short)122, (short)78, (short)122, (short)32}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) byte0, (int) (short)122);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '^', (int) (short)32);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(31, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)2013;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)2013}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (short) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1678.3117), (double) 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (short) (-1), 0, 1272);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short)2408;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short)2408}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)2013, (short) (-1), (short) (-1), (short) (-1), (short)2408}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)2013}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1219);
      shortArray1[2] = (short) (-1219);
      shortArray1[3] = (short) (-1219);
      shortArray1[4] = (short) (-1219);
      shortArray1[5] = (short) (-2155);
      shortArray1[6] = (short)127;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1219), (short)0, (short) (-1219), (short) (-1219), (short) (-1219), (short) (-2155), (short)127}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1219), (short) (-1219), (short)0, (short) (-1219), (short) (-1219), (short) (-1219), (short) (-2155), (short)127}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-2155);
      longArray0[1] = (-2039L);
      boolean boolean1 = ArrayUtils.contains(longArray0, 1791L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-2155L), (-2039L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-87), (int) (short)127);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)127;
      objectArray0[1] = (Object) bitSet0;
      boolean boolean3 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, objectArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((short)127, object0);
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short) (-12239), (int) (short) (-1219));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short) (-1219), (short)0, (short) (-1219), (short) (-1219), (short) (-1219), (short) (-2155), (short)127}, shortArray1);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)88;
      ArrayUtils.swap(byteArray0, (int) (byte) (-44), 1, 0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-44), (byte)114, (byte)88}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-55));
      assertEquals((byte) (-55), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-55);
      shortArray0[1] = (short) (byte) (-55);
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte) (-55);
      ArrayUtils.shift(shortArray0, (int) (short) (-55));
      assertArrayEquals(new short[] {(short) (-55), (short) (-55), (short) (-55), (short) (-55)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      ArrayUtils.swap(byteArray0, (-653), (int) (byte) (-55), (int) (byte) (-55));
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 177, 2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("p]OtS#.EX");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("7X+ah33B*c^a=n>m|#");
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertTrue(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, false);
      assertEquals(2, int0);
      assertTrue(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-2380));
      assertNull(intArray0);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) byte0, 896);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.set((int) byte0, (-2146431474), (boolean) boolean2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1776.2727F;
      floatArray0[1] = 5.0F;
      floatArray0[2] = (-2.10961037E9F);
      floatArray0[3] = (-1637.3911F);
      floatArray0[4] = 1369.26F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1369.26F);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1776.2727F, 5.0F, (-2.10961037E9F), (-1637.3911F), 1369.26F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3213;
      intArray0[1] = 0;
      intArray0[2] = (-619);
      intArray0[3] = 3315;
      intArray0[4] = (-2906);
      intArray0[5] = 590;
      intArray0[6] = (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {3213, 0, (-619), 3315, (-2906), 590, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      ArrayUtils.shift(intArray1, (int) (byte) (-105), (int) (byte) (-105), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-420);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (-420.0F);
      doubleArray0[4] = (double) 58.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-420.0);
      objectArray0[1] = (Object) ':';
      objectArray0[2] = (Object) 58.0;
      objectArray0[3] = (Object) (-420.0F);
      objectArray0[4] = (Object) 58.0;
      objectArray0[5] = (Object) (-420.0F);
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {58.0F, 0.0F, (-420.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)120);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', '\u0000', '\u0000'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 'V';
      longArray1[1] = (long) 'V';
      longArray1[2] = (long) 'V';
      longArray1[3] = (long) 'V';
      longArray1[4] = (long) 'V';
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L}, longArray2);
      assertArrayEquals(new long[] {86L, 86L, 86L, 86L, 86L}, longArray1);
      assertEquals(10, longArray2.length);
      assertEquals(5, longArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'V';
      floatArray0[3] = 0.0F;
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {86.0F, 86.0F, 86.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)56;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)111, (byte)64, (byte) (-27), (byte)0, (byte)22, (byte)56}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)111, (byte)64, (byte) (-27), (byte)0, (byte)22, (byte)56}, byteArray0);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 1027L;
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1027L;
      floatArray0[2] = (float) 1027L;
      floatArray0[3] = Float.NaN;
      ArrayUtils.shift(floatArray0, 91);
      assertArrayEquals(new float[] {1027.0F, 1027.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1027L, (-4901));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {1027.0F, 1027.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-1), 2, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)2013;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)2013}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (short) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1678.3117), (double) 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (short) (-1), 0, 1272);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 0;
      intArray0[2] = 1272;
      intArray0[3] = (int) (short)2013;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1272);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 0, 1272, 2013, (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-986);
      shortArray0[3] = (short) (-986);
      shortArray0[4] = (short) (-986);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-144));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)14, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte2;
      byteArray0[1] = byte4;
      byteArray0[2] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-33));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)14, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)14, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)14, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)14, (short) (-986), (short) (-986), (short) (-986), (short)0, (short) (-986)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(117, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((char[]) null);
      short short0 = (short)127;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      try { 
        Byte.decode(":o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      ArrayUtils.hashCode((Object) null);
      Character[] characterArray0 = new Character[8];
      char char0 = 'd';
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('d', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('d', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(':');
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character3);
      assertEquals(':', (char)character4);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertEquals('d', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char char1 = 'Y';
      Character character6 = Character.valueOf('Y');
      assertEquals('Y', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertEquals('d', (char)character7);
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(char0 == char1);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character7);
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(char0 == char1);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'d', 'd', 'd', ':', ':', 'd', 'Y', 'd'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) (char)character3;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = (double) 'd';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) char1, (int) character7);
      assertFalse(char1 == char0);
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(char0 == char1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {58.0, 58.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (char)character4;
      intArray0[3] = (int) (char)character5;
      intArray0[4] = (int) (char)character4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, 286);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = (-1861.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-4266.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {5.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5.0F, (-1861.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {5.0F, (-1861.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5.0F, (-1861.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5.0F, (-1861.0F), 5.0F, (-1861.0F)}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(4, floatArray2.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-100.18478988556173));
      assertEquals((-100.18478988556173), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)112);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-100.18478988556173)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3126.560930296, 3126.560930296);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(97, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte1 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1169.54557;
      objectArray0[1] = (Object) class0;
      ArrayUtils.swap(objectArray0, (int) (byte)8, 9);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray2 = ArrayUtils.insert((int) (byte)100, doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)2, 0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)92, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-25), object1);
      assertNotNull(object1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-25);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-25.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse(intArray0, 0, 1551);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 868);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 0, 868}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2543);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) 'A';
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2543), (-1), (-1), 65, (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-48);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-9), (byte) (-48)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-9), (byte) (-48)}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 65);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2543), (-1), (-1), 65, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {65, (-2543), (-1), (-1), 65, (-1), (-1)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-48);
      shortArray0[1] = (short) (byte) (-48);
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-9);
      shortArray1[1] = (short) (byte)30;
      shortArray1[2] = (short) (byte)30;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-48), (short) (-48)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-9), (short)30, (short)30}, shortArray1);
      assertArrayEquals(new short[] {(short) (-48), (short) (-48)}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-48);
      floatArray0[1] = (float) (short) (-9);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (short) (-48);
      floatArray0[4] = (-4135.0F);
      floatArray0[5] = (float) (short)30;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-48.0F), (-9.0F), (-1.0F), (-48.0F), (-4135.0F), 30.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-48.0F), (-9.0F), (-1.0F), (-48.0F), (-4135.0F), 30.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)512;
      shortArray1[1] = (short)1;
      shortArray1[2] = (short)512;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)1, (short)512}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-2143327774), (-1), 121);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)98, (int) (byte)98);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      char char1 = 'x';
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('x');
      assertEquals('x', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('y');
      assertEquals('y', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[11];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(11, characterArray0.length);
      assertEquals(11, characterArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) (char)character3;
      doubleArray0[2] = (double) (-2331);
      doubleArray0[3] = (double) char0;
      doubleArray0[4] = (double) 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2467.299977669), 4547.974844215956);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {121.0, 121.0, (-2331.0), 121.0, 121.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) char1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(char1 == char0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {120.0, 121.0, 121.0, (-2331.0), 121.0, 121.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {121.0, 121.0, (-2331.0), 121.0, 121.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-87), (byte) (-87)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3211.0), (-614), (double) (-614));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {121.0, 121.0, (-2331.0), 121.0, 121.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      charArray0[1] = '@';
      charArray0[2] = char1;
      charArray0[3] = 'y';
      charArray0[4] = char0;
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '\"', (-827));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'y', '@', 'x', 'y', 'y'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 479, (-1850));
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)79, (-53));
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)79, (byte)79, (byte)79, (byte)79}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert(359, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-265);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)14;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)98, (short)14}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 1, 3826, (-265));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)53, 155);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)53;
      byteArray2[1] = (byte)53;
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray2);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-91), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)122;
      shortArray0[1] = (short) (byte)122;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)122}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)122;
      intArray0[1] = (int) (short)122;
      intArray0[2] = 323;
      intArray0[3] = (int) (short)122;
      intArray0[4] = (int) (short)122;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {122, 122, 323, 122, 122}, intArray0);
      assertArrayEquals(new int[] {122, 122, 323, 122, 122}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-453), (-353));
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)122, (short)122}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap((char[]) null, (int) (byte)122, (-2144810364), (-480));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1831, 1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = null;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)7;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)117);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-17), (byte)18, (byte)7}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((-757L), (long) (byte)7, (long) (byte) (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-59));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)5;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-59));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-58));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'S';
      charArray0[2] = 'k';
      charArray0[3] = 'S';
      charArray0[4] = 'P';
      charArray0[5] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k', 'S', 'k', 'S', 'P', 'V'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) (short)1639;
      intArray0[3] = (int) 'V';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {83, 107, 1639, 86}, intArray1);
      assertArrayEquals(new int[] {83, 107, 1639, 86}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "Index: ");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, stringArray0.length);
      assertEquals(7, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1775.5925F);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1775.5925F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-1328));
      assertArrayEquals(new float[] {(-1775.5925F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0, 86);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1775.5925F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(1245, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap((boolean[]) null, 0, Integer.MAX_VALUE, (-691));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte) (-25);
      Byte byte1 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte) (-25), object1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object1.equals((Object)byte0));
      assertNotNull(object1);
      
      byte byte2 = (byte)122;
      Byte byte3 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte4 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)object1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)object1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-18);
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) byte2;
      floatArray0[3] = (float) (byte) (-25);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (byte) (-25);
      floatArray0[6] = (float) byte0;
      floatArray0[7] = (float) byte0;
      ArrayUtils.reverse(floatArray0, 0, (-690));
      assertArrayEquals(new float[] {(-18.0F), 122.0F, 122.0F, (-25.0F), 1.0F, (-25.0F), (-25.0F), (-25.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte) (-25);
      longArray0[4] = (long) byte2;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-25L), (-25L), 122L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertEquals(14, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte)92;
      longArray0[3] = (long) (byte)92;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)92;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2L, 0L, 92L, 92L, 2L, 92L}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 76;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (byte)2;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 76.0F, 1.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)2;
      boolean boolean2 = ArrayUtils.isArrayIndexValid(byteArray1, 76);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, byteArray1.length);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(14, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 1074L;
      longArray0[2] = (long) (-772);
      longArray0[3] = (long) 0;
      longArray0[4] = 1016L;
      Long long0 = new Long((-772));
      assertEquals((-772L), (long)long0);
      assertNotNull(long0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (-2807), (-772));
      assertNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-1591), (int) (byte) (-78), (-39));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      booleanArray1[7] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2, (-3810));
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-2495));
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-59));
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-903), (-3810), 9);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2861L);
      longArray0[3] = 0L;
      longArray0[4] = (-1889L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-2861L), 0L, (-1889L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2861L), (-1889L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) (short)0, (int) (short)0);
      assertEquals((-1), int1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2861L), 0L, (-1889L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2861L), (-1889L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 140.900697025);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      int int3 = ArrayUtils.indexOf(shortArray0, (short)299);
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertArrayEquals(new short[] {(short)299, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)299, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-2861L);
      floatArray0[2] = (float) 0L;
      int int4 = ArrayUtils.indexOf(floatArray0, (float) (-1));
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertArrayEquals(new float[] {(-1.0F), (-2861.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-29);
      longArray0[2] = (long) (-29);
      ArrayUtils.shift(intArray0, 1, 2147028282, 46);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(booleanArray1, 0, 2147028282, (-992));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.swap(intArray1, (-55), 0, (-2108));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-151.68));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'T', (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse(intArray0, (-752), (-1));
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte2 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-82));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)5}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)5}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-82);
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)629);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-82), (short)5, (short)5, (short)5, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-82), (short)5, (short)5, (short)5, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-27), (int) (byte) (-27), 763.6);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((int) (byte) (-27), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 1321, (-791), (-179));
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1321);
      assertEquals((-1), int0);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class2;
      objectArray0[7] = (Object) byte0;
      ArrayUtils.swap(objectArray0, (-1640), 9);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.insert((-179), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 1813.3776);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      byte byte0 = (byte) (-27);
      Byte byte1 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte)82;
      Byte byte4 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte5;
      byteArray0[1] = byte5;
      byteArray0[2] = byte4;
      byteArray0[3] = byte5;
      byteArray0[4] = byte1;
      ArrayUtils.swap((Object[]) byteArray0, (int) byte0, 1378, (int) byte3);
      assertFalse(byte0 == byte3);
      assertFalse(byte3 == byte0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (byte) (-27));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      Character character0 = Character.valueOf('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'F', 'F'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-48), (int) (short) (-105));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3100);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-82);
      objectArray0[1] = (Object) (byte) (-82);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (short) (-105);
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, 2, 280, (-181));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1896.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3910.428F);
      floatArray0[3] = 618.22F;
      floatArray0[4] = (-5460.6284F);
      floatArray0[5] = 299.0F;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 3826, 43);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-105), (int) (byte) (-82), 36);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)53, (int) (byte) (-128));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)53;
      byteArray2[1] = (byte) (-27);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-128);
      byteArray2[4] = (byte) (-128);
      byteArray2[5] = (byte) (-128);
      byteArray2[6] = (byte)53;
      byteArray2[7] = (byte) (-128);
      byteArray2[8] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-27), (byte)0, (byte) (-128), (byte) (-128), (byte) (-128), (byte)53, (byte) (-128), (byte)0}, byteArray2);
      assertEquals(9, byteArray2.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-105), (int) (byte) (-128));
      assertArrayEquals(new short[] {(short) (-105), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-91), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-666.9915615);
      doubleArray0[1] = 767.9090000000001;
      doubleArray0[2] = 767.9090000000001;
      doubleArray0[3] = (double) (byte) (-91);
      doubleArray0[4] = 767.9090000000001;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-91.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-666.9915615), 767.9090000000001, 767.9090000000001, (-91.0), 767.9090000000001}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-91.0), (-666.9915615), 767.9090000000001, 767.9090000000001, (-91.0), 767.9090000000001}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = (Byte) object1;
      byteArray0[1] = (Byte) object1;
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertFalse(byte2.equals((Object)object1));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)78;
      Byte byte2 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-757L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, (-757L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1076;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1076}, intArray0);
      assertArrayEquals(new int[] {1076, 1076}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 1.0;
      doubleArray2[1] = (Double) 1.0;
      doubleArray2[2] = (Double) 1.0;
      doubleArray2[3] = (Double) 1.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) byte0;
      intArray2[1] = (int) byte0;
      intArray2[2] = (int) byte0;
      intArray2[3] = (int) byte0;
      intArray2[4] = (int) byte0;
      intArray2[5] = (int) 's';
      intArray2[6] = (int) (byte)0;
      intArray2[7] = (-3665);
      intArray2[8] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3055.4383);
      int[] intArray0 = new int[3];
      doubleArray0[2] = (double) 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      byte byte0 = (byte) (-28);
      Byte byte1 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-28), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 0, 1, (double) byte0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28)}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) (-751);
      doubleArray0[4] = (double) 2801;
      ArrayUtils.reverse(doubleArray0, (-2661), 91);
      assertArrayEquals(new double[] {2801.0, (-751.0), 91.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 23;
      intArray0[1] = (-265);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-25), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-374));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-374)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byte0;
      Object[] objectArray1 = new Object[11];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 23;
      objectArray1[1] = (Object) byte0;
      objectArray1[2] = (Object) 23;
      objectArray1[3] = (Object) (-265);
      objectArray1[4] = (Object) class0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(11, objectArray1.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-25), object2);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(object2.equals((Object)byte1));
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-25), (int) (byte) (-25));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-265);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-265.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.1764761625975);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.1764761625975);
      objectArray0[1] = (Object) (-1542.1764761625975);
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = (-265);
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), (-265)}, intArray0);
      assertArrayEquals(new int[] {0, (-265), (-265), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-29);
      longArray0[2] = (long) (-29);
      longArray0[3] = (long) (-1569);
      longArray0[4] = (long) (-1569);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 1;
      ArrayUtils.shift(longArray0, (-29), 0, (-265));
      assertArrayEquals(new long[] {0L, (-29L), (-29L), (-1569L), (-1569L), 0L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1569), 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-78), (byte)65, (byte)65}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1676);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1676), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1676, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2543);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-265);
      doubleArray0[3] = (double) (-265);
      doubleArray0[4] = (double) (-265);
      ArrayUtils.shift(doubleArray0, (-265), 786, 1167);
      assertArrayEquals(new double[] {(-265.0), (-265.0), (-2543.0), 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1167);
      assertEquals((-1), int0);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class2;
      classArray0[2] = class1;
      classArray0[3] = class2;
      classArray0[4] = class0;
      classArray0[5] = class1;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      ArrayUtils.swap((Object[]) classArray0, 786, 9);
      assertEquals(6, classArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-265);
      doubleArray1[2] = (double) (byte)8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 76, 76);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte byte0 = (byte)92;
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte byte2 = (byte)8;
      Byte byte3 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) byte1;
      ArrayUtils.swap(objectArray0, (int) (byte)2, 270);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte0;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      byteArray0[7] = byte3;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int)  (-113), 114);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      ArrayUtils.swap((Object[]) byteArray0, 1, 1, 1161);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 114);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-791);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-791.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = ArrayUtils.insert((-2287), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      int[] intArray0 = new int[5];
      doubleArray0[3] = (double) 0;
      intArray0[1] = 2;
      intArray0[3] = (int) (short)2013;
      ArrayUtils.shift(intArray0, (int) (short) (-18), 0, (-3927));
      assertArrayEquals(new int[] {0, 2, 0, 2013, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 0, (int) (short)2013, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2013;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-3211.0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.lastIndexOf(longArray0, (long) 76, 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(doubleArray1, (double) 1791L);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte)92;
      int int4 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals((-1), int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)92}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (short) (-1);
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-48), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((byte) (-48), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte1);
      assertFalse(byte1.equals((Object)object1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object0));
      assertNotNull(byte2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertTrue(boolean0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object1.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte2));
      assertEquals(1, objectArray0.length);
      
      Byte byte3 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte3);
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      ArrayUtils.swap(objectArray0, 1, (int) (byte)66);
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)115, (int) (byte)76);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 's';
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'j';
      charArray1[1] = 'x';
      charArray1[2] = 's';
      charArray1[3] = '#';
      charArray1[4] = '#';
      charArray1[5] = 's';
      charArray1[6] = 'x';
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'j', 'x', 's', '#', '#', 's', 'x'}, charArray2);
      assertArrayEquals(new char[] {'j', 'x', 's', '#', '#', 's', 'x'}, charArray1);
      assertEquals(7, charArray2.length);
      assertEquals(7, charArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 's';
      intArray0[4] = (int) 'j';
      intArray0[5] = (int) 'j';
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 120, (int) (byte) (-27));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {35, 35, 120, 115, 106, 106}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2331);
      doubleArray0[1] = (double) 'D';
      doubleArray0[2] = (double) (-2331);
      ArrayUtils.shift(doubleArray0, 0, (-1026), (-2331));
      assertArrayEquals(new double[] {(-2331.0), 68.0, (-2331.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = '+';
      charArray0[4] = 'D';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', 'D', 'D', '+', 'D'}, charArray0);
      assertArrayEquals(new char[] {'D', 'D', 'D', '+', 'D'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "The String did not match either specified value");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(7, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1775.5925F);
      floatArray0[1] = (float) 'k';
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1775.5925F), 107.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (short)1639);
      assertArrayEquals(new float[] {107.0F, (-1775.5925F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-4901));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {107.0F, (-1775.5925F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)32;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (byte)32;
      floatArray0[2] = (float) (byte) (-48);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = (-1678.3117);
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-1678.3117);
      objectArray0[1] = (Object) (byte)118;
      objectArray0[2] = (Object) (-1678.3117);
      objectArray0[4] = (Object) (-1678.3117);
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) (-1678.3117);
      objectArray0[8] = (Object) (-1678.3117);
      ArrayUtils.shift(objectArray0, (-265), (int) (byte)118, 3279);
      assertEquals(9, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-265));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1678.3117), (-1678.3117), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-897.5729691219151);
      doubleArray0[1] = 1938.401764359006;
      doubleArray0[2] = 2470.42412346;
      doubleArray0[3] = (-2495.141152863532);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2386.9053655368753, 110);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-897.5729691219151), 1938.401764359006, 2470.42412346, (-2495.141152863532)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 20.717485699575626;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1872;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1872;
      longArray0[1] = (long) 1872;
      longArray0[2] = 2974L;
      longArray0[3] = 2974L;
      longArray0[4] = (long) 1872;
      boolean boolean1 = ArrayUtils.contains(longArray0, 2974L);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {1872L, 1872L, 2974L, 2974L, 1872L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, 1872);
      assertNull(byte0);
      
      Byte byte1 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, (Object) byte2);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)21, (-586));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-101);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte) (-101)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte) (-101)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-23.287558F);
      floatArray0[5] = 1735.56F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 0.0F, (-23.287558F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, (-23.287558F), 1735.56F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 0.0F, (-23.287558F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 0.0F, (-23.287558F), 1735.56F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1213.6524509513);
      assertEquals(1213.6524509513, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1213.6524509513}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1120.9620773);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1120.9620773)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '_');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, '_');
      assertNull(charArray1);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 586, 1856);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '_';
      intArray0[1] = 586;
      intArray0[2] = 1856;
      intArray0[3] = (int) '_';
      intArray0[4] = 586;
      int[] intArray1 = ArrayUtils.add(intArray0, 2146204860);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {95, 586, 1856, 95, 586}, intArray0);
      assertArrayEquals(new int[] {95, 586, 1856, 95, 586, 2146204860}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('_');
      assertEquals('_', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('`');
      assertEquals('`', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('`');
      assertEquals('`', (char)character4);
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray1, (float) 586);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {586.0F}, floatArray3, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray3.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-80));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 125, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 125;
      floatArray0[1] = (float) 1;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {125.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(125);
      assertEquals(125L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-48));
      assertEquals((-48L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(125);
      assertEquals(125L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-80));
      assertEquals((-80L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(0);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1L));
      assertEquals((-1L), (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(125);
      assertEquals(125L, (long)long6);
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {125L, (-48L), 125L, (-80L), 0L, (-1L), 125L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, (-2146684536), Integer.MAX_VALUE, 45);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146684536);
      intArray0[1] = 45;
      ArrayUtils.shift(intArray0, (-620), (-620), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2146684536), 45, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.swap(byteArray0, 45, 45, (-2));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-38), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean1 = new Boolean(",jV+1\"");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = new Boolean(",jV+1\"");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",jV+1\"");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = new Boolean(".\"skL,[\"");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      booleanArray1[5] = boolean6;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('1');
      assertEquals('1', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('Z');
      assertEquals('Z', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2331);
      int int0 = 1735;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2543), 1735);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2331)}, intArray0);
      assertArrayEquals(new int[] {(-2331)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2331);
      ArrayUtils.swap(floatArray0, (-2543), (-2331));
      assertArrayEquals(new float[] {(-2331.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 562);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 562, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1170;
      ArrayUtils.swap(floatArray0, (-1911), (-1911), (-3197));
      assertArrayEquals(new float[] {1170.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-736.45306F));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1170.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, 207);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      ArrayUtils.reverse(booleanArray2, (int) (byte)127, 948);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1048);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short)1048);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-1516), (int) (short)1048, 3401);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-667L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (-2255));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray3 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray3.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray4 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertSame(longArray4, longArray3);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray4.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)19;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[5] = (short) (byte) (-101);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short) (-101)}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-2084322364);
      intArray0[2] = 831;
      intArray0[3] = 4686;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 831, (-2084322364));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-2084322364), 831, 4686}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray1);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[3] = class2;
      classArray0[4] = class1;
      classArray0[5] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, classArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 831, Double.NaN);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, 2, 0, (-791));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1833L);
      longArray0[2] = (long) 0;
      longArray0[3] = (-561L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1833L), 0L, (-561L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1833L);
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (-33);
      longArray0[3] = (long) 'x';
      longArray0[4] = (long) 'x';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1833L), 120L, (-33L), 120L, 120L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)20;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)1042;
      shortArray0[3] = (short)784;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)20, (short)76, (short)1042, (short)784}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2543);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-265);
      doubleArray0[3] = (double) (-265);
      doubleArray0[4] = (double) (-265);
      ArrayUtils.shift(doubleArray0, (-265), 786, 1167);
      assertArrayEquals(new double[] {(-265.0), (-265.0), (-2543.0), 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1167);
      assertEquals((-1), int0);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte> class3 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class3;
      classArray0[2] = class1;
      classArray0[3] = class3;
      classArray0[4] = class0;
      classArray0[5] = class2;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)10862;
      shortArray0[1] = (short)3099;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)10862, (short)3099, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)10862, (short)3099, (short) (-1), (short)10862, (short)3099, (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)10862, (short)3099, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      Double double0 = Double.valueOf((double) (-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(4, int0);
      assertArrayEquals(new float[] {0.0F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte> class3 = Byte.class;
      Class<Byte> class4 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      classArray0[0] = class0;
      classArray0[1] = class1;
      Class<Byte> class5 = Byte.class;
      classArray0[2] = class5;
      classArray0[3] = class3;
      classArray0[4] = class4;
      classArray0[5] = class2;
      classArray0[6] = class0;
      classArray0[7] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray1.length);
      assertEquals(8, classArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'H';
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = (int) 'H';
      intArray0[6] = (int) 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2130303778, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2130303778, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2347));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-2347));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-2347L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2347);
      floatArray0[1] = (float) (byte)46;
      floatArray0[2] = (float) (byte)46;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 46.0F, 3052);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-2347.0F), 46.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1545.4137F;
      floatArray0[1] = 50.0F;
      floatArray0[2] = 3471.808F;
      floatArray0[3] = 107.1546F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2454.7673F);
      floatArray0[6] = 58.0F;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = (-2046.2267F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1545.4137F, 50.0F, 3471.808F, 107.1546F, 0.0F, (-2454.7673F), 58.0F, Float.NaN, (-2046.2267F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 7);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[6] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 870;
      longArray0[1] = (long) 870;
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[4] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1542.090316324), (double) (-33));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-33));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte) (-123);
      shortArray0[2] = (short) (byte) (-123);
      shortArray0[3] = (short) (byte) (-123);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-791));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -791, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-114), (byte)58, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Float float0 = new Float((double) (byte) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      ArrayUtils.shift(intArray0, (-1938), (int) (byte) (-114), 306);
      assertArrayEquals(new int[] {0, 0, (-4064), (-4064), 0, (-4064)}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4064);
      floatArray0[1] = (float) (-4064);
      floatArray0[2] = (float) (byte)46;
      floatArray0[3] = (float) (byte)46;
      floatArray0[4] = (float) (byte)46;
      floatArray0[5] = (float) (byte)58;
      ArrayUtils.swap(floatArray0, 128, 306, (-4064));
      assertArrayEquals(new float[] {(-4064.0F), (-4064.0F), 46.0F, 46.0F, 46.0F, 58.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)58);
      assertEquals((short)58, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)344);
      assertEquals((short)344, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      Double double0 = Double.valueOf((double) (-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = (double) 't';
      doubleArray0[4] = (double) 'C';
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-248.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-248.0), (-1.0), 0.0, 116.0, 116.0, 67.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 116.0, 116.0, 67.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(104, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1065.6883843259768), (int) 't', (double) (byte) (-87));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 116.0, 116.0, 67.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'H';
      intArray0[1] = (int) 't';
      intArray0[2] = (int) 't';
      intArray0[3] = (-1595);
      intArray0[4] = (int) 'C';
      intArray0[5] = (int) 'H';
      intArray0[6] = (int) 'H';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {72, 72, 67, (-1595), 116, 116, 72}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-265);
      floatArray0[3] = (float) (byte) (-48);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-265.0F), 0.0F, (-48.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1101;
      shortArray0[1] = (short) (byte) (-48);
      shortArray0[2] = (short) (byte) (-48);
      shortArray0[3] = (short) (byte) (-48);
      shortArray0[4] = (short) (byte) (-48);
      shortArray0[5] = (short) (byte) (-48);
      shortArray0[6] = (short)745;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1461, (-265));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1101, (short) (-48), (short) (-48), (short) (-48), (short) (-48), (short) (-48), (short)745}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-48);
      shortArray2[1] = (short) (byte) (-48);
      shortArray2[2] = (short) (byte) (-48);
      shortArray2[3] = (short) (byte) (-48);
      shortArray2[4] = (short)745;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-48), shortArray2, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-97);
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)100;
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((byte)100);
      assertEquals(100L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-2.0));
      assertEquals((-2.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2543));
      assertEquals((-2543.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2543));
      assertEquals((-2543.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(219.9331);
      assertEquals(219.9331, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = Double.valueOf((double) (byte)64);
      assertEquals(64.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      try { 
        Double.valueOf("(O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 43;
      ArrayUtils.shift(intArray0, 1820, 81, 81);
      assertArrayEquals(new int[] {0, 43, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = '+';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '=');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'N', '@', 'A', '+'}, charArray0);
      assertArrayEquals(new char[] {'N', '@', 'A', '+'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'N', '@', 'A', '+'}, charArray0);
      assertArrayEquals(new char[] {'N', '@', 'A', '+'}, charArray1);
      assertArrayEquals(new char[] {'N', '@', 'A', '+'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(intArray0, (-4135));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 3230, (-525));
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2543);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-265);
      floatArray0[7] = (float) (-265);
      byte byte0 = (byte)127;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      floatArray0[4] = (float) (byte)5;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-107));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)127, (byte)127, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)127;
      Byte byte1 = ArrayUtils.get(byteArray1, (-2543));
      assertNull(byte1);
      assertEquals(1, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (int) (byte)127);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (byte)127;
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {127.0, 0.0, 127.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character character0 = new Character('g');
      assertEquals('g', (char)character0);
      assertNotNull(character0);
      
      IntStream intStream0 = mockRandom0.ints((-26870), (-33));
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-26870);
      floatArray0[1] = (float) 'x';
      floatArray0[2] = (float) (-26870);
      floatArray0[3] = (float) (-26870);
      floatArray0[4] = 102.65398F;
      floatArray0[5] = (float) 'g';
      floatArray0[6] = (float) 'g';
      floatArray0[7] = (float) 'x';
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-26870.0F), 120.0F, (-26870.0F), (-26870.0F), 102.65398F, 103.0F, 103.0F, 120.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x', 'g', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'g', '\u0000', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\''}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2833);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)70;
      longArray0[2] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short)0, (-2134), (int) (short)1855);
      assertArrayEquals(new long[] {0L, 70L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-39);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2134), 1185);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-39.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-39.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.shift(charArray0, 64);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)70, 549, (int) (short)70);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-39);
      intArray0[4] = (-1);
      intArray0[5] = 1185;
      intArray0[6] = 549;
      intArray0[7] = (int) (short)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, (-39), (-1), 1185, 549, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', 'I'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-15740);
      shortArray0[1] = (short) (-1067);
      shortArray0[2] = (short) (-417);
      shortArray0[3] = (short)1854;
      shortArray0[4] = (short) (-15740);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-15740), (short) (-1067), (short) (-417), (short)1854, (short) (-15740), (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-15740), (short) (-1067), (short) (-417), (short)1854, (short) (-15740), (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short) (-15740), (short) (-1067), (short) (-417), (short)1854, (short) (-15740), (short)0}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)115}, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)115}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals('K', (char)character3);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 6, (int) (short)16);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)16, (short) (-1), (short)536, (short)1136, (short)32, (short)1, (short) (-1), (short)2}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.reverse((double[]) null, (int) (short)16, 1545);
      Byte byte0 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-82), object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      ArrayUtils.reverse((double[]) null, 0, 4359);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '+';
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3408.492F);
      floatArray1[1] = (float) '+';
      floatArray1[2] = (float) '+';
      floatArray1[3] = (float) '+';
      floatArray1[4] = (float) '+';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {43.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3408.492F), 43.0F, 43.0F, 43.0F, 43.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3929.19);
      doubleArray0[1] = (double) 43.0F;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 43.0F, (double) (-3408.492F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-3929.19), 43.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-113);
      Byte byte3 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byte byte5 = (byte)82;
      Byte byte6 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      shortArray0[1] = (short) (byte)byte1;
      byteArray0[2] = byte7;
      byteArray0[3] = byte6;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, (int) 2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte2 == byte5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) byte2, (-1), (int) (short)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte2 == byte5);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)0);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)444;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)82;
      floatArray0[3] = (float) byte5;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) byte5;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {444.0F, (-1.0F), 82.0F, 82.0F, 0.0F, 0.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)92, (byte)2, (byte)0, (byte)0, (byte) (-34)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-4616.802039033944);
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-34);
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) 0.7;
      objectArray0[5] = (Object) false;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, (int) (short)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'S';
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1450);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'V');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-177), 1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 0L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[1];
      int int0 = 2730;
      intArray0[0] = 2730;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2730, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 125;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 125;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 125L, 0L, 0L, 125L}, longArray0);
      assertArrayEquals(new long[] {125L, 125L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1791L, (int) (short)0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 125L, 0L, 0L, 125L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int3 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertArrayEquals(new short[] {(short)299, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      int int4 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)299);
      assertEquals((-1), int4);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Long long0 = new Long((-772));
      assertEquals((-772L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-772L), (-772L), (-772L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.shift(longArray1, (-1304), 648, 116);
      assertArrayEquals(new long[] {(-772L), (-772L), (-772L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-260);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1591), (-260));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-260.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte byte0 = (byte) (-78);
      ArrayUtils.shift(charArray0, (int) (byte) (-78));
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I'}, charArray0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-1406), (-361), (-29));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) longArray0[0], 3012);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-772L), (-772L), (-772L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-78), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray1, 848);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2781.5F);
      floatArray0[1] = (float) 848;
      floatArray0[2] = (float) 848;
      floatArray0[3] = (-2781.5F);
      floatArray0[4] = (-2781.5F);
      floatArray0[5] = (float) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2781.5F), (-2322));
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2781.5F), 848.0F, 848.0F, (-2781.5F), (-2781.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      ArrayUtils.shift(charArray0, 3012, 3667, (-3965));
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray2, (String) null);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(stringArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-265.0), (-265.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1800, (-1145));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap((long[]) null, 122, 3, (-265));
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '0', (-265));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-265), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)115;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-96), (byte)11, (byte) (-24), (byte) (-119), (byte)115}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-59));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)52;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)111, (byte)5, (byte) (-90), (byte)5, (byte)0, (byte)54, (byte)58, (byte)52}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char char0 = 'V';
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '(';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'V', '(', 'V', 'V', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'V';
      characterArray0[1] = (Character) 'V';
      characterArray0[2] = (Character) 'V';
      characterArray0[3] = (Character) '(';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'V', 'V', '('}, charArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (int) (short) (-105), (-986), (int) characterArray0[0]);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(4, characterArray0.length);
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (char)characterArray0[3];
      intArray0[1] = (int) (char)characterArray0[1];
      intArray0[2] = (int) 'V';
      intArray0[3] = (int) (short) (-105);
      intArray0[4] = (-986);
      intArray0[5] = (int) '(';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) (short) (-105), 40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -105, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-114), (byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-114), (byte) (-45)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-818.39F);
      floatArray0[1] = (float) '0';
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-818.39F), 48.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-45);
      intArray0[1] = (int) (byte) (-123);
      intArray0[2] = (int) (byte) (-114);
      intArray0[3] = (int) (byte) (-114);
      intArray0[4] = (int) (byte) (-45);
      intArray0[5] = (int) (byte) (-114);
      intArray0[6] = (int) (byte) (-123);
      int int0 = ArrayUtils.indexOf(intArray0, (-255), (-545));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-45), (-123), (-114), (-114), (-45), (-114), (-123)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      byte byte0 = (byte)74;
      Byte byte1 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = byte0;
      byteArray2[1] = (byte)74;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74}, byteArray2);
      assertEquals(2, byteArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) '\u0000';
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {74, 74, 0, 74, 74, Integer.MAX_VALUE}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)33;
      ArrayUtils.swap(byteArray1, (int) (byte)33, 0, 0);
      assertArrayEquals(new byte[] {(byte)33}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-2946L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-2946L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2946L), 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)38, 0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-84));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = 1396;
      intArray0[2] = (int) (byte) (-84);
      intArray0[3] = (int) (short)120;
      intArray0[4] = (int) (byte) (-84);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-747));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-84), 1396, (-84), 120, (-84)}, intArray0);
      assertArrayEquals(new int[] {(-84), 1396, (-84), 120, (-84)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 98, 14, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = (-2265.527217828046);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 14);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)38;
      ArrayUtils.swap(byteArray0, 14, (-2143722729));
      assertArrayEquals(new byte[] {(byte)62, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Byte byte0 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.shift(byteArray0, 14, (-1), (int) (byte)38);
      assertArrayEquals(new byte[] {(byte)62, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1017;
      intArray0[1] = 14;
      intArray0[2] = (int) (byte) (-60);
      intArray0[3] = (-2143722729);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-60));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1017, 14, (-60), (-2143722729)}, intArray0);
      assertArrayEquals(new int[] {1017, 14, (-2143722729)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.swap((float[]) null, 128, 2, 1577);
      Short short0 = new Short((short)55);
      assertEquals((short)55, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)55);
      assertEquals((short)55, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)3173);
      assertEquals((short)3173, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)2013;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-571L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      ArrayUtils.swap(floatArray0, (int) (short)2013, (-3256));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '.';
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (int) '.';
      intArray0[5] = (int) '*';
      intArray0[6] = (-1935);
      intArray0[7] = 0;
      intArray0[8] = (int) '.';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {46, 0, 1, 1, 46, 42, (-1935), 0, 46}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 1, (double) 0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 1;
      objectArray0[2] = (Object) 1;
      objectArray0[3] = (Object) '*';
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(1, object0);
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertFalse(object0.equals((Object)int0));
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {46, 0, 1, 1, 46, 42, (-1935), 0, 46}, intArray0);
      assertArrayEquals(new int[] {46, 1, 1, 46, 42, (-1935), 0, 46}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      Integer integer0 = new Integer((-359));
      assertEquals((-359), (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((-359));
      assertEquals((-359), (int)mutableInt0.toInteger());
      assertEquals((-359), (int)mutableInt0.getValue());
      assertEquals((-359), mutableInt0.intValue());
      assertEquals((-359.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-359.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-359L), mutableInt0.longValue());
      assertEquals((short) (-359), mutableInt0.shortValue());
      assertEquals("-359", mutableInt0.toString());
      assertEquals((byte) (-103), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-358), int0);
      assertEquals((-358.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-358), mutableInt0.intValue());
      assertEquals((-358.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-358L), mutableInt0.longValue());
      assertEquals((short) (-358), mutableInt0.shortValue());
      assertEquals("-358", mutableInt0.toString());
      assertEquals((-358), (int)mutableInt0.getValue());
      assertEquals((-358), (int)mutableInt0.toInteger());
      assertEquals((byte) (-102), mutableInt0.byteValue());
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-358), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-358.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-358), mutableInt0.intValue());
      assertEquals((-358.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-358L), mutableInt0.longValue());
      assertEquals((short) (-358), mutableInt0.shortValue());
      assertEquals("-358", mutableInt0.toString());
      assertEquals((-358), (int)mutableInt0.getValue());
      assertEquals((-358), (int)mutableInt0.toInteger());
      assertEquals((byte) (-102), mutableInt0.byteValue());
      assertNotNull(integer1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)2);
      assertNull(longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 9);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char char1 = '\"';
      Character character3 = new Character('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)2;
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1410L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)20);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3055.4383));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)20;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 20.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 20.0F, 0.0F, 20.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '\'';
      charArray0[2] = '!';
      charArray0[3] = '{';
      charArray0[4] = '3';
      charArray0[5] = '!';
      charArray0[6] = 'f';
      charArray0[7] = 'u';
      boolean boolean1 = ArrayUtils.contains(charArray0, '\'');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'K', '\'', '!', '{', '3', '!', 'f', 'u'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)20);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-772);
      floatArray0[1] = (float) (-772);
      floatArray0[2] = (float) (-1861);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2781.5F), (-772));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-772.0F), (-772.0F), (-1861.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) byte1, 2);
      assertEquals((-1), int0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(0, classArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2781.5F);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte)118;
      doubleArray0[3] = (double) (-772.0F);
      doubleArray0[4] = (double) (-1861.0F);
      doubleArray0[5] = (double) (-772);
      doubleArray0[6] = (double) (-1861);
      doubleArray0[7] = (double) (-2781.5F);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1539.0), 3032.65777486039);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet1.toString());
      assertEquals(8, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-2781.5), 2.0, 118.0, (-772.0), (-1861.0), (-772.0), (-1861.0), (-2781.5)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray1, (Object) null, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)118;
      shortArray0[1] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1029L);
      longArray0[1] = (-818L);
      longArray0[2] = (-2997L);
      longArray0[3] = (-756L);
      longArray0[4] = 3303L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1029L), (-818L), (-2997L), (-756L), 3303L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2155.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2155.0F), 898);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2155.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 898;
      intArray0[1] = 898;
      intArray0[2] = 898;
      intArray0[3] = 898;
      intArray0[4] = 898;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {898, 898, 898, 898, 898}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4055;
      shortArray0[1] = (short)116;
      shortArray0[2] = (short)45;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)45);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)4055, (short)116, (short)45}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)4055, (int) (short)116);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      
      byte byte0 = (byte) (-48);
      byte byte1 = (byte)115;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byte byte2 = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)115;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2543), 501);
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'L');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-1010));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1010, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)53);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {53}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      byte byte0 = (byte) (-78);
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray1 = null;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1542.090316324), (-600));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-275));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float((-2931.3523F));
      assertEquals((-2931.3523F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte) (-78));
      assertNull(floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-600);
      intArray0[1] = 898;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1653.7, (double) 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(shortArray0, 92, (-40), 2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 898, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-23));
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (-17.18287F);
      floatArray0[2] = (float) 'S';
      floatArray0[3] = (float) 'W';
      floatArray0[4] = (float) 'S';
      floatArray0[5] = (float) 'W';
      floatArray0[6] = (float) 'S';
      floatArray0[7] = (float) '.';
      floatArray0[8] = (float) 2;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-17.18287F), 87.0F, 83.0F, 87.0F, 83.0F, 46.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-17.18287F), 83.0F, 87.0F, 83.0F, 87.0F, 83.0F, 46.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals('K', (char)character3);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (int) 'K';
      intArray0[2] = 1330;
      intArray0[3] = (int) char0;
      intArray0[4] = (int) (char)character0;
      intArray0[5] = (int) (char)character4;
      intArray0[6] = (int) (char)character2;
      intArray0[7] = (int) char0;
      intArray0[8] = (int) char0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2, 75, 1330, 75, 75, 34, 75, 75, 75}, intArray0);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)48, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)48;
      shortArray0[1] = (short) (byte)48;
      shortArray0[2] = (short) (byte)48;
      shortArray0[3] = (short) (byte)48;
      shortArray0[4] = (short) (byte)48;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)48, (short)48, (short)48, (short)48, (short)48}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 100);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {100, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray2.length);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = ArrayUtils.lastIndexOf(byteArray2, (byte)5, (int) (byte)43);
      assertEquals((-1), int1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte)90;
      shortArray0[3] = (short) (byte)5;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short)43, (short)90, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)92;
      intArray0[1] = 76;
      intArray0[2] = (int) (byte) (-34);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-4455));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {92, 76, (-34)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (-215L);
      int int0 = 1;
      long[] longArray1 = ArrayUtils.remove(longArray0, 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, (-215L)}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 34, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, Double.NaN, (-15));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2636);
      shortArray0[1] = (short) (-316);
      shortArray0[2] = (short) (-422);
      shortArray0[3] = (short) (-448);
      shortArray0[4] = (short)2776;
      shortArray0[5] = (short) (-2644);
      shortArray0[6] = (short)2163;
      shortArray0[7] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2163, (int) (short) (-448));
      assertEquals(6, int0);
      assertArrayEquals(new short[] {(short) (-2636), (short) (-316), (short) (-422), (short) (-448), (short)2776, (short) (-2644), (short)2163, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertEquals('', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray1.length);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 1169.54557;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 76);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, (-4616.802039033944), 1169.54557}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)92, (byte)2, (byte)30, (byte)0, (byte) (-34)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      ArrayUtils.shift(intArray1, (int) (byte) (-105), (int) (byte) (-105), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-420);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (-420.0F);
      doubleArray0[4] = (double) 58.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) ':';
      objectArray0[2] = (Object) 58.0;
      objectArray0[3] = (Object) (-420.0F);
      objectArray0[4] = (Object) 58.0;
      objectArray0[5] = (Object) (-420.0F);
      objectArray0[6] = (Object) 58.0;
      objectArray0[7] = (Object) (-420.0);
      objectArray0[8] = (Object) (-420.0);
      ArrayUtils.shift(objectArray0, (-891), 721, (int) (byte) (-105));
      assertEquals(9, objectArray0.length);
      
      String string0 = ArrayUtils.toString(objectArray0[8], "");
      assertEquals("-420.0", string0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)17);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte)13);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = (-265);
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte byte0 = (byte)115;
      byte byte1 = (byte) (-84);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-84);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -265, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-3843);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3843, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 1027L;
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1027L;
      floatArray0[2] = (float) 1027L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 6, 6);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse((byte[]) null, 4319, (-272));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1726), (-69));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'p';
      ArrayUtils.swap(charArray0, (-2686), 0, 0);
      assertArrayEquals(new char[] {'_', '_', 'p'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-161);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1510), (-2686));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1219);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1219L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1219);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1219.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1219);
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = (int) (short) (-1219);
      intArray0[4] = (int) (short) (-1219);
      intArray0[5] = (int) (short) (-1219);
      intArray0[6] = (-372);
      boolean boolean2 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.reverse((boolean[]) null, 0, (-480));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-480);
      floatArray0[2] = (float) (-372);
      floatArray0[3] = (float) (short) (-1219);
      floatArray0[4] = (float) (-372);
      floatArray0[5] = (float) (-1219L);
      floatArray0[6] = (-3675.0442F);
      floatArray0[7] = (float) (-1219);
      floatArray0[8] = (float) 10;
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-480.0F), (-372.0F), (-1219.0F), (-372.0F), (-1219.0F), (-3675.0442F), (-1219.0F), 10.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[5] = (int) (short) (-1219);
      intArray0[6] = (-372);
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.reverse((boolean[]) null, 0, (-480));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-480);
      floatArray0[2] = (float) (-372);
      floatArray0[3] = (float) (short) (-1219);
      floatArray0[4] = (float) (-372);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (-3675.0442F);
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 10;
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, (-480.0F), (-372.0F), (-1219.0F), (-372.0F), 0.0F, (-3675.0442F), 0.0F, 10.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.shift(doubleArray1, (int) (byte) (-47), 1, (-3123));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1634, 22);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)38);
      assertEquals((short)38, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)38);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)38, (short)38, (short)38}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1302);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1302}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)695);
      assertEquals((short)695, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)8);
      assertEquals((short)8, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1507);
      assertEquals((short)1507, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)8);
      assertEquals((short)8, (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)823);
      assertEquals((short)823, (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-148));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)695, (short)8, (short) (-1), (short)1507, (short)8, (short)823}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1219);
      shortArray1[2] = (short) (-1219);
      shortArray1[3] = (short) (-1219);
      shortArray1[4] = (short) (-1219);
      shortArray1[5] = (short) (-2155);
      shortArray1[6] = (short)127;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1219), (short)0, (short) (-1219), (short) (-1219), (short) (-1219), (short) (-2155), (short)127}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1219), (short) (-1219), (short)0, (short) (-1219), (short) (-1219), (short) (-1219), (short) (-2155), (short)127}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-2155);
      longArray0[1] = (-2039L);
      boolean boolean1 = ArrayUtils.contains(longArray0, 1791L);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-2155L), (-2039L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-87), 2);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)127;
      objectArray0[1] = (Object) bitSet0;
      boolean boolean3 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "(5)`S:;#/'");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(floatArray0, 0, 47, 0);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) 47;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) '/';
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new long[] {47L, 47L, 0L, 0L, 47L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) '';
      intArray2[1] = (int) '';
      intArray2[2] = (int) '/';
      intArray2[3] = (int) '';
      intArray2[4] = 0;
      intArray2[5] = (int) '';
      intArray2[6] = (int) (short)0;
      intArray2[7] = (int) '/';
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray2);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {127, 127, 47, 127, 0, 127, 0, 47}, intArray2);
      assertEquals(0, intArray3.length);
      assertEquals(8, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-18);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[3] = (int) (short)2013;
      ArrayUtils.shift(intArray0, (int) (short) (-18), 0, (-3927));
      assertArrayEquals(new int[] {0, 2, 0, 2013}, intArray0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 0, (int) (short)2013, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2013;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 2013;
      longArray0[5] = (long) (short)2013;
      longArray0[6] = (long) (-3927);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 2013L, 0L, 2013L, 2013L, (-3927L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 47.0F;
      floatArray0[1] = 1.0F;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {47.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)98;
      floatArray0[1] = (float) (short)98;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {98.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Long long0 = new Long(3543L);
      assertEquals(3543L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-737L));
      assertEquals((-737L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3543L, (-737L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'E', (-1350));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)98;
      shortArray0[4] = (short) (-1527);
      shortArray0[5] = (short)98;
      shortArray0[6] = (short)98;
      ArrayUtils.shift(shortArray0, (-822), (int) (short)98, (int) (short)98);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short) (-1527), (short)98, (short)98}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[1];
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-2112);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'L';
      floatArray0[3] = (float) (short)12;
      int int1 = ArrayUtils.indexOf(floatArray0, 102.65398F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-2112.0F), 0.0F, 76.0F, 12.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)115;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)30, (byte)115}, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)30, (byte)115}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1335);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1335}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)30;
      shortArray0[1] = (short) (byte)115;
      shortArray0[2] = (short) (byte)115;
      shortArray0[3] = (short) (byte)115;
      shortArray0[4] = (short) (byte)30;
      shortArray0[5] = (short) (byte)30;
      shortArray0[6] = (short) (byte) (-48);
      shortArray0[7] = (short) (byte) (-48);
      shortArray0[8] = (short) (byte) (-48);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)30, (short)115, (short)115, (short)115, (short)30, (short)30, (short) (-48), (short) (-48), (short) (-48)}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int[] intArray0 = new int[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-91), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[0];
      Byte byte2 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte2);
      assertFalse(boolean0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals(0, objectArray0.length);
      
      Byte byte3 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)object1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      ArrayUtils.swap(objectArray0, (int) (byte)122, 0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)106;
      Byte byte1 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)106, (short)106}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)106, (short)106}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (short)106;
      intArray0[2] = (int) (short)106;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) 'k';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {106, 106, 106, 106, 107}, intArray1);
      assertArrayEquals(new int[] {106, 106, 106, 106, 107}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "(@B\"JT]V><gx))");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)106, (short)106}, shortArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 107;
      floatArray0[1] = (float) 106;
      floatArray0[2] = (float) (short)106;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {107.0F, 106.0F, 106.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)106, 106);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)106, (short)106}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) comparator0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '#';
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 52, (int) (byte) (-81));
      assertNull(longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'L', 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, 0.1, (double) 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-2112);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'L';
      longArray0[3] = 0L;
      longArray0[4] = (long) 'L';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 786, (-2109610334));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2112L), 0L, 76L, 0L, 76L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'T');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertArrayEquals(new char[] {'L', 'L'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Float float0 = new Float(0.7);
      assertEquals(0.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1065.6883843259768));
      assertEquals((-1065.6884F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-1065.6883843259768);
      doubleArray0[2] = (double) (float)floatArray0[2];
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 157.55894918673056;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.7;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1167.54557), 0, 157.55894918673056);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.7, (-1065.6883843259768), (-1065.6883544921875), 0.0, 157.55894918673056, 0.0, 0.7}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-114), (byte)58, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Float float0 = new Float((double) (byte) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1915.993473617759);
      assertEquals(1915.9935F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1400.5792F), (-1400.5792F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertEquals(18, charArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)12);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)58);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float(678.087);
      assertEquals(678.087F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(678.087);
      assertEquals(678.087F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(2687.340087890625);
      assertEquals(2687.34F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1400.5792F), 678.087F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18688);
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = 18688;
      intArray0[2] = 1139;
      intArray0[3] = 18688;
      ArrayUtils.shift(intArray0, (-627), 18688, 1076);
      assertArrayEquals(new int[] {18688, 18688, 1139, 18688}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 18688, (-420));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)90;
      Byte byte3 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      ArrayUtils.shift(doubleArray0, (int) (byte)0, (int) byte2, (int) (byte)0);
      assertFalse(byte2 == byte0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      ArrayUtils.swap(charArray0, (int) byte2, (-623), (-426));
      assertFalse(byte2 == byte0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 14);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(117, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-420), (-33), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-33);
      floatArray0[1] = (float) (-33);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-33.0F), (-33.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-5200));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-5200)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-5200);
      doubleArray0[1] = (double) (-5200);
      doubleArray0[2] = (double) (-5200);
      doubleArray0[3] = (double) (-5200);
      doubleArray0[4] = (double) (-5200);
      doubleArray0[5] = (double) (-5200);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5200, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long long0 = (-757L);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-757L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, (-757L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1076;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1076, 1076}, intArray1);
      assertArrayEquals(new int[] {1076}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 1.0;
      doubleArray2[1] = (Double) 1.0;
      doubleArray2[2] = (Double) 1.0;
      doubleArray2[3] = (Double) 1.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1076, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-88), (-289), (int) (byte) (-88));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character(char0);
      assertEquals('K', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 586, (-791));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (char)character3;
      floatArray0[1] = (float) (byte)94;
      floatArray0[2] = (float) 586;
      floatArray0[3] = (float) 586;
      floatArray0[4] = (float) char0;
      floatArray0[5] = (float) 'K';
      floatArray0[6] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {75.0F, 94.0F, 586.0F, 586.0F, 75.0F, 75.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 75.0F, 94.0F, 586.0F, 586.0F, 75.0F, 75.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray1, (Object[]) byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short)127;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short)127, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short)127, (short)0, (short)0, (short)127, (short) (-2155), (short)127, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (short)127;
      longArray0[3] = 45L;
      longArray0[4] = (long) 'x';
      longArray0[6] = (long) 'x';
      longArray0[7] = (long) 'g';
      longArray0[8] = (long) (short)127;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2039L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1L, 120L, 127L, 45L, 120L, 0L, 120L, 103L, 127L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 120L, (int) (short) (-87));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'g';
      objectArray0[1] = (Object) 45L;
      objectArray0[2] = (Object) 127L;
      objectArray0[3] = (Object) 'g';
      objectArray0[4] = (Object) 'x';
      objectArray0[5] = (Object) 120L;
      objectArray0[6] = (Object) 45L;
      objectArray0[7] = (Object) 127L;
      objectArray0[8] = (Object) 'x';
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)31, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)31, (byte)2, (byte)2}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-986), (-986));
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-23), (-1546));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)2, (byte)31, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)31, (byte)2, (byte)2}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert(2473, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1873);
      intArray0[1] = (-3062);
      ArrayUtils.swap(intArray0, (-1873), (-1873), (-1873));
      assertArrayEquals(new int[] {(-1873), (-3062)}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1206L;
      longArray0[1] = (-281L);
      longArray0[2] = 2L;
      longArray0[3] = (-662L);
      longArray0[4] = 2784L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1206L, (-281L), 2L, (-662L), 2784L}, longArray0);
      assertArrayEquals(new long[] {1206L, (-281L), 2L, (-662L), 2784L, 1206L, (-281L), 2L, (-662L), 2784L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.reverse((int[]) null);
      Byte byte0 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)101, object0);
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 2784L;
      doubleArray0[2] = (double) 2784L;
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 2001.623360290652);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {2.0, 2784.0, 2784.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      Byte byte3 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte[] byteArray1 = new Byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.insert((int) 1639, byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 's';
      charArray0[2] = 'D';
      charArray0[3] = 'S';
      charArray0[4] = '4';
      charArray0[5] = 's';
      charArray0[6] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S', 's', 'D', 'S', '4', 's', 's'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4', 4201);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'S', 's', 'D', 'S', '4', 's', 's'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals((byte)23, object0);
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert(2145908091, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) ':';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray1[5] = boolean6;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) ':';
      doubleArray2[1] = (double) ':';
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {58.0, 58.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0, 58.0, 58.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1217;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)16, 1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1217, (short)16, (short)16, (short)16}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) character0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-62);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)43, (byte) (-62)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) (short)1217;
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) (short)16;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (char)character0;
      doubleArray0[7] = (double) (short)1217;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-248));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {48.0, 7.0, 1217.0, 0.0, 16.0, (-1.0), 48.0, 1217.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-98));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Byte byte0 = new Byte((byte)126);
      assertEquals((byte)126, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)126, object0);
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-98);
      floatArray0[2] = 3636.0F;
      floatArray0[3] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'V';
      charArray0[4] = 'X';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'J', 'X', 'X', 'V', 'X'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.swap(shortArray1, 0, (-1), 2146581198);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'J', 'X', 'X', 'V', 'X'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)126;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[1] = 117;
      intArray0[2] = 1351;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1242);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {13, 117, 1351}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 30);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {13, 117, 1351}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.reverse((Object[]) null, (-1965), 325);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-107);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)5);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-107)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)5;
      Byte byte0 = ArrayUtils.get(byteArray1, 0);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      assertEquals(1, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) byte0, (-4135));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = ' ';
      charArray0[2] = '0';
      charArray0[3] = 'B';
      charArray0[4] = '.';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'9', ' ', '0', 'B', '.'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-265);
      ArrayUtils.shift(doubleArray0, 0, 0, 1279);
      assertArrayEquals(new double[] {(-265.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D', 'D'}, charArray0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D', 'D'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'D';
      floatArray0[4] = (float) 'D';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1031.531F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {68.0F, 0.0F, 68.0F, 68.0F, 68.0F, (-1031.531F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {68.0F, 0.0F, 68.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 68.0F, 68.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1468;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1468}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[13] = (-1266.7561543);
      doubleArray0[1] = Double.NaN;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-3077), 97, (-3077));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-24));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-24)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 'X';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-120);
      ArrayUtils.shift(shortArray0, 2, (-138), 113);
      assertArrayEquals(new short[] {(short) (-120)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2378.61692;
      ArrayUtils.reverse(doubleArray0, (-738), 3520);
      assertArrayEquals(new double[] {2378.61692}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-738);
      intArray0[2] = 3520;
      intArray0[3] = 3520;
      intArray0[4] = (-738);
      intArray0[5] = (-738);
      intArray0[6] = (-738);
      int int0 = ArrayUtils.indexOf(intArray0, (-738), (-4593));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-738), 0, 3520, 3520, (-738), (-738), (-738), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE, 1785, (-59));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2378.61692}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-738), (-811));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-986);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-986)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 2139379936, (int) (short)444, 2911);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 392, (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)14, (byte) (-128), (byte)63, (byte) (-128), (byte) (-128), (byte) (-128)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)14, (byte) (-128), (byte)63, (byte) (-128), (byte) (-128), (byte) (-128)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      intArray0[1] = 2330;
      intArray0[2] = 34;
      intArray0[3] = 1623;
      intArray0[4] = 9;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2045), 2330, 34, 1623, 9}, intArray0);
      assertArrayEquals(new int[] {(-2045), 2330, 34, 1623, 9}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)1639);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-555);
      doubleArray0[1] = 767.9090000000001;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 767.9090000000001;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short)1639;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-49.047626798363));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-49.047626798363), (-555.0), 767.9090000000001, 0.0, 767.9090000000001, 0.0, 1639.0, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-555.0), 767.9090000000001, 0.0, 767.9090000000001, 0.0, 1639.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) byte0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'F');
      assertNull(charArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)106;
      Byte byte1 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)106, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray0, 1114111, (int) byte0, 1114111);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2120);
      assertEquals(2120, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals((short)106, mutableInt0.shortValue());
      assertEquals(106.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(106L, mutableInt0.longValue());
      assertEquals(106.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(106, (int)mutableInt0.toInteger());
      assertEquals(106, (int)mutableInt0.getValue());
      assertEquals(106, mutableInt0.intValue());
      assertEquals("106", mutableInt0.toString());
      assertEquals((byte)106, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(106, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((short)106, mutableInt0.shortValue());
      assertEquals(106.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(106L, mutableInt0.longValue());
      assertEquals(106.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(106, (int)mutableInt0.toInteger());
      assertEquals(106, (int)mutableInt0.getValue());
      assertEquals(106, mutableInt0.intValue());
      assertEquals("106", mutableInt0.toString());
      assertEquals((byte)106, mutableInt0.byteValue());
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(byte0);
      assertEquals(106, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("0$_C/<9J#/::|", (int) byte0);
      assertEquals(106, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1157));
      assertEquals((-1157), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("GMT", 53);
      assertEquals(53, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2120);
      assertEquals(2120, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-10));
      assertEquals((-10), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)117, (byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)117, (byte) (-45)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)117, (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = 139L;
      ArrayUtils.swap(longArray0, 2120, (-1512), 4471);
      assertArrayEquals(new long[] {(-123L), 139L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-45);
      floatArray0[1] = 0.0F;
      ArrayUtils.reverse(floatArray0, 65, (-3541));
      assertArrayEquals(new float[] {(-45.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.swap(booleanArray0, 90, (-234), 1510);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((boolean[]) null, (-25247), (-25247), (-25247));
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 0;
      char[] charArray0 = new char[2];
      charArray0[1] = '_';
      ArrayUtils.swap(charArray0, 1, (-1512), (-2686));
      assertArrayEquals(new char[] {'\u0000', '_'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-48), (int) (short) (-105));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-105), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      byte byte0 = (byte)74;
      Byte byte1 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 's'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-173.26);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (byte)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) byte0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-173.26), 74.0, 121.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement((byte[]) null, byte0);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)58;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 65, (-45));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)81, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      float[] floatArray0 = new float[10];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift(floatArray0, (-291), (-291), (-291));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      shortArray0[1] = (short)2985;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-411);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-105), (int) (short) (-105), 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-411);
      doubleArray0[1] = (double) (short)2985;
      doubleArray0[2] = (double) (short)2985;
      doubleArray0[3] = (double) (short)2309;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) (-1964);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-411.0), 2985.0, 2985.0, 2309.0, 0.1, (-1964.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (int) (short) (-411));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2309;
      floatArray0[1] = (float) (short)2309;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-105);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2309.0F, 2309.0F, 0.0F, (-105.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', 'I'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      ArrayUtils.shift(longArray1, (-1591), (-29), 322);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-260), (-39));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift(charArray0, 322);
      assertArrayEquals(new char[] {'i', 'I'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(booleanArray1, (-1421), (int) (byte) (-78), (-1591));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(3564.92);
      assertEquals(3564.92F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1429.8828647806);
      assertEquals(1429.8828F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift((byte[]) null, 48, 37, 48);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 34);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)3);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      ArrayUtils.swap((Object[]) byteArray0, (-2146581721), (-2146581721), 120);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-113);
      Byte byte3 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      shortArray0[1] = (short) (byte)byte1;
      byteArray0[2] = byte6;
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, (int) 2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) byte2, (-1), (int) (short)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2543);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 1167);
      assertEquals((-1), int0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('5');
      assertEquals('5', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = new Character('y');
      assertEquals('y', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2331), 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)16;
      floatArray0[1] = (float) '5';
      floatArray0[2] = (float) (short)16;
      floatArray0[3] = (float) (short)16;
      floatArray0[4] = (float) (char)character1;
      floatArray0[5] = (float) (char)character3;
      floatArray0[6] = (float) (char)character3;
      floatArray0[7] = (float) (char)character3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-394.7347F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {16.0F, 53.0F, 16.0F, 16.0F, 120.0F, 121.0F, 121.0F, 121.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) 'K';
      intArray0[4] = 52;
      intArray0[5] = (int) 'K';
      intArray0[6] = (int) 'K';
      intArray0[7] = (int) 'K';
      intArray0[8] = (int) 'K';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 17, 2146252886);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {75, 75, 75, 75, 52, 75, 75, 75, 75}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 1567);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1567, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-36);
      Byte byte1 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) null);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte) (-36);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-36), (short) (-36)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "The String did not match either specified value");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(7, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1775.5925F);
      floatArray0[1] = (float) 'k';
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1775.5925F), 107.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1639, (int) (short)1639);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0, (Comparator<? super Byte>) comparator0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-772);
      intArray0[1] = (int) (byte)100;
      intArray0[2] = (-772);
      intArray0[3] = (int) (byte)100;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-772));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-772), 100, (-772), 100}, intArray0);
      assertArrayEquals(new int[] {100, 100}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('^');
      assertEquals('^', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(')');
      assertEquals(')', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(')');
      assertEquals(')', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-', '^', ')', ')'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 645, (long) 645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 645, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-667L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray2, (-2134), 1392L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2134, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char char0 = '(';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) '(';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) (short)127;
      intArray0[5] = (int) (short)127;
      intArray0[6] = (int) '(';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {89, 89, 40, 89, 127, 127, 40}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(127, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1557;
      floatArray0[1] = (float) (-2236);
      floatArray0[2] = (-729.3F);
      floatArray0[3] = (float) (-2236);
      ArrayUtils.reverse(floatArray0, 1, (-2236));
      assertArrayEquals(new float[] {1557.0F, (-2236.0F), (-729.3F), (-2236.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)51;
      ArrayUtils.shift(byteArray0, 1, 1, 5);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)72, (byte)51}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 870;
      longArray0[1] = (long) 870;
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[4] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[5];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray2[2] = (Byte) byte0;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray2[3] = byte3;
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray2[4] = byte4;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray2);
      assertTrue(boolean0);
      assertEquals(5, byteArray2.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-123), (int) byte0, 870);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, 5, (-2236), 5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[25];
      longArray0[0] = (long) 0;
      longArray0[1] = 139L;
      longArray0[2] = (long) 0;
      longArray0[3] = 139L;
      longArray0[4] = (long) 0;
      longArray0[6] = (long) (-1);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 0);
      assertTrue(boolean0);
      assertEquals(25, longArray0.length);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)90);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 139L;
      doubleArray0[2] = 108.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) (byte)90;
      doubleArray0[6] = (double) 139L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 139.0, 108.0, (-1.0), 3.0, 90.0, 139.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 139.0, 108.0, (-1.0), 3.0, 90.0, 139.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(intArray1, (int) (short)0, (int) (byte) (-57), (int) (short)0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-662), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -662, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32, (int) (short) (-26896));
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{4, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82), (byte)32, (byte)32, (byte) (-82), (byte) (-82)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82), (byte)32, (byte)32, (byte) (-82), (byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (short) (-26896), 9, (int) (byte) (-82));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '|';
      charArray0[2] = 'n';
      charArray0[3] = '9';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'2', '|', 'n', '9'}, charArray0);
      assertArrayEquals(new char[] {'2', '|', 'n', '9'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) '2';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) '|';
      doubleArray0[4] = (double) 0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {57.0, 50.0, 0.0, 124.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 4331.92300144798);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4331.92300144798}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 0, 45);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)25;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)25}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)25}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      Byte byte2 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[6] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (Byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-3208.7246239273), 3061.645287728214);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-109);
      floatArray0[2] = (float) (-109);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-109.0F), (-109.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-109.0F), (-109.0F), (-1.0F), (-109.0F), (-109.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-109), (-1), 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte1 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte1, 256);
      assertEquals((-1), int0);
      assertFalse(byte1.equals((Object)byte0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-2299.924));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-33);
      intArray0[1] = 1058;
      intArray0[2] = 1058;
      intArray0[3] = 256;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(256, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2147117328), 10, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-772));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', 102);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-3664.0);
      doubleArray0[2] = 2734.16066244502;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) (-2147117328);
      doubleArray0[5] = (double) (-772);
      ArrayUtils.shift(doubleArray0, (-2147117328));
      assertArrayEquals(new double[] {1.5, (-3664.0), 2734.16066244502, 12.0, (-2.147117328E9), (-772.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-1374));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-1516), 2, (int) byte0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'V', 'V', 'V', 'V', 'V', 'V', 'V'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      ArrayUtils.swap(booleanArray1, 46, (-986), 46);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      short[] shortArray0 = new short[12];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(12, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 943, 943, 943);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[4] = 0;
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      ArrayUtils.shift(byteArray0, (-1313));
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)46, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Float float0 = new Float((double) (byte) (-114));
      assertEquals((-114.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {103.1893948, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap(intArray0, (int) (byte)46, (-4064));
      assertArrayEquals(new int[] {0, 0, (-4064), (-4064), 0, (-4064)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1120.9620773);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1120.9620773)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1120.9620773)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1120.9620773), (-1120.9620773)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1120.9620773);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1120.9620773)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short) (-2534));
      assertEquals((short) (-2534), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2534));
      assertEquals((short) (-2534), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-2534), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals(5, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-2534));
      assertEquals((short) (-2534), (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2534), (short) (-2534), (short) (-2534), (short) (-2534), (short) (-1)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-33), (-1), 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-465.83F);
      floatArray0[1] = (float) (-33);
      floatArray0[2] = (float) (byte) (-105);
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-465.83F), (-33.0F), (-105.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Short short0 = new Short((byte) (-105));
      assertEquals((short) (-105), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-105));
      assertEquals((short) (-105), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)88);
      assertEquals((short)88, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((byte) (-105));
      assertEquals((short) (-105), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short3;
      shortArray0[2] = short1;
      shortArray0[3] = short3;
      shortArray0[4] = short2;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105), (short) (-105), (short)88, (short) (-105), (short) (-105), (short)88}, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (-577));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105), (short) (-105), (short)88, (short) (-105), (short) (-105), (short)88}, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 76.0F;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte)65;
      int int0 = ArrayUtils.indexOf(floatArray0, 47.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 65.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '\\';
      charArray0[2] = 'f';
      charArray0[0] = 'I';
      charArray0[4] = '\\';
      charArray0[4] = '_';
      charArray0[6] = 'X';
      charArray0[7] = 'B';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'I', '\\', 'f', '\u0000', '_', '\u0000', 'X', 'B'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0}, intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 22, (int) (byte)35);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)79, 4);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert(486, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((int) (byte)79, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)79, object0);
      assertNotNull(object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-245));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short) (-245), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      Byte[] byteArray0 = new Byte[23];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Byte byte2 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) (byte)5;
      floatArray0[2] = (float) (byte) (-48);
      floatArray0[3] = (float) (byte)5;
      floatArray0[4] = (float) (byte) (-48);
      floatArray0[5] = (float) (byte) (-48);
      floatArray0[6] = (float) (byte)5;
      floatArray0[7] = (float) (byte) (-48);
      floatArray0[8] = (float) (byte)53;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {53.0F, 5.0F, (-48.0F), 5.0F, (-48.0F), (-48.0F), 5.0F, (-48.0F), 53.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte)53);
      assertEquals((short)53, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift(floatArray0, 1, (int) (byte)5, 1681);
      assertArrayEquals(new float[] {53.0F, (-48.0F), 5.0F, (-48.0F), 5.0F, (-48.0F), 5.0F, (-48.0F), 53.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Byte byte4 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-55));
      assertEquals((byte) (-55), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-55));
      assertEquals((byte) (-55), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      String string0 = ArrayUtils.toString((Object) byte4);
      assertEquals("31", string0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte6));
      assertFalse(byte4.equals((Object)byte5));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)0, (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte)0, (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1819.0F);
      floatArray0[1] = (float) (byte) (-48);
      floatArray0[2] = (float) (byte)115;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-84);
      floatArray0[5] = (float) (byte)76;
      floatArray0[6] = (float) (byte)115;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (int) (byte) (-48));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1819.0F), (-48.0F), 115.0F, 0.0F, (-84.0F), 76.0F, 115.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (byte) (-48);
      objectArray0[3] = (Object) (-265);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      ArrayUtils.shift(floatArray0, (-360), (int) (byte)115, 1);
      assertArrayEquals(new float[] {115.0F, (-1819.0F), (-48.0F), 115.0F, 0.0F, (-84.0F), 76.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte)115;
      byteArray2[1] = (Byte) (byte)115;
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[2] = byte0;
      byteArray2[3] = (Byte) (byte) (-48);
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte) (-48), (byte) (-48)}, byteArray3);
      assertEquals(4, byteArray3.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1820;
      intArray0[1] = 43;
      intArray0[3] = 111;
      intArray0[4] = 2185;
      intArray0[5] = (-525);
      intArray0[6] = (-994);
      intArray0[7] = 111;
      int int0 = ArrayUtils.indexOf(intArray0, 43);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1820, 43, 0, 111, 2185, (-525), (-994), 111}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 111, 1820);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(floatArray0, (-1375));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1820, 43, 0, 111, 2185, (-525), (-994), 111}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1820;
      longArray0[1] = (long) (-525);
      longArray0[2] = (long) (-994);
      longArray0[3] = (long) (-994);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "j.+*YpL1N");
      assertNotNull(string0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short) (-1), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse(shortArray0, 1, (int) (short)5);
      assertArrayEquals(new short[] {(short) (-1), (short)5, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 22, 2473);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)79, 4);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert(486, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[2] = (byte) (-84);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte) (-84), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte) (-84), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1819.0F);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)115;
      floatArray0[3] = (float) (byte) (-84);
      floatArray0[4] = (float) (byte) (-84);
      floatArray0[6] = (float) (byte)115;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (-265);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-84);
      shortArray0[1] = (short) (byte) (-84);
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte) (-84);
      shortArray0[4] = (short) (byte)115;
      shortArray0[5] = (short) (byte)115;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)115, (short)115, (short) (-84), (short)76, (short) (-84), (short) (-84)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '%';
      charArray0[3] = '7';
      charArray0[4] = 'p';
      ArrayUtils.swap(charArray0, (int) (short) (-1219), (int) (short) (-1219), (int) (short) (-1219));
      assertArrayEquals(new char[] {'_', '%', '\u0000', '7', 'p'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '7';
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) '7';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '\u0000';
      floatArray0[5] = (float) '_';
      floatArray0[6] = (float) '%';
      ArrayUtils.shift(floatArray0, (-161));
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F, 95.0F, 0.0F, 95.0F, 37.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1219));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '7';
      charArray0[2] = 'p';
      ArrayUtils.swap(charArray0, (-2686), 0, 0);
      assertArrayEquals(new char[] {'_', '7', 'p'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-161);
      floatArray0[1] = (float) (-265);
      floatArray0[2] = (float) (-265);
      floatArray0[3] = (float) (-265);
      floatArray0[4] = (float) (-265);
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {(-161.0F), (-265.0F), (-265.0F), (-265.0F), (-265.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, 65);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 1074L;
      longArray0[2] = (long) (-772);
      longArray0[3] = (long) 0;
      longArray0[4] = 1016L;
      longArray0[5] = (long) 0;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, (-772L), 0L, 1016L, 0L, 1074L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-772);
      intArray0[2] = 0;
      intArray0[3] = (-772);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-772);
      ArrayUtils.shift(intArray0, 598);
      assertArrayEquals(new int[] {0, 0, (-772), 0, (-772), 0, (-772)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-18);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (int) (short) (-18);
      intArray0[3] = (int) (short)2013;
      ArrayUtils.shift(intArray0, (int) (short) (-18), (-18), (-3927));
      assertArrayEquals(new int[] {0, 2, (-18), 2013}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1152), 679);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 2, (-18), 2013}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray1, byte0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals(68.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) floatArray0[1];
      floatArray2[1] = (float) floatArray0[0];
      floatArray2[2] = (float) 'q';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)52;
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)52, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte4));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      int int0 = ArrayUtils.indexOf(charArray0, ':', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-105);
      objectArray0[1] = (Object) (byte) (-105);
      objectArray0[2] = (Object) (byte) (-105);
      objectArray0[3] = (Object) (byte) (-105);
      objectArray0[4] = (Object) (byte) (-105);
      objectArray0[5] = (Object) 58.0F;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 794.0F;
      floatArray1[1] = (float) (byte) (-105);
      floatArray1[2] = (float) (byte) (-105);
      floatArray1[3] = (float) (byte) (-105);
      floatArray1[4] = (float) (byte) (-105);
      floatArray1[5] = (float) (byte) (-105);
      floatArray1[6] = (float) (-1);
      floatArray1[7] = (float) (byte) (-105);
      int int2 = ArrayUtils.lastIndexOf(floatArray1, (float) (byte) (-105), (int) (byte) (-105));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {794.0F, (-105.0F), (-105.0F), (-105.0F), (-105.0F), (-105.0F), (-1.0F), (-105.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ':');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayUtils.shift(doubleArray0, (-1374));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2543);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-265);
      doubleArray0[3] = (double) (-265);
      doubleArray0[4] = (double) (-265);
      ArrayUtils.shift(doubleArray0, (-265), 786, 1167);
      assertArrayEquals(new double[] {(-265.0), (-265.0), (-2543.0), 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)2013;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)2013;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 324);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2013, (short)2013, (short) (-1), (short)2013}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-791.935969121915), (-105.637));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-265.0), (-265.0), (-2543.0), 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 243, (-659), (int) (short)2013);
      assertArrayEquals(new double[] {(-265.0), (-265.0), (-2543.0), 0.0, (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift((double[]) null, 26);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.sort((Byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2147117328), 10, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) (-2147117328);
      longArray0[2] = (long) 12;
      longArray0[3] = (long) (-772);
      longArray0[4] = (long) 12;
      longArray0[5] = 3583L;
      longArray0[6] = (long) 12;
      longArray0[7] = (long) 10;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {10L, (-2147117328L), 12L, (-772L), 12L, 3583L, 12L, 10L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-772));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', 102);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.sort(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = (-3664.0);
      doubleArray2[2] = 2734.16066244502;
      doubleArray2[3] = (double) 12L;
      doubleArray2[4] = (double) 12L;
      doubleArray2[5] = (double) 10L;
      ArrayUtils.shift(doubleArray2, (-191));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {10.0, 1.5, (-3664.0), 2734.16066244502, 12.0, 12.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-526.33203F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      IntStream intStream0 = mockRandom0.ints(127, 3529);
      assertNotNull(intStream0);
      
      longArray0[1] = 1074L;
      longArray0[2] = (long) (-772);
      longArray0[3] = (long) 0;
      longArray0[4] = 994L;
      longArray0[5] = (long) 0;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, (-772L), 0L, 994L, 0L, 1074L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 1816, (-23), 1816);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 831;
      doubleArray0[1] = (double) 1816;
      doubleArray0[2] = (double) 1816;
      doubleArray0[3] = (double) (-23);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1816, (-2801));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {831.0, 1816.0, 1816.0, (-23.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      ArrayUtils.shift((long[]) null, 0, 1816, 8);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'S';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-4452), 11);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 83.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 83.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = '/';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'F', 'S', 'S', 'S', 'S', '/'}, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 831, (int) (short)1639);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = Character.toChars(831);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u033F'}, charArray1);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-8.042455898225004);
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.shift(longArray1, 322, (-1591), (-29));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1677), (-33));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {103.1893948, (-8.042455898225004), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-78);
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-78)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-82), (int) (byte)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-376);
      shortArray0[2] = (short) (-2);
      shortArray0[3] = (short)1526;
      shortArray0[4] = (short) (byte) (-82);
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short) (byte)32;
      shortArray0[7] = (short) (byte)32;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-376), (short) (-2), (short)1526, (short) (-82), (short)32, (short)32, (short)32}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2331);
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 1);
      assertArrayEquals(new float[] {(-2331.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-2331.0F);
      doubleArray0[3] = (double) (-2331.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2331.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2331.0), (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2331.0), (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.swap(intArray0, 1, (-2331));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float(2688.34F);
      assertEquals(2688.34F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1978.6F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      ArrayUtils.swap(intArray0, 319, 1, 319);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-25), object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)object1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[0];
      Byte byte2 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte2);
      assertTrue(byte2.equals((Object)object1));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte2);
      assertFalse(boolean0);
      assertTrue(byte2.equals((Object)object1));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals(0, objectArray0.length);
      
      Byte byte3 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object1));
      assertNotNull(byte3);
      
      ArrayUtils.swap(objectArray0, (int) (byte)122, (-265));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 76, 76);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte1 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) byte0;
      ArrayUtils.swap(objectArray0, (int) (byte)2, 270);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.swap((Object[]) longArray1, (-1), 4, 4);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-4037));
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-17L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, intArray0.length);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-129);
      int int0 = new Integer((-129));
      assertEquals((-129), int0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte6);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1872;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1872;
      longArray0[1] = (long) 1872;
      longArray0[2] = 2974L;
      longArray0[3] = 2974L;
      longArray0[4] = (long) 1872;
      boolean boolean1 = ArrayUtils.contains(longArray0, 2974L);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {1872L, 1872L, 2974L, 2974L, 1872L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, 1872);
      assertNull(byte0);
      
      Byte byte1 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte)35);
      assertEquals((byte)35, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)35, 1872, 68);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 870;
      longArray0[1] = (long) 870;
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[4] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[5];
      byte byte0 = (byte) (-1);
      Byte byte1 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray2[2] = byteArray2[0];
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray2[3] = byte2;
      Byte byte3 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray2[4] = byte3;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray2);
      assertTrue(boolean0);
      assertEquals(5, byteArray2.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-123), (int) byte0, 870);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 870;
      longArray0[1] = (long) 870;
      longArray0[2] = (long) 870;
      longArray0[3] = (long) 870;
      longArray0[4] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray0);
      assertArrayEquals(new long[] {870L, 870L, 870L, 870L, (-123L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (-33));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'n';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '&');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'&', 'n'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte[] byteArray2 = new Byte[5];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[1] = byte1;
      Byte byte2 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray2[2] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray2[3] = byte3;
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray2[4] = byte4;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray2);
      assertTrue(boolean0);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = (-2147117328);
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)91;
      byteArray0[3] = (byte)91;
      byte byte1 = (byte) (-77);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-77), (int) (byte) (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)79, (byte)3, (byte) (-1), (byte)91}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      int int1 = (-2259);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2259), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2259, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(boolean0);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, 586, 586, 586);
      assertEquals(5, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(586, booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 586, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, (-2732));
      assertEquals((-1), int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.swap((long[]) null, (-2071), (-1));
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ArrayUtils.swap(byteArray1, (int) (short) (-105), 5657, (-1290));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      Boolean boolean0 = new Boolean(",jV+1\"");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(",jV+1\"");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(",jV+1\"");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean((String) null);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short) (-98);
      shortArray0[2] = (short) (-98);
      shortArray0[3] = (short) (-98);
      shortArray0[4] = (short) (-98);
      shortArray0[5] = (short) (-98);
      shortArray0[6] = (short) (-98);
      shortArray0[7] = (short) (-98);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-98));
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-98), (short) (-98), (short) (-98), (short) (-98), (short) (-98), (short) (-98), (short) (-98), (short) (-98)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-32), object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 43);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1643.84137307), (-1.0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(2, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2688.34F;
      doubleArray0[1] = (double) 'D';
      ArrayUtils.shift(doubleArray0, 0, 0, (-2298));
      assertArrayEquals(new double[] {2688.340087890625, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1554), (int) (short)2013);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2688.340087890625;
      objectArray0[1] = (Object) 2688.34F;
      objectArray0[2] = (Object) 68.0;
      objectArray0[3] = (Object) 68.0;
      objectArray0[4] = (Object) 2688.340087890625;
      objectArray0[5] = (Object) 2688.340087890625;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4], (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2688.340087890625, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2688.340087890625, 68.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-109));
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int2 = 1883;
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)6;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)6, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      try { 
        Byte.valueOf("The type must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The type must not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1696);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2378.61692;
      ArrayUtils.reverse(doubleArray0, (-738), 3520);
      assertArrayEquals(new double[] {2378.61692}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-738);
      intArray0[1] = (-738);
      intArray0[2] = 3520;
      intArray0[3] = 3520;
      intArray0[4] = (-738);
      intArray0[5] = (-738);
      intArray0[6] = (-738);
      intArray0[7] = 3520;
      int int0 = ArrayUtils.indexOf(intArray0, (-738), (-4593));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-738), (-738), 3520, 3520, (-738), (-738), (-738), 3520}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Byte byte0 = new Byte((byte) (-11));
      assertEquals((byte) (-11), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 1, (-1));
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte) (-11);
      ArrayUtils.shift((short[]) null, 2146780808);
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray1, (-738));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-2291), (-2291), (-2291));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short) (-1), (int) char0, (int) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)char0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1238L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-10));
      assertEquals((-10L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-10L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-265);
      longArray0[1] = (long) (-265);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-265);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2347);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)299, (short)0, (short) (-2347), (short)0, (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)299, (short)0, (short) (-2347), (short)0, (short) (-1), (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Long[] longArray2 = new Long[5];
      longArray2[0] = (Long) (-265L);
      longArray2[1] = (Long) (-265L);
      longArray2[2] = (Long) (-265L);
      longArray2[3] = (Long) (-265L);
      longArray2[4] = (Long) 0L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-525L));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L), (-265L), 0L}, longArray3);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1820L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1820L), (-1820L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Long[] longArray0 = new Long[19];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(19, longArray0.length);
      assertEquals(19, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (-2255));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray3 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray3.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray4 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray4.length);
      
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short)19;
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[5] = (short) (byte) (-101);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short) (-101)}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)19;
      floatArray0[1] = (float) (short) (-101);
      floatArray0[2] = (float) (-667L);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {19.0F, (-101.0F), (-667.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap(shortArray0, 91, (-1315), (-1315));
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)19, (short) (-101), (short) (-101), (short) (-101)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-101));
      assertEquals((-101), (int)integer0);
      assertNotNull(integer0);
      
      floatArray0[0] = (float) (int)integer0;
      Integer integer1 = new Integer(371);
      assertEquals(371, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-265);
      longArray0[1] = (long) (-265);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-265);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1791L, (int) (short)0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int3 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new short[] {(short)299, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf("', has a length less than 2");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2749);
      shortArray0[1] = (short)23;
      shortArray0[2] = (short)19;
      shortArray0[3] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)23);
      assertArrayEquals(new short[] {(short)23, (short)19, (short)0, (short) (-2749)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4134L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)19;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 64L, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-4134L), 0L, 19L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, (-2146684536), Integer.MAX_VALUE, 45);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      intArray0[0] = Integer.MAX_VALUE;
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'X');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, 'X');
      assertNull(charArray1);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, Integer.MAX_VALUE, 1856);
      assertNull(floatArray0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, Integer.MAX_VALUE);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0, 0, 0, Integer.MAX_VALUE}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)70;
      doubleArray0[1] = (double) (short)70;
      doubleArray0[2] = (double) (short)0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {70.0, 0.0, 70.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1750));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("MZ|f ");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-67);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-82L);
      longArray0[2] = 0L;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1766);
      longArray1[1] = (-82L);
      longArray1[2] = (-82L);
      ArrayUtils.swap(longArray1, 3879, 25);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1766L), (-82L), (-82L)}, longArray1);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-18), (-5447));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2688.34F;
      doubleArray0[1] = (double) 'D';
      ArrayUtils.shift(doubleArray0, 0, 0, (-2298));
      assertArrayEquals(new double[] {2688.340087890625, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1554), (int) (short)2013);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), 2);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = object0;
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, (-325));
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-325);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-325);
      floatArray0[5] = (float) (-325);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1863.678F, (-325));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, (-325.0F), 0.0F, 0.0F, (-325.0F), (-325.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNull(object2);
      assertArrayEquals(new float[] {0.0F, (-325.0F), 0.0F, 0.0F, (-325.0F), (-325.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      objectArray0[5] = null;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.swap(longArray0, 3093, 449);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      longArray0[2] = (-2955L);
      longArray0[3] = (-1464L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L, 0L, (-2955L), (-1464L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'V', 1928);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-82L);
      longArray0[2] = 0L;
      longArray0[3] = (-405L);
      longArray0[4] = (-1015L);
      longArray0[5] = (-2456L);
      longArray0[6] = 113L;
      longArray0[7] = 2475L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1911L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-82L), 0L, (-405L), (-1015L), (-2456L), 113L, 2475L}, longArray0);
      assertArrayEquals(new long[] {(-1911L), (-1L), (-82L), 0L, (-405L), (-1015L), (-2456L), 113L, 2475L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2295.635F));
      assertEquals((-2295.635F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2295.635F));
      assertEquals((-2295.635F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Byte byte1 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      ArrayUtils.reverse((float[]) null);
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-2463));
      assertEquals((short) (-2463), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-5312));
      assertEquals((short) (-5312), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-306));
      assertEquals((short) (-306), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-3959));
      assertEquals((short) (-3959), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[3]);
      assertEquals((short) (-3959), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals(7, shortArray0.length);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-3172));
      assertEquals((short) (-3172), (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((byte)76);
      assertEquals((short)76, (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2463), (short) (-5312), (short) (-306), (short) (-3959), (short) (-3959), (short) (-3172), (short)76}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2331);
      doubleArray0[1] = (double) (-2331);
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) (-2331);
      doubleArray0[6] = (double) (-2331);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2331.0), (-2331.0), 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2331.0), 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@p?Z\"2P=E";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, (-1643));
      assertEquals((-1), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 118);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 118;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      Double double0 = Double.valueOf((-2033.2876714511428));
      assertEquals((-2033.2876714511428), (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = '8';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'H', 't', 'H', 'C', 'C', '8', 'C', 'C'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-115);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-115)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-47);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2135), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2135, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Double double0 = Double.valueOf(483.88126801794834);
      assertEquals(483.88126801794834, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[5];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3196, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3196, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-2331);
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) (-2331);
      doubleArray0[6] = (double) (-2331);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2331.0), 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-8));
      assertEquals((short) (-8), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-8));
      assertEquals((short) (-8), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Short[] shortArray0 = new Short[20];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(117, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-420), (-33), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-33);
      floatArray0[1] = (float) (-33);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-33.0F), (-33.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-105));
      assertEquals((short) (-105), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-105), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)88);
      assertEquals((short)88, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)209);
      assertEquals((short)209, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short)88, (short)209}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1666;
      floatArray0[7] = (float) 1666;
      floatArray0[2] = (float) 1666;
      floatArray0[3] = 5575.4946F;
      floatArray0[4] = (float) 1666;
      floatArray0[5] = (float) 1666;
      floatArray0[6] = (float) 1666;
      floatArray0[7] = (float) 1666;
      floatArray0[8] = (float) 1666;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1666;
      floatArray1[1] = 5575.4946F;
      floatArray1[2] = (float) 1666;
      floatArray1[3] = (float) 1666;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1666.0F, 0.0F, 1666.0F, 5575.4946F, 1666.0F, 1666.0F, 1666.0F, 1666.0F, 1666.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1666.0F, 5575.4946F, 1666.0F, 1666.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1666.0F, 1666.0F, 1666.0F, 1666.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-105), (int) (byte) (-105));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      ArrayUtils.shift(intArray1, (int) (byte) (-105), (int) (byte) (-105), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte byte0 = (byte)122;
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte4;
      byteArray0[2] = byte4;
      byteArray0[3] = byte1;
      byteArray0[4] = byte2;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byteArray0[7] = byte2;
      byteArray0[8] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2311), (int)  (-105));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) byte0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 58.0F, 0.0F, (-420.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'l';
      doubleArray0[1] = (double) 'D';
      int int0 = ArrayUtils.indexOf(doubleArray0, 48.0, 3061.645287728214);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {108.0, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1), 123, 111);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {108.0, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ':';
      charArray1[1] = 'D';
      char[] charArray2 = ArrayUtils.add(charArray1, 2, '$');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {':', 'D', '$'}, charArray2);
      assertArrayEquals(new char[] {':', 'D'}, charArray1);
      assertEquals(3, charArray2.length);
      assertEquals(2, charArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "java.lang.Object");
      assertNotNull(stringArray0);
      assertArrayEquals(new double[] {108.0, 68.0}, doubleArray0, 0.01);
      assertEquals(2, stringArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(booleanArray1, 111, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'W'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'R';
      charArray1[1] = 'R';
      charArray1[2] = 'W';
      charArray1[3] = 'R';
      charArray1[4] = 'W';
      charArray1[5] = 'R';
      charArray1[6] = 'W';
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'W');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'W', 'R', 'R', 'W', 'R', 'W', 'R', 'W'}, charArray2);
      assertArrayEquals(new char[] {'R', 'R', 'W', 'R', 'W', 'R', 'W'}, charArray1);
      assertEquals(8, charArray2.length);
      assertEquals(7, charArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) 'W';
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (double) 'W';
      doubleArray0[6] = (double) 'W';
      doubleArray0[7] = (-791.58773683146);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2178.30944553157), (-791.58773683146));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {82.0, 87.0, 82.0, 0.0, 82.0, 87.0, 87.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {82.0, 87.0, 82.0, 0.0, 82.0, 87.0, 87.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 9, 45);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 410.7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-33), (int) (byte) (-105), (-33));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-2093), byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 70.42519101863718, 85);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2515.0073403955);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1758.8418869553552);
      doubleArray0[3] = (-644.74439713);
      doubleArray0[4] = 4582.800048828125;
      doubleArray0[5] = 1591.549790847;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1758.8418869553552));
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-2515.0073403955), 1.0, (-1758.8418869553552), (-644.74439713), 4582.800048828125, 1591.549790847}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2688.34F;
      doubleArray0[1] = (double) 'D';
      ArrayUtils.shift(doubleArray0, 0, 0, (-2298));
      assertArrayEquals(new double[] {2688.340087890625, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1554), (int) (short)2013);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = (-1375);
      intArray0[2] = (-955);
      intArray0[3] = 0;
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 57;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 57;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1375);
      doubleArray0[6] = (double) 57;
      doubleArray0[7] = 1488.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {57.0, 0.0, 57.0, (-1.0), 0.0, (-1375.0), 57.0, 1488.5}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolean1;
      ArrayUtils.swap(objectArray0, 423, 0, 1967);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2991), 20, (-2991));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-265);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(3, intArray0.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 150);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'R';
      charArray0[2] = 'j';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'#', 'R', 'j'}, charArray0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'R', 'j', '#'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 2795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2795, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)444;
      longArray0[3] = (long) (short) (-986);
      longArray0[4] = (long) (short)444;
      longArray0[5] = 2974L;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 2974L;
      floatArray0[2] = 47.0F;
      int int1 = ArrayUtils.indexOf(floatArray0, (-390.37433F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 2974.0F, 47.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = '_';
      charArray0[2] = '^';
      charArray0[3] = ']';
      charArray0[4] = '%';
      charArray0[5] = 'I';
      charArray0[6] = '\\';
      charArray0[7] = 'B';
      charArray0[8] = 'f';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'X', '_', '^', ']', '%', 'I', '\\', 'B', 'f'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-5215));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-5215), (-5215), (-5215), (-5215), (-5215), (-5215), (-5215)}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-5215));
      assertEquals((-5215.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      ArrayUtils.shift(intArray1, (int) (byte) (-105), (int) (byte) (-105), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-420);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (-420.0F);
      doubleArray0[4] = (double) 58.0F;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 58.0;
      doubleArray1[1] = (Double) 58.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 58.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {58.0, 58.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 58.0, (int) (byte) (-105));
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) ':';
      floatArray1[1] = (float) (-1);
      floatArray1[2] = (float) (-420);
      floatArray1[3] = (float) (-1);
      floatArray1[4] = (float) ':';
      ArrayUtils.shift(floatArray1, 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {58.0F, 58.0F, (-1.0F), (-420.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-105);
      shortArray0[1] = (short) (byte) (-105);
      shortArray0[2] = (short) (byte) (-105);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray3);
      assertSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte) (-105));
      assertEquals((-105L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("/8-Ha", long0);
      assertEquals((-105L), (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(1);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((short) (-105));
      assertEquals((-105L), (long)long3);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-1L));
      assertEquals((-1L), (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)20);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-640), 1, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-640);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-640.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, 6);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      shortArray0[1] = (short)2985;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-411);
      shortArray0[5] = (short)426;
      shortArray0[6] = (short) (-2861);
      shortArray0[7] = (short)1549;
      shortArray0[8] = (short)36;
      ArrayUtils.shift(shortArray0, (int) (short)36);
      assertArrayEquals(new short[] {(short) (-105), (short)2985, (short)2309, (short) (-1), (short) (-411), (short)426, (short) (-2861), (short)1549, (short)36}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-2861);
      intArray0[2] = (int) (short)426;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-2861), 426}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte0, (-529));
      assertEquals((-1), int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)5;
      longArray0[1] = (long) (short) (-411);
      longArray0[2] = (long) (short) (-2861);
      longArray0[3] = (long) (short) (-105);
      longArray0[4] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 848L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, (-411L), (-2861L), (-105L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {5L, (-411L), (-2861L), (-105L), (-1L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 76;
      intArray0[2] = 1190;
      intArray0[3] = (int) (byte) (-61);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-61);
      shortArray0[1] = (short) (byte) (-61);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-61), 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-61), (short) (-61)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double(76);
      assertEquals(76.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-61));
      assertEquals((-61.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-2476.514579346106));
      assertEquals((-2476.514579346106), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-415.656));
      assertEquals((-415.656), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(1488.5);
      assertEquals(1488.5, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double(1190);
      assertEquals(1190.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double4;
      doubleArray0[1] = double5;
      doubleArray0[3] = double0;
      doubleArray0[4] = double5;
      doubleArray0[5] = double0;
      doubleArray0[6] = double5;
      doubleArray0[7] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-26896);
      shortArray0[1] = (short) (-26896);
      shortArray0[2] = (short) (-26896);
      shortArray0[3] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-26896));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896), (short) (-26896)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      Byte byte0 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)37, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-26896));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-26896);
      doubleArray0[1] = 610.6900821;
      doubleArray0[2] = (double) (short) (-26896);
      doubleArray0[3] = (double) (short) (-26896);
      doubleArray0[4] = (double) (short) (-26896);
      doubleArray0[5] = (double) (short) (-26896);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-26896), 1.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-26896.0), 610.6900821, (-26896.0), (-26896.0), (-26896.0), (-26896.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)88, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-82), (int) (byte)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      longArray0[2] = (-2955L);
      longArray0[3] = (-1464L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L, 0L, (-2955L), (-1464L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1820L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)2;
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1410L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-252));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2985;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short) (-2962);
      shortArray0[4] = (short)129;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2985, (short)4, (short)4, (short) (-2962), (short)129}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-2962), (short)129, (short)2985}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)129;
      shortArray2[1] = (short)4;
      shortArray2[2] = (short)2985;
      shortArray2[3] = (short)2985;
      shortArray2[4] = (short)1197;
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short)1197, (int) (short)2985);
      assertEquals(4, int0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)129, (short)4, (short)2985, (short)2985, (short)1197}, shortArray2);
      assertEquals(5, shortArray2.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 90, (int) (short)2985, (int) (short) (-2962));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-2962), (short)129, (short)2985}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      short[] shortArray0 = new short[19];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(19, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (-1878), 1, 1);
      assertEquals(19, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean[] booleanArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = 57;
      intArray0[2] = (-955);
      intArray0[3] = 0;
      intArray0[4] = (-955);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 57, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {57, 57, (-955), 0, (-955)}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-955);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-955L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = '7';
      charArray0[2] = '2';
      char char0 = '8';
      charArray0[3] = '8';
      charArray0[5] = ' ';
      charArray0[6] = 'D';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 57, '7');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Integer integer0 = new Integer((-2543));
      assertEquals((-2543), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (-2543), (-2543), (-2543));
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2543));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift((float[]) null, (-2543), (-2543), (-1887));
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[25];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 6);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {121, 0}, intArray0);
      assertArrayEquals(new int[] {121, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-772);
      intArray0[1] = (int) (byte)100;
      intArray0[2] = (-772);
      intArray0[3] = (int) (byte)100;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1638));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-772), 100, (-772), 100}, intArray0);
      assertArrayEquals(new int[] {(-772), 100, (-772), 100}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Double double0 = new Double((-1590.0));
      assertEquals((-1590.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1590.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      Character character0 = Character.valueOf('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(':');
      assertEquals(':', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1136;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)536;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) character1, (int) (short)16);
      assertFalse(character1.equals((Object)character0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1136, (short) (-1), (short)2, (short)536, (short) (-1), (short) (-1), (short)1}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double((short)1136);
      assertEquals(1136.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((short) (-1));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((short)2);
      assertEquals(2.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((-900.2));
      assertEquals((-900.2), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      doubleArray1[5] = double5;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1136.0, 0.0, (-1.0), 0.0, 2.0, (-900.2)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'D';
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1197, (int) (short)1197);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 108, (-663), (-663));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap((short[]) null, (int) (byte)2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, 2, 0, (-791));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 461.41016784;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {461.41016784, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {461.41016784, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(intArray0, (-4135));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 3230, (-525));
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2543);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-265);
      floatArray0[7] = (float) (-265);
      floatArray0[8] = (float) (-525);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), (-525));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2543.0F), 0.0F, (-1.0F), (-265.0F), (-265.0F), (-525.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.shift((char[]) null, 3230, (-265), 3012);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift((char[]) null, 48, 48, 48);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 's';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x', 's'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 117);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 3271;
      floatArray0[2] = (float) 1;
      floatArray0[5] = (float) (-4135);
      floatArray0[6] = (float) 3230;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 117, (-2543));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1.0F, 3271.0F, 1.0F, 0.0F, 0.0F, (-4135.0F), 3230.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("9!ri");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-555));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-555);
      longArray0[1] = (long) (-555);
      longArray0[2] = 2568L;
      longArray0[3] = (long) (-555);
      longArray0[4] = (long) (-555);
      longArray0[5] = (long) (-555);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-555L), (-555L), 2568L, (-555L), (-555L), (-555L)}, longArray1);
      assertArrayEquals(new long[] {(-555L), (-555L), 2568L, (-555L), (-555L), (-555L)}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      boolean[] booleanArray2 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray2, true, 110);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)122;
      boolean boolean4 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean4);
      assertArrayEquals(new byte[] {(byte)10, (byte)122}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray2, true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2510);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-3247);
      intArray0[3] = 287;
      intArray0[4] = (-1);
      intArray0[5] = 6;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 76;
      intArray0[8] = 2101;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2510), Integer.MAX_VALUE, (-3247), 287, (-1), 6, Integer.MAX_VALUE, 76, 2101}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2101, 1148.5375);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 425.199951171875, 1.0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 1010, (-3193), 2101);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-224);
      shortArray0[1] = (short) (-17941);
      shortArray0[2] = (short)45;
      shortArray0[3] = (short)517;
      shortArray0[4] = (short) (-2323);
      shortArray0[5] = (short)91;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-17941));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-224), (short) (-17941), (short)45, (short)517, (short) (-2323), (short)91}, shortArray0);
      assertArrayEquals(new short[] {(short) (-224), (short) (-17941), (short)45, (short)517, (short) (-2323), (short)91, (short) (-17941)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 95.73436608600421;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 95.73436608600421);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {95.73436608600421}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 1451);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)127;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) (short)127;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)111;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)111}, shortArray0);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '7');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '7';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {55.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte byte0 = (byte)115;
      byte byte1 = (byte) (-84);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte) (-84);
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte) (-48);
      byteArray2[3] = (Byte) (byte)115;
      Byte byte2 = Byte.valueOf(byte1);
      assertEquals((byte) (-84), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray2, 890, byte2);
      assertEquals((byte) (-84), (byte)byte3);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(byte3);
      assertEquals(4, byteArray2.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, byteArray2.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (double) (byte) (-48);
      doubleArray0[2] = 2378.61692;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1507.549790847, (double) byte1);
      assertEquals((-1), int0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new double[] {(-48.0), (-48.0), 2378.61692}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 1365, (int) (byte) (-48), 890);
      assertArrayEquals(new double[] {(-48.0), (-48.0), 2378.61692}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-48);
      longArray0[1] = (long) (byte) (-84);
      longArray0[2] = (long) (byte)76;
      longArray0[3] = (long) byte1;
      longArray0[4] = (long) byte1;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) 1365;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-48L), (-84L), 76L, (-84L), (-84L), 115L, 1365L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.shift(intArray0, (-584), 9, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2146824692;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2146824692;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.146824692E9, 0.0, 0.0, 2.146824692E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.146824692E9, 0.0, 0.0, 2.146824692E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shift(objectArray0, (-891), 0, 721);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)127;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)5);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-30), (byte) (-98), (byte) (-13), (byte)16, (byte)1, (byte) (-70), (byte)42, (byte)127}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.swap(intArray0, 83, 83, 83);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 51, (-2320), 51);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1112));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {9.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)500);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)500}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte[] byteArray0 = new Byte[3];
      try { 
        Byte.decode("UUn3<%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"UUn3<%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-347));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-347)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1448;
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1448, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1073741823), (int) (short)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap(charArray0, (-3317), (-1073741823), 115);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(870, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'L';
      charArray1[1] = 'C';
      charArray1[2] = 'L';
      charArray1[3] = 'H';
      charArray1[4] = 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertTrue(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'L', 'C', 'L', 'H', 'L', '\u0000'}, charArray1);
      assertEquals(6, charArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-82);
      shortArray0[3] = (short)1411;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)86;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-82), (short)1411, (short)0, (short)0, (short)86}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals('K', (char)character3);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[2] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-12), (int) (short)16);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16, (short) (-1), (short)536, (short)1136, (short)32, (short)1, (short) (-1), (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)16, (short) (-1), (short)536, (short)1136, (short)32, (short)1, (short) (-1), (short)2}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-84);
      shortArray0[1] = (short) (byte)115;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-265), (int) (byte) (-48));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-84), (short)115, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '[');
      assertNull(charArray0);
      
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-62);
      Byte byte2 = new Byte((byte) (-62));
      assertEquals((byte) (-62), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte3 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      byteArray0[5] = byte2;
      byteArray0[6] = byte2;
      Byte byte4 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift(shortArray0, (-174));
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray1, (Object) byte1);
      assertTrue(boolean0);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      try { 
        Byte.decode("3x)p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3x)p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2267);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2267}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      Double double0 = Double.valueOf(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 67, 2242);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 67;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {67L}, longArray1);
      assertArrayEquals(new long[] {67L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.swap(byteArray1, (-2049870754), 67);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)122;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)122;
      shortArray0[3] = (short) (-265);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)613;
      shortArray0[7] = (short) (-32125);
      shortArray0[8] = (short)446;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)446);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)122, (short) (-1), (short)122, (short) (-265), (short)9, (short) (-1), (short)613, (short) (-32125), (short)446}, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short) (-1), (short)122, (short) (-265), (short)9, (short) (-1), (short)613, (short) (-32125), (short)446, (short)446}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      Double double0 = Double.valueOf((double) (-265));
      assertEquals((-265.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)117;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte)111, (byte) (-123), (byte) (-123), (byte) (-45), (byte)117}, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte)111, (byte) (-123), (byte) (-123), (byte) (-45), (byte)117}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-45), 3527);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)117, (-2412));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1542.090316324), (-600));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-275));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float((-2931.3523F));
      assertEquals((-2931.3523F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte) (-78));
      assertNull(floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-600);
      intArray0[1] = 898;
      ArrayUtils.swap(intArray0, 4668, 2, 870);
      assertArrayEquals(new int[] {(-600), 898}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-78));
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      float[] floatArray0 = new float[10];
      ArrayUtils.shift(floatArray0, 40);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      long[] longArray0 = new long[9];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1194, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1194, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2130836487;
      longArray0[1] = (long) 2130836487;
      longArray0[2] = (-2331L);
      longArray0[3] = (long) 2130836487;
      longArray0[4] = (long) 2130836487;
      longArray0[5] = (long) 2130836487;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2130836487, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2130836487, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-98));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Byte byte0 = new Byte((byte)126);
      assertEquals((byte)126, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)126, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)126;
      doubleArray0[1] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (double) (short) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {126.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, (-10), (-10), 2592);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0000';
      charArray0[2] = 's';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-2);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)5, (byte) (-27), (byte) (-2), (byte) (-27)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)5, (byte) (-27), (byte) (-2), (byte) (-27)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-27));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) (-3));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2013;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'X', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 2841, 1754, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) 'X';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 88.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1), (short)2013, (short)723, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 86);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte byte0 = (byte)100;
      Byte byte1 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte2 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)100, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-27));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-163), (int) (byte) (-27), (int) (byte) (-27));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 405.4715771796465);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = (-1375);
      intArray0[2] = (-955);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1375), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {57, (-1375), (-955), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {57, (-1375), (-955), 0, 0}, intArray0);
      assertArrayEquals(new int[] {57, (-1375), (-955), 0, 0, 57, (-1375), (-955), 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (-420));
      assertNull(doubleArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) byte0, (-1375));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertNotNull(objectArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1798.9299652214813));
      assertNull(doubleArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 0);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-2217.839590491), 313.2609646043503);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = (-265);
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), (-265)}, intArray0);
      assertArrayEquals(new int[] {0, (-265), (-265), 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 997;
      doubleArray0[1] = (double) 1;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {1.0, 997.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-265);
      integerArray0[1] = (Integer) (-265);
      integerArray0[2] = (Integer) (-265);
      integerArray0[3] = (Integer) 0;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-265), (-265), (-265), 0}, intArray2);
      assertEquals(4, intArray2.length);
      assertEquals(4, integerArray0.length);
      
      ArrayUtils.swap((int[]) null, (-209), (-1), 1);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-4179.1F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-45);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1795;
      intArray0[1] = (int) (byte) (-123);
      intArray0[2] = 870;
      intArray0[3] = 898;
      intArray0[4] = (int) (byte) (-45);
      ArrayUtils.swap(intArray0, 898, (int) (byte)117, (-5115));
      assertArrayEquals(new int[] {1795, (-123), 870, 898, (-45)}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 870);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 870;
      doubleArray0[1] = (double) 898;
      doubleArray0[2] = (double) (-5115);
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) 870;
      doubleArray0[5] = (double) (-45);
      doubleArray0[6] = (double) 1795;
      doubleArray0[7] = (double) 'L';
      doubleArray0[8] = (double) 1.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-45), (int) (byte)117, (double) 898);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {870.0, 898.0, (-5115.0), 48.0, 870.0, (-45.0), 1795.0, 76.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)53;
      intArray0[1] = (int) (byte)53;
      ArrayUtils.swap(intArray0, 53, 53, 53);
      assertArrayEquals(new int[] {53, 53}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, (-4037));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1169.54557;
      doubleArray0[1] = (-4616.802039033944);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 0.7;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4616.802039033944), 7);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1169.54557, (-4616.802039033944), 0.7, 0.7}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.reverse((float[]) null, (-2236), 1557);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ArrayUtils.shift(byteArray0, (-2236), 5, (int) (byte)92);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066, 1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      ArrayUtils.swap(charArray0, 9, Integer.MAX_VALUE, (-302));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-59);
      ArrayUtils.shift(byteArray0, (int) (byte)78, 848, 6);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-29), (byte) (-112), (byte) (-59)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[4] = 0;
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)46;
      ArrayUtils.shift(byteArray0, (-1313));
      assertArrayEquals(new byte[] {(byte) (-114), (byte)58, (byte)46, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Float float0 = new Float((double) (byte) (-114));
      assertEquals((-114.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1400.57928));
      assertEquals((-1400.5792F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1915.993473617759);
      assertEquals(1915.9935F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1400.5792F), (-1400.5792F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-4008));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '}';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 82);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {125}, intArray0);
      assertArrayEquals(new int[] {125}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Float float0 = new Float((float) 125);
      assertEquals(125.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1830.3164477619);
      assertEquals(1830.3164F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2078.8);
      assertEquals(2078.8F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1830.3164F, 125.0F, 2078.8F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1830.3164477619;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2504.0, (-365), (double) floatArray0[2]);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1830.3164477619}, doubleArray0, 0.01);
      assertEquals(3, floatArray0.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-429), 57);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-3208.7246239273), 3061.645287728214);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) (-109);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 64;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-109);
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, Integer.MIN_VALUE, (-2514));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-109.0F), 1.0F, 64.0F, 0.0F, (-109.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-667L));
      assertEquals((-667L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-667L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-667L);
      long[] longArray3 = ArrayUtils.subarray(longArray1, (-438), 0);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-667L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(0, longArray3.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '*');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', 'T', 'T'}, charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4023.09);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      int int0 = ArrayUtils.indexOf(charArray0, 'F');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\"', 778);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = Character.toChars((int) 'F');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'F'}, charArray1);
      assertEquals(1, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2513), 1079);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'T');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'F'}, charArray1);
      assertArrayEquals(new char[] {'F'}, charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      int int0 = ArrayUtils.indexOf(charArray0, ':', Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-105);
      objectArray0[1] = (Object) (byte) (-105);
      objectArray0[2] = (Object) (byte) (-105);
      objectArray0[3] = (Object) (byte) (-105);
      objectArray0[4] = (Object) (byte) (-105);
      objectArray0[5] = (Object) 58.0F;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (byte) (-105);
      longArray0[2] = (long) (byte) (-105);
      longArray0[3] = (long) 0;
      longArray0[4] = 154L;
      longArray0[5] = (long) (byte) (-105);
      longArray0[6] = (long) ':';
      longArray0[7] = (long) (byte) (-105);
      longArray0[8] = (-1345L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 5);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L, (-105L), (-105L), 0L, 154L}, longArray1);
      assertArrayEquals(new long[] {2147483647L, (-105L), (-105L), 0L, 154L, (-105L), 58L, (-105L), (-1345L)}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {879.5356066}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(charArray0, 45, 1106);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '#';
      charArray1[3] = ':';
      charArray1[5] = '&';
      charArray1[5] = '#';
      charArray1[6] = '#';
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '\u0000', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray2);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray2.length);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '\u0000', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray2);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray3);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray2.length);
      assertEquals(6, charArray3.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertEquals(18, charArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)12);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)7, object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(18, charArray0.length);
      assertEquals(36, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-123), (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) (-2543);
      longArray0[3] = (long) (byte) (-123);
      longArray0[4] = (-2L);
      longArray0[5] = (-2L);
      longArray0[6] = (long) (-2543);
      longArray0[7] = (long) (byte) (-123);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-25L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-123L), (-123L), (-2543L), (-123L), (-2L), (-2L), (-2543L), (-123L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-123L), (-123L), (-2543L), (-123L), (-2L), (-2L), (-2543L), (-123L), 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-123), (int) (byte) (-123));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      long[] longArray0 = new long[13];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)127);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(13, longArray0.length);
      assertEquals(13, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) null);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)117, (byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)117, (byte) (-45)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)117, (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, (int) (byte)117);
      assertSame(byteArray0, byteArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)117, (byte) (-45)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1848.0F;
      floatArray0[1] = (-226.279F);
      floatArray0[2] = (-2046.2267F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2046.2267F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1848.0F, (-226.279F), (-2046.2267F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1848.0F, (-226.279F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'q';
      charArray0[2] = 's';
      charArray0[3] = '>';
      charArray0[4] = '(';
      charArray0[5] = '_';
      charArray0[6] = '[';
      charArray0[7] = 'z';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'p', 'q', 's', '>', '(', '_', '[', 'z'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-527.50165F));
      assertNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-986));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-39);
      Byte byte3 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, (int)  (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.insert(2143454330, charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray2.length);
      
      ArrayUtils.shift((Object[]) stringArray0, (int) (short) (-986), (int) (short) (-986), (int) (byte)122);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) floatArray0[0];
      objectArray0[1] = (Object) float0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '=';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', '='}, charArray0);
      assertArrayEquals(new char[] {'', '=', '', '='}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-3921L);
      longArray0[1] = (long) '=';
      longArray0[2] = (long) 2;
      longArray0[3] = (long) '';
      longArray0[4] = (long) '';
      longArray0[5] = (long) '';
      longArray0[6] = (long) '=';
      longArray0[7] = (long) 2;
      longArray0[8] = (long) '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 127L);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals("{3, 4, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-3921L), 61L, 2L, 127L, 127L, 127L, 61L, 2L, 61L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-1769), charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = (-1385);
      intArray0[2] = (-955);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1385), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {57, (-1385), (-955), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = '7';
      charArray0[2] = '2';
      charArray0[3] = '8';
      charArray0[5] = ' ';
      charArray0[6] = 'D';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', 'H', '7', '2', '8', '\u0000', ' ', 'D'}, charArray1);
      assertArrayEquals(new char[] {'H', '7', '2', '8', '\u0000', ' ', 'D'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-955);
      objectArray0[1] = (Object) 'H';
      objectArray0[2] = (Object) 'H';
      objectArray0[3] = (Object) 'H';
      objectArray0[4] = (Object) (-1385);
      float[] floatArray0 = new float[14];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, (-2145363723));
      assertEquals(14, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 76, 76);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 76;
      longArray0[1] = (long) 76;
      longArray0[2] = (long) (byte)92;
      longArray0[3] = (long) 76;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) (byte)92;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {76.0F, 92.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[2] = 76;
      intArray0[3] = (int) (byte)92;
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 92);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {76, 76, 76, (-1)}, intArray1);
      assertArrayEquals(new int[] {76, 76, 76, 92, (-1)}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)723);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)0;
      shortArray0[3] = (short)2013;
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)2013);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1865.034221));
      assertEquals((-1865.0342F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (byte)80);
      assertEquals(80.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2.14668621E9F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1865.0342F), 80.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)2013);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '_';
      doubleArray0[1] = (double) '_';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {95.0, 95.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0, (-2145363723), (-755));
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray3 = ArrayUtils.add(intArray1, 0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 0, 0}, intArray3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(3, intArray3.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1870);
      shortArray0[1] = (short) (-1946);
      shortArray0[2] = (short)6;
      ArrayUtils.swap(shortArray0, (-4125), 1826, (int) (short) (-1870));
      assertArrayEquals(new short[] {(short) (-1870), (short) (-1946), (short)6}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-123);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)117, 486);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-126), 0);
      assertSame(byteArray0, byteArray1);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-45), (byte) (-126), (byte) (-123), (byte) (-45), (byte) (-123)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte) (-126), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-123);
      ArrayUtils.swap(shortArray0, (-365), (int) (byte) (-45), (-365));
      assertArrayEquals(new short[] {(short) (-123)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[5] = (short)0;
      ArrayUtils.swap(shortArray0, (-913), (-454), 46);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 29.020940870590174);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 2378.61692);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, 0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-18);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)2013, (short)723, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-18);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2013;
      char[] charArray0 = new char[13];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(13, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 2841, 1754, (int) (short) (-18));
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)2013, (short)723, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)723;
      floatArray0[1] = (float) (short)723;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'J';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 'X';
      ArrayUtils.shift(floatArray0, (-3330), (-1088), 2841);
      assertArrayEquals(new float[] {723.0F, 723.0F, 0.0F, 74.0F, 0.0F, 88.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-420), 3, 1417);
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (-420), 2378.61692);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      ArrayUtils.shift(intArray1, (int) (byte) (-105), (int) (byte) (-105), (int) (byte) (-105));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-420);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) (-420.0F);
      doubleArray0[4] = (double) 58.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, (-420.0), 58.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-420.0);
      objectArray0[1] = (Object) ':';
      objectArray0[2] = (Object) 58.0;
      objectArray0[3] = (Object) (-420.0F);
      objectArray0[4] = (Object) 58.0;
      objectArray0[5] = (Object) (-420.0F);
      objectArray0[6] = (Object) 58.0;
      objectArray0[7] = (Object) (-420.0);
      objectArray0[8] = (Object) (-420.0);
      ArrayUtils.shift(objectArray0, (-891), 721, (int) (byte) (-105));
      assertEquals(9, objectArray0.length);
      
      String string0 = ArrayUtils.toString(objectArray0[8], "");
      assertEquals("-420.0", string0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '?';
      charArray0[2] = '+';
      charArray0[3] = ':';
      charArray0[4] = 't';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 78, (-958));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', '?', '+', ':', 't'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '+';
      ArrayUtils.swap(charArray2, (-958), 586, (-3317));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray2);
      assertEquals(1, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((short[]) null, (-838));
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'H';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {';', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 2378.61692);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-529), 1272, 1365);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {879.5356066}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(charArray0, 45, 1106);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '#';
      charArray1[3] = ':';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 45;
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 1106;
      floatArray0[4] = (float) 'l';
      floatArray0[5] = (float) 'l';
      floatArray0[6] = (float) 45;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1165.6F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1165.6F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 35.0F, 58.0F, 1106.0F, 108.0F, 108.0F, 45.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {45.0F, 35.0F, 58.0F, 1106.0F, 108.0F, 108.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R', Integer.MAX_VALUE);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'R', 'R', 'W'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'W'}, charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'W'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'R';
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) 0L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-791.58773683146));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 82.0, 82.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 82.0, 82.0, 0.0, 0.0, 82.0, 82.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 82.0, 82.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      int int2 = ArrayUtils.indexOf(booleanArray0, false, 2852);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2013;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)2013, (-1116));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2013.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1116));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2013.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      longArray0[2] = (-2955L);
      longArray0[3] = (-1464L);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-433), 586);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 60);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = 1L;
      longArray1[2] = (long) 64;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 586, (-433));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {879.5356066}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(charArray0, 45, 1106);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '#';
      charArray1[3] = ':';
      charArray1[5] = '&';
      charArray1[5] = '#';
      charArray1[6] = '#';
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '\u0000', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray2);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray2.length);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '\u0000', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray2);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '#', '#'}, charArray3);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray2.length);
      assertEquals(6, charArray3.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)21);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)51);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 114;
      intArray0[1] = 4;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)62;
      byteArray1[0] = (byte) (-84);
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-84);
      byteArray1[5] = (byte) (-84);
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte)100, (byte) (-84), (byte)0, (byte) (-84)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)100, (byte) (-84), (byte)0, (byte) (-84)}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray2.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-84);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (byte)100;
      doubleArray0[3] = (double) (byte) (-84);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) (byte) (-84);
      doubleArray0[6] = (double) (byte) (-84);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-98));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Byte byte0 = new Byte((byte)126);
      assertEquals((byte)126, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)126, object0);
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-98);
      floatArray0[2] = 3636.0F;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-33);
      floatArray0[5] = (float) (byte)126;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-26896));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1.0F), (-98.0F), 3636.0F, (-1.0F), (-33.0F), 126.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)126;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-84));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray0);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-98.0F);
      doubleArray0[1] = (double) (byte)126;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 126.0F, 920.3);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-98.0), 126.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-84);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-85), (int) (byte)115);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte) (-48), (byte) (-48), (byte)115, (byte) (-84), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte) (-48), (byte) (-48), (byte)115, (byte) (-84), (byte)0}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-84);
      byteArray2[1] = (byte)115;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-48);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, (int) (byte) (-84));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -84, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      int int0 = 0;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-8.042455898225004);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1275L);
      longArray0[1] = 0L;
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)14;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)67, (byte) (-111), (byte)14}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)67, (byte) (-111), (byte)14}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'k';
      charArray0[2] = 'j';
      charArray0[3] = '6';
      ArrayUtils.reverse(charArray0, (-416), 767);
      assertArrayEquals(new char[] {'6', 'j', 'k', 'j'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-111);
      intArray0[1] = (int) '6';
      intArray0[2] = (int) 'j';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-111), 54, 106}, intArray0);
      assertArrayEquals(new int[] {(-111), 54, 106}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      int[] intArray0 = new int[5];
      intArray0[0] = (-2543);
      intArray0[1] = (-2543);
      intArray0[2] = (int) '#';
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) '#';
      boolean boolean0 = ArrayUtils.contains(intArray0, 38);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2543), (-2543), 35, 0, 35}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-2543));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2543), (-2543), 35, 0, 35}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.reverse((Object[]) null, 3230, 1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2543);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 35;
      floatArray0[3] = (float) 3230;
      floatArray0[4] = (float) (-4135);
      floatArray0[5] = (float) 35;
      floatArray0[6] = (float) '#';
      floatArray0[7] = (float) 3230;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (-4135), 7);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {(-2543.0F), 0.0F, 35.0F, 3230.0F, (-4135.0F), 35.0F, 35.0F, 3230.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)15;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)15, (byte) (-67));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals('K', (char)character3);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1;
      shortArray0[7] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 6, (int) (short)16);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)536, (short)1136, (short)32, (short)1, (short)0, (short)2}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-68);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 321, (byte) (-37));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)82;
      Byte byte1 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-57);
      Byte byte4 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte) (-57), (byte)byte5);
      assertFalse(byte3 == byte0);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)82, (byte)byte6);
      assertFalse(byte0 == byte3);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) byte0;
      intArray0[1] = (-4095);
      intArray0[2] = (int) (byte) (-57);
      intArray0[3] = (int) byte3;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte0;
      intArray0[6] = (int) (byte)82;
      intArray0[7] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-1219);
      doubleArray0[1] = (double) (short) (-1219);
      doubleArray0[2] = (double) (short) (-1219);
      doubleArray0[3] = (double) (short) (-1219);
      doubleArray0[4] = (double) (short) (-1219);
      doubleArray0[5] = (double) (short) (-1219);
      doubleArray0[6] = (double) (short) (-1219);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2394.858372854195), (int) (short) (-1219));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1219.0), (-1219.0), (-1219.0), (-1219.0), (-1219.0), (-1219.0), (-1219.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 2974L;
      longArray0[3] = (long) (short) (-1219);
      longArray0[4] = (long) (short) (-1219);
      longArray0[5] = (long) (-1);
      boolean boolean3 = ArrayUtils.contains(longArray0, (-1062L));
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new long[] {(-1L), (-1L), 2974L, (-1219L), (-1219L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-98));
      assertNull(byte0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1219));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1219), (short) (-1219)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte byte0 = (byte)76;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift(booleanArray0, 45, (-1), 84);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (double) 2586;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-48.0), 2586.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2586.0;
      objectArray0[1] = (Object) (-48.0);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 497);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 497, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) false;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(objectArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('K', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertEquals('K', (char)character3);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      ArrayUtils.shift((short[]) null, (-1207));
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)16, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 159.569F;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {159.569F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {159.569F}, floatArray1, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 159.569F;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(159.569F, object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 159.569F;
      objectArray0[3] = (Object) 159.569F;
      objectArray0[4] = (Object) 159.569F;
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, 423, (-1), 573);
      assertEquals(9, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 423, 423, 0.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 423;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 890;
      intArray0[5] = 423;
      boolean boolean6 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean6);
      assertArrayEquals(new int[] {(-1), 423, (-1), (-1), 890, 423}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-986));
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-39);
      Byte byte4 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte2;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte3, (int)  (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte3 == byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      byte[] byteArray2 = new byte[8];
      byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)122;
      intArray0[1] = (int) byte0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 45);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {122, (-1)}, intArray0);
      assertArrayEquals(new int[] {45, 122, (-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, 26);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 91);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 101);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 101;
      doubleArray0[6] = (-452.2006093482215);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 1.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0, 101.0, (-452.2006093482215)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ':';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {58}, intArray0);
      assertEquals(1, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)123, object0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((byte)123, object1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 1072);
      assertEquals(0, int0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-93));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-124));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '%';
      charArray0[2] = '_';
      charArray0[3] = '7';
      charArray0[4] = 'p';
      ArrayUtils.swap(charArray0, (int) (short) (-1219), (int) (short) (-1219), (int) (short) (-1219));
      assertArrayEquals(new char[] {'_', '%', '_', '7', 'p'}, charArray0);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3446.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3446.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean6));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean6));
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean7));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      byte byte0 = (byte) (-57);
      Byte byte1 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertEquals("{1, 4, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-1633), 1766, 12);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2890.594);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1633.0), 2890.594}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1633.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) (-248);
      longArray0[2] = (long) 12;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1281, 2253);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {12L, (-248L), 12L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) longArray0, 56, (Object) byte0);
      assertEquals((byte) (-59), object0);
      assertNotNull(object0);
      assertEquals(3, longArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-59);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-59);
      intArray0[3] = (-1);
      intArray0[4] = 56;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-59), (-1), (-59), (-1), 56}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-59), 45);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-59), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1643.84137307), (double) 1069);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[7];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 97);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.reverse((int[]) null, (-1), 1);
      Byte byte1 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.indexOf(longArray0, (long) 6, Integer.MAX_VALUE);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1219);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1219L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1219);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1219.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1219);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (short) (-1219);
      intArray0[4] = (int) (short) (-1219);
      intArray0[5] = (int) (short) (-1219);
      intArray0[6] = (-372);
      ArrayUtils.reverse(intArray0, (-372), (-372));
      assertArrayEquals(new int[] {(-1219), 1, 1, (-1219), (-1219), (-1219), (-372)}, intArray0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-1219));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1219), 1, 1, (-1219), (-1219), (-1219), (-372), (-1219)}, intArray1);
      assertArrayEquals(new int[] {(-1219), 1, 1, (-1219), (-1219), (-1219), (-372)}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(longArray0, (-1219), 0, 1);
      assertArrayEquals(new long[] {(-1219L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1219L);
      floatArray0[1] = (float) (short) (-1219);
      floatArray0[2] = (float) (-372);
      floatArray0[3] = (float) (-1219);
      ArrayUtils.reverse(floatArray0, (-1219), (-194));
      assertArrayEquals(new float[] {(-1219.0F), (-1219.0F), (-372.0F), (-1219.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)83, object0);
      assertNotNull(object0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      Character character0 = Character.valueOf('\"');
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'O');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'Q');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2221), 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 139L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {139L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      Double double0 = Double.valueOf((-974.9596934));
      assertEquals((-974.9596934), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 870, (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-123));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-123)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Double double0 = Double.valueOf((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-114), (byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-114), (byte) (-45)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-114), (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      short[] shortArray0 = new short[8];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (-665));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1219));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 4854.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {4854.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1708L;
      longArray0[1] = (long) (short) (-1219);
      longArray0[2] = (long) (short) (-1219);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1708L, (-1219L), (-1219L)}, longArray1);
      assertArrayEquals(new long[] {1708L, (-1219L), (-1219L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 2146120166, Double.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146120166, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-2155), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-2155), (short)0, (short)0, (short)0, (short)0, (short) (-2155), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (short)0;
      longArray0[3] = 45L;
      longArray0[4] = (long) 'x';
      longArray0[5] = (long) (short) (-87);
      longArray0[6] = (long) 'x';
      longArray0[7] = (long) 'g';
      longArray0[8] = (long) (short)0;
      ArrayUtils.swap(longArray0, (-1), (-847), 778);
      assertArrayEquals(new long[] {1L, 120L, 0L, 45L, 120L, (-87L), 120L, 103L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-3541), (int) (short) (-87));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("59", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      long[] longArray0 = new long[2];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 2858);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 2858;
      doubleArray0[2] = (double) 2858;
      ArrayUtils.swap(doubleArray0, (-300), 2858, (int) (byte)1);
      assertArrayEquals(new double[] {1.0, 2858.0, 2858.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      Boolean boolean7 = new Boolean(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      Boolean boolean8 = Boolean.valueOf(true);
      assertTrue(boolean8);
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean1));
      assertNotNull(boolean8);
      
      Boolean boolean9 = Boolean.valueOf(false);
      assertFalse(boolean9);
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean3));
      assertNotNull(boolean9);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean9;
      Boolean boolean10 = new Boolean(boolean0);
      assertFalse(boolean10);
      assertFalse(boolean10.equals((Object)boolean8));
      assertFalse(boolean10.equals((Object)boolean7));
      assertTrue(boolean10.equals((Object)boolean9));
      assertTrue(boolean10.equals((Object)boolean2));
      assertTrue(boolean10.equals((Object)boolean6));
      assertTrue(boolean10.equals((Object)boolean4));
      assertTrue(boolean10.equals((Object)boolean1));
      assertTrue(boolean10.equals((Object)boolean3));
      assertFalse(boolean10.equals((Object)boolean5));
      assertTrue(boolean10.equals((Object)boolean0));
      assertNotNull(boolean10);
      
      Boolean boolean11 = Boolean.valueOf(boolean0);
      assertFalse(boolean11);
      assertTrue(boolean11.equals((Object)boolean3));
      assertFalse(boolean11.equals((Object)boolean7));
      assertFalse(boolean11.equals((Object)boolean5));
      assertFalse(boolean11.equals((Object)boolean8));
      assertTrue(boolean11.equals((Object)boolean10));
      assertNotNull(boolean11);
      
      Boolean boolean12 = Boolean.TRUE;
      assertTrue(boolean12);
      assertFalse(boolean12.equals((Object)boolean6));
      assertFalse(boolean12.equals((Object)boolean1));
      assertTrue(boolean12.equals((Object)boolean7));
      assertFalse(boolean12.equals((Object)boolean10));
      assertFalse(boolean12.equals((Object)boolean4));
      assertFalse(boolean12.equals((Object)boolean0));
      assertFalse(boolean12.equals((Object)boolean11));
      assertFalse(boolean12.equals((Object)boolean3));
      assertFalse(boolean12.equals((Object)boolean2));
      assertFalse(boolean12.equals((Object)boolean9));
      assertNotNull(boolean12);
      
      ArrayUtils.swap(doubleArray0, (-13), 54);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 100.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-13), 1168.54557);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'P';
      charArray0[2] = '7';
      charArray0[3] = '\"';
      charArray0[4] = 'n';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      byte byte0 = (byte) (-78);
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      int int0 = ArrayUtils.indexOf((double[]) null, (-2918.8606252), (int) byte0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) byte0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-78)}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap(intArray0, 0, (-1), 898);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0, (-1935)}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-685), 0, 1127);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0, (-1935)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-746));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-642L);
      longArray0[1] = 262L;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 1481);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte byte0 = (byte)100;
      byte byte1 = (byte)52;
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      byteArray0[5] = byte2;
      Byte byte3 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[6] = byte3;
      byteArray0[7] = byte2;
      byteArray0[8] = byte2;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte0 == byte1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte1;
      floatArray0[1] = (-1819.0F);
      floatArray0[2] = (float) (-642L);
      floatArray0[3] = (float) byte1;
      ArrayUtils.reverse(floatArray0, (int) byte1, 2);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new float[] {52.0F, (-1819.0F), (-642.0F), 52.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-642L), 262L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = byte1;
      byteArray2[1] = byte1;
      byteArray2[2] = (byte)3;
      byteArray2[3] = byte0;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = byte1;
      byteArray2[6] = byte0;
      byteArray2[7] = byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte)3);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)3, (byte)100, (byte) (-1), (byte)52, (byte)100, (byte)52}, byteArray2);
      assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) 53, byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte byte0 = (byte) (-27);
      Byte byte1 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      char char0 = 'x';
      charArray0[1] = '#';
      charArray0[2] = 's';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      Byte byte2 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray1 = new Byte[0];
      byte byte3 = (byte) (-16);
      Byte byte4 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) 106, byte4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      Short short0 = new Short((short)3379);
      assertEquals((short)3379, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)3379;
      doubleArray0[1] = (double) (short)3379;
      doubleArray0[2] = (double) (short)3379;
      doubleArray0[3] = (-2103.2609174571876);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) shortArray0[0]);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3379.0, 3379.0, 3379.0, (-2103.2609174571876)}, doubleArray0, 0.01);
      assertEquals(3, shortArray0.length);
      assertEquals(4, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (int) 3379, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3379, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      char char0 = 's';
      charArray0[2] = 's';
      charArray0[3] = '(';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) '(';
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = 127;
      int int1 = 121;
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 127, 121);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40, 35, 35, 120, 120, 40}, intArray1);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      int int2 = 8;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 8, byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-33);
      shortArray0[2] = (short) (-26896);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-26896), (short) (-1), (short) (-33), (short) (-26896)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), 7);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82), (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82), (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (byte) (-82), (-1), (-1706));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)32;
      byteArray2[1] = (Byte) (byte)32;
      byteArray2[2] = (Byte) (byte) (-82);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertEquals(3, byteArray2.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 125;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 125;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 125L, 0L, 0L, 125L}, longArray0);
      assertArrayEquals(new long[] {125L, 125L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shift(intArray1, (-2946), (-2946), Integer.MAX_VALUE);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.remove(booleanArray0, 0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 1, (-1273));
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 125;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 125, 1}, intArray0);
      assertArrayEquals(new int[] {0, 125, 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 125;
      longArray0[2] = 0L;
      longArray0[4] = (long) 125;
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 740);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 740, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)10;
      Byte byte6 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte8);
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte3));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      byte byte9 = (byte) (-126);
      Byte byte10 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte10);
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte5));
      assertNotNull(byte10);
      
      byteArray0[7] = byte10;
      Byte byte11 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte11);
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte6));
      assertTrue(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte5));
      assertFalse(byte11.equals((Object)byte8));
      assertTrue(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte4));
      assertNotNull(byte11);
      
      byteArray0[8] = byte11;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte) (-47);
      intArray0[2] = (int) byte9;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) (byte) (-47);
      intArray0[5] = (int) byte5;
      intArray0[6] = (-1016);
      intArray0[7] = (int) byte0;
      intArray0[8] = (int) byte0;
      ArrayUtils.shift(intArray0, (int) byte0, 252, 252);
      assertFalse(byte0 == byte9);
      assertFalse(byte0 == byte5);
      assertArrayEquals(new int[] {(-1), (-47), (-126), (-1), (-47), 10, (-1016), (-1), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Float float0 = new Float((-1065.6883843259768));
      assertEquals((-1065.6884F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(157.55894918673056);
      assertEquals(157.55894F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1542.090316324), (-448), 1.0);
      assertEquals(0, int0);
      assertEquals(12, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((byte[]) null, (-448), 244);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)96, (-2146768450));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)117}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-249L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.reverse(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2331);
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 1);
      assertArrayEquals(new float[] {(-2331.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      floatArray0[0] = (-2331.0F);
      doubleArray0[3] = (double) (-2331.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2331.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@p?Z\"2P=E";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, (-1643));
      assertEquals((-1), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 118);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0, 1136, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('5');
      assertEquals('5', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('y');
      assertEquals('y', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)16;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2331), 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) '5';
      floatArray0[2] = (float) (short)16;
      floatArray0[3] = (float) (short)16;
      floatArray0[4] = (float) (char)character1;
      floatArray0[5] = (float) (char)character3;
      floatArray0[6] = (float) (char)character3;
      floatArray0[7] = (float) (char)character3;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-394.7347F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 53.0F, 16.0F, 16.0F, 120.0F, 121.0F, 121.0F, 121.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-8.042455898225004);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)536;
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 102, (int) (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)536, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 858, (int) (short)1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-766L);
      longArray0[1] = (-1111L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-766L), (-1111L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)42;
      longArray0[1] = (long) (byte)42;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {42L, 42L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {42L, 42L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-717.0));
      assertEquals((-717.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-717.0));
      assertEquals((-717.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(42L);
      assertEquals(42.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1662.2492209177);
      assertEquals(1662.2492209177, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(1662.2492209177, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(5, doubleArray0.length);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-717.0), (-717.0), 42.0, 1662.2492209177, 1662.2492209177}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5830), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5830, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((long[]) null, (-510), (-521));
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      objectArray0[2] = (Object) (-1643.84137307);
      objectArray0[3] = (Object) 1.5;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[5];
      ArrayUtils.swap(longArray0, 3093, (-1766));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      Short short0 = new Short((short)102);
      assertEquals((short)102, (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2146002022);
      longArray0[1] = (long) (-2146002022);
      longArray0[2] = (long) 't';
      ArrayUtils.swap(longArray0, (int) (byte) (-35), (-2146002022));
      assertArrayEquals(new long[] {(-2146002022L), (-2146002022L), 116L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0, (-1935)}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-101);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)92);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)112, (byte)92, (byte) (-39), (byte)109, (byte)2, (byte) (-101), (byte)92}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)112, (byte)92, (byte) (-39), (byte)109, (byte)2, (byte) (-101)}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 2127.0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1820;
      intArray0[1] = 43;
      intArray0[3] = 111;
      intArray0[4] = 2185;
      intArray0[6] = (-994);
      intArray0[7] = 111;
      int int0 = ArrayUtils.indexOf(intArray0, 43);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1820, 43, 0, 111, 2185, 0, (-994), 111}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 111, 1820);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-772);
      floatArray0[1] = (float) (-772);
      floatArray0[2] = (float) (-1861);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2781.5F), (-772));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-772.0F), (-772.0F), (-1861.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift((char[]) null, (-772), 3012, 1040);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-762L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-762L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)56;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)116);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)45, (byte)84, (byte) (-101), (byte) (-24), (byte)104, (byte) (-70), (byte)56}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-3), (byte)45, (byte)84, (byte) (-101), (byte) (-24), (byte)104, (byte) (-70), (byte)56}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "(5)`S:;#/'");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)78);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2616));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2616, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean0;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[3] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ':';
      Object object0 = ArrayUtils.get((Object[]) booleanArray1, (-248));
      assertNull(object0);
      assertEquals(4, booleanArray1.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) boolean0;
      ArrayUtils.shift(objectArray0, 586, (-248), 114);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.insert(1, booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray2));
      assertEquals(9, booleanArray0.length);
      assertEquals(13, booleanArray3.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      
      boolean[] booleanArray4 = ArrayUtils.nullToEmpty(booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray4, booleanArray2);
      assertSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray2, booleanArray4);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray2));
      assertEquals(9, booleanArray0.length);
      assertEquals(13, booleanArray3.length);
      assertEquals(13, booleanArray4.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '_';
      doubleArray0[1] = (double) '_';
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) byte0);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) (-1);
      ArrayUtils.shift(floatArray1, 4614, (-1), 4);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-3017), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray2, (boolean) booleanArray1[6]);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, true, false, false, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(10, booleanArray3.length);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)100;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-772);
      floatArray0[3] = (float) (-772);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {100.0F, 1.0F, (-772.0F), (-772.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 1.0F, (-772.0F), (-772.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-772);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-772);
      longArray0[3] = (long) (-772);
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (-772);
      longArray0[7] = 1426L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-772L), 1L, (-772L), (-772L), 1L, 1L, (-772L), 1426L}, longArray1);
      assertArrayEquals(new long[] {(-772L), 1L, (-772L), (-772L), 1L, 1L, (-772L), 1426L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2543);
      intArray0[1] = 0;
      intArray0[2] = (-1795);
      intArray0[3] = (-2543);
      intArray0[4] = (-265);
      intArray0[5] = (int) (byte)42;
      intArray0[6] = (-2543);
      intArray0[7] = (int) (byte)42;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2543), 0, (-1795), (-2543), (-265), 42, (-2543), 42}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      long[] longArray0 = ArrayUtils.add((long[]) null, (-142L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-142L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockRandom mockRandom0 = new MockRandom((-265));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 4409.333;
      doubleArray0[3] = (double) (byte) (-122);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 4409.333, (-122.0), (-48.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "ToOaYWu-Si0,bC|O$");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-420));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-420), (-420));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      byte[] byteArray0 = new byte[2];
      longArray0[1] = (long) (byte)2;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (-248);
      intArray0[2] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-248));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, (-248), 2}, intArray0);
      assertArrayEquals(new int[] {(-248), 2, (-248), 2}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2543));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (byte) (-48));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-48)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)54, 110);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (byte)54;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte)30;
      shortArray0[4] = (short) (byte)90;
      shortArray0[5] = (short) (byte)54;
      shortArray0[6] = (short) (byte)115;
      shortArray0[7] = (short) (byte)54;
      shortArray0[8] = (short) (byte)54;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)54, (short)54, (short)30, (short)90, (short)54, (short)115, (short)54, (short)54}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, (boolean) boolean0);
      assertEquals(0, int0);
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2343L;
      longArray0[1] = (-874L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2343L, (-874L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[3];
      char char0 = 'g';
      charArray0[0] = 'g';
      char char1 = 'T';
      charArray0[1] = 'T';
      char char2 = '0';
      charArray0[2] = '0';
      char char3 = 'g';
      char[] charArray1 = ArrayUtils.add(charArray0, 'g');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'g', 'T', '0'}, charArray0);
      assertArrayEquals(new char[] {'g', 'T', '0', 'g'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[5] = (-4064);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)17, (int) (byte) (-126));
      assertSame(byteArray0, byteArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap((short[]) null, 3032, 8, (int) (byte) (-126));
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, 1514);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), 2256);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'L';
      doubleArray0[4] = (double) (-248);
      doubleArray0[5] = (-762.2408192);
      doubleArray0[6] = (double) '0';
      doubleArray0[7] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3446.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 76.0, (-248.0), (-762.2408192), 48.0, (-1633.0), 3446.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 76.0, (-248.0), (-762.2408192), 48.0, (-1633.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'L';
      longArray0[1] = (long) '\u0000';
      longArray0[2] = 2446L;
      longArray0[3] = (long) 'L';
      longArray0[4] = (-400L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {76L, 0L, 2446L, 76L, (-400L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (short) (-986), 1377);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)76;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, (-1512));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte) (-128), (byte)76, (byte)76, (byte)6, (byte)76}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte byte0 = (byte)115;
      byte byte1 = (byte) (-84);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-48);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-265));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-48), (byte) (-84), (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte) (-84);
      byteArray2[1] = (Byte) (byte) (-84);
      byteArray2[2] = (Byte) (byte) (-48);
      byteArray2[3] = (Byte) (byte)115;
      Byte byte2 = Byte.valueOf(byte1);
      assertEquals((byte) (-84), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray2, 890, byte2);
      assertEquals((byte) (-84), (byte)byte3);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(byte3);
      assertEquals(4, byteArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals((byte) (-84), object0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(object0);
      assertEquals(4, byteArray2.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, object0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertEquals(0, objectArray0.length);
      assertEquals(4, byteArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 62L;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte) (-48);
      int int0 = ArrayUtils.indexOf(longArray0, 9L, (int) byte0);
      assertEquals((-1), int0);
      assertFalse(byte0 == byte1);
      assertArrayEquals(new long[] {62L, 115L, (-48L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap((double[]) null, 50, 4, 2146640836);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (short)444);
      assertEquals(444.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(3564.92);
      assertEquals(3564.92F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1429.8828647806);
      assertEquals(1429.8828F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.valueOf(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      Boolean boolean8 = Boolean.valueOf(false);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertNotNull(boolean8);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Character character0 = new Character('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h', 'h', 'h'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (char)character0;
      floatArray0[1] = (float) 'h';
      floatArray0[2] = (float) (char)character0;
      floatArray0[3] = (float) (char)character0;
      floatArray0[4] = (float) '{';
      floatArray0[5] = (float) (char)character0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) '{';
      intArray0[3] = (int) (char)character0;
      intArray0[4] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1488.5;
      doubleArray0[1] = (-10.425448711331866);
      doubleArray0[2] = (-791.58773683146);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1488.5, (-10.425448711331866), (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = 1545;
      ArrayUtils.swap(doubleArray0, 1545, 284);
      assertArrayEquals(new double[] {1488.5, (-10.425448711331866), (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-10.425448711331866);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) (-791.58773683146), (Object) (-791.58773683146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {879.5356066}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(charArray0, 45, 1106);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '#';
      charArray1[3] = ':';
      charArray1[4] = '&';
      charArray1[5] = '#';
      charArray1[6] = '#';
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'l');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '&', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'#', ':', '&', '#', '#'}, charArray2);
      assertEquals(7, charArray1.length);
      assertEquals(5, charArray2.length);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'l', 'l', '#', ':', '&', '#', '#'}, charArray1);
      assertArrayEquals(new char[] {'#', ':', '&', '#', '#'}, charArray2);
      assertArrayEquals(new char[] {'#', ':', '&', '#', '#'}, charArray3);
      assertEquals(7, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1542.090316324));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0, (-1542.090316324)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1542.090316324);
      objectArray0[4] = (Object) (-1542.090316324);
      objectArray0[5] = (Object) (-1542.090316324);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 50;
      floatArray0[2] = (-465.83F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-465.83F), 1);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 50.0F, (-465.83F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 6123.290575456428;
      doubleArray2[1] = (-85.3);
      doubleArray2[2] = (double) 4042;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 4042;
      doubleArray2[5] = (double) 4042;
      ArrayUtils.shift(doubleArray2, 54, (-685), (-2146722667));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {6123.290575456428, (-85.3), 4042.0, 1.0, 4042.0, 4042.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2302L);
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 54;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2302L)}, longArray0);
      assertArrayEquals(new long[] {0L, 54L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-486.957165), (-1643.84137307));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'C', (int) (byte) (-44));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-82), (int) (byte)0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse((char[]) null, (int) (byte)0, (-381));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-381);
      doubleArray0[3] = (double) (-381);
      doubleArray0[4] = (double) (-381);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-381.0), (-381.0), (-381.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-381.0), (-381.0), (-381.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 749.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-13), 89);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 567.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      Byte byte0 = new Byte((byte)46);
      assertEquals((byte)46, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2794.9045F);
      floatArray0[1] = (float) (byte)46;
      floatArray0[2] = (float) (byte)46;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2794.9045F), 46.0F, 46.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2794.9045F), 46.0F, 46.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, (-2331), 167);
      assertNull(byteArray0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('#');
      assertEquals('#', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('#');
      assertEquals('#', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char0 = '[';
      Character character2 = Character.valueOf('[');
      assertEquals('[', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('[', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('#');
      assertEquals('#', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('$');
      assertEquals('$', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-420), (-420), (-420));
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 45, 84, 84);
      Object[] objectArray0 = new Object[3];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[6] = '/';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 'S';
      floatArray0[4] = 1252.0F;
      floatArray0[5] = (float) 'S';
      floatArray0[6] = (float) '0';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {83.0F, 68.0F, (-1.0F), 83.0F, 1252.0F, 83.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 2586, 84, 2586);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 84);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 14
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = new Byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'#', 'x', 's', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)102);
      assertEquals((short)102, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)102;
      shortArray1[1] = (short) (byte) (-35);
      ArrayUtils.shift(shortArray1, (int) (short)102);
      assertArrayEquals(new short[] {(short)102, (short) (-35)}, shortArray1);
      assertEquals(2, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      char char0 = 'a';
      Character character0 = Character.valueOf('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('a');
      assertEquals('a', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('a', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('a', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'a', 'a'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-1501), (int) char0, 115);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2400));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2400), (short) (-2400), (short) (-2400), (short) (-2400), (short) (-2400), (short) (-2400), (short) (-2400), (short) (-2400)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-2400), 1553, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      shortArray0[1] = (short)2985;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-411);
      shortArray0[5] = (short)423;
      shortArray0[6] = (short) (-2861);
      shortArray0[7] = (short)1549;
      shortArray0[8] = (short)36;
      ArrayUtils.shift(shortArray0, (int) (short)36);
      assertArrayEquals(new short[] {(short) (-105), (short)2985, (short)2309, (short) (-1), (short) (-411), (short)423, (short) (-2861), (short)1549, (short)36}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-2861);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-2861), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2861);
      doubleArray0[1] = (double) (short)423;
      doubleArray0[2] = (double) (short) (-2861);
      doubleArray0[3] = (double) (short)1549;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-105);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)36, 8, (double) (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2861.0), 423.0, (-2861.0), 1549.0, (-1.0), (-105.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1011.7657636;
      doubleArray0[1] = 67.293180862;
      doubleArray0[2] = (-3013.645287728214);
      doubleArray0[3] = 2557.79523665;
      doubleArray0[4] = 101.0;
      doubleArray0[5] = 716.102531753684;
      doubleArray0[6] = 1182.8035067252;
      doubleArray0[7] = 3943.293583005;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3943.293583005);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1011.7657636, 67.293180862, (-3013.645287728214), 2557.79523665, 101.0, 716.102531753684, 1182.8035067252, 3943.293583005}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-26896.0F);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2146378552);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146378552, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)46);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-642L);
      longArray0[1] = 262L;
      longArray0[2] = (-1706L);
      longArray0[3] = 1178L;
      longArray0[4] = 1016L;
      longArray0[5] = 1L;
      longArray0[6] = (-1219L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-642L), (-1706L), 1178L, 1016L, 1L, (-1219L), 262L}, longArray0);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-105));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1706L);
      doubleArray0[1] = (double) (-642L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-782.75));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1706.0), (-642.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      charArray0[3] = '(';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) '(';
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 127, 121);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40, 35, 35, 120, 120, 40}, intArray1);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40}, intArray0);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'P';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', Integer.MAX_VALUE);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'R', 'P', 'W'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[2] = (double) 'P';
      Byte byte0 = Byte.valueOf((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(byteArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)35;
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(8, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertEquals(7, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2543);
      intArray0[1] = 0;
      intArray0[2] = (-1795);
      intArray0[3] = (-2543);
      intArray0[4] = (-265);
      intArray0[5] = (int) (byte)42;
      intArray0[6] = (-2543);
      intArray0[7] = (int) (byte)42;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2543), 0, (-1795), (-2543), (-265), 42, (-2543), 42}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-122), 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-48);
      byteArray1[1] = (byte) (-122);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-122)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-122)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-2543);
      objectArray0[1] = (Object) (-2543);
      objectArray0[2] = (Object) (-2543);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((-2543), object0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      byte byte0 = (byte)65;
      Byte byte1 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)65, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[5] = byte2;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0);
      assertNull(byte3);
      assertEquals(9, byteArray0.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte0, Integer.MAX_VALUE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      Float float0 = new Float((double) (-772));
      assertEquals((-772.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-304.1525379623));
      assertEquals((-304.15253F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) floatArray0[0];
      floatArray2[1] = (float) floatArray0[0];
      floatArray2[2] = (float) (-772);
      floatArray2[3] = (float) (-772);
      floatArray2[4] = (float) (-448);
      floatArray2[5] = (float) (-772);
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 1011.7F, (-1090));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-772.0F), (-772.0F), (-772.0F), (-772.0F), (-448.0F), (-772.0F)}, floatArray2, 0.01F);
      assertEquals(6, floatArray2.length);
      
      Byte byte0 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) byte0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 134.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Long long0 = new Long((short) (-1853));
      assertEquals((-1853L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "double");
      assertNotNull(stringArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) stringArray0, (int) (short) (-1853), 22, 2307);
      assertEquals(1, longArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 1120.0;
      doubleArray0[2] = 0.0;
      Byte byte0 = new Byte((byte)107);
      assertEquals((byte)107, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)107, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-265), 18688, 18688);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray1, 456.2804810752976);
      assertEquals((-1), int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.shift(intArray0, (-584), 922, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(1, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) 'Y';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {40, 0, 89}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(54, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(objectArray0, (int) (short)127, 1086, 40);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, Integer.MAX_VALUE, 'M');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)127;
      intArray0[1] = (int) '(';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) 'g';
      intArray0[5] = (int) 'x';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {127, 40, 120, 120, 103, 120}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(110, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      charArray0[3] = '(';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) '(';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((-4593), (short[]) null, shortArray0);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      charArray0[3] = '(';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) '(';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 68.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (-1775.0568F);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3055.4383);
      objectArray0[1] = (Object) (-1775.0568F);
      ArrayUtils.shift(objectArray0, (-2146534273), (-2146534273), 85);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 531.076F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 531.076F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {531.076F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1755.92878352197);
      ArrayUtils.reverse(doubleArray0, (-738), 3532);
      assertArrayEquals(new double[] {(-1755.92878352197)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-738);
      intArray0[1] = (-738);
      intArray0[2] = 3532;
      intArray0[3] = 3532;
      intArray0[4] = (-738);
      intArray0[5] = (-738);
      intArray0[6] = (-738);
      intArray0[7] = 3532;
      int int0 = ArrayUtils.indexOf(intArray0, (-738), (-4593));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-738), (-738), 3532, 3532, (-738), (-738), (-738), 3532}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Byte byte0 = new Byte((byte) (-11));
      assertEquals((byte) (-11), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 1, (-1));
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)7;
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte) (-11);
      byteArray1[7] = (byte) (-11);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11), (byte)7, (byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = 'I';
      charArray0[4] = '.';
      charArray0[5] = 'a';
      charArray0[6] = '0';
      int int1 = ArrayUtils.indexOf(charArray0, 'I', (-1));
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'Z', '^', 'W', 'I', '.', 'a', '0'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3550.62);
      doubleArray0[2] = 1956.2556029999998;
      doubleArray0[3] = (-763.2408192);
      ArrayUtils.reverse(doubleArray0, (-1819), (-2146686215));
      assertArrayEquals(new double[] {1.0, (-3550.62), 1956.2556029999998, (-763.2408192)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146686215);
      intArray0[1] = (-2146686215);
      intArray0[2] = (-1819);
      intArray0[3] = (-2146686215);
      intArray0[4] = (-1819);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2146686215), (-2146686215), (-1819), (-2146686215), (-1819)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)97;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2331);
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 1);
      assertArrayEquals(new float[] {(-2331.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      floatArray0[0] = (-2331.0F);
      doubleArray0[3] = (double) (-2331.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2331.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double double0 = Double.valueOf((double) 870);
      assertEquals(870.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-123), (int) (byte) (-123));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) 870;
      longArray0[3] = (long) (byte) (-123);
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3744L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-123L), (-123L), 870L, (-123L), 1L}, longArray1);
      assertArrayEquals(new long[] {(-123L), (-123L), 870L, (-123L), 1L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-123), (int) (byte) (-123));
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-123L), (double) (-123L));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 870L;
      // Undeclared exception!
      try { 
        bitSet0.previousClearBit((byte) (-123));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < -1: -123
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      int[] intArray0 = new int[6];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)20;
      shortArray0[1] = (short) (byte)20;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)20);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)20, (short)20}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) (short)20;
      doubleArray0[5] = (double) (short)20;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {20.0, 0.0, 20.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Float float0 = new Float((float) (byte)20);
      assertEquals(20.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)20);
      assertNull(floatArray0);
      
      int int0 = 1901;
      try { 
        Byte.valueOf("Method `CartesianProductTest.Sets ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Method `CartesianProductTest.Sets \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1266.7561543);
      doubleArray0[1] = Double.NaN;
      ArrayUtils.reverse(doubleArray0, 3156, 3156);
      assertArrayEquals(new double[] {(-1266.7561543), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-4037));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Double double0 = Double.valueOf(483.88126801794834);
      assertEquals(483.88126801794834, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1755.92878352197);
      ArrayUtils.reverse(doubleArray0, (-738), 3532);
      assertArrayEquals(new double[] {(-1755.92878352197)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-738);
      intArray0[1] = (-738);
      intArray0[2] = 3532;
      intArray0[3] = 3532;
      intArray0[4] = (-738);
      intArray0[5] = (-738);
      intArray0[6] = (-738);
      intArray0[7] = 3532;
      int int0 = ArrayUtils.indexOf(intArray0, (-738), (-4593));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-738), (-738), 3532, 3532, (-738), (-738), (-738), 3532}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)0;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)114, (byte)116, (byte)114, (byte) (-2), (byte)111, (byte)0, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-265);
      longArray0[1] = (long) (-265);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-265);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)299;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.shift(shortArray0, (-193));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1278);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)53;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1278), (short)0, (short)0, (short)0, (short)53}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1278), (short)0, (short)0, (short)0, (short)53, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 'V';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 86.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 86.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1278), (short)0, (short)0, (short)0, (short)53, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'V', '~', '~', 'V'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      shortArray0[5] = (short) (-1278);
      shortArray0[6] = (short)53;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1278);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)53, (short)53, (short)0, (short)53, (short) (-1278), (short)53, (short)0, (short) (-1278)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)0, (short)53, (short) (-1278), (short)53, (short)0, (short) (-1278), (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) '~';
      floatArray0[2] = (float) 'V';
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-695.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 126.0F, 86.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-695.0F), 0.0F, 126.0F, 86.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (short)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 161.723);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {161.723}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)83, object0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)721;
      objectArray0[2] = (Object) (short)1639;
      objectArray0[3] = (Object) (short)1639;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (short)0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], 95);
      assertEquals(3, int0);
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(6, objectArray1.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)49);
      assertEquals(49.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)49);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {49.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1375.0);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1375.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-2054));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-84.8F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-84.8F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      byte byte0 = (byte) (-78);
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      int int0 = ArrayUtils.indexOf((double[]) null, (-2918.8606252), (int) byte0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) byte0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-78)}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (short)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 98, 98, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = (double) 98;
      short[] shortArray0 = new short[0];
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 98;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {98}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Float float0 = new Float(98.0);
      assertEquals(98.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(95.0);
      assertEquals(95.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      floatArray0[3] = (float) 'D';
      floatArray0[4] = (float) 'l';
      floatArray0[5] = 3487.26F;
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 3487.26F);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)2013);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2013.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1055.4309);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new double[] {(-1055.4309)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (int) (short)0);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet1 = bitSet0.get((int) (short)0, (int) (short)0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-1055.4309);
      doubleArray1[1] = (Double) (-1055.4309);
      doubleArray1[2] = (Double) (-1055.4309);
      doubleArray1[3] = (Double) (-1055.4309);
      doubleArray1[5] = (Double) (-1055.4309);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 164.341771);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1055.4309), (-1055.4309), (-1055.4309), (-1055.4309), 164.341771, (-1055.4309)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), 2256);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) (-248);
      doubleArray0[5] = (-762.2408192);
      doubleArray0[6] = (double) '0';
      doubleArray0[7] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3446.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 0.0, (-248.0), (-762.2408192), 48.0, (-1633.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 0.0, (-248.0), (-762.2408192), 48.0, (-1633.0), 3446.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-439));
      assertEquals((short) (-439), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)128);
      assertEquals((short)128, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)128);
      assertEquals((short)128, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1190);
      assertEquals((short)1190, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-3596));
      assertEquals((short) (-3596), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)8);
      assertEquals((short)8, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-5207));
      assertEquals((-5207L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5207L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-265);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-265), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-265);
      floatArray0[3] = (float) (byte) (-48);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-265.0F), 0.0F, (-48.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2013;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'X', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(4326L);
      assertEquals(4326L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("java.lang.Short", long0);
      assertEquals(4326L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4326L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(longArray1, (-1124), (-1124), 322);
      assertArrayEquals(new long[] {4326L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, 1514);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), 2256);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'L';
      doubleArray0[4] = (double) (-248);
      doubleArray0[5] = (-762.2408192);
      doubleArray0[6] = (double) '0';
      doubleArray0[7] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3446.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 76.0, (-248.0), (-762.2408192), 48.0, (-1633.0), 3446.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 76.0, (-248.0), (-762.2408192), 48.0, (-1633.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)255;
      shortArray0[2] = (short) (-265);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)255, (short) (-265)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-265)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'P';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', Integer.MAX_VALUE);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'R', 'P', 'W'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 'P';
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)28);
      assertEquals((byte)28, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-113);
      Byte byte3 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte6;
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, (int) 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte byte7 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, byte7);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)1);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)95);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '^');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', '', '', '', '', '', '', ''}, charArray0);
      assertArrayEquals(new char[] {'^', '', '', '', '', '', '', '', ''}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {127L}, longArray0);
      assertArrayEquals(new long[] {127L, 127L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)60);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-347));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 762.2408192;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 781.7287;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 396.1;
      doubleArray0[5] = (-401.35250103);
      doubleArray0[6] = 95.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 41);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {762.2408192, (-1.0), 781.7287, 1.5, 396.1, (-401.35250103), 95.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-10248);
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-10248));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)99, (short) (-10248), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)99, (short)2}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2892.092F));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-246.486F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, (-246.486F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-41.15522F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2314.11F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 368.0F;
      floatArray0[6] = 3309.0F;
      floatArray0[7] = 1541.6364F;
      floatArray0[8] = 658.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, (-41.15522F), 1.0F, (-2314.11F), 0.0F, 368.0F, 3309.0F, 1541.6364F, 658.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2347);
      intArray0[1] = 4436;
      intArray0[2] = 6;
      intArray0[3] = (-1012);
      intArray0[4] = 7;
      intArray0[5] = 50;
      intArray0[6] = (-309);
      intArray0[7] = 3620;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-2347), 4436, 6, (-1012), 7, 50, (-309), 3620}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 862L;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1541.6364F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 862.0F, 1.0F, 1541.6364F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-309);
      intArray0[1] = 7;
      intArray0[2] = (-2347);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-309), 7, (-2347)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 433.757764;
      objectArray0[1] = (Object) 433.757764;
      objectArray0[2] = (Object) 1120.0;
      objectArray0[3] = (Object) 1120.0;
      objectArray0[4] = (Object) 1120.0;
      ArrayUtils.reverse(objectArray0, (-4158), 45);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1820;
      intArray0[1] = 43;
      intArray0[3] = 43;
      intArray0[5] = (-525);
      intArray0[6] = (-994);
      intArray0[7] = 43;
      int int0 = ArrayUtils.indexOf(intArray0, 43);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1820, 43, 0, 43, 0, (-525), (-994), 43}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 1820, 1820);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 43;
      intArray0[3] = 111;
      intArray0[4] = 2185;
      intArray0[6] = (-994);
      intArray0[5] = 111;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 111, 0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1820;
      intArray0[1] = 43;
      intArray0[2] = 1530;
      intArray0[3] = 111;
      intArray0[4] = 2185;
      intArray0[5] = (-525);
      intArray0[6] = (-994);
      intArray0[7] = 1225;
      int int0 = ArrayUtils.indexOf(intArray0, 43);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1820, 43, 1530, 111, 2185, (-525), (-994), 1225}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 111, 1820);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 12;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-265);
      longArray0[1] = (long) (-265);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-265);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2347);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1791L, (int) (short) (-2347));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-110));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-110), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-265.0), (-265.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1800, (-1145));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)337);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)337}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)107);
      assertEquals((byte)107, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '7');
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '=', (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'P');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, 12);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      ArrayUtils.shift((Object[]) booleanArray0, (-422), 12, 12);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      int int0 = ArrayUtils.indexOf(charArray0, '$');
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', 'V', 't'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2112);
      shortArray0[1] = (short) (-498);
      shortArray0[2] = (short) (-2112);
      ArrayUtils.shift((Object[]) byteArray0, (int) (short) (-2112));
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 'S';
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1903.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1903.0, 83.0, 83.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {83.0, 83.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("79", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short)0, (short)0, (short)0, (short)127, (short) (-2155), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) (short)127;
      longArray0[3] = 45L;
      longArray0[4] = (long) 'x';
      longArray0[5] = (long) (short) (-87);
      longArray0[6] = (long) 'x';
      longArray0[7] = (long) 'g';
      longArray0[8] = (long) (short)127;
      ArrayUtils.swap(longArray0, (-1), (-847), 778);
      assertArrayEquals(new long[] {1L, 120L, 127L, 45L, 120L, (-87L), 120L, 103L, 127L}, longArray0);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-3541), (int) (short) (-87));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("59", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-89);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shift(floatArray2, (int) (byte)2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1735.56F, 2688.34F, (-2480.0F), (-1.0F), 0.0F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1542.090316324));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0, (-1542.090316324)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[0] = (Object) (-1542.090316324);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[2] = null;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[1];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, (-756));
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2146913796));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-986));
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-39);
      Byte byte4 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte2;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte3, (int)  (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte3 == byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)122;
      byteArray2[4] = (byte)87;
      byteArray2[5] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)122, (byte)87, (byte) (-1)}, byteArray2);
      assertEquals(6, byteArray2.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (byte)122);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "a{sBz ]S>-AP{6{ aV6");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-3208.7246239273), 3061.645287728214);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Long long0 = new Long(87L);
      assertEquals(87L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("java.lang.Short", long0);
      assertEquals(87L, (long)long1);
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {87L, 1L}, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1554), (int) (short)2013);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 9;
      ArrayUtils.swap((Object[]) byteArray1, 9, 9, 9);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) ':';
      intArray0[2] = 2821;
      intArray0[3] = 1537;
      intArray0[4] = (int) ':';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {58, 58, 2821, 1537, 58}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2821);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) ':';
      intArray0[2] = 2821;
      intArray0[3] = 1537;
      intArray0[4] = (int) ':';
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2821);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 45, 84, 84);
      Object[] objectArray0 = new Object[3];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 84);
      assertEquals(2, int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 480.9773968;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 0.0, 480.9773968, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = 1L;
      longArray1[2] = (long) 64;
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      char[] charArray0 = new char[8];
      ArrayUtils.shift(charArray0, (-411));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-87);
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 121.0, 28, 431.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-87.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 121.0, (double) (byte) (-87));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-87.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Character character0 = new Character('k');
      assertEquals('k', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('k');
      assertEquals('k', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char char0 = '';
      Character character2 = Character.valueOf('');
      assertEquals('', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      characterArray0[2] = character2;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character0;
      Character character3 = new Character(char0);
      assertEquals('', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[6] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'', 'k', '', 'k', 'k', 'k', ''}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      ArrayUtils.shift(charArray0, (-2036), 5, 2461);
      assertArrayEquals(new char[] {'k', '', 'k', '', 'k', 'k', ''}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 11;
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.insert(11, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '[';
      charArray0[2] = ')';
      charArray0[3] = '-';
      charArray0[4] = '[';
      charArray0[5] = 'c';
      charArray0[6] = 'o';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, ')');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {')', '[', ')', '-', '[', 'c', 'o'}, charArray0);
      assertArrayEquals(new char[] {'[', '-', '[', 'c', 'o'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(5, charArray1.length);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'o';
      charArray2[1] = '=';
      charArray2[2] = '[';
      charArray2[3] = '[';
      charArray2[4] = '-';
      charArray2[5] = '=';
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'o', '=', '[', '[', '-', '='}, charArray3);
      assertArrayEquals(new char[] {'o', '=', '[', '[', '-', '='}, charArray2);
      assertEquals(6, charArray3.length);
      assertEquals(6, charArray2.length);
      
      long[] longArray0 = ArrayUtils.insert(1069, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 1451);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.swap((char[]) null, 89, 0, 2146474492);
      char char0 = 'g';
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('g');
      assertEquals('g', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character character2 = new Character((char) character0);
      assertEquals('Y', (char)character2);
      assertFalse(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character1;
      Character character3 = Character.valueOf(' ');
      assertEquals(' ', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[7] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'g', 'Y', 'Y', 'Y', 'Y', 'Y', 'g', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) 1451;
      longArray0[3] = (long) 'Y';
      longArray0[4] = (long) char0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {103L, 89L, 1451L, 89L, 103L}, longArray0);
      assertArrayEquals(new long[] {103L, 89L, 1451L, 89L, 103L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2147117328), 10, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-772));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', 102);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3400), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3400, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1346), (int) (short)127, (-14));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1362), (int) (short)127, 20);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 567.0;
      doubleArray0[0] = 3077.85000943771;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1715.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1664.7607130020065;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3077.85000943771, 0.0, 0.0, 1715.0, 0.0, 0.0, 1664.7607130020065}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3077.85000943771, 0.0, 0.0, 1715.0, 0.0, 0.0, 1664.7607130020065, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2357;
      shortArray0[1] = (short) (-2112);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2357, (short) (-2112), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-2112);
      longArray0[1] = 1L;
      longArray0[2] = 1310L;
      longArray0[3] = (long) (short) (-2112);
      longArray0[4] = (long) (-14);
      longArray0[5] = (long) (-14);
      longArray0[6] = (long) (-14);
      longArray0[7] = (long) (-14);
      longArray0[8] = (long) (short)2357;
      ArrayUtils.shift(longArray0, (-14));
      assertArrayEquals(new long[] {(-14L), (-14L), (-14L), 2357L, (-2112L), 1L, 1310L, (-2112L), (-14L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) 'L';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 786, (-2109610334));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 76L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'T');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', 'L'}, charArray1);
      assertArrayEquals(new char[] {'L', 'L'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-99);
      longArray0[2] = (long) ':';
      longArray0[3] = (long) ':';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7274, 786);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-99L), 0L, 58L, 58L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ':');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      objectArray0[2] = (Object) (-1643.84137307);
      objectArray0[3] = (Object) 1.5;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      long[] longArray0 = new long[1];
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-762L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-762L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {2688.34F, (-2480.0F), (-1.0F), 0.0F, (-1.0F), 1735.56F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-762L)}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-762L)}, longArray1);
      assertEquals(4, longArray2.length);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-19));
      assertEquals((byte) (-19), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = ArrayUtils.get(byteArray0, (int) 84, byte3);
      assertEquals((byte) (-95), (byte)byte6);
      assertFalse(byte3.equals((Object)byte5));
      assertFalse(byte3.equals((Object)byte4));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, byte6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 569L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 569L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {569L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift(intArray0, (-33), (int) (byte) (-105), (-33));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte) (-105), (-45));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 46.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1058.0, 83.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {46.0, 1058.0, 83.0, 88.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)12);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)7, object1);
      assertNotNull(object1);
      
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object1));
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = object1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      int int1 = new Byte((byte) (-109));
      assertEquals((byte) (-109), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(objectArray0, (byte) (-109), (int) (short)12);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2626.482558);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object2);
      assertSame(object1, object0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'P';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', Integer.MAX_VALUE);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'R', 'P', 'W'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = 4353.79550713;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1507.527403455));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 80.0, 4353.79550713}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 7, (-1), Integer.MAX_VALUE);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, 114, 114, 114);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("9!r=");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = 1664.7607130020065;
      doubleArray0[1] = 1715.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(18, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, 0, 0, 0);
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1715.0, 169, 1232.160863976);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(18, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2030L);
      longArray0[1] = 1L;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("n(xY)?4Z(Z^?7MvH");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = Boolean.valueOf("java.lang.Short");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[5] = boolean2;
      booleanArray0[6] = boolean1;
      booleanArray0[7] = boolean1;
      booleanArray0[8] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.shift(longArray0, 1069);
      assertArrayEquals(new long[] {0L, (-2030L), 1L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray0[0] = true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      assertEquals(1, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-772);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-772L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray3));
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertEquals(4, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((int) (byte) (-105), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-33);
      floatArray0[1] = (float) (-33);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-33.0F), (-33.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-986));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-22);
      Byte byte3 = new Byte((byte) (-22));
      assertEquals((byte) (-22), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, (int)  (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-524.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2331);
      doubleArray0[1] = (double) (-2331);
      doubleArray0[2] = (double) 0;
      doubleArray0[5] = (double) (-2331);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2331.0), (-2331.0), 0.0, 0.0, 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2331.0), 0.0, 0.0, 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@p?Z\"2P=E";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int[] intArray2 = ArrayUtils.insert((-420), intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1278.25F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[2] = (float) (byte) (-5);
      floatArray0[3] = (float) (byte) (-5);
      floatArray0[4] = (float) (byte) (-5);
      floatArray0[5] = (-5.0F);
      floatArray0[6] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, (-5.0F), (-5.0F), (-5.0F), (-5.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-5.0F), (-5.0F), (-5.0F), (-5.0F), Float.NaN}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'k';
      charArray0[6] = '/';
      charArray0[7] = '';
      charArray0[8] = '_';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '0';
      intArray0[1] = 1686;
      intArray0[2] = (int) '/';
      intArray0[3] = (int) 'L';
      intArray0[4] = (int) '_';
      intArray0[5] = (int) 'l';
      intArray0[6] = (-420);
      intArray0[7] = (int) '/';
      int[] intArray1 = ArrayUtils.insert(4, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {48, 1686, 47, 76, 95, 108, (-420), 47}, intArray0);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1686;
      floatArray0[1] = (float) '/';
      floatArray0[2] = (float) 76;
      floatArray0[3] = (float) 47;
      floatArray0[4] = (float) 48;
      floatArray0[5] = (float) '_';
      floatArray0[6] = (float) 47;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 76.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1686.0F, 47.0F, 76.0F, 47.0F, 48.0F, 95.0F, 47.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1686.0F, 47.0F, 47.0F, 48.0F, 95.0F, 47.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      char[] charArray0 = new char[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'G', (-265));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-265), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -265, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class2;
      classArray0[1] = class0;
      classArray0[2] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      ArrayUtils.reverse(charArray0, (-1), 99);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character0, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      intArray0[3] = (int) (short)2013;
      ArrayUtils.shift(intArray0, (int) (short) (-18), 0, (-3927));
      assertArrayEquals(new int[] {0, 2, 0, 2013, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 0, (int) (short)2013, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = ArrayUtils.insert((-1421), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Byte byte0 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = (-1375);
      intArray0[2] = (-955);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1375), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {57, (-1375), (-955), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = '7';
      charArray0[2] = '2';
      charArray0[3] = '8';
      charArray0[5] = ' ';
      charArray0[6] = 'D';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', 'H', '7', '2', '8', '\u0000', ' ', 'D'}, charArray1);
      assertArrayEquals(new char[] {'H', '7', '2', '8', '\u0000', ' ', 'D'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-955);
      objectArray0[1] = (Object) 'H';
      objectArray0[2] = (Object) 'H';
      objectArray0[3] = (Object) 'H';
      objectArray0[4] = (Object) (-1375);
      objectArray0[5] = (Object) 57;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '8';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65, charArray2, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', 0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '_');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (-108.9851356147));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-249));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-249), (short) (-1203)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("w4RRUuZuO?");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', 0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '_');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'_', '_', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-177.414437235), (-108.9851356147));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '/';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '/', 2);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'B', '/'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-3208.7246239273), 3061.645287728214);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-109);
      floatArray0[2] = (float) (-109);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-109.0F), (-109.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-109.0F), (-109.0F), (-1.0F), (-109.0F), (-109.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-109), (-1), 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '7';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '2');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'{', '7'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (-420);
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-420));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = '&';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '1';
      charArray0[5] = '{';
      charArray0[6] = '-';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-');
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'p', '&', '2', '2', '1', '{', '-'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1853));
      assertEquals((short) (-1853), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1853)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short) (-1853);
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (short)shortArray0[0];
      ArrayUtils.swap(longArray0, (int) shortArray0[0], (int) shortArray0[0], (-1591));
      assertArrayEquals(new long[] {(-1853L), (-1853L), (-1853L), (-1853L)}, longArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int[] intArray0 = new int[14];
      intArray0[1] = 76;
      intArray0[2] = 1190;
      intArray0[3] = (int) (byte) (-61);
      intArray0[4] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(14, intArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 76;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1437.4034501);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {76.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {76.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0, 3, (-2147129060));
      assertEquals(14, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)80, 65536, (-481.87));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      Double double0 = Double.valueOf((double) (byte)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)2449;
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)2449}, shortArray2);
      assertEquals(1, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2449;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)2449;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2449, 0, 2449, 0}, intArray0);
      assertArrayEquals(new int[] {2449, 0, 2449, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'x');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements((int[]) null, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNull(intArray2);
      assertArrayEquals(new int[] {2449, 0, 2449, 0}, intArray0);
      assertArrayEquals(new int[] {2449, 0, 2449, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Float float0 = new Float(764.6);
      assertEquals(764.6F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Float[] floatArray0 = new Float[20];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2155.6868F);
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)2013);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 2013.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)2013;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)2013;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 19.0F, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2013.0F, 0.0F, 2013.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)98);
      assertEquals((byte)98, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 's';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {115}, intArray0);
      assertArrayEquals(new int[] {115}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "The String did not match either specified value");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)98;
      floatArray0[1] = (float) (byte)98;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {98.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {98.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-127), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {98.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 4091);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4091, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[6] = '/';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) '';
      int int0 = ArrayUtils.indexOf(doubleArray0, 3061.645287728214, 3061.645287728214);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {68.0, 48.0, 127.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0, Integer.MAX_VALUE, 111);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {68.0, 48.0, 127.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 84;
      longArray0[1] = (long) 84;
      longArray0[2] = (long) 84;
      longArray0[3] = (long) 84;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1230L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {84L, 84L, 84L, 84L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1230L), 84L, 84L, 84L, 84L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      byte byte0 = (byte) (-109);
      Byte byte1 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = 'e';
      charArray0[7] = '_';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_', '_', '_', '_', '_', '_', 'e', '_'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short short0 = (short)0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1969);
      intArray0[1] = 1543;
      intArray0[2] = (-1488);
      intArray0[3] = 1272;
      intArray0[4] = 82;
      intArray0[5] = 3566;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1272, 517);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1969), 1543, (-1488), 1272, 82, 3566, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.shift(intArray0, (-584), 9, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2146824684;
      doubleArray0[1] = (double) 2146824684;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2146824684;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.146824684E9, 2.146824684E9, 0.0, 0.0, 2.146824684E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.146824684E9, 2.146824684E9, 0.0, 0.0, 2.146824684E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray1));
      assertEquals(6, intArray0.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2667, (-874));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-584);
      longArray0[1] = (long) (-874);
      longArray0[2] = (long) 9;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2331L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-584L), (-874L), 9L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 87);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ArrayUtils.shift(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1861.0F));
      assertEquals((-1861.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(141.843F);
      assertEquals(141.843F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, 1625);
      assertNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2331);
      doubleArray0[1] = (double) (-2331);
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) (-2331);
      doubleArray0[6] = (double) (-2331);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2331.0), (-2331.0), 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2331.0), 0.0, 0.0, 0.0, (-2331.0), (-2331.0), 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@p?Z\"2P=E";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, (-1643));
      assertEquals((-1), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 118);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1429.8828647806);
      assertEquals(1429.8828F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) 1);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1429.8828F, 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'G', (-1));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'v', (int) 'v');
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-91), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -91, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '_';
      charArray0[2] = ')';
      charArray0[3] = '\"';
      charArray0[4] = 'c';
      charArray0[5] = '[';
      charArray0[6] = '=';
      charArray0[7] = 'o';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, ')');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1', '_', ')', '\"', 'c', '[', '=', 'o'}, charArray0);
      assertArrayEquals(new char[] {'1', '_', '\"', 'c', '[', '=', 'o'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'1', '_', ')', '\"', 'c', '[', '=', 'o'}, charArray0);
      assertArrayEquals(new char[] {'1', '_', ')', '\"', 'c', '[', '=', 'o'}, charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray2.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) '=';
      longArray0[2] = (long) 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-439), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -439, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'A';
      Character character0 = Character.valueOf('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-791.58773683146)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean6));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean1.equals((Object)boolean6));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean7));
      assertFalse(boolean2.equals((Object)boolean6));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean3));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'h');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)536;
      shortArray0[4] = (short)32;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)2;
      Character character4 = Character.valueOf('3');
      assertEquals('3', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '3');
      assertSame(characterArray0, characterArray1);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'3', 'K', 'K', 'K', '\"'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'L';
      longArray0[1] = 1324L;
      longArray0[2] = (long) 'L';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1324L, 8);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {76L, 1324L, 76L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      short[] shortArray0 = new short[12];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(12, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(12, shortArray0.length);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
      assertEquals(12, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertEquals(12, shortArray3.length);
      
      ArrayUtils.shift((Object[]) shortArray2, (-30), (-30), (-30));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)2);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[20];
      ArrayUtils.shift(intArray0, 9, (int) (byte)2, 0);
      assertEquals(20, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)105;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1758, 1335);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-4), (byte)105}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 45, 84, 84);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-103), 45);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-823.728F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) longArray0, 56, (Object) byte0);
      assertEquals((byte) (-59), object0);
      assertNotNull(object0);
      assertEquals(3, longArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-59), object1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, object1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1);
      intArray0[2] = 5;
      intArray0[3] = (-2144654287);
      intArray0[4] = (int) (short) (-87);
      intArray0[5] = 1537;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-1), 5, (-2144654287), (-87), 1537}, intArray0);
      assertEquals(6, intArray0.length);
      
      Byte byte2 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte2);
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, 83);
      assertEquals((-1), int0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      short[] shortArray0 = new short[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2700));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-82L);
      longArray0[1] = 1178L;
      longArray0[2] = (-1L);
      longArray0[3] = 2250L;
      longArray0[4] = (-1L);
      longArray0[5] = 654L;
      longArray0[6] = (-2427L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-82L), 1178L, (-1L), 2250L, (-1L), 654L, (-2427L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1091));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      int int0 = ArrayUtils.indexOf(charArray0, 'L');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2112);
      shortArray0[1] = (short) (-498);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-498));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2112), (short) (-498)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2112)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) 'L';
      objectArray0[2] = (Object) 'L';
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) 'L';
      objectArray0[7] = (Object) 'L';
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2299.924);
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) (short) (-2112);
      doubleArray0[4] = (double) (byte) (-109);
      doubleArray0[5] = (double) 'L';
      doubleArray0[6] = (double) (byte) (-109);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-109.0), (int) (short) (-2112), 3555.0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-2299.924), 76.0, 76.0, (-2112.0), (-109.0), 76.0, (-109.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byte byte5 = (byte) (-57);
      Byte byte6 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte4;
      byteArray0[1] = byte1;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[2] = byte7;
      byteArray0[3] = byte4;
      byteArray0[4] = byte6;
      byteArray0[5] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)48);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)48, (byte)0, (byte) (-68), (byte) (-57), (byte)48}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1526.6921702033328);
      doubleArray0[1] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2127.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1526.6921702033328), 0.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) byte5, (int) byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte5);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.swap(booleanArray1, (-2940), (-2940), 1666);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byte byte5 = (byte) (-57);
      Byte byte6 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte4;
      byteArray0[1] = byte1;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[2] = byte7;
      byteArray0[3] = byte4;
      byteArray0[4] = byte6;
      byteArray0[5] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)48);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)48, (byte)0, (byte) (-68), (byte) (-57), (byte)48}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1526.6921702033328);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2127.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1526.6921702033328), 0.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) byte5, (int) byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte5);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.shift(intArray0, (-3373), (-318), 1333);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-539);
      shortArray0[1] = (short)740;
      shortArray0[2] = (short)575;
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-539), (short)740, (short)575, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-539), (short)740, (short)575, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Short[] shortArray2 = new Short[6];
      shortArray2[0] = (Short) (short)740;
      shortArray2[1] = (Short) (short) (-539);
      shortArray2[2] = (Short) (short) (-1);
      shortArray2[3] = (Short) (short) (-1);
      Short short0 = new Short((short) (-539));
      assertEquals((short) (-539), (short)short0);
      assertNotNull(short0);
      
      shortArray2[4] = short0;
      shortArray2[5] = (Short) (short) (-539);
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertSame(shortArray3, shortArray2);
      assertSame(shortArray2, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(6, shortArray3.length);
      assertEquals(6, shortArray2.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'r';
      charArray0[2] = 'E';
      charArray0[3] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, 'r');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'O', 'r', 'E', '@'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '0';
      longArray0[1] = 0L;
      longArray0[2] = (long) '0';
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 48L);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {48L, 0L, 48L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1571;
      shortArray0[1] = (short) (-15131);
      shortArray0[2] = (short) (-85);
      ArrayUtils.swap(shortArray0, 1406, (int) (short) (-85), (int) (short) (-85));
      assertArrayEquals(new short[] {(short)1571, (short) (-15131), (short) (-85)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2013;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'X', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 2841, 1754, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)2013, (short)723}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.indexOf(charArray0, '+');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '*', (-2147079584));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1103));
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[1] = 2;
      intArray0[3] = (int) (short)2013;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.shift(shortArray1, 0, (int) (short)2013, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      ArrayUtils.swap(intArray0, 2, 898, 2013);
      assertArrayEquals(new int[] {0, 2, 0, 2013, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-3927);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 2013;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-3927.0F), 2.0F, 1.0F, 2013.0F, (-3927.0F), 2.0F, 1.0F, 2013.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-3927.0F), 2.0F, 1.0F, 2013.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) (-265);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-265.0), (-265.0), 0.0, 0.0, (-265.0), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(3, intArray0.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 150);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[22];
      charArray0[0] = '#';
      charArray0[1] = 'R';
      charArray0[2] = 'u';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(22, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(22, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-847.0F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-847.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 150);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 150}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[3] = (-2707.9394885113284);
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1278);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)53;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1278), (short)0, (short)0, (short)0, (short)53}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1278), (short)0, (short)0, (short)0, (short)53, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)53;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)53;
      intArray0[3] = (int) 'V';
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) 'V';
      intArray0[6] = (int) '~';
      intArray0[7] = (int) (short)53;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {53, 0, 53, 86, 0, 86, 126, 53}, intArray0);
      assertArrayEquals(new int[] {53, 0, 53, 86, 0, 86, 126, 53}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {53, 0, 53, 86, 0, 86, 126, 53}, intArray0);
      assertArrayEquals(new int[] {53, 0, 53, 86, 0, 86, 126, 53}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 53.0F, 53.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 53.0F, 53.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-8.042455898225004);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1275L);
      longArray0[1] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      ArrayUtils.shift((short[]) null, (int) (short) (-2347));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {103.1893948, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ArrayUtils.swap(charArray0, 1, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-5301L);
      longArray0[1] = (-5301L);
      longArray0[2] = (long) 'x';
      longArray0[3] = (-1L);
      longArray0[4] = (-5301L);
      longArray0[5] = (long) 'x';
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 'x';
      longArray0[8] = (long) 45;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 120L);
      assertEquals(7, int0);
      assertArrayEquals(new long[] {(-5301L), (-5301L), 120L, (-1L), (-5301L), 120L, 1L, 120L, 45L}, longArray0);
      assertEquals(9, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5301L), (-5301L), 120L, (-1L), (-5301L), 120L, 1L, 120L, 45L}, longArray0);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-1498.0F));
      assertNull(floatArray0);
      
      ArrayUtils.reverse(longArray0, 7, 7);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-5301L), (-5301L), 120L, (-1L), (-5301L), 120L, 1L, 120L, 45L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 98, 14, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 98;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 98);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 14;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {14}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {14}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-265));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-265);
      doubleArray0[1] = (double) (-265);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1055.4309);
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new double[] {(-265.0), 1.0, 1.0, (-1055.4309), (-265.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 997;
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) 997;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 5);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 1L, 1L, (-1L), 0L, 997L, (-1L), 997L}, longArray0);
      assertEquals(8, longArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.get((-265), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -265
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)444;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 444.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2813L), (-1420));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.get(5, (-4047));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -4047
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 789.6978737308317;
      doubleArray0[1] = (-1678.3);
      doubleArray0[2] = 150.9533;
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = 778.0;
      doubleArray0[6] = (-2013.4449561203);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-702.83604152723);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-3029));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {789.6978737308317, (-1678.3), 150.9533, 0.1, 0.7, 778.0, (-2013.4449561203), 0.0, (-702.83604152723)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (-3095), (-2025), (-825));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      Byte byte0 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)30, object0);
      assertNotNull(object0);
      
      ArrayUtils.shift((char[]) null, (int) (byte)30);
      short[] shortArray0 = new short[2];
      short short0 = (short)54;
      shortArray0[0] = (short)54;
      shortArray0[1] = (short) (byte)30;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)54, 117);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)54, (short)30}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (short)54);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        LongBuffer.allocate((-1713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-364));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.shift(charArray0, (-248));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(9, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 4, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-1633), 1766, 12);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2890.594);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1633.0), 2890.594}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1633.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 2, (-3810));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      intArray0[1] = 4;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {121, 4}, intArray0);
      assertArrayEquals(new int[] {121, 4, 121, 4}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.subarray((Byte[]) null, 121, (-3810));
      assertNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-28);
      byteArray3[1] = (byte) (-78);
      byteArray3[2] = (byte) (-28);
      byteArray3[3] = (byte) (-28);
      byteArray3[4] = (byte) (-28);
      byteArray3[5] = (byte) (-28);
      byteArray3[6] = (byte) (-28);
      byteArray3[7] = (byte) (-28);
      byteArray3[8] = (byte) (-28);
      byte[] byteArray4 = ArrayUtils.clone(byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-78), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28)}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-28), (byte) (-78), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28), (byte) (-28)}, byteArray3);
      assertEquals(9, byteArray4.length);
      assertEquals(9, byteArray3.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {121, 4}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-420);
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 58.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, 0.0, 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-420.0), 58.0, 58.0, 0.0, 58.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift((long[]) null, (-5481), (-420), (-637));
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(booleanArray0, (-61));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-61);
      doubleArray0[1] = (double) (-61);
      doubleArray0[2] = (double) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-61.0), (-61), (-61.0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-61.0), (-61.0), (-61.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 98, 14, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = (-2265.527217828046);
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3061.645287728214, 98, Double.NaN);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {14.0, 98.0, (-2265.527217828046), 14.0, 98.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3681.207603, (-1), 1724.952);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {14.0, 98.0, (-2265.527217828046), 14.0, 98.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-16);
      Byte byte1 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte2, 14);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = byte0;
      byteArray3[1] = (byte) (-110);
      byteArray3[2] = (byte)2;
      byteArray3[3] = byte2;
      byteArray3[4] = (byte)2;
      byteArray3[5] = (byte)2;
      byteArray3[6] = (byte) (-16);
      byteArray3[7] = (byte) (-110);
      byte[] byteArray4 = ArrayUtils.clone(byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-110), (byte)2, (byte)2, (byte)2, (byte)2, (byte) (-16), (byte) (-110)}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-110), (byte)2, (byte)2, (byte)2, (byte)2, (byte) (-16), (byte) (-110)}, byteArray3);
      assertEquals(8, byteArray4.length);
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'L';
      charArray0[6] = '/';
      charArray0[7] = '';
      charArray0[8] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', 'L', 'S', 'l', 'D', 'L', '/', '', '_'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) '/';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) '_';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray0);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'D');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'0', 'L', 'S', 'l', 'D', 'L', '/', '', '_'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.contains(charArray0, '(');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)111);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2167);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'L');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)721;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)2107;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (short)2107;
      objectArray0[6] = (Object) (short)0;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short)2107;
      objectArray1[1] = objectArray0[6];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotNull(object2);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'L');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, objectArray0[1], 90);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, objectArray1.length);
      assertEquals(8, objectArray0.length);
      
      int int2 = ArrayUtils.indexOf(charArray0, 'L', (-1646));
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte)117, (byte) (-123), (byte) (-45)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte)117, (byte) (-123), (byte) (-45)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      shortArray0[1] = (short)2985;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short) (-1);
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.insert((int)  (-31), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '4';
      charArray0[2] = '5';
      charArray0[3] = '5';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', '4', '5', '5'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert(2145620626, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      ArrayUtils.shift((int[]) null, (-912), (-912), 723);
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)575;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)740;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)740;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)575, (short) (-1), (short)740, (short) (-1), (short)740, (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)575, (short) (-1), (short)740, (short) (-1), (short)740, (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)28);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)28}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift((int[]) null, 8, (int) (byte)28, 8);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray0[0] = true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 2565.3777748, (-772));
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 113.71441F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 45, 84, 84);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 84);
      assertEquals(0, int0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-39.61920928955078));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2167;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2167, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte1 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = object0;
      Object object3 = ArrayUtils.get(objectArray0, 767, (Object) byte0);
      assertEquals((byte)0, object3);
      assertFalse(object3.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(object3);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = object3;
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertFalse(byte2.equals((Object)object3));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte2, 0);
      assertEquals((-1), int0);
      assertFalse(byte2.equals((Object)object3));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(6, objectArray1.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals((byte)53, object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals(4, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[3] = (-2707.9394885113284);
      doubleArray0[4] = (-1055.4309);
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-2144654287);
      intArray0[2] = (-1);
      intArray0[3] = 5;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2, (-2144654287), (-1), 5}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1055.4309);
      objectArray0[1] = (Object) (-2707.9394885113284);
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) (-2144654287);
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-1055.4309);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], 127);
      assertEquals(2, int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)127;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-100));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)127, (byte)5, (byte) (-70), (byte)127, (byte)127, (byte) (-70), (byte)127}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)127;
      Byte byte0 = ArrayUtils.get(byteArray1, (int)  (-124));
      assertNull(byte0);
      assertEquals(1, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)127;
      objectArray0[1] = (Object) (byte)127;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], Integer.MAX_VALUE);
      assertEquals(3, int0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-757L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, (-757L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1076;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1076}, intArray0);
      assertArrayEquals(new int[] {1076, 1076}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1278.25F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3124.9228845159646, 3124.9228845159646);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1000);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = (-839);
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1000), 1, 1, 1, (-839), 1, 1}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 1, (long) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(7, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-84);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-84), (int) (byte) (-56));
      assertEquals("{8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)98, (byte)115, (byte)18, (byte)76, (byte) (-98), (byte)0, (byte) (-84)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (byte)115;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)115;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "java.lang.Byte");
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1542.090316324);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1643.84137307);
      ArrayUtils.swap(doubleArray0, 388, 2);
      assertArrayEquals(new double[] {0.0, (-1542.090316324), 0.0, (-1643.84137307)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "w;8EEyr;2");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 321);
      assertNull(object2);
      assertEquals(5, objectArray0.length);
      
      objectArray0[2] = null;
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = ArrayUtils.get(objectArray0, 847, object3);
      assertSame(object3, object4);
      assertSame(object4, object3);
      assertNotNull(object4);
      assertEquals(5, objectArray0.length);
      
      objectArray0[3] = object4;
      Byte byte0 = new Byte((byte) (-119));
      assertEquals((byte) (-119), (byte)byte0);
      assertNotNull(byte0);
      
      Object object5 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-119), object5);
      assertNotNull(object5);
      
      objectArray0[4] = object5;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "{`j$I");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'k';
      charArray0[6] = '/';
      charArray0[7] = '';
      charArray0[8] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', 'L', 'S', 'l', 'D', 'k', '/', '', '_'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) '/';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) '_';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray0);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "The String did not match either specified value");
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "cOCI");
      assertNotNull(stringArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-928), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -928, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (-2045));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2045);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 2565.3777748);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-772));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray0[0] = true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-328);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, (int) (short) (-328));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-328), (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.insert((int) (short)2, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("9!ri");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-555));
      assertSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-555);
      longArray0[1] = (long) (-555);
      longArray0[2] = 2568L;
      longArray0[3] = (long) (-555);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3139;
      shortArray0[1] = (short) (-1256);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3139, (short) (-1256)}, shortArray0);
      assertArrayEquals(new short[] {(short)3139, (short) (-1256)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1542.090316324));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1542.090316324), 0.0, 0.0, (-1542.090316324)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2145, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 2145);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '\"';
      charArray0[2] = '(';
      charArray0[3] = '[';
      charArray0[4] = 'R';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'2', '\"', '(', '[', 'R'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift((byte[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 6);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 11;
      int[] intArray0 = new int[6];
      intArray0[0] = (-248);
      intArray0[1] = (-2147117328);
      intArray0[2] = (-2147117328);
      intArray0[3] = (-248);
      intArray0[4] = 11;
      intArray0[5] = (-2147117328);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2147117328));
      assertEquals(5, int0);
      assertArrayEquals(new int[] {(-248), (-2147117328), (-2147117328), (-248), 11, (-2147117328)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2331);
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 1);
      assertArrayEquals(new float[] {(-2331.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      floatArray0[0] = (-2331.0F);
      doubleArray0[3] = (double) (-2331.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2331.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@p?Z\"2P=E";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, (-1643));
      assertEquals((-1), int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ArrayUtils.shift(byteArray0, 118);
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-27));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-27);
      intArray0[1] = (int) (byte) (-27);
      intArray0[2] = (int) (byte) (-27);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-547);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -547, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = ')';
      charArray0[2] = '!';
      ArrayUtils.swap(charArray0, (-1), 2013265920, 2013265920);
      assertArrayEquals(new char[] {'Y', ')', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Character character0 = new Character('\\');
      assertEquals('\\', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('\u0081');
      assertEquals('\u0081', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character1;
      characterArray0[1] = (Character) 'Y';
      characterArray0[2] = character0;
      characterArray0[3] = (Character) 'Y';
      characterArray0[4] = (Character) '!';
      characterArray0[5] = (Character) '!';
      characterArray0[6] = (Character) ')';
      characterArray0[7] = (Character) '!';
      characterArray0[8] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0081', 'Y', '\\', 'Y', '!', '!', ')', '!', '\u0081'}, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, characterArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 762.2408192;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {762.2408192}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '';
      charArray0[2] = 'H';
      charArray0[3] = 'J';
      charArray0[4] = '!';
      charArray0[5] = '\\';
      charArray0[6] = 'Y';
      ArrayUtils.swap(charArray0, (int) '', 749, 2013265920);
      assertArrayEquals(new char[] {',', '', 'H', 'J', '!', '\\', 'Y'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'H';
      characterArray0[1] = (Character) 'H';
      characterArray0[2] = (Character) '\\';
      characterArray0[3] = (Character) '\\';
      characterArray0[4] = (Character) '!';
      Character character0 = new Character('g');
      assertEquals('g', (char)character0);
      assertNotNull(character0);
      
      characterArray0[5] = character0;
      characterArray0[6] = (Character) 'J';
      Character character1 = Character.valueOf('p');
      assertEquals('p', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[7] = character1;
      characterArray0[8] = (Character) '\\';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'H', 'H', '\\', '\\', '!', 'g', 'J', 'p', '\\'}, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, characterArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '';
      longArray0[1] = (long) 2013265920;
      longArray0[2] = (long) (char)character0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {127L, 2013265920L, 103L}, longArray0);
      assertArrayEquals(new long[] {127L, 2013265920L, 103L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1469);
      intArray0[1] = (-293);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertSame(object2, object3);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertNotNull(object3);
      
      Byte byte0 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-905.146896);
      doubleArray0[1] = (double) (-1469);
      doubleArray0[2] = (double) (-1469);
      doubleArray0[3] = (double) (-1469);
      doubleArray0[4] = (-301.983074854);
      doubleArray0[5] = (double) (-1469);
      doubleArray0[6] = (double) (-1469);
      doubleArray0[7] = (double) (-293);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 810, (-1469.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 810, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-486.957165), (-1643.84137307));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'C', (int) (byte) (-44));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.reverse((int[]) null, 160, (-1));
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 1813.3776);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.valueOf(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      Boolean boolean8 = Boolean.valueOf(true);
      assertTrue(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean3));
      assertNotNull(boolean8);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char char0 = 'h';
      Character character0 = Character.valueOf('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) char0;
      intArray0[4] = (int) char0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {104, 104, 104, 104, 104}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(15, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0, 39.5326576651);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)67;
      intArray0[1] = (int) (short)512;
      intArray0[2] = (int) (byte)67;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {67, 512, 67}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 35);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 35;
      doubleArray0[1] = 1156.029942069781;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 35;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {35.0, 1156.029942069781}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {35.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1156.029942069781}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1219);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1219L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1219);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1219.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1219);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (short) (-1219);
      intArray0[4] = (int) (short) (-1219);
      intArray0[5] = (int) (short) (-1219);
      intArray0[6] = (-372);
      boolean boolean2 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2030L);
      longArray0[1] = 1L;
      longArray0[2] = 470L;
      longArray0[3] = (-1844L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2030L), 1L, 470L, (-1844L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 470L;
      doubleArray0[1] = (double) 470L;
      doubleArray0[2] = (double) (-2030L);
      doubleArray0[3] = (-850.75924985571);
      doubleArray0[4] = (double) (-2030L);
      doubleArray0[5] = 3258.25;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (double) 470L;
      doubleArray1[2] = (double) 470L;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2030.0), (-850.75924985571), (-2030.0), 3258.25}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {470.0, 470.0, (-2030.0), (-850.75924985571), (-2030.0), 3258.25}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 470.0, 470.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-372);
      ArrayUtils.reverse(intArray0, 1, (-372));
      assertArrayEquals(new int[] {(-372)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-372)}, intArray0);
      assertArrayEquals(new int[] {(-372), 1}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, (-411));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      char char0 = 'J';
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = (Character) '_';
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = (Character) '_';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', 'J', '_', 'J', 'J', '_'}, charArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-2144654287);
      intArray0[2] = (-1);
      intArray0[3] = 5;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {2, (-2144654287), (-1), 5}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) byte0;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 123, (-644));
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(68.0);
      assertEquals(68.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals(68.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) floatArray0[1];
      floatArray2[1] = (float) floatArray0[0];
      floatArray2[2] = (float) 'q';
      floatArray2[3] = (float) floatArray0[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray2, (float) floatArray0[0], (-448));
      assertEquals((-1), int0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {68.0F, 68.0F, 113.0F, 68.0F}, floatArray2, 0.01F);
      assertEquals(4, floatArray2.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)81, (-45));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)81, (byte)81}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[6] = '/';
      charArray0[7] = '';
      charArray0[8] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', 'L', 'S', 'l', 'D', '\u0000', '/', '', '_'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) '';
      charArray0[0] = '/';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'S';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2145461534), 95);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 89;
      intArray0[5] = 8;
      intArray0[6] = 2620;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 0, 1, Integer.MAX_VALUE, 89, 8, 2620}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2620, (-556));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-5), (byte) (-101), (byte)107, (byte) (-54), (byte) (-77), (byte)4, (byte) (-1)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      short[] shortArray0 = new short[9];
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '0';
      charArray0[3] = 'L';
      charArray0[4] = 'k';
      charArray0[5] = '_';
      charArray0[6] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'l', 'l', '0', 'L', 'k', '_', 'k'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'k';
      intArray0[1] = (-2705);
      intArray0[2] = (int) 'k';
      intArray0[3] = (int) '0';
      intArray0[4] = (int) 'k';
      intArray0[5] = (int) '';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {107, (-2705), 107, 48, 107, 127}, intArray1);
      assertArrayEquals(new int[] {107, (-2705), 107, 48, 107, 127}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 506.1, (-22.691812517664278));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2374.020657), (-2374.020657));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-986);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-4306);
      shortArray0[3] = (short)444;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-986), (short)0, (short) (-4306), (short)444}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) (short) (-986);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-34));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      int int0 = 1451;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, 1451);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)127;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) (short)127;
      longArray0[4] = (long) 1451;
      longArray0[5] = (long) (short)127;
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {127L, 0L, 4L, 127L, 1451L, 127L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 4, 'd');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      intArray0[1] = (-1375);
      intArray0[2] = (-955);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1375), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {57, (-1375), (-955), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = '7';
      charArray0[2] = '2';
      charArray0[3] = '8';
      charArray0[4] = 'Q';
      charArray0[5] = ' ';
      charArray0[6] = 'D';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', 'H', '7', '2', '8', 'Q', ' ', 'D'}, charArray1);
      assertArrayEquals(new char[] {'H', '7', '2', '8', 'Q', ' ', 'D'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte) (-109));
      assertEquals((byte) (-109), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-109);
      intArray0[1] = (int) (byte) (-109);
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-109), (-109), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-3208.7246239273), 3061.645287728214);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 0, (-2825.08985));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((boolean[]) null, 3400, 3400, 1);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)38, 0.0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 16, (-1), (-84));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2368;
      intArray0[5] = 545;
      intArray0[6] = 0;
      intArray0[7] = (-955);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-911));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 2368, 545, 0, (-955)}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.insert(1, longArray0, longArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5600.8745F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-955);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 545;
      floatArray0[6] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2368, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3055.4383);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3055.4383), 56);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-3055.4383), 0.0, (-3055.4383)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)111, 2147018673);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte3;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)48);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)48, (byte)0, (byte) (-68), (byte) (-57), (byte)48}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1526.6921702033328);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2127.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1526.6921702033328), 0.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-230L);
      doubleArray0[0] = (double) (-230L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 125.0, 4);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-230.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.swap((boolean[]) null, (int) (short) (-1), (-1089));
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)0;
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-1);
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[4] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte6;
      doubleArray0[1] = (double) byte4;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(5, int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1.0, Double.NaN, 1.0, (-1.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (-87));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Short";
      stringArray0[1] = "NQ==!!t";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (-87);
      intArray0[2] = (int) '#';
      intArray0[3] = (-87);
      intArray0[4] = (int) '#';
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) '#';
      intArray0[7] = (int) 'x';
      intArray0[8] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {35, (-87), 35, (-87), 35, 0, 35, 120, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-4039);
      intArray0[3] = (-4039);
      intArray0[5] = (-4039);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (-3725));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) '0';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (int) '\u0000', object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, (int) (byte) (-111));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      long[] longArray0 = new long[6];
      longArray0[0] = 139L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1345L);
      longArray0[3] = (-2903L);
      longArray0[4] = (-5301L);
      longArray0[5] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {139L, (-1L), (-1345L), (-2903L), (-5301L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-3055.4383);
      objectArray0[1] = (Object) (-5301L);
      objectArray0[2] = (Object) 139L;
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) 139L;
      objectArray0[5] = (Object) (-2903L);
      Byte byte0 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (int) (byte) (-34));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[3] = (-2707.9394885113284);
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1278);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)53;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1278), (short)0, (short)0, (short)0, (short)53}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1278), (short)0, (short)0, (short)0, (short)53, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)53;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)53;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-84.3), (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {103.1893948, (-1.0), (-84.3), (-2707.9394885113284), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1073741823), (int) (short)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1639}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap(charArray0, (-3317), (-1073741823), 115);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) (-3317);
      doubleArray0[5] = (double) (-1073741823);
      doubleArray0[6] = (double) (-1073741823);
      doubleArray0[7] = (double) 'S';
      doubleArray0[8] = (double) 'S';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 115, 4, 2253.45453);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {83.0, 115.0, 0.0, 83.0, (-3317.0), (-1.073741823E9), (-1.073741823E9), 83.0, 83.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.reverse(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.swap(booleanArray0, 3897, 121, 713);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((-2884), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, 55);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-801));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, (-1109), 114, 1510);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      intArray0[4] = 0;
      intArray0[5] = (-4064);
      ArrayUtils.shift(intArray0, (-791), 2146824684, (-4064));
      assertArrayEquals(new int[] {(-4064), (-4064), 0, (-4064), 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4064, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 84);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 84;
      longArray0[1] = (long) 84;
      ArrayUtils.swap(longArray0, 84, 1378, 84);
      assertArrayEquals(new long[] {84L, 84L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) longArray0, 56, (Object) byte0);
      assertEquals((byte) (-59), object0);
      assertNotNull(object0);
      assertEquals(3, longArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)object0));
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-59), object1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, object1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-87);
      shortArray0[2] = (short) (byte) (-74);
      shortArray0[3] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short) (-87), (short) (-74), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-87), (short) (-74), (short) (-1), (short)1, (short) (-87), (short) (-74), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (short) (-74);
      longArray1[1] = (long) (byte) (-74);
      longArray1[2] = (long) (short) (-1);
      longArray1[3] = (long) (short) (-87);
      longArray1[4] = (long) (short)1;
      longArray1[5] = (long) (short) (-87);
      ArrayUtils.swap(longArray1, Integer.MAX_VALUE, (int) (short)1, 0);
      assertArrayEquals(new long[] {(-74L), (-74L), (-1L), (-87L), 1L, (-87L)}, longArray1);
      assertEquals(6, longArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (byte) (-74);
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 862L;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = 46.501F;
      floatArray0[7] = (float) 1L;
      floatArray0[8] = (float) (long)longArray0[0];
      ArrayUtils.reverse(floatArray0, (int) (short) (-87), 56);
      assertArrayEquals(new float[] {862.0F, 1.0F, 46.501F, (-1.0F), 1.0F, 862.0F, 2.14748365E9F, (-74.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = '_';
      charArray0[2] = 'M';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', '_', 'M'}, charArray0);
      assertArrayEquals(new char[] {'j', '_', 'M'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1346), (int) (short)127, (-9));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) (short) (-1219);
      objectArray0[2] = (Object) (short) (-1219);
      objectArray0[3] = (Object) (short) (-1219);
      objectArray0[4] = (Object) (short) (-1219);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("n(xY)?4Z(Z^?7MvH");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1219);
      longArray0[1] = 3294L;
      longArray0[2] = (long) (short) (-1219);
      longArray0[3] = (long) (-1);
      ArrayUtils.shift(longArray0, 1069);
      assertArrayEquals(new long[] {(-1L), (-1219L), 3294L, (-1219L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (int) (short) (-606), (int) (short) (-606), 20);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      charArray0[7] = '0';
      ArrayUtils.shift((long[]) null, (-571), Integer.MAX_VALUE, 3029);
      ArrayUtils.shift((long[]) null, (-248));
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte2 = new Byte((byte)69);
      assertEquals((byte)69, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (byte)117);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {117L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 567.0;
      doubleArray0[0] = 3077.85000943771;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1715.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1664.7607130020065;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3077.85000943771, 0.0, 0.0, 1715.0, 0.0, 0.0, 1664.7607130020065}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3077.85000943771, 0.0, 0.0, 1715.0, 0.0, 0.0, 1664.7607130020065, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2357;
      shortArray0[1] = (short) (-2112);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2357, (short) (-2112)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-2112);
      longArray0[1] = 1L;
      longArray0[2] = 1310L;
      longArray0[3] = (long) (short) (-2112);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (short)2357;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {(-2112L), 1L, 1310L, (-2112L), 0L, 0L, 0L, 0L, 2357L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1346), (int) (short)127, 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      ArrayUtils.shift(longArray0, 790);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Short short0 = new Short((short)160);
      assertEquals((short)160, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse(shortArray1, (-5490), (-5490));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1872;
      intArray0[1] = (-1455);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1455), 1872}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1455), 1872}, intArray0);
      assertArrayEquals(new int[] {(-1455), 1872, (-1455), 1872}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[2];
      int int0 = (-1469);
      intArray0[0] = (-1469);
      intArray0[1] = (-293);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1203);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1203)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1219)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-1219);
      objectArray0[1] = (Object) (short) (-1219);
      objectArray0[2] = (Object) (short) (-1219);
      objectArray0[3] = (Object) (short) (-1219);
      objectArray0[4] = (Object) (short) (-1219);
      objectArray0[5] = (Object) (short) (-1219);
      Byte byte0 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1219);
      intArray0[1] = (int) (short) (-1219);
      intArray0[2] = (int) (byte)98;
      intArray0[3] = (int) (byte)98;
      intArray0[4] = (int) (short) (-1219);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte) (-48));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.length());
      assertEquals("{0, 6}", bitSet1.toString());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte) (-48), (byte) (-48), (byte)115, (byte) (-84), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte) (-48), (byte) (-48), (byte)115, (byte) (-84), (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-48);
      longArray0[2] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte) (-48));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -48, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '-';
      charArray0[2] = 'W';
      charArray0[3] = 'S';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, 1058);
      assertArrayEquals(new char[] {'X', 'S', '\u0000', '.', '-'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-120), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) 1058;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) '-';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {45.0F, 83.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-84);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-84), (int) (byte) (-56));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals("{8}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-48), (byte)98, (byte)115, (byte)18, (byte)76, (byte) (-98), (byte)0, (byte) (-84)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)20);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) 20, 0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ArrayUtils.shift(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Float float0 = new Float((double) (byte)46);
      assertEquals(46.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1861.0F));
      assertEquals((-1861.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)58;
      byteArray1[1] = (Byte) (byte)58;
      byteArray1[2] = (Byte) (byte)58;
      byteArray1[3] = (Byte) (byte)58;
      byteArray1[4] = (Byte) (byte)58;
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-2499), (int) 58);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = new Byte((byte)42);
      assertEquals((byte)42, int0);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2412, (int) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-106));
      assertEquals((byte) (-106), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte6);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[6] = byte4;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-318), 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-168.7);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 139;
      longArray0[1] = (long) 139;
      longArray0[2] = (long) 139;
      longArray0[3] = (long) 139;
      longArray0[4] = (long) 139;
      longArray0[5] = (long) 139;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 139);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {139L, 139L, 139L, 139L, 139L, 139L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-35);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1542.090316324), (-1643.84137307), 1.5, (-1542.090316324), (-1643.84137307), 1.5}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)101;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)101, (byte)65, (byte)65, (byte)0, (byte)101}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)101, (byte)65, (byte)65, (byte)0, (byte)101}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      short[] shortArray0 = new short[14];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(14, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[3] = (-2707.9394885113284);
      doubleArray0[4] = (-1055.4309);
      doubleArray0[5] = 0.0;
      doubleArray0[0] = (-37.175);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-2144654287), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      ArrayUtils.shift(booleanArray0, 2116115801);
      assertEquals(11, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2116115801;
      longArray0[1] = (long) 2116115801;
      longArray0[2] = (long) 2116115801;
      ArrayUtils.swap(longArray0, (-1292), 2116115801, 2116115801);
      assertArrayEquals(new long[] {2116115801L, 2116115801L, 2116115801L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-15L));
      assertEquals((-15L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) longArray0, 56, (Object) byte0);
      assertEquals((byte) (-59), object0);
      assertNotNull(object0);
      assertEquals(3, longArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-59);
      intArray0[2] = (int) (byte) (-59);
      intArray0[3] = (-1);
      intArray0[4] = 56;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-59), 0, (-59), (-1), 56}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-59), 45);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-59), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      byte byte0 = (byte)74;
      Byte byte1 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Byte byte2 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (byte)74, 778, (int) (byte)74);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 778;
      floatArray0[1] = (float) 's';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 's';
      floatArray0[4] = (float) 's';
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) byte0;
      ArrayUtils.reverse(floatArray0, (int) byte0, 1871);
      assertArrayEquals(new float[] {778.0F, 115.0F, 0.0F, 115.0F, 115.0F, 74.0F, 74.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Byte byte4 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      String string0 = ArrayUtils.toString((Object) byte5);
      assertEquals("0", string0);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      long[] longArray0 = new long[9];
      ArrayUtils.shift(longArray0, (-1387), (int) (short)127, (int) (short)127);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1409;
      intArray0[2] = (-1341);
      intArray0[3] = (-1455);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1)}, intArray0);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1), 1409, (-1341), (-1455), (-1)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1)}, intArray0);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1), 1409, (-1341), (-1455), (-1)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) 1409;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) (-1455);
      objectArray0[4] = (Object) (-1341);
      objectArray0[5] = (Object) (-1341);
      Object object0 = ArrayUtils.get(objectArray0, (-1), objectArray0[5]);
      assertEquals((-1341), object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[6] = object0;
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-74);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-74)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-74), (short) (-74)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1341);
      longArray0[1] = (long) 1409;
      longArray0[2] = (long) (-1341);
      longArray0[3] = (-641L);
      longArray0[4] = (long) (short) (-74);
      longArray0[5] = (long) (-1455);
      longArray0[6] = (long) 1409;
      longArray0[7] = (long) (-1341);
      ArrayUtils.swap(longArray0, (-1), 1409, (int) (short) (-74));
      assertArrayEquals(new long[] {(-1341L), 1409L, (-1341L), (-641L), (-74L), (-1455L), 1409L, (-1341L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      short short0 = (short)127;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      try { 
        Byte.decode("3x)p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3x)p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Byte byte0 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 763.6, 1, (double) (byte)55);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-87), (byte) (-1), (byte) (-87)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-87)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-265), 0, 1.0);
      assertEquals((-1), int0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 2146843754);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2331);
      floatArray0[2] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 1);
      assertArrayEquals(new float[] {(-2331.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      floatArray0[0] = (-2331.0F);
      doubleArray0[3] = (double) (-2331.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2331.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2331.0), 0.0, (-2331.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2331);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2331);
      longArray0[3] = (long) (-2331);
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-757L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2331L), 1L, (-2331L), (-2331L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)444, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)444;
      longArray0[3] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L, 444L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1643));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2167);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) null);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2107;
      intArray0[3] = (-2833);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (int) (short)721;
      intArray0[7] = (int) (short)2107;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-242));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 2107, (-2833), 0, 0, 721, 2107}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '%');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('T');
      assertEquals('T', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-711);
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1481);
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, (-4064), (-4064), 0);
      assertArrayEquals(new int[] {0, (-1), (-1481), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte2);
      assertTrue(boolean0);
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 's';
      doubleArray0[1] = (-905.146896);
      doubleArray0[2] = (double) 's';
      doubleArray0[3] = (double) '(';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)0, 194.8797);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {115.0, (-905.146896), 115.0, 40.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {194.8797, 115.0, (-905.146896), 115.0, 40.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte2, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2, 152.02775617);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2167);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'L');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)721;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)2107;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (short)2107;
      objectArray0[6] = (Object) (short)0;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short)2107;
      objectArray1[1] = objectArray0[6];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotNull(object2);
      
      objectArray1[2] = object2;
      objectArray1[3] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameType(object2, (short)0);
      assertFalse(boolean0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)2107;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)1639;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-905.146896);
      doubleArray0[7] = (double) (short)2107;
      doubleArray0[8] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (short)0, 194.8797);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {194.8797, 2107.0, 0.0, 1639.0, 1.0, 1.0, 1.0, (-905.146896), 2107.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2107.0, 0.0, 1639.0, 1.0, 1.0, 1.0, (-905.146896), 2107.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-41), object1);
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '~';
      charArray0[2] = 'V';
      charArray0[3] = '~';
      charArray0[4] = 'V';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'V', '~', 'V', '~', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-1278);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)53, (short) (-1278)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)53, (short) (-1278), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 567.0;
      doubleArray0[1] = 3077.85000943771;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {95, 0}, intArray0);
      assertArrayEquals(new int[] {95, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'q');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'k';
      charArray0[6] = '/';
      charArray0[7] = '';
      charArray0[8] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', 'L', 'S', 'l', 'D', 'k', '/', '', '_'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) '/';
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {107.0F, 68.0F, 68.0F, 76.0F, 68.0F, 47.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) '_';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray0);
      assertArrayEquals(new int[] {95, 127, 83, 95}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3477.857;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-762.2408192));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3477.857, (-1.0), (-84.3), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, Double.NaN);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3477.857, (-1.0), (-84.3), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 3477.857, (-1.0), (-84.3), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-87);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[2] = (long) 45;
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2347);
      shortArray0[1] = (short) (-2347);
      shortArray0[2] = (short) (-2347);
      shortArray0[3] = (short) (-2347);
      ArrayUtils.shift(shortArray0, (int) (short) (-2347));
      assertArrayEquals(new short[] {(short) (-2347), (short) (-2347), (short) (-2347), (short) (-2347)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 879.5356066);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {879.5356066, 1120.0, 433.757764, 1120.0, 0.0, 879.5356066}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1068.70677), (-1068.70677));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 428);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {428}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 997;
      intArray0[4] = 997;
      intArray0[5] = 997;
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1, 997, 0, 997, 997}, intArray0);
      assertArrayEquals(new int[] {1, 1, 997, 0, 997, 997, 1}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) 997);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1910.98);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1910.98, (-1678.3117), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(5, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 997, 2644, 0.0);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1678.3117), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, 3759);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1996.4989231133188);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 460.011;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.5;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift((short[]) null, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-105);
      shortArray0[1] = (short)2985;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-411);
      shortArray0[5] = (short)423;
      shortArray0[6] = (short) (-2861);
      shortArray0[7] = (short)1549;
      shortArray0[8] = (short)36;
      ArrayUtils.shift(shortArray0, (int) (short)36);
      assertArrayEquals(new short[] {(short) (-105), (short)2985, (short)2309, (short) (-1), (short) (-411), (short)423, (short) (-2861), (short)1549, (short)36}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-2861);
      intArray0[2] = (int) (short)423;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1), (-2861), 423}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-152);
      intArray0[1] = 76;
      intArray0[2] = 1190;
      intArray0[3] = (int) (byte) (-61);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 1069;
      intArray0[6] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-152), 76, 1190, (-61), 0, 1069, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 289;
      intArray0[1] = (-1272);
      intArray0[2] = 99;
      intArray0[3] = (-2898);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[7] = 0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 949;
      intArray1[1] = (-345);
      intArray1[2] = 289;
      intArray1[3] = 0;
      intArray1[4] = (-345);
      intArray1[5] = (-345);
      intArray1[6] = (-345);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {289, (-1272), 99, (-2898), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {949, (-345), 289, 0, (-345), (-345), (-345)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 289;
      intArray0[1] = (-1272);
      intArray0[2] = 99;
      intArray0[3] = (-2898);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-345);
      intArray0[7] = 0;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 949;
      intArray1[1] = (-345);
      intArray1[2] = 289;
      intArray1[3] = 0;
      intArray1[4] = (-345);
      intArray1[5] = (-345);
      intArray1[6] = (-345);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {289, (-1272), 99, (-2898), 0, 0, (-345), 0}, intArray0);
      assertArrayEquals(new int[] {949, (-345), 289, 0, (-345), (-345), (-345)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1752), 919);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 726, 726);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-23), (-23));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short) (-2374);
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-711), (short) (-2374), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-711), (short) (-2374), (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1639.429F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 3855.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1639.429F, 0.0F, 1.0F, 3855.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1639.429F, 0.0F, 1.0F, 3855.0F, 0.0F, 1639.429F, 0.0F, 1.0F, 3855.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 1009);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)57);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)57, (int) (byte)57);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)91, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 16, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.swap(floatArray0, 82, 82);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, 5);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2331), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty((int[]) null);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      
      short[] shortArray0 = new short[4];
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'J', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, (-2940), Integer.MAX_VALUE, (-2940));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)108;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)350;
      shortArray0[4] = (short)9;
      shortArray0[5] = (short)65;
      shortArray0[6] = (short)2429;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)108, (short)0, (short)0, (short)350, (short)9, (short)65, (short)2429, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)108, (short)0, (short)0, (short)350, (short)9, (short)65, (short)2429, (short) (-1)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      String string0 = "3x)p";
      try { 
        Byte.decode("3x)p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3x)p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints((-26870), (-33));
      assertNotNull(intStream0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(charArray0, (-26870), 15);
      assertArrayEquals(new char[] {'\u0000', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)0, (short)0, (short)127, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'x';
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.reverse(charArray0, (-1), 0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'x';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'x', 'g', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2155);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2617;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127, (short) (-2155), (short)0, (short)2617, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      String string0 = "3x)p";
      try { 
        Byte.decode("3x)p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3x)p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0, (-1935)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 39.5326576651238);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1935);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 0, (double) 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.swap((double[]) null, 58, 9, 1272);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('&');
      assertEquals('&', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('&');
      assertEquals('&', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('%');
      assertEquals('%', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = (int) '%';
      intArray0[2] = 2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {78, 37, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)48, 1);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)48;
      shortArray0[1] = (short) (byte)48;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)48, (short)48}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (-888));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)11;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)11}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (short)2, (int) (short)2, (int) (short)2);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 38}, intArray0);
      assertEquals(2, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[2] = (Object) (byte)38;
      Byte byte0 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)38);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)704);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-61);
      intArray0[1] = (-1796);
      intArray0[2] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-61), (-1796), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)121, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-265);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 997);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-265), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-265), 1, 997}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-265), 1067.3132438);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-265);
      longArray0[1] = (long) (-265);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-265);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), (-265L)}, longArray1);
      assertArrayEquals(new long[] {(-265L), (-265L), 0L, 0L, (-265L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)299;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2347);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)299, (short)0, (short) (-2347), (short)0, (short) (-1), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-168.7);
      ArrayUtils.swap(doubleArray0, 139, 139);
      assertArrayEquals(new double[] {(-168.7)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 139;
      longArray0[1] = (long) 139;
      longArray0[2] = (long) 139;
      longArray0[3] = (long) 139;
      longArray0[4] = (long) 139;
      longArray0[5] = (long) 139;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 139);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {139L, 139L, 139L, 139L, 139L, 139L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byte byte0 = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-35);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte) (-87));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-21), (byte) (-87), (byte)124, (byte) (-35)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {139L, 139L, 139L, 139L, 139L, 139L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-35);
      objectArray0[1] = (Object) 139L;
      Byte byte1 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 853L;
      longArray0[1] = 853L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 146L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {853L, 853L}, longArray0);
      assertArrayEquals(new long[] {146L, 853L, 853L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 853L;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      assertEquals(862L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '!');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'!', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      BitSet bitSet0 = new BitSet((byte)53);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short) (-18));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-405L));
      assertFalse(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-18L), (-955));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(booleanArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {68, 47, 0}, intArray0);
      assertArrayEquals(new int[] {68, 47, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "(5)`S:;#/'");
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2688.34F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '';
      int int0 = ArrayUtils.indexOf(longArray0, (-1015L), (-59));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {127L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-400.95358F));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-3157));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('K', (char)character2);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('\"');
      assertEquals('\"', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) '\"', true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 1330, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1330, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1099L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1), 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (-1346));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-127));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      charArray0[3] = '(';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = (int) '(';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {35, 35, 120, 120, 40}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'#', 'x', 's', '(', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.reverse(charArray0, 1616, 35);
      assertArrayEquals(new char[] {'#', 'x', 's', '(', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)49, (-1346));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-486.957165), (-1643.84137307));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1), (Object) byte0);
      assertEquals((byte) (-44), object0);
      assertNotNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'C', (int) (byte) (-44));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)49, (int) (byte)49);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2543);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2543));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2543)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-45));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-2918.8606252), (int) byte0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-78);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-82), 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray1 = bitSet0.toLongArray();
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 95);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 57);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      Byte[] byteArray0 = new Byte[23];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(23, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1967.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1967.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1967.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 57;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)35, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = (int) (byte)38;
      intArray0[1] = (int) (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)38, 0.0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) (byte)38;
      objectArray0[2] = (Object) (byte)38;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle";
      ArrayUtils.nullToEmpty(stringArray0);
      ArrayUtils.isSorted((int[]) null);
      Byte byte0 = new Byte((byte)1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      Byte byte0 = new Byte((byte)28);
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertEquals(4, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 567.0;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3688.547549), (-4124.474597013));
      Byte byte0 = new Byte((byte) (-44));
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'C', (-1));
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'h');
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.isSameLength(charArray0, charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2142984824, 'N');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2142984824, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-366.4613F));
      assertArrayEquals(new float[] {(-366.4613F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte)0);
      ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = 'c';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '#');
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'#', '#', 'x', 's', '(', '(', 'c'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      char[] charArray0 = null;
      char char0 = 'B';
      ArrayUtils.addFirst((char[]) null, 'B');
      int int0 = (-1243);
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-1243), '1');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1243, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-97));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (-420);
      ArrayUtils.toPrimitive((Byte[]) null, (byte)120);
      ArrayUtils.reverse(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)110);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Byte byte0 = new Byte((byte) (-78));
      ArrayUtils.indexOf((double[]) null, (-2918.8606252), (int) byte0);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) byte0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      ArrayUtils.reverse((double[]) null);
      Float float0 = new Float((float) (short)0);
      ArrayUtils.insert((-2130440125), (byte[]) null, (byte[]) null);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-78), 91, (double) 0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      ArrayUtils.toPrimitive(object1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(54, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ArrayUtils.indexOf(charArray0, 'L');
      ArrayUtils.removeAllOccurences((byte[]) null, (byte)20);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-660), 1, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-660);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 0;
      ArrayUtils.insert(2, doubleArray0, doubleArray0);
      ArrayUtils.subarray((byte[]) null, 2, Integer.MAX_VALUE);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (byte)81;
      floatArray0[2] = (float) (-660);
      floatArray0[3] = (float) (-660);
      floatArray0[4] = (float) 'L';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      Character character1 = new Character('x');
      Character.valueOf('x');
      Character character2 = new Character('y');
      Character[] characterArray0 = new Character[11];
      characterArray0[0] = character0;
      characterArray0[1] = character2;
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(11, characterArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) (char)character2;
      doubleArray0[2] = (double) (-2331);
      doubleArray0[3] = (double) char0;
      doubleArray0[4] = (double) 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2467.299977669), 4578.656107916);
      assertEquals(5, bitSet0.cardinality());
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) character1);
      assertArrayEquals(new double[] {120.0, 121.0, 121.0, (-2331.0), 121.0, 121.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-87), (byte) (-87)}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3211.0), (-614), (double) (-614));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1996.4989231133188);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 460.011;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-495.866301));
      assertArrayEquals(new double[] {(-495.866301), (-1996.4989231133188), 0.0, 1.0, 1.5, 460.011, 0.0, 0.0, 1.5, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-87);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      int int0 = (-3108);
      int int1 = 1136;
      int int2 = 99;
      ArrayUtils.shift((double[]) null, (-3108), 1136, 99);
      Object[] objectArray0 = new Object[5];
      byte byte0 = (byte)59;
      Byte byte1 = new Byte((byte)59);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (int) (byte)59;
      intArray0[2] = 99;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-420), intArray0, intArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ':';
      floatArray0[2] = (float) (-420);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      ArrayUtils.indexOf(charArray0, ':', Integer.MAX_VALUE);
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      ArrayUtils.reverse(intArray1, (int) (byte) (-105), (-1));
      ArrayUtils.add(intArray0, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, (int)  (-105));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-35));
      ArrayUtils.shift((double[]) null, (int) (byte) (-35), (int) (byte)90, 0);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146786639, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146786639, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      char[] charArray0 = new char[8];
      Byte byte0 = new Byte((byte) (-89));
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1760), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1760, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-61));
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1069, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1069, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      int int0 = (-2520);
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-2520), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2520, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 46, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-832.2944324), 1, (-4255.0033));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      Long long0 = new Long((byte)46);
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-853.8706418943749), (int) (byte)46, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      short[] shortArray0 = new short[12];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-245));
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      ArrayUtils.removeElement(charArray0, '}');
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.indexOf(charArray0, '$');
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2112);
      shortArray0[1] = (short) (-498);
      shortArray0[2] = (short) (-2112);
      shortArray0[3] = (short) (-2112);
      shortArray0[4] = (short) (-2112);
      shortArray0[5] = (short) (-498);
      shortArray0[6] = (short) (-2112);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-498));
      assertArrayEquals(new short[] {(short) (-2112), (short) (-2112), (short) (-2112), (short) (-2112), (short) (-2112)}, shortArray1);
      
      Object object0 = new Object();
      ArrayUtils.toPrimitive((Object) null);
      Byte byte0 = new Byte((byte) (-109));
      Byte byte1 = new Byte((byte)23);
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) byte1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte) (-28));
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)67;
      ArrayUtils.lastIndexOf(shortArray0, (short)512, (int) (short)67);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'B');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(862L);
      longArray0[0] = long0;
      Long long1 = new Long((-22L));
      Byte byte0 = new Byte((byte) (-59));
      ArrayUtils.get((Object[]) longArray0, 56, (Object) byte0);
      Byte byte1 = new Byte((byte) (-1));
      ArrayUtils.lastIndexOf((short[]) null, (short) (-1));
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-2145647949), 6);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4064);
      intArray0[3] = (-4064);
      ArrayUtils.shift(intArray0, 50, 1154, 1333);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-539);
      shortArray0[1] = (short)575;
      shortArray0[2] = (short)740;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      ArrayUtils.shift(intArray0, (-584), (-3), 2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.shift(intArray0, (-584), 1, 0);
      ArrayUtils.clone((short[]) null);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2146824684;
      ArrayUtils.shift(objectArray0, (-891), 0, 721);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1365.67);
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.isSorted((float[]) null);
      Byte[] byteArray0 = new Byte[9];
      String string0 = "";
      try { 
        Byte.valueOf("", 546);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 546 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1481);
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, (-4064), (-4064), 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2045);
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[2] = 34;
      ArrayUtils.shuffle(intArray0);
      ArrayUtils.addAll(intArray0, intArray0);
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = Boolean.TRUE;
      int[] intArray0 = new int[1];
      ArrayUtils.shuffle(intArray0);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      int[] intArray0 = new int[6];
      intArray0[3] = (-1455);
      intArray0[4] = (-1455);
      intArray0[5] = (-1455);
      ArrayUtils.shuffle(intArray0);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-1455), (-1455), (-1455), 0}, intArray0);
      assertEquals(12, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1409;
      intArray0[2] = (-1341);
      intArray0[3] = (-1455);
      ArrayUtils.shuffle(intArray0);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {1409, (-1341), (-1455), (-1), 1409, (-1341), (-1455), (-1)}, intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-412.42458);
      ArrayUtils.removeElements(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.contains(intArray0, (-2543));
      ArrayUtils.removeElement((short[]) null, (short)1048);
      ArrayUtils.shift(intArray0, 190);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)38;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1505);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-73);
      shortArray0[1] = (short)122;
      shortArray0[2] = (short)2662;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3094);
      shortArray0[7] = (short) (-2500);
      shortArray0[8] = (short) (-1750);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)122;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1959L));
      assertArrayEquals(new long[] {(-1959L)}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      Byte.valueOf((byte)74);
      Byte byte0 = new Byte((byte) (-127));
      Byte byte1 = new Byte((byte)74);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 's';
      ArrayUtils.toStringArray((Object[]) null, "The String did not match either specified value");
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)74;
      floatArray0[1] = (float) (byte)74;
      ArrayUtils.isNotEmpty(floatArray0);
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {74.0F, 74.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      floatArray0[1] = (-2480.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1735.56F;
      ArrayUtils.remove(floatArray0, 0);
      ArrayUtils.clone(floatArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      ArrayUtils.add(longArray0, (-762L));
      ArrayUtils.isNotEmpty(floatArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 474;
      intArray0[1] = 474;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(474, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 474, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2955L);
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      longArray0[5] = 1302L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (int) (short)1973);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1973, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      int int0 = 2148;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 2148);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2148, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Boolean boolean0 = new Boolean(false);
      Boolean.valueOf(true);
      Boolean boolean1 = Boolean.TRUE;
      ArrayUtils.swap(doubleArray0, Integer.MIN_VALUE, Integer.MIN_VALUE);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[3] = (-2735.0348610811843);
      doubleArray0[4] = (-1055.4309);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-37.175);
      doubleArray0[7] = (-1.0);
      MockRandom mockRandom0 = new MockRandom((-244L));
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1.0), (-84.3), (-2735.0348610811843), (-1055.4309), 0.0, (-37.175), (-1.0), 103.1893948}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[3];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1639;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2107;
      shortArray0[3] = (short)721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2167);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'L');
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1639, (short)2167, (short)2107, (short)721}, shortArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)721;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)2107;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (short)2107;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)0;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[5]);
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      Byte[] byteArray0 = new Byte[23];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      ArrayUtils.get(byteArray1, 1);
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) null);
      assertEquals(0, byteArray1.length);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, (-3579));
      objectArray0[0] = null;
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray1);
      
      ArrayUtils.shift((int[]) null, 0);
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)1);
      byteArray0[0] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, 0, (Byte) null);
      String string0 = ArrayUtils.toString((Object) byte1);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      byte byte0 = (byte) (-109);
      Byte byte1 = new Byte((byte) (-109));
      ArrayUtils.get(objectArray0, 0, (Object) byte1);
      objectArray0[0] = null;
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)1);
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)1);
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      ArrayUtils.get(byteArray0, (int) byte0, (Byte) null);
      ArrayUtils.toPrimitive((Object) null);
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[1] = null;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = null;
      objectArray1[1] = (Object) byte2;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = null;
      objectArray1[4] = (Object) byte0;
      Object object1 = new Object();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      ArrayUtils.toPrimitive((Integer[]) null);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-3707));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3707, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      doubleArray0[1] = (-1643.84137307);
      doubleArray0[2] = 1.5;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      objectArray0[2] = (Object) (-1643.84137307);
      objectArray0[3] = (Object) 1.5;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-132), 4, 4);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-27));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Boolean.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      Boolean boolean0 = new Boolean("w4RRUuZuO?");
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      ArrayUtils.shift(booleanArray1, (-1), 18688, (int) (short) (-1219));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4282.57053649);
      doubleArray0[1] = (-4282.57053649);
      ArrayUtils.toObject(doubleArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 18688, (int) (short) (-1219));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.indexesOf(booleanArray0, true);
      ArrayUtils.swap(charArray0, (-248), (-2147117328), (int) '\u0000');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'L';
      doubleArray0[4] = (double) (-248);
      doubleArray0[5] = (-762.2408192);
      doubleArray0[6] = (double) '0';
      doubleArray0[7] = (double) (-1633);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3446.0);
      assertArrayEquals(new double[] {12.0, 48.0, 0.0, 76.0, (-248.0), (-762.2408192), 48.0, (-1633.0), 3446.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) '\u0000';
      longArray0[2] = 2446L;
      longArray0[3] = (long) 'L';
      longArray0[4] = (-400L);
      ArrayUtils.toObject(longArray0);
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1633));
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 102);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 8, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 762.2408192;
      ArrayUtils.removeElements(doubleArray0, doubleArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '';
      charArray0[2] = 'H';
      charArray0[3] = 'J';
      charArray0[4] = '!';
      charArray0[5] = '\\';
      charArray0[6] = 'Y';
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, 749, 2013265920);
      assertArrayEquals(new char[] {',', '', 'H', 'J', '!', '\\', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      ArrayUtils.addAll((float[]) null, (float[]) null);
      int int0 = 84;
      ArrayUtils.removeElements(doubleArray0, (double[]) null);
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      int[] intArray0 = new int[2];
      intArray0[0] = 84;
      intArray0[1] = (int) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.shift((Object[]) booleanArray0, 12);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0);
      assertEquals(1, bitSet0.cardinality());
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 12);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {12.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 408.785481;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-318.73);
      ArrayUtils.shift((boolean[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) (short) (-1219);
      objectArray0[2] = (Object) (short) (-1219);
      objectArray0[3] = (Object) (short) (-1219);
      objectArray0[4] = (Object) (short) (-1219);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("n(xY)?4Z(Z^?7MvH");
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      ArrayUtils.indexOf(booleanArray1, true);
      ArrayUtils.addAll((double[]) null, (double[]) null);
      float[] floatArray0 = new float[0];
      int int0 = (-141);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-141), 234.99529F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -141, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 6, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      ArrayUtils.removeElement((double[]) null, 2565.3777748);
      ArrayUtils.clone((double[]) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-772));
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray0[0] = true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      ArrayUtils.addAll((double[]) null, (double[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 113.71441F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 650, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 638, (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 638, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2090);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-1.0));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 6, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      ArrayUtils.removeElement((double[]) null, 2565.3777748);
      ArrayUtils.clone((double[]) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = (-772);
      ArrayUtils.shift(booleanArray0, (-772));
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      ArrayUtils.indexOf(booleanArray0, (boolean) booleanArray1[0]);
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 113.5F);
      int int1 = 650;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 650, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Byte[] byteArray0 = new Byte[23];
      ArrayUtils.removeElements(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1952));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1952, Length: 23
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 6);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-5796);
      intArray0[1] = 2;
      int int0 = 1779;
      intArray0[2] = 1779;
      int int1 = (-2721);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2721));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2721, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("9!r=");
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean(true);
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1664.7607130020065;
      doubleArray0[1] = 1715.0;
      ArrayUtils.add(doubleArray0, 0.0);
      ArrayUtils.shift((Object[]) booleanArray0, 0, 0, 0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      Object object0 = new Object();
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2831.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[0] = (float) 1;
      floatArray0[5] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1), 1, 1);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 567.0;
      doubleArray0[1] = 3077.85000943771;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1715.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1664.7607130020065;
      ArrayUtils.add(doubleArray0, 3077.85000943771);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 0, 0, 0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      Long long0 = new Long((-659L));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1598);
      shortArray0[1] = (short) (-1598);
      ArrayUtils.lastIndexOf(shortArray0, (short) (-1598), (int) (short)0);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      Integer[] integerArray0 = new Integer[2];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3055.4383);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-791.58773683146);
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 68.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (-1775.0568F);
      ArrayUtils.indexesOf(floatArray0, (-465.83F), 50);
      ArrayUtils.shift(doubleArray0, 958, 4042, (-507));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-687), (-687), (-687));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-436), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -436, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      ArrayUtils.shift(byteArray0, (int) (byte)46);
      Float float0 = new Float((-264.52181355645666));
      Float float1 = new Float((float) 1016L);
      Float float2 = new Float((-1.0F));
      ArrayUtils.shift(doubleArray1, (-1541), 2, 83);
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float2;
      floatArray0[2] = float2;
      Float float3 = new Float((double) (-1541));
      floatArray0[3] = float3;
      floatArray0[4] = float1;
      floatArray0[5] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-7));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1219);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) (short) (-1219);
      objectArray0[2] = (Object) (short) (-1219);
      objectArray0[3] = (Object) (short) (-1219);
      objectArray0[4] = (Object) (short) (-1219);
      objectArray0[5] = (Object) (short) (-1219);
      ArrayUtils.lastIndexOf(shortArray0, (short)1, 2009);
      int[] intArray0 = ArrayUtils.insert((int) (short)1, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.lastIndexOf(shortArray0, (short)512, (int) (short)0);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1678.3117);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3451);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2013;
      shortArray0[3] = (short)723;
      ArrayUtils.lastIndexOf(shortArray0, (short) (-3451), 0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-3451);
      intArray0[2] = (int) (short)2013;
      intArray0[3] = 1026;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2021), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2021, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      ArrayUtils.shift((Object[]) byteArray0, (-2543));
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      ArrayUtils.shift((Object[]) booleanArray0, (-717));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, Double.NaN);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1542.090316324);
      ArrayUtils.add(doubleArray0, (-1542.090316324));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1542.090316324);
      objectArray0[1] = (Object) (-1542.090316324);
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1542.090316324);
      objectArray0[4] = (Object) (-1542.090316324);
      objectArray0[5] = (Object) (-1542.090316324);
      objectArray0[6] = (Object) (-1542.090316324);
      objectArray0[7] = (Object) (-1542.090316324);
      ArrayUtils.shift(objectArray0, (-265), 85, 0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2688.34F;
      ArrayUtils.nullToEmpty((boolean[]) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)517;
      shortArray0[2] = (short)45;
      ArrayUtils.add(shortArray0, (short)91);
      ArrayUtils.shift((Object[]) null, 7);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1409;
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.shift((Object[]) booleanArray0, 1723);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2425.9661;
      doubleArray0[1] = 2425.9661;
      doubleArray0[2] = (double) 1409;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1341);
      doubleArray0[5] = (double) 1409;
      ArrayUtils.addFirst(doubleArray0, 925.134179);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1341);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-1341L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[1] = boolean0;
      ArrayUtils.nullToEmpty(booleanArray0);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      ArrayUtils.shift((Object[]) booleanArray0, 23);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      ArrayUtils.shift((Object[]) characterArray0, 55);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      ArrayUtils.shuffle(shortArray0);
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(0, intArray2.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertNotNull(stringArray0);
      
      ArrayUtils.removeAllOccurences(shortArray0, (short) (-105));
      Byte byte0 = new Byte((byte)36);
      ArrayUtils.hashCode((Object) byte0);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) null);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertArrayEquals(new char[] {'\u0000', 'V', 't'}, charArray1);
      
      Byte[] byteArray0 = new Byte[1];
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)102);
      shortArray0[0] = short0;
      Short short1 = new Short((short)2747);
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2503));
      shortArray0[0] = short0;
      ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1720));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2503)}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = 'D';
      charArray0[5] = 'k';
      charArray0[6] = 'L';
      charArray0[7] = '';
      charArray0[8] = '_';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (float) 'D';
      floatArray0[5] = (float) 'S';
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      ArrayUtils.shuffle(shortArray2);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '';
      intArray0[2] = (int) 'S';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3061.645287728214);
      doubleArray0[1] = (double) 95;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 83;
      doubleArray0[4] = 3061.645287728214;
      doubleArray0[5] = (double) 'L';
      doubleArray0[6] = (double) 68.0F;
      doubleArray0[7] = (double) '';
      doubleArray0[8] = (double) 'S';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 68.0F, 0.0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1935);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 39.5326576651238);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1935);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)444;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-986));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)444;
      longArray0[3] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 444L;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-1643));
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3945));
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-3945));
      assertArrayEquals(new int[] {(-3945)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      ArrayUtils.removeElement((double[]) null, 2565.3777748);
      char char0 = '.';
      Character character0 = Character.valueOf('.');
      Character character1 = new Character(':');
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character0;
      ArrayUtils.nullToEmpty(characterArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1136;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)536;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      int[] intArray0 = new int[0];
      ArrayUtils.isSameLength(intArray0, intArray0);
      Character.valueOf(char0);
      Character[] characterArray1 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      ArrayUtils.lastIndexOf((boolean[]) null, false, 95);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-452.2006093482215);
      doubleArray0[1] = (double) 101;
      ArrayUtils.contains(doubleArray0, 1910.0, (-1830.71));
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      boolean boolean2 = ArrayUtils.contains(longArray0, (-1755L));
      assertFalse(boolean2 == boolean0);
      
      long[] longArray2 = ArrayUtils.insert(0, longArray1, longArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertEquals(4, charArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-35));
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-35));
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte1);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)102);
      shortArray0[0] = short0;
      Short short1 = new Short((short)2747);
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-84.3);
      doubleArray0[1] = (-2707.9394885113284);
      doubleArray0[4] = (-1055.4309);
      doubleArray0[5] = 0.0;
      doubleArray0[0] = (-37.175);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-2144654287), intArray0, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2144654287);
      floatArray0[1] = (float) (-2144654287);
      floatArray0[2] = (float) (-2144654287);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2.14465434E9F));
      assertArrayEquals(new float[] {(-2.14465434E9F), (-2.14465434E9F), (-2.14465434E9F), (-2.14465434E9F)}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 103.1893948;
      doubleArray0[1] = (-1.0);
      ArrayUtils.shift((boolean[]) null, (-1964), 2, (-1577));
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      byte[] byteArray0 = new byte[5];
      doubleArray0[4] = (double) (byte)76;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)6;
      ArrayUtils.subarray(byteArray0, (-1577), 432);
      Integer.getInteger(", '");
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-10));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3126.276062353398, 3126.276062353398);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 116L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {116L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 452.421, 452.421);
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1579);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 45);
      assertArrayEquals(new double[] {45.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)118);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)118}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)70;
      shortArray0[3] = (short) (-2836);
      shortArray0[4] = (short)1855;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)70;
      floatArray0[1] = (float) (short) (-2836);
      floatArray0[2] = (float) (short)70;
      floatArray0[3] = (float) (short)70;
      floatArray0[4] = (float) (short)70;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (short)1855;
      floatArray0[7] = (float) (short)0;
      floatArray0[8] = (float) (short)1855;
      ArrayUtils.reverse(floatArray0, (int) (short) (-2836), (int) (short)1412);
      assertArrayEquals(new float[] {1855.0F, 0.0F, 1855.0F, 0.0F, 70.0F, 70.0F, 70.0F, (-2836.0F), 70.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertEquals(12, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short) (-2836));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(753);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)1855);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)70);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("V),]6y`LI", Integer.MAX_VALUE);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(3994);
      integerArray0[7] = integer7;
      Integer.getInteger("Array and element cannot both be null");
      integerArray0[8] = null;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)1855);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2836), 753, 1855, 70, (-2836), (-2836), Integer.MAX_VALUE, 3994, 1855}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 194.8797;
      doubleArray0[1] = 1.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertEquals(3, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(7396);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ArrayUtils.toPrimitive(integerArray0, 9);
      Byte byte0 = new Byte((byte)0);
      ArrayUtils.indexesOf((Object[]) integerArray0, (Object) byte0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 7396;
      longArray0[1] = (-2700L);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertArrayEquals(new long[] {7396L, (-2700L), 7396L, (-2700L)}, longArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 3063.0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('J');
      characterArray0[0] = character0;
      Character character1 = new Character('7');
      characterArray0[1] = character1;
      char char0 = 'l';
      Character character2 = new Character('l');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('7');
      characterArray0[4] = character4;
      Character character5 = new Character('x');
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char0);
      characterArray0[6] = character6;
      Character character7 = new Character('/');
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'J', '7', 'l', 'l', '7', 'x', 'l', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-204L);
      doubleArray0[2] = (double) (-204L);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 38;
      longArray0[1] = (long) 38;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2732);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 4331.92300144798);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 0, 45);
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 4331.92300144798}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '!');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 1120.0;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1365), (-2693), (-364));
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-2693), (-364));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1412;
      shortArray0[3] = (short) (-2833);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 649.65173F;
      floatArray0[2] = (float) (short)1412;
      floatArray0[3] = (float) (short) (-2833);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1412.0F);
      assertArrayEquals(new float[] {0.0F, 649.65173F, (-2833.0F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1412;
      ArrayUtils.reverse(longArray0, (-2431), (int) (short)70);
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-250.215538);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1557.0);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1515.7429624;
      doubleArray0[7] = (-1206.845704582);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1637.3911F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 180.53928F;
      floatArray0[3] = (-2781.5F);
      floatArray0[4] = 510.0F;
      floatArray0[5] = (-2458.3F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1827.0532F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1637.3911F), 0.0F, 180.53928F, (-2781.5F), 510.0F, (-2458.3F), 1827.0532F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-25);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-25L), (-25L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 415.27078F);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.0;
      doubleArray0[1] = 433.757764;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 480.9773968;
      doubleArray0[4] = 879.5356066;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 45, Integer.MAX_VALUE);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 45;
      longArray0[1] = (long) 45;
      longArray0[2] = (long) 45;
      ArrayUtils.lastIndexOf(longArray0, (-5301L));
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      ArrayUtils.reverse(longArray1, (-1), 0);
      assertArrayEquals(new long[] {45L, 45L, 45L, 45L, 45L, 45L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }
}
