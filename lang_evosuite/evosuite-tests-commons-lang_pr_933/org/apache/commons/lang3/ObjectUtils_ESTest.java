/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:03:36 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.lang.reflect.Array;
import java.text.Collator;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[5];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      MinguoEra minguoEra1 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[1] = minguoEra1;
      minguoEraArray0[2] = minguoEraArray0[0];
      minguoEraArray0[3] = minguoEraArray0[2];
      minguoEraArray0[4] = minguoEraArray0[2];
      MinguoEra minguoEra2 = ObjectUtils.median(minguoEraArray0);
      assertEquals(MinguoEra.BEFORE_ROC, minguoEra2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer((-922));
      ToDoubleFunction<Integer> toDoubleFunction0 = (ToDoubleFunction<Integer>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1311.518), (double)(short)2709, 0.0, (-1311.518), (double)(-922)).when(toDoubleFunction0).applyAsDouble(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Integer>) toDoubleFunction0);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = ObjectUtils.median(comparator0, integerArray0);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) integerArray0[0]);
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ObjectUtils.cloneIfPossible(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      ObjectUtils.identityToString(stringBuilder0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      StringBuffer stringBuffer0 = new StringBuffer("");
      ObjectUtils.identityToString(stringBuffer0, (Object) arrayDeque0);
      assertEquals(22, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 1984);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ObjectUtils.identityToString((Appendable) bufferedWriter0, (Object) arrayDeque0);
      assertFalse(arrayDeque0.contains(1984));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<HashMap<Integer, Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super HashMap<Integer, Object>>) toLongFunction0);
      HashMap<Integer, Object>[] hashMapArray0 = (HashMap<Integer, Object>[]) Array.newInstance(HashMap.class, 8);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMapArray0[0] = hashMap0;
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      hashMapArray0[1] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[2] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[3] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[4] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[5] = hashMapArray0[4];
      hashMapArray0[6] = (HashMap<Integer, Object>) linkedHashMap0;
      hashMapArray0[7] = hashMapArray0[6];
      HashMap<Integer, Object> hashMap1 = ObjectUtils.median(comparator0, hashMapArray0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[3];
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[0] = minguoEra0;
      MinguoEra minguoEra1 = ObjectUtils.max(minguoEraArray0);
      assertEquals(MinguoEra.BEFORE_ROC, minguoEra1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      int int0 = ObjectUtils.hashCodeMulti(comparableArray0);
      assertEquals((-1807454463), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object object0 = ObjectUtils.getIfNull((Object) objectUtils0, (Supplier<Object>) null);
      assertSame(objectUtils0, object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Supplier<ArrayDeque<Object>>[] supplierArray0 = (Supplier<ArrayDeque<Object>>[]) Array.newInstance(Supplier.class, 3);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Supplier<ArrayDeque<Object>> supplier0 = (Supplier<ArrayDeque<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayDeque0).when(supplier0).get();
      supplierArray0[0] = supplier0;
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertSame(arrayDeque1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(904);
      int int0 = ObjectUtils.compare(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(3397);
      Integer integer1 = new Integer(2367);
      int int0 = ObjectUtils.compare(integer1, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)36);
      assertEquals((short)36, short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-1877L));
      assertEquals((-1877L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (short)7);
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-765.0F));
      assertEquals((-765.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-2176.270653331));
      assertEquals((-2176.270653331), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char char0 = ObjectUtils.CONST('\'');
      assertEquals('\'', char0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char char0 = ObjectUtils.CONST('5');
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) hashMap0;
      Integer integer0 = new Integer(64);
      hashMap0.put(integer0, objectArray0[0]);
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      Comparator<Integer> comparator0 = Comparator.comparing((Function<? super Integer, ? extends Integer>) function0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectUtils0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.ObjectUtils cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Integer> comparator0 = Comparator.reverseOrder();
      ObjectUtils.hashCode((Object) comparator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = ObjectUtils.firstNonNull((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object object0 = ObjectUtils.firstNonNull((Object[]) integerArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((int) (byte) (-30));
      Integer integer0 = mutableInt0.toInteger();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      boolean boolean0 = ObjectUtils.equals((Object) thaiBuddhistEra0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(155);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-30));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      int int0 = ObjectUtils.compare(integer0, integer1, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(97);
      int int0 = ObjectUtils.compare(integer0, integer0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("`Yicta81~r)H").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("`Yicta81~r)H", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectUtils.toString(object0, (Supplier<String>) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      String string0 = ObjectUtils.toString((Object) comparable0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(3267);
      String string0 = ObjectUtils.toString((Object) integer0, "I$;S#d{_ayDHj{Y!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      String string0 = ObjectUtils.toString((Object) linkedHashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) linkedHashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) arrayDeque0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = ObjectUtils.mode((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(Double.NaN);
      doubleArray0[1] = double0;
      Double double1 = ObjectUtils.max(doubleArray0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 6);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isNotEmpty(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      linkedHashMap0.put((Integer) null, (Integer) null);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isEmpty(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer((-1917));
      arrayDeque0.add(integer0);
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("java.lang.Object@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-30));
      String string0 = ObjectUtils.identityToString((Object) integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) integer0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(888427202, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Integer integer0 = ObjectUtils.getIfNull((Integer) null, supplier0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.getIfNull((Comparable<Object>) null, (Supplier<Comparable<Object>>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 1);
      Object object0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = ObjectUtils.getFirstNonNull((Supplier<Object>[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(954305);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [954305]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-32817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-32817]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2460);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2460]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-1188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-1188]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[7];
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      minguoEraArray0[0] = minguoEra0;
      MinguoEra minguoEra1 = MinguoEra.ROC;
      minguoEraArray0[2] = minguoEra1;
      MinguoEra minguoEra2 = ObjectUtils.min(minguoEraArray0);
      assertEquals(MinguoEra.BEFORE_ROC, minguoEra2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(15);
      Integer integer0 = mutableInt0.getValue();
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(15);
      Integer integer0 = mutableInt0.getValue();
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.cloneIfPossible((HashMap<Integer, Integer>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = ObjectUtils.cloneIfPossible(hashMap0);
      assertNotSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Integer integer1 = ObjectUtils.clone(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      boolean boolean0 = ObjectUtils.anyNull(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) arrayDeque0;
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 0);
      boolean boolean0 = ObjectUtils.allNotNull(supplierArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectUtils0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<HashMap<Integer, Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super HashMap<Integer, Object>>) toLongFunction0);
      HashMap<Integer, Object>[] hashMapArray0 = (HashMap<Integer, Object>[]) Array.newInstance(HashMap.class, 8);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator0, hashMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer((-755));
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = ObjectUtils.CONST((double) (byte)64);
      assertEquals(64.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (byte) (-30));
      assertEquals((short) (-30), short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char char0 = ObjectUtils.CONST('f');
      assertEquals('f', char0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 6);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      try { 
        ObjectUtils.identityToString((Appendable) bufferedWriter0, (Object) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) objectUtils0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) (byte)6);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = ObjectUtils.CONST(801);
      assertEquals(801, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(28);
      int int0 = ObjectUtils.compare(integer0, (Integer) null);
      assertEquals(1, int0);
  }
}
