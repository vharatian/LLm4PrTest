/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:54:46 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.math.RoundingMode;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import javax.swing.JColorChooser;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.gif.GifImageParser;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.ico.IcoImageParser;
import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImageParser;
import org.apache.commons.imaging.formats.png.PngImageParser;
import org.apache.commons.imaging.formats.psd.PsdImageParser;
import org.apache.commons.imaging.formats.rgbe.RgbeImageParser;
import org.apache.commons.imaging.formats.tiff.TiffImageParser;
import org.apache.commons.imaging.formats.wbmp.WbmpImageParser;
import org.apache.commons.imaging.formats.xbm.XbmImageParser;
import org.apache.commons.imaging.formats.xpm.XpmImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageParser_ESTest extends ImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      String string0 = xpmImageParser0.getName();
      assertEquals("X PixMap", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[3];
      HashMap<String, JColorChooser> hashMap0 = new HashMap<String, JColorChooser>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap1);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      ImageMetadata imageMetadata0 = xpmImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile("DNEYor0KcsVbN?", "u.7YC7@8J)o)p WL");
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "p._/~q8u");
      ImageMetadata imageMetadata0 = wbmpImageParser0.getMetadata((ByteSource) byteSourceInputStream0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("mAsr>F sN#=`HC", "A");
      ImageMetadata imageMetadata0 = icnsImageParser0.getMetadata((File) mockFile0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      MockFile mockFile0 = new MockFile("bJ%/YzQ6=)L");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = dcxImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[4];
      Hashtable<String, RoundingMode> hashtable0 = new Hashtable<String, RoundingMode>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>(hashtable0);
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashtable1);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".pgm", (byte[]) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ImageInfo imageInfo0 = dcxImageParser0.getImageInfo((ByteSource) byteSourceArray0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      byte[] byteArray0 = new byte[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray1 = xbmImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = icnsImageParser0.getICCProfileBytes((ByteSource) null, (Map<String, Object>) hashMap0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      String string0 = xpmImageParser0.getDefaultExtension();
      assertEquals(".xpm", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[2];
      String string0 = rgbeImageParser0.dumpImageFile(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      MockFile mockFile0 = new MockFile("aR=", ".p@;$pm");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      String string0 = rgbeImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(2736, 2736, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2736);
      // Undeclared exception!
      xpmImageParser0.writeImage(bufferedImage0, byteArrayOutputStream0, (Map<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[7];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        rgbeImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a valid HDR: Incorrect Header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[3];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        gifImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      try { 
        tiffImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        gifImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile("YCC");
      File file0 = MockFile.createTempFile("JTaP", ": ", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(558);
      // Undeclared exception!
      try { 
        gifImageParser0.getMetadata((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream(830);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "R9lWam(sM");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        rgbeImageParser0.getMetadata((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile("No icons in ICNS file");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      // Undeclared exception!
      try { 
        pngImageParser0.getMetadata((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1pgm", "1pgm");
      PngImageParser pngImageParser0 = new PngImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.getMetadata((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[0];
      try { 
        xpmImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        bmpImageParser0.getImageSize(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        xpmImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      File file0 = MockFile.createTempFile(".zzcibz", "a;[AIr:\"&Wc#,");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        xpmImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, (byte[]) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        xpmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("C/+N8+eFSo~:9p*-QK", byteArray0);
      try { 
        tiffImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      MockFile mockFile0 = new MockFile(".png", "AFrK(N+<");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        wbmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pngImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getImageInfo((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        xpmImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(558);
      // Undeclared exception!
      try { 
        gifImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      File file0 = MockFile.createTempFile("org.apache.commons.imaging.common.SimpleBufferedImageFactory", "org.apache.commons.imaging.common.SimpleBufferedImageFactory");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "org.apache.commons.imaging.common.SimpleBufferedImageFactory");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        tiffImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eF.Qpm", "eF.Qpm");
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pngImageParser0.getImageInfo((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      MockFile mockFile0 = new MockFile("NumCharsPerPixel: ", "NumCharsPerPixel: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        xpmImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>(map0);
      // Undeclared exception!
      try { 
        pngImageParser0.getImageInfo((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getICCProfileBytes((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[6];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        psdImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[3];
      try { 
        pngImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      MockFile mockFile0 = new MockFile((File) null, ".0p'uk06wd");
      File file0 = MockFile.createTempFile("WC3Q6\"", "WC3Q6\"", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        tiffImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        xpmImageParser0.getICCProfileBytes((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getICCProfileBytes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        tiffImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)43, (byte)43);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "colorType: ");
      try { 
        tiffImageParser0.getFormatCompliance((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      // Undeclared exception!
      try { 
        psdImageParser0.getFormatCompliance((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        xpmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        bmpImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pngImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      // Undeclared exception!
      try { 
        pcxImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.PcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "^!f#P_");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        tiffImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("ic09", "ic09");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getAllBufferedImages((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      try { 
        xpmImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "be8tJs$ jJ_!iq|FinY");
      try { 
        xpmImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eF.Qpm", "eF.Qpm");
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        xpmImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.getAllBufferedImages((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        xpmImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        pcxImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 1 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("XMP", byteArray0);
      try { 
        psdImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1264), 800);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "");
      // Undeclared exception!
      try { 
        icnsImageParser0.dumpImageFile((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      try { 
        icnsImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pgm", ".pgm");
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      File file0 = MockFile.createTempFile("{v_FbZP4_", "{v_FbZP4_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      byte[] byteArray0 = new byte[3];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("{v_FbZP4_", byteArray0);
      try { 
        xpmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = ImageParser.isStrict((Map<String, Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      File file0 = MockFile.createTempFile(".png", ".png");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes(file0, (Map<String, Object>) hashMap0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      MockFile mockFile0 = new MockFile(".png", "AFrK(N+<");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Dimension dimension0 = wbmpImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      MockFile mockFile0 = new MockFile(".xpm");
      try { 
        xpmImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.getImageInfo((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        xpmImageParser0.getImageSize((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      // Undeclared exception!
      try { 
        pngImageParser0.getMetadata((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        pngImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      FormatCompliance formatCompliance0 = icnsImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("STRICT", "STRICT");
      // Undeclared exception!
      try { 
        ImageParser.isStrict(hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      ImageFormats imageFormats0 = ImageFormats.XPM;
      boolean boolean0 = xpmImageParser0.canAcceptType(imageFormats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      boolean boolean0 = xpmImageParser0.canAcceptType(imageFormats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eF.Qpm", "eF.Qpm");
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.dumpImageFile((File) mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1pgm", "1pgm");
      PngImageParser pngImageParser0 = new PngImageParser();
      Dimension dimension0 = pngImageParser0.getImageSize((File) mockFile0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".png");
      PngImageParser pngImageParser0 = new PngImageParser();
      try { 
        pngImageParser0.getImageSize((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">jQZ@9`_", ">jQZ@9`_");
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage0 = icoImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".cur", ".cur");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      IcoImageParser icoImageParser0 = new IcoImageParser();
      try { 
        icoImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">jQZ@9`_", ">jQZ@9`_");
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      List<BufferedImage> list0 = xpmImageParser0.getAllBufferedImages((File) mockFile0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      MockFile mockFile0 = new MockFile("'>f#E", ".xpm");
      try { 
        xpmImageParser0.getAllBufferedImages((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">jQZ@9`_", ">jQZ@9`_");
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      FormatCompliance formatCompliance0 = xpmImageParser0.getFormatCompliance((File) mockFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".dcx");
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      FormatCompliance formatCompliance0 = dcxImageParser0.getFormatCompliance(file0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pgm", ".pgm");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      ImageInfo imageInfo0 = pngImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".png", ".png");
      PngImageParser pngImageParser0 = new PngImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pngImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eF.Qpm", "eF.Qpm");
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageMetadata imageMetadata0 = xpmImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".xpm");
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageMetadata imageMetadata0 = xpmImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      // Undeclared exception!
      try { 
        pngImageParser0.getImageSize((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.dumpImageFile((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile(".tif");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jpegImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This image format (Jpeg-Custom) cannot be written.
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((byte[]) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("eF.Qpm");
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = gifImageParser0.getICCProfileBytes((File) mockFile0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getBufferedImage((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getImageSize((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        xpmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing XPM file failed, signature isn't '/* XPM *_/'
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pushbackInputStream0, "<)oQ\"-;");
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.getMetadata((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ImageParser[] imageParserArray0 = ImageParser.getAllImageParsers();
      assertEquals(15, imageParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rgbeImageParser0.getICCProfileBytes(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[0];
      FormatCompliance formatCompliance0 = pcxImageParser0.getFormatCompliance(byteArray0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        icnsImageParser0.getImageInfo(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7XZ/qpU6||f", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockFile mockFile0 = new MockFile("}:6eTI([XvO", "}:6eTI([XvO");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      boolean boolean0 = rgbeImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
      assertFalse(boolean0);
  }
}
