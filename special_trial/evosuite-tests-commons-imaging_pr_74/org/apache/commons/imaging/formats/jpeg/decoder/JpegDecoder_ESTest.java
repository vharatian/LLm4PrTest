/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:19:26 GMT 2025
 */

package org.apache.commons.imaging.formats.jpeg.decoder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoder;
import org.apache.commons.imaging.formats.jpeg.decoder.JpegInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JpegDecoder_ESTest extends JpegDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 65479;
      List<Integer> list0 = JpegDecoder.getIntervalStartPositions(intArray0);
      assertFalse(list0.contains(65479));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[12] = 213;
      intArray0[11] = 255;
      JpegInputStream[] jpegInputStreamArray0 = JpegDecoder.splitByRstMarkers(intArray0);
      assertEquals(2, jpegInputStreamArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[2];
      jpegDecoder0.visitSOS((-92), byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[1];
      jpegDecoder0.visitSOS(255, byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-63);
      // Undeclared exception!
      try { 
        jpegDecoder0.visitSegment(65472, byteArray0, 65485, byteArray0, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.segments.SofnSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[1];
      try { 
        jpegDecoder0.visitSegment(65499, byteArray0, 65499, byteArray0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid JPEG File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      // Undeclared exception!
      try { 
        jpegDecoder0.visitSOS(65472, (byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JpegDecoder.splitByRstMarkers((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        JpegDecoder.getIntervalStartPositions((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegDecoder0.decode(byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      // Undeclared exception!
      try { 
        jpegDecoder0.decode((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "");
      // Undeclared exception!
      try { 
        jpegDecoder0.decode(byteSourceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2635), 65280);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "Invalid huffman table class ");
      // Undeclared exception!
      try { 
        jpegDecoder0.decode(byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "Invalid huffman table class ");
      try { 
        jpegDecoder0.decode(byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      MockFile mockFile0 = new MockFile("Invalid huffman table class ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        jpegDecoder0.decode(byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 255;
      intArray0[1] = 255;
      JpegInputStream[] jpegInputStreamArray0 = JpegDecoder.splitByRstMarkers(intArray0);
      assertEquals(1, jpegInputStreamArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 255;
      List<Integer> list0 = JpegDecoder.getIntervalStartPositions(intArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[4] = 255;
      intArray0[5] = 215;
      JpegInputStream[] jpegInputStreamArray0 = JpegDecoder.splitByRstMarkers(intArray0);
      assertEquals(2, jpegInputStreamArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = jpegDecoder0.visitSegment(65476, (byte[]) null, 109, (byte[]) null, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      // Undeclared exception!
      try { 
        jpegDecoder0.visitSegment(65476, (byte[]) null, 65476, (byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.segments.DhtSegment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = jpegDecoder0.visitSegment(65499, byteArray0, 65499, byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      try { 
        jpegDecoder0.visitSegment(65486, (byte[]) null, 65486, (byte[]) null, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Only sequential, baseline JPEGs are supported at the moment
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = jpegDecoder0.visitSegment(65501, byteArray0, (byte)111, byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JpegDecoder jpegDecoder0 = new JpegDecoder();
      boolean boolean0 = jpegDecoder0.beginSOS();
      assertTrue(boolean0);
  }
}
