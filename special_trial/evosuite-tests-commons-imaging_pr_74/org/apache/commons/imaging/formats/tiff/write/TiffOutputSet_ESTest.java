/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:37:20 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoBytes;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoDouble;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSLongs;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoShorts;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputItem;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TiffOutputSet_ESTest extends TiffOutputSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      tiffOutputSet0.setGPSInDegrees(666.8, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees(0.0, (-1023.076791));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      List<FieldType> list0 = FieldType.SHORT_OR_RATIONAL;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoBytes tagInfoBytes0 = new TagInfoBytes("\t getColorSpaceType() : ", (-2), list0, (-2), tiffDirectoryType0);
      tiffOutputSet0.removeField((TagInfo) tagInfoBytes0);
      assertEquals((-2), tagInfoBytes0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      assertEquals((-3), tiffOutputDirectory0.type);
      
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getRootDirectory();
      assertNotNull(tiffOutputDirectory1);
      assertEquals(0, tiffOutputDirectory1.type);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getInteroperabilityDirectory();
      assertNotNull(tiffOutputDirectory0);
      assertEquals((-4), tiffOutputDirectory0.type);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getGPSDirectory();
      assertSame(tiffOutputDirectory1, tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addInteroperabilityDirectory();
      assertEquals((-4), tiffOutputDirectory0.type);
      
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getExifDirectory();
      assertEquals((-2), tiffOutputDirectory1.type);
      assertNotNull(tiffOutputDirectory1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      List<TiffOutputDirectory> list0 = tiffOutputSet0.getDirectories();
      assertTrue(list0.contains(tiffOutputDirectory0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      tiffOutputDirectory0.add((TiffOutputField) null);
      // Undeclared exception!
      try { 
        tiffOutputSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      tiffOutputDirectory0.add((TiffOutputField) null);
      // Undeclared exception!
      try { 
        tiffOutputSet0.setGPSInDegrees(4759.289599787, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      HashMap<Integer, TiffOutputDirectory> hashMap0 = new HashMap<Integer, TiffOutputDirectory>();
      tiffOutputDirectory0.add((TiffOutputField) null);
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary(tiffOutputSet0.byteOrder, tiffOutputDirectory0, hashMap0);
      // Undeclared exception!
      try { 
        tiffOutputSet0.getOutputItems(tiffOutputSummary0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      // Undeclared exception!
      try { 
        tiffOutputSet0.findField((TagInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      tiffOutputDirectory0.add((TiffOutputField) null);
      // Undeclared exception!
      try { 
        tiffOutputSet0.findField((-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addExifDirectory();
      tiffOutputDirectory0.add((TiffOutputField) null);
      // Undeclared exception!
      try { 
        tiffOutputSet0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      try { 
        tiffOutputSet0.addRootDirectory();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set already contains a directory of that type.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      try { 
        tiffOutputSet0.addInteroperabilityDirectory();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set already contains a directory of that type.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateGPSDirectory();
      try { 
        tiffOutputSet0.addGPSDirectory();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set already contains a directory of that type.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffOutputSet0.addExifDirectory();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set already contains a directory of that type.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      // Undeclared exception!
      try { 
        tiffOutputSet0.addDirectory((TiffOutputDirectory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addExifDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD3;
      TagInfoDouble tagInfoDouble0 = new TagInfoDouble("m+*R~<", 0, tiffDirectoryType0);
      tiffOutputDirectory0.add(tagInfoDouble0, (double) 0);
      String string0 = tiffOutputSet0.toString("m+*R~<");
      assertEquals("m+*R~<TiffOutputSet {\nm+*R~<byteOrder: LITTLE_ENDIAN\nm+*R~<\tdirectory 0: Exif (-2)\nm+*R~<\t\tfield 0: [TagInfo. tag: 0 (0x0, name: m+*R~<]\nm+*R~<}\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      String string0 = tiffOutputSet0.toString((String) null);
      assertEquals("TiffOutputSet {\nbyteOrder: LITTLE_ENDIAN\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((-1L), (-1L));
      TiffOutputField tiffOutputField0 = tiffOutputSet0.findField(0);
      assertNotNull(tiffOutputField0);
      assertEquals(0, tiffOutputField0.tag);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.findDirectory((-3));
      assertNull(tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees((-1L), 1171.9075);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      assertEquals(66, tiffOutputDirectory0.getItemLength());
      assertEquals((-3), tiffOutputDirectory0.type);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateExifDirectory();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.findDirectory((-2));
      assertEquals(6, tiffOutputDirectory0.getItemLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      assertEquals((-3), tiffOutputDirectory0.type);
      assertNotNull(tiffOutputDirectory0);
      
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getOrCreateRootDirectory();
      assertEquals(0, tiffOutputDirectory1.type);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(tiffOutputSet0.byteOrder);
      tiffOutputSet1.addDirectory(tiffOutputDirectory0);
      assertEquals((-3), tiffOutputDirectory0.type);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addExifDirectory();
      assertEquals((-2), tiffOutputDirectory0.type);
      
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getOrCreateExifDirectory();
      assertSame(tiffOutputDirectory1, tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      String string0 = tiffOutputSet0.toString();
      assertEquals("TiffOutputSet {\nbyteOrder: LITTLE_ENDIAN\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD1;
      TagInfoSLongs tagInfoSLongs0 = new TagInfoSLongs("", (-3), (-1), tiffDirectoryType0);
      int[] intArray0 = new int[2];
      tiffOutputDirectory0.add(tagInfoSLongs0, intArray0);
      tiffOutputSet0.dump();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD1;
      TagInfoSLongs tagInfoSLongs0 = new TagInfoSLongs("", (-3), (-1), tiffDirectoryType0);
      int[] intArray0 = new int[2];
      tiffOutputDirectory0.add(tagInfoSLongs0, intArray0);
      TagInfoShorts tagInfoShorts0 = new TagInfoShorts("TiffOutputSet {\nbyteOrder: LITTLE_ENDIAN\n\tdirectory 0: Root (0)\n\tdirectory 1: Gps (-3)\n\t\tfield 1: [TagInfo. tag: -3 (0xfffffffd, name: ]\n\t\tfield 1: [TagInfo. tag: 0 (0x0, name: GPSVersionID]\n\t\tfield 1: [TagInfo. tag: 3 (0x3, name: GPSLongitudeRef]\n\t\tfield 1: [TagInfo. tag: 1 (0x1, name: GPSLatitudeRef]\n\t\tfield 1: [TagInfo. tag: 4 (0x4, name: GPSLongitude]\n\t\tfield 1: [TagInfo. tag: 2 (0x2, name: GPSLatitude]\n\tdirectory 2: Exif (-2)\n}\n", (-3), 2146456490, tagInfoSLongs0.directoryType);
      TiffOutputField tiffOutputField0 = tiffOutputSet0.findField((TagInfo) tagInfoShorts0);
      assertEquals((-1), tiffOutputField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateRootDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD1;
      TagInfoSLongs tagInfoSLongs0 = new TagInfoSLongs("", (-3), (-1), tiffDirectoryType0);
      TagInfoShorts tagInfoShorts0 = new TagInfoShorts("TiffOutputSet {\nbyteOrder: LITTLE_ENDIAN\n\tdirectory 0: Root (0)\n\tdirectory 1: Gps (-3)\n\t\tfield 1: [TagInfo. tag: -3 (0xfffffffd, name: ]\n\t\tfield 1: [TagInfo. tag: 0 (0x0, name: GPSVersionID]\n\t\tfield 1: [TagInfo. tag: 3 (0x3, name: GPSLongitudeRef]\n\t\tfield 1: [TagInfo. tag: 1 (0x1, name: GPSLatitudeRef]\n\t\tfield 1: [TagInfo. tag: 4 (0x4, name: GPSLongitude]\n\t\tfield 1: [TagInfo. tag: 2 (0x2, name: GPSLatitude]\n\tdirectory 2: Exif (-2)\n}\n", (-3), 2146456490, tagInfoSLongs0.directoryType);
      TiffOutputField tiffOutputField0 = tiffOutputSet0.findField((TagInfo) tagInfoShorts0);
      assertNull(tiffOutputField0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      tiffOutputSet0.removeField(1820);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addGPSDirectory();
      try { 
        tiffOutputSet0.addDirectory(tiffOutputDirectory0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set already contains a directory of that type.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      List<TiffOutputItem> list0 = tiffOutputSet0.getOutputItems((TiffOutputSummary) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getExifDirectory();
      assertNull(tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      List<TiffOutputDirectory> list0 = tiffOutputSet0.getDirectories();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getRootDirectory();
      assertNull(tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getInteroperabilityDirectory();
      assertNull(tiffOutputDirectory0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputField tiffOutputField0 = tiffOutputSet0.findField((-4));
      assertNull(tiffOutputField0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      // Undeclared exception!
      try { 
        tiffOutputSet0.removeField((TagInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffOutputSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      assertEquals(0, tiffOutputDirectory0.type);
      
      List<TiffOutputItem> list0 = tiffOutputSet0.getOutputItems((TiffOutputSummary) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getGPSDirectory();
      assertNull(tiffOutputDirectory0);
  }
}
