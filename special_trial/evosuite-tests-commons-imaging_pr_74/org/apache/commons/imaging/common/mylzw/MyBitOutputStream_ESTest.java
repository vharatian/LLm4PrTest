/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:11:04 GMT 2025
 */

package org.apache.commons.imaging.common.mylzw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import org.apache.commons.imaging.common.mylzw.MyBitOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MyBitOutputStream_ESTest extends MyBitOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1460);
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(byteArrayOutputStream0, byteOrder0);
      myBitOutputStream0.writeBits(102, (-2516));
      int int0 = myBitOutputStream0.getBytesWritten();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%g`8FqAlD[tp<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockPrintStream0, byteOrder0);
      myBitOutputStream0.writeBits((-1084), (-1379));
      myBitOutputStream0.flushCache();
      assertEquals(0L, mockFile0.length());
      assertEquals(0, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%g`8FqAlD[tp<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockPrintStream0, byteOrder0);
      myBitOutputStream0.writeBits(21, 21);
      myBitOutputStream0.writeBits(21, 1535);
      assertEquals(195, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("1k, 'F5#7^mNE|~", "1k, 'F5#7^mNE|~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockFileOutputStream0, byteOrder0);
      myBitOutputStream0.writeBits((-1), (-1));
      myBitOutputStream0.writeBits((-1), 747);
      assertEquals(93L, file0.length());
      assertEquals(94, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1k, 'F5#7^mNE|~");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockFileOutputStream0, byteOrder0);
      myBitOutputStream0.write(1439);
      assertEquals(1, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream((OutputStream) null, byteOrder0);
      int int0 = myBitOutputStream0.getBytesWritten();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream((OutputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        myBitOutputStream0.writeBits(63, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(pipedOutputStream0, byteOrder0);
      try { 
        myBitOutputStream0.writeBits(117, 117);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream((OutputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        myBitOutputStream0.write(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(pipedOutputStream0, byteOrder0);
      try { 
        myBitOutputStream0.write(65);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(pipedOutputStream0, byteOrder0);
      myBitOutputStream0.writeBits((-123), 4883);
      myBitOutputStream0.flushCache();
      assertEquals(610, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream((OutputStream) null, byteOrder0);
      assertEquals(0, myBitOutputStream0.getBytesWritten());
      
      myBitOutputStream0.writeBits(1, 1);
      int int0 = myBitOutputStream0.getBytesWritten();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(pipedOutputStream0, byteOrder0);
      myBitOutputStream0.writeBits((-123), 4883);
      myBitOutputStream0.flushCache();
      assertEquals(610, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream((OutputStream) null, byteOrder0);
      myBitOutputStream0.writeBits(1237, 1);
      // Undeclared exception!
      try { 
        myBitOutputStream0.flushCache();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyBitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%g`8FqAlD[tp<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockPrintStream0, byteOrder0);
      myBitOutputStream0.writeBits(1723, 1439);
      myBitOutputStream0.writeBits(1, 1);
      myBitOutputStream0.flushCache();
      assertEquals(180, myBitOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%g`8FqAlD[tp<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MyBitOutputStream myBitOutputStream0 = new MyBitOutputStream(mockPrintStream0, byteOrder0);
      myBitOutputStream0.writeBits((-1), (-995));
      myBitOutputStream0.writeBits((-677), 112);
      myBitOutputStream0.writeBits((byte)120, 543);
      assertEquals(0, myBitOutputStream0.getBytesWritten());
  }
}
