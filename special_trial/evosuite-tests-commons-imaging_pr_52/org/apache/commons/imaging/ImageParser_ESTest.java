/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:38:06 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.gif.GifImageParser;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.ico.IcoImageParser;
import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImageParser;
import org.apache.commons.imaging.formats.png.PngImageParser;
import org.apache.commons.imaging.formats.pnm.PnmImageParser;
import org.apache.commons.imaging.formats.psd.PsdImageParser;
import org.apache.commons.imaging.formats.rgbe.RgbeImageParser;
import org.apache.commons.imaging.formats.tiff.TiffImageParser;
import org.apache.commons.imaging.formats.wbmp.WbmpImageParser;
import org.apache.commons.imaging.formats.xbm.XbmImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageParser_ESTest extends ImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      String string0 = wbmpImageParser0.getXmpXml((ByteSource) null, (Map<String, Object>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getName();
      assertEquals("Apple Icon Image", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      HashMap<String, PnmImageParser> hashMap0 = new HashMap<String, PnmImageParser>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap1);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".hdr", byteArray0);
      ImageMetadata imageMetadata0 = icnsImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[1];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[3];
      Dimension dimension0 = dcxImageParser0.getImageSize(byteArray0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Dimension dimension0 = dcxImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      MockFile mockFile0 = new MockFile("Magic: 0x", ".ico");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) byteSourceFile0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = icnsImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[9];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray1 = icnsImageParser0.getICCProfileBytes((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getDefaultExtension();
      assertEquals(".icns", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      byte[] byteArray0 = new byte[8];
      String string0 = wbmpImageParser0.dumpImageFile(byteArray0);
      assertEquals("WbmpHeader\nTypeField: 0\nFixHeaderField: 0x0\nWidth: 0\nHeight: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".hdr", byteArray0);
      String string0 = rgbeImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        pnmImageParser0.writeImage((BufferedImage) null, mockFileOutputStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        tiffImageParser0.getXmpXml(byteSourceArray0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getXmpXml((ByteSource) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        tiffImageParser0.getXmpXml(byteSourceArray0, hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        tiffImageParser0.getXmpXml(byteSourceFile0, hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[2];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        jpegImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        rgbeImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getMetadata((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        tiffImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(",bpp=", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "'>m!");
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile("STRICT", "STRICT");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getMetadata((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jpegImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pngImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pnmImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[3];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("org.apache.commons.imaging.formats.jpeg.JpegImageParser$5", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".e{0fps*{+n\">?m", (byte[]) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2746, (byte)35);
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".pam");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".pam");
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        icoImageParser0.getImageSize((File) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getImageSize(file0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getImageSize(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[2];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        psdImageParser0.getImageInfo((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      File file0 = MockFile.createTempFile(".pam0pnm_rawbit s0colortable: ", ".'");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pngImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-79), (byte)74);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "YES");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      try { 
        pcxImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 2 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      MockFile mockFile0 = new MockFile("BUFFERED_IMAGE_FACTORY");
      File file0 = MockFile.createTempFile("BUFFERED_IMAGE_FACTORY", "BUFFERED_IMAGE_FACTORY", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        pngImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageInfo((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        icoImageParser0.getImageInfo((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        pngImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid PNG Segment: Incorrect Signature
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[7];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        psdImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      // Undeclared exception!
      try { 
        psdImageParser0.getICCProfileBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      byte[] byteArray0 = new byte[7];
      try { 
        psdImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      try { 
        jpegImageParser0.getICCProfileBytes((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PngImageParser pngImageParser0 = new PngImageParser();
      // Undeclared exception!
      try { 
        pngImageParser0.getICCProfileBytes((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getICCProfileBytes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[3];
      try { 
        tiffImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        tiffImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getFormatCompliance((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getBufferedImage((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".triqx;", byteArray0);
      try { 
        icoImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: icon type is 0
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".triqx;", byteArray0);
      try { 
        icoImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICO File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(hashtable0);
      // Undeclared exception!
      try { 
        icoImageParser0.getBufferedImage((File) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[10];
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        rgbeImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a valid HDR: Incorrect Header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Vector<MockFileInputStream> vector0 = new Vector<MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = vector0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(bufferedInputStream0, "YES");
      try { 
        pnmImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".pam");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".pam");
      try { 
        pnmImageParser0.getAllBufferedImages((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getAllBufferedImages((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getAllBufferedImages(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pngImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pnmImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      PngImageParser pngImageParser0 = new PngImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        pngImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, ") cannot be written.");
      try { 
        icoImageParser0.dumpImageFile((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      PrintStream printStream0 = DebugGraphics.logStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".pam/.pam");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "gZi/dx$sY");
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = ImageParser.isStrict((Map<String, Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = MockFile.createTempFile("XMP", "XMP");
      PngImageParser pngImageParser0 = new PngImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray0 = pngImageParser0.getICCProfileBytes(file0, (Map<String, Object>) hashtable0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      MockFile mockFile0 = new MockFile("XMP", "XMP");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = psdImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageSize((File) mockFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PNM_RAWBITS");
      PngImageParser pngImageParser0 = new PngImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ImageMetadata imageMetadata0 = pngImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".png");
      PngImageParser pngImageParser0 = new PngImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pngImageParser0.getMetadata((File) mockFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getMetadata((File) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "PNM_RAWBITS");
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((byte[]) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        tiffImageParser0.getICCProfileBytes((byte[]) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      FormatCompliance formatCompliance0 = dcxImageParser0.getFormatCompliance((ByteSource) null);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.ICNS;
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      boolean boolean0 = icnsImageParser0.canAcceptType(imageFormats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.XPM;
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      boolean boolean0 = icnsImageParser0.canAcceptType(imageFormats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("YES");
      String string0 = pnmImageParser0.dumpImageFile((File) mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("YES");
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((File) mockFile0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("NO", "YES");
      Dimension dimension0 = pnmImageParser0.getImageSize((File) mockFile0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      MockFile mockFile0 = new MockFile("XMP");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage0 = psdImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashtable0);
      assertNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      File file0 = MockFile.createTempFile("STRICT", "STRICT");
      List<BufferedImage> list0 = jpegImageParser0.getAllBufferedImages(file0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getAllBufferedImages((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam0pnm_rawbits");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      FormatCompliance formatCompliance0 = pnmImageParser0.getFormatCompliance((File) mockFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".Do?ase");
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = jpegImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile(".pam", ".pam");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getImageInfo(file0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam0pnm_rawbits");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((File) mockFile0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.getImageSize((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      try { 
        pnmImageParser0.dumpImageFile((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PsdImageParser psdImageParser0 = new PsdImageParser();
      File file0 = MockFile.createTempFile("XMP", "XMP");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      try { 
        psdImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This image format (PSD-Custom) cannot be written.
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((byte[]) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[2];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      FormatCompliance formatCompliance0 = pnmImageParser0.getFormatCompliance((byte[]) null);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getAllBufferedImages((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".e{0fps*{+n\">?m");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((ByteSource) byteSourceFile0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pam", ".pam");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ImageParser[] imageParserArray0 = ImageParser.getAllImageParsers();
      assertEquals(15, imageParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[4];
      try { 
        tiffImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".pgm", ".pgm");
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      FormatCompliance formatCompliance0 = pnmImageParser0.getFormatCompliance((File) mockFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        gifImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[8];
      String string0 = rgbeImageParser0.dumpImageFile(byteArray0);
      assertEquals("", string0);
  }
}
