/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:18:05 GMT 2025
 */

package org.apache.commons.imaging.formats.gif;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.gif.DisposalMethod;
import org.apache.commons.imaging.formats.gif.GifImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GifImageParser_ESTest extends GifImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      String[] stringArray0 = gifImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getXmpXml((ByteSource) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[10];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getXmpXml(byteSourceArray0, hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("Gif: Strange Row");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getXmpXml(byteSourceFile0, hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LZWMinimumCodeSize: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "exact palette");
      MockFile mockFile0 = new MockFile("LZWMinimumCodeSize: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unknown code: 10
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getMetadata((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1822), (byte)1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "");
      // Undeclared exception!
      try { 
        gifImageParser0.getMetadata((ByteSource) byteSourceInputStream0, (Map<String, Object>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      try { 
        gifImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("k9");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[17];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unexpected end of data
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "LZWMinimumCodeSize: ");
      // Undeclared exception!
      try { 
        gifImageParser0.getImageSize((ByteSource) byteSourceInputStream0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-77), (byte)44);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getImageSize((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      try { 
        gifImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("Logical Screen Width");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        gifImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LZWMinimumCodeSize: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "exact palette");
      MockFile mockFile0 = new MockFile("LZWMinimumCodeSize: ");
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unexpected end of data
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      File file0 = MockFile.createTempFile(">~f:Q%3", ">~f:Q%3");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LZWMinimumCodeSize: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "exact palette");
      MockFile mockFile0 = new MockFile("LZWMinimumCodeSize: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unknown code: 10
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      GifImageParser gifImageParser0 = new GifImageParser();
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[21];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("zdvk6nt=", byteArray0);
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unexpected end of data
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        gifImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "{%UtGo.-]9/KDg:e");
      // Undeclared exception!
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      GifImageParser gifImageParser0 = new GifImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      GifImageParser gifImageParser0 = new GifImageParser();
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[17];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        gifImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unexpected end of data
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      GifImageParser gifImageParser0 = new GifImageParser();
      try { 
        gifImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\t");
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      GifImageParser gifImageParser0 = new GifImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      try { 
        gifImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      MockFile mockFile0 = new MockFile(".gif", "Vo,;)dxFf:c%x?Y=d%");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      try { 
        GifImageParser.createDisposalMethodFromIntValue(68);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: Invalid parsing of disposal method
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(6);
      assertEquals(DisposalMethod.TO_BE_DEFINED_3, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(5);
      assertEquals(DisposalMethod.TO_BE_DEFINED_2, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(4);
      assertEquals(DisposalMethod.TO_BE_DEFINED_1, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(3);
      assertEquals(DisposalMethod.RESTORE_TO_PREVIOUS, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(2);
      assertEquals(DisposalMethod.RESTORE_TO_BACKGROUND, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(1);
      assertEquals(DisposalMethod.DO_NOT_DISPOSE, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(7);
      assertEquals(DisposalMethod.TO_BE_DEFINED_4, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DisposalMethod disposalMethod0 = GifImageParser.createDisposalMethodFromIntValue(0);
      assertEquals(DisposalMethod.UNSPECIFIED, disposalMethod0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LZWMinimumCodeSize: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LZMinimumCodeSize: ");
      MockFile mockFile0 = new MockFile("LZWMinimumCodeSize: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        gifImageParser0.getXmpXml(byteSourceFile0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GIF: unknown code: 83
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      String string0 = gifImageParser0.getDefaultExtension();
      assertEquals(".gif", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      String string0 = gifImageParser0.getName();
      assertEquals("Graphics Interchange Format", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("LZWMinimumCodeSize: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      ImageFormat[] imageFormatArray0 = gifImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = gifImageParser0.getICCProfileBytes((ByteSource) null, (Map<String, Object>) null);
      assertNull(byteArray0);
  }
}
