/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:36:07 GMT 2025
 */

package org.apache.commons.imaging.color;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.color.ColorHunterLab;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ColorHunterLab_ESTest extends ColorHunterLab_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab((-2744.600340921), (-2744.600340921), (-1813.0));
      colorHunterLab0.hashCode();
      assertEquals((-2744.600340921), colorHunterLab0.a, 0.01);
      assertEquals((-1813.0), colorHunterLab0.b, 0.01);
      assertEquals((-2744.600340921), colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab((-1.0), (-956.62039404), 229.708675869757);
      colorHunterLab0.hashCode();
      assertEquals(229.708675869757, colorHunterLab0.b, 0.01);
      assertEquals((-956.62039404), colorHunterLab0.a, 0.01);
      assertEquals((-1.0), colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, (-2048.817596922054));
      ColorHunterLab colorHunterLab1 = ColorHunterLab.BLACK;
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertEquals((-2048.817596922054), colorHunterLab0.b, 0.01);
      assertFalse(boolean0);
      assertFalse(colorHunterLab1.equals((Object)colorHunterLab0));
      assertEquals(0.0, colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab((-2744.600340921), (-2744.600340921), (-1813.0));
      ColorHunterLab colorHunterLab1 = ColorHunterLab.BLUE;
      boolean boolean0 = colorHunterLab1.equals(colorHunterLab0);
      assertEquals((-1813.0), colorHunterLab0.b, 0.01);
      assertEquals((-2744.600340921), colorHunterLab0.a, 0.01);
      assertFalse(boolean0);
      assertEquals((-2744.600340921), colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLUE;
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(0.0, 842.7, (-2048.817596922054));
      boolean boolean0 = colorHunterLab1.equals(colorHunterLab0);
      assertEquals(842.7, colorHunterLab1.a, 0.01);
      assertFalse(boolean0);
      assertEquals((-2048.817596922054), colorHunterLab1.b, 0.01);
      assertEquals(0.0, colorHunterLab1.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 842.7, (-2048.817596922054));
      ColorHunterLab colorHunterLab1 = ColorHunterLab.BLACK;
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertEquals(842.7, colorHunterLab0.a, 0.01);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertFalse(boolean0);
      assertEquals((-2048.817596922054), colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.BLACK;
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(0.0, 0.0, 0.0);
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.RED;
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(46.109, 46.109, 29.794);
      boolean boolean0 = colorHunterLab1.equals(colorHunterLab0);
      assertEquals(29.794, colorHunterLab1.b, 0.01);
      assertEquals(46.109, colorHunterLab1.L, 0.01);
      assertEquals(46.109, colorHunterLab1.a, 0.01);
      assertFalse(boolean0);
      assertFalse(colorHunterLab0.equals((Object)colorHunterLab1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, 0.0);
      ColorHunterLab colorHunterLab1 = new ColorHunterLab(0.0, 0.0, (-1.0));
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab1);
      assertFalse(colorHunterLab1.equals((Object)colorHunterLab0));
      assertFalse(boolean0);
      assertEquals(0.0, colorHunterLab1.a, 0.01);
      assertEquals(0.0, colorHunterLab1.L, 0.01);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = ColorHunterLab.WHITE;
      boolean boolean0 = colorHunterLab0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, 0.0);
      boolean boolean0 = colorHunterLab0.equals(colorHunterLab0);
      assertTrue(boolean0);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = colorHunterLab0.equals(object0);
      assertEquals(0.0, colorHunterLab0.b, 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, colorHunterLab0.a, 0.01);
      assertEquals(0.0, colorHunterLab0.L, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorHunterLab colorHunterLab0 = new ColorHunterLab(0.0, 0.0, 0.0);
      String string0 = colorHunterLab0.toString();
      assertEquals("{L: 0.0, a: 0.0, b: 0.0}", string0);
  }
}
