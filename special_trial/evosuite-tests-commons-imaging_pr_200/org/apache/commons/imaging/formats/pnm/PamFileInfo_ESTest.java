/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:37:14 GMT 2025
 */

package org.apache.commons.imaging.formats.pnm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.apache.commons.imaging.formats.pnm.PamFileInfo;
import org.apache.commons.imaging.formats.pnm.WhiteSpaceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PamFileInfo_ESTest extends PamFileInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(3683, 3074, 3074, 3683, "RGB");
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      int int0 = pamFileInfo0.getRGB((InputStream) pushbackInputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayInputStream0.available());
      //  // Unstable assertion: assertEquals(1509949440, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(3683, 1881183399, 3683, 69, "RGB");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(5, byteArrayInputStream0.available());
      //  // Unstable assertion: assertEquals(3407872, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(15, 15, 1103, 15, "RGB_ALPHA");
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(15, 15, 1103, 15, "RGB_ALPHA");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-88);
      PamFileInfo pamFileInfo0 = new PamFileInfo(1454, 1454, 351, 1454, "RGB");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayInputStream0.available());
      //  // Unstable assertion: assertEquals(37888, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo(1, 3996, (-52), 2447837, "RGB_ALPHA");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PAM maxVal 2447837 is out of range [1;65535]
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo((-1), (-1527), 65535, 65535, ",");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unknown PAM tupletype ','
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo(471, 1081, 0, 255, "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unknown PAM tupletype ''
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo((-380), (-380), (-380), 0, "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PAM maxVal 0 is out of range [1;65535]
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(2393, (-444340075), 1103, 15, "RGB_ALPHA");
      pamFileInfo0.hasAlpha();
      assertEquals(1103, pamFileInfo0.getNumComponents());
      assertEquals(15, pamFileInfo0.getBitDepth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PamFileInfo pamFileInfo0 = new PamFileInfo(3185, 0, (byte)117, (byte)117, "GRAYSCALE_ALPHA");
      int int0 = pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(16777215, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo((-14), 319, (-621692253), 19, "GRAYSCALE_ALPHA");
      int int0 = pamFileInfo0.getNumComponents();
      assertEquals((-621692253), int0);
      assertEquals(19, pamFileInfo0.getBitDepth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(1124, 1124, 1124, 1124, "RGB");
      // Undeclared exception!
      try { 
        pamFileInfo0.getRGB((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.FileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(661, 661, 3185, 3185, "BLACKANDWHITE");
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-74), 612);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 612);
      // Undeclared exception!
      try { 
        pamFileInfo0.getRGB((InputStream) bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo(6, 6, 6, 6, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PamFileInfo pamFileInfo0 = new PamFileInfo((byte)88, 2576, (byte)88, (byte)88, "BLACKANDWHITE_ALPHA");
      try { 
        pamFileInfo0.getRGB((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PNM: Unexpected EOF
         //
         verifyException("org.apache.commons.imaging.formats.pnm.FileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo((-1), (-1), (-1), 380, "GRAYSCALE");
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int0 = pamFileInfo0.getRGB((InputStream) dataInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-16777216), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PamFileInfo pamFileInfo0 = null;
      try {
        pamFileInfo0 = new PamFileInfo((-724), 2281, 3, (-3146), "RGB");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // PAM maxVal -3146 is out of range [1;65535]
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(1124, 1124, 1124, 1124, "RGB");
      pamFileInfo0.getColorType();
      assertEquals(1124, pamFileInfo0.getNumComponents());
      assertEquals(1124, pamFileInfo0.getBitDepth());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(10, 10, 10, 10, "GRAYSCALE_ALPHA");
      String string0 = pamFileInfo0.getImageTypeDescription();
      assertEquals("PAM: portable arbitrary map file format", string0);
      assertEquals(10, pamFileInfo0.getNumComponents());
      assertEquals(10, pamFileInfo0.getBitDepth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(1, 24, 1, 1620, "RGB");
      int int0 = pamFileInfo0.getBitDepth();
      assertEquals(1, pamFileInfo0.getNumComponents());
      assertEquals(1620, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(3683, 1881183399, 3683, 69, "RGB");
      int int0 = pamFileInfo0.getNumComponents();
      assertEquals(69, pamFileInfo0.getBitDepth());
      assertEquals(3683, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(3, 3, 3, 3, "GRAYSCALE_ALPHA");
      String string0 = pamFileInfo0.getMIMEType();
      assertEquals(3, pamFileInfo0.getBitDepth());
      assertEquals("image/x-portable-arbitrary-map", string0);
      assertEquals(3, pamFileInfo0.getNumComponents());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(2, 836, 1192, 1354, "GRAYSCALE");
      boolean boolean0 = pamFileInfo0.hasAlpha();
      assertEquals(1192, pamFileInfo0.getNumComponents());
      assertEquals(1354, pamFileInfo0.getBitDepth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(10, 10, 10, 10, "GRAYSCALE_ALPHA");
      // Undeclared exception!
      try { 
        pamFileInfo0.getRGB((WhiteSpaceReader) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PAM files are only ever binary
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PamFileInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(6, 6, 6, 6, "GRAYSCALE_ALPHA");
      pamFileInfo0.getImageType();
      assertEquals(6, pamFileInfo0.getNumComponents());
      assertEquals(6, pamFileInfo0.getBitDepth());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PamFileInfo pamFileInfo0 = new PamFileInfo(10, 10, 10, 10, "GRAYSCALE_ALPHA");
      pamFileInfo0.getColorType();
      assertEquals(10, pamFileInfo0.getNumComponents());
      assertEquals(10, pamFileInfo0.getBitDepth());
  }
}
