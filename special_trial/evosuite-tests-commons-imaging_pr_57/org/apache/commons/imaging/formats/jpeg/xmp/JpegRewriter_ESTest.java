/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:06:51 GMT 2025
 */

package org.apache.commons.imaging.formats.jpeg.xmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JpegRewriter_ESTest extends JpegRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList1 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList1.add(jpegRewriter_JFIFPieceSegment0);
      assertEquals(65505, jpegRewriter_JFIFPieceSegment0.marker);
      
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      List<JpegRewriter.JFIFPiece> list0 = jpegRewriter0.insertAfterLastAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList1, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      linkedList0.offerFirst((JpegRewriter.JFIFPieceSegment) null);
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.findPhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      List<JpegRewriter.JFIFPiece> list1 = jpegRewriter0.insertAfterLastAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.findPhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      try { 
        jpegRewriter0.insertAfterLastAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JPEG file has no APP segments.
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      assertEquals(65505, jpegRewriter_JFIFPieceSegment0.marker);
      
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.findPhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      List<JpegRewriter.JFIFPiece> list1 = jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[5];
      JpegRewriter.JFIFPieceImageData jpegRewriter_JFIFPieceImageData0 = new JpegRewriter.JFIFPieceImageData(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      assertEquals(65517, jpegRewriter_JFIFPieceSegment0.marker);
      
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removeExifSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertTrue(list0.contains(jpegRewriter_JFIFPieceSegment0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      byte[] byteArray0 = new byte[8];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65519, byteArray0);
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(2160, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isApp1Segment();
      assertEquals(2160, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<JpegRewriter.JFIFPiece> linkedList0 = new LinkedList<JpegRewriter.JFIFPiece>();
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      List<JpegRewriter.JFIFPiece> list0 = jpegRewriter0.removeExifSegments((List<JpegRewriter.JFIFPiece>) linkedList0);
      JpegRewriter.JFIFPieces jpegRewriter_JFIFPieces0 = new JpegRewriter.JFIFPieces(linkedList0, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(0, byteArray0, byteArray0, byteArray0);
      File file0 = MockFile.createTempFile("SYSTEM", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      jpegRewriter_JFIFPieceSegment0.write(mockPrintStream0);
      assertEquals(0, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      JpegRewriter.JFIFPieceImageData jpegRewriter_JFIFPieceImageData0 = new JpegRewriter.JFIFPieceImageData(byteArray0, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?;uh");
      jpegRewriter_JFIFPieceImageData0.write(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("hlme&7>Q");
      jpegRewriter0.writeSegments(mockPrintStream0, linkedList0);
      assertTrue(linkedList0.contains(jpegRewriter_JFIFPieceSegment0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      assertEquals(65517, jpegRewriter_JFIFPieceSegment0.marker);
      
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removeXmpSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertTrue(list0.contains(jpegRewriter_JFIFPieceSegment0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65488, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      assertEquals(65488, jpegRewriter_JFIFPieceSegment0.marker);
      
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removePhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertTrue(list0.contains(jpegRewriter_JFIFPieceSegment0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      // Undeclared exception!
      try { 
        jpegRewriter0.writeSegments(bufferedOutputStream0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        jpegRewriter0.writeSegments(pipedOutputStream0, linkedList0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.removeXmpSegments((List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.removePhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.removeExifSegments((List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) null, (List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.insertAfterLastAppSegments((List<JpegRewriter.JFIFPieceSegment>) null, (List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.findPhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegRewriter0.analyzeJFIF(byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      // Undeclared exception!
      try { 
        jpegRewriter0.analyzeJFIF(byteSourceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-835), 51);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, (String) null);
      // Undeclared exception!
      try { 
        jpegRewriter0.analyzeJFIF(byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "27'K]s{$G");
      try { 
        jpegRewriter0.analyzeJFIF(byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      MockFile mockFile0 = new MockFile("E-9jEzvvFijgJiQ", "E-9jEzvvFijgJiQ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        jpegRewriter0.analyzeJFIF(byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65504, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isExifSegment();
      assertFalse(boolean0);
      assertEquals(65504, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment((byte)0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isAppSegment();
      assertEquals(0, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65504, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isAppSegment();
      assertFalse(jpegRewriter_JFIFPieceSegment0.isApp1Segment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add((JpegRewriter.JFIFPieceSegment) null);
      // Undeclared exception!
      try { 
        jpegRewriter0.writeSegments(byteArrayOutputStream0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(364, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      try { 
        jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JPEG file has no APP segments.
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.addFirst((JpegRewriter.JFIFPieceSegment) null);
      try { 
        jpegRewriter0.insertBeforeFirstAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JPEG file has no APP segments.
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add((JpegRewriter.JFIFPieceSegment) null);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removeExifSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(364, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isXmpSegment();
      assertFalse(boolean0);
      assertEquals(364, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isXmpSegment();
      assertFalse(boolean0);
      assertEquals(65505, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65534, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isPhotoshopApp13Segment();
      assertEquals(65534, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isPhotoshopApp13Segment();
      assertEquals(65517, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isExifSegment();
      assertEquals(65505, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65534, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isAppSegment();
      assertEquals(65534, jpegRewriter_JFIFPieceSegment0.marker);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(364, byteArray0, byteArray0, byteArray0);
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      linkedList0.add(jpegRewriter_JFIFPieceSegment0);
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      jpegRewriter0.insertAfterLastAppSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0, (List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65505, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isApp1Segment();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0, byteArray0, byteArray0);
      boolean boolean0 = jpegRewriter_JFIFPieceSegment0.isApp1Segment();
      assertFalse(boolean0);
      assertEquals(65517, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JpegRewriter.JFIFPieceImageData jpegRewriter_JFIFPieceImageData0 = new JpegRewriter.JFIFPieceImageData((byte[]) null, (byte[]) null);
      String string0 = jpegRewriter_JFIFPieceImageData0.toString();
      assertEquals("[org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter$JFIFPieceImageData]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JpegRewriter.JpegSegmentOverflowException jpegRewriter_JpegSegmentOverflowException0 = new JpegRewriter.JpegSegmentOverflowException("?;uh");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0);
      String string0 = jpegRewriter_JFIFPieceSegment0.toString();
      assertEquals("[org.apache.commons.imaging.formats.jpeg.xmp.JpegRewriter$JFIFPieceSegment (0xffed)]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      JpegRewriter.JFIFPieceSegment jpegRewriter_JFIFPieceSegment0 = new JpegRewriter.JFIFPieceSegment(65517, byteArray0, byteArray0, byteArray0);
      jpegRewriter_JFIFPieceSegment0.getSegmentData();
      assertEquals(65517, jpegRewriter_JFIFPieceSegment0.marker);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removeXmpSegments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      LinkedList<JpegRewriter.JFIFPieceSegment> linkedList0 = new LinkedList<JpegRewriter.JFIFPieceSegment>();
      List<JpegRewriter.JFIFPieceSegment> list0 = jpegRewriter0.removePhotoshopApp13Segments((List<JpegRewriter.JFIFPieceSegment>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JpegRewriter jpegRewriter0 = new JpegRewriter();
      // Undeclared exception!
      try { 
        jpegRewriter0.analyzeJFIF((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }
}
