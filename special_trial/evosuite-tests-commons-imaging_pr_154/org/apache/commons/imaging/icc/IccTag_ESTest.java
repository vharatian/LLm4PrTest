/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:13:31 GMT 2025
 */

package org.apache.commons.imaging.icc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import org.apache.commons.imaging.icc.IccTag;
import org.apache.commons.imaging.icc.IccTagType;
import org.apache.commons.imaging.icc.IccTagTypes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IccTag_ESTest extends IccTag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.B_TO_A1_TAG;
      IccTag iccTag0 = new IccTag((-6), (-6), (-6), iccTagTypes0);
      iccTag0.dump("");
      assertEquals((-6), iccTag0.offset);
      assertEquals((-6), iccTag0.length);
      assertEquals((-6), iccTag0.signature);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.B_TO_A2_TAG;
      IccTag iccTag0 = new IccTag(16, 7733248, 4, iccTagTypes0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      iccTag0.setData(byteArray0);
      assertEquals(4, iccTag0.length);
      assertEquals(7733248, iccTag0.offset);
      assertEquals(16, iccTag0.signature);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.B_TO_A2_TAG;
      IccTag iccTag0 = new IccTag(65, 65, 65, iccTagTypes0);
      // Undeclared exception!
      try { 
        iccTag0.setData((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.PREVIEW_1_TAG;
      IccTag iccTag0 = new IccTag(9, 9, 9, iccTagTypes0);
      // Undeclared exception!
      try { 
        iccTag0.dump((PrintWriter) null, "[,0_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.icc.IccTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IccTag iccTag0 = new IccTag(0, 0, (-2501), (IccTagType) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B~FdfQ:&GQ`%@5S");
      iccTag0.dump((PrintWriter) mockPrintWriter0, "B~FdfQ:&GQ`%@5S");
      assertEquals(0, iccTag0.signature);
      assertEquals((-2501), iccTag0.length);
      assertEquals(0, iccTag0.offset);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.GRAY_TRC_TAG;
      IccTag iccTag0 = new IccTag(1704, 18, 1704, iccTagTypes0);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.CanWriteFileFilter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      iccTag0.setData(byteArray0);
      iccTag0.dump((PrintWriter) mockPrintWriter0, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertEquals(292L, mockFile0.length());
      assertEquals(1704, iccTag0.signature);
      assertEquals(1704, iccTag0.length);
      assertEquals(18, iccTag0.offset);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IccTagTypes iccTagTypes0 = IccTagTypes.GRAY_TRC_TAG;
      IccTag iccTag0 = new IccTag(1704, 18, 1704, iccTagTypes0);
      byte[] byteArray0 = new byte[1];
      try { 
        iccTag0.setData(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ICC: corrupt tag data
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
}
