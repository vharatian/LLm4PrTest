/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:54:53 GMT 2025
 */

package org.apache.commons.imaging.formats.pnm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.UnaryOperator;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.pnm.PnmImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PnmImageParser_ESTest extends PnmImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)77;
      try { 
        pnmImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 2
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)51;
      byteArray0[4] = (byte)28;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid width specified.
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      BufferedImage bufferedImage0 = new BufferedImage(1628, 1628, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      pnmImageParser0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM_RAWBITS", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS", "YES");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM_RAWBITS", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-121), 23);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "YES");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM_RAWBITS", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("YES", "YES");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM_RAWBITS", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "Identifier2");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("PNM_RAWBITS", "YES");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PNM_RAWBITS");
      try { 
        pnmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 1
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      // Undeclared exception!
      try { 
        pnmImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PNM_RAWBITS");
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pnmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PNM File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("");
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      BufferedImage bufferedImage0 = new BufferedImage(1628, 1628, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(map0);
      try { 
        pnmImageParser0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: CTT
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      BufferedImage bufferedImage0 = new BufferedImage(1628, 2, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1628);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("PNM_RAWBITS", (Object) null);
      pnmImageParser0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
      assertEquals(13092, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      pnmImageParser0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
      assertEquals("P6 4 4 255\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(59, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.computeIfAbsent("FORMAT", unaryOperator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("YES");
      // Undeclared exception!
      try { 
        pnmImageParser0.writeImage((BufferedImage) null, mockFileOutputStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      hashMap0.put("PNM_RAWBITS", pnmImageParser0);
      // Undeclared exception!
      try { 
        pnmImageParser0.writeImage((BufferedImage) null, pipedOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      hashMap0.put("PNM_RAWBITS", "NO");
      // Undeclared exception!
      try { 
        pnmImageParser0.writeImage((BufferedImage) null, pipedOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        pnmImageParser0.writeImage((BufferedImage) null, pipedOutputStream0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)54;
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PNM: Unexpected EOF
         //
         verifyException("org.apache.commons.imaging.formats.pnm.WhiteSpaceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)53;
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PNM: Unexpected EOF
         //
         verifyException("org.apache.commons.imaging.formats.pnm.WhiteSpaceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)52;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PNM: Unexpected EOF
         //
         verifyException("org.apache.commons.imaging.formats.pnm.WhiteSpaceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      try { 
        pnmImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // PNM file has invalid prefix byte 2
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      byte[] byteArray0 = new byte[3];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM_RAWBITS", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageMetadata imageMetadata0 = pnmImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      String[] stringArray0 = pnmImageParser0.getAcceptedExtensions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      String string0 = pnmImageParser0.getDefaultExtension();
      assertEquals(".pnm", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray0 = pnmImageParser0.getICCProfileBytes((ByteSource) null, (Map<String, Object>) hashtable0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ImageFormat[] imageFormatArray0 = pnmImageParser0.getAcceptedTypes();
      assertEquals(5, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      String string0 = pnmImageParser0.getName();
      assertEquals("Pbm-Custom", string0);
  }
}
