/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:07:03 GMT 2025
 */

package org.apache.commons.imaging.formats.ico;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.ico.IcoImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IcoImageParser_ESTest extends IcoImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)31;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      InputStream inputStream0 = byteSourceArray0.getInputStream(0L);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(inputStream0, "");
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: icon type is 31
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(".ico", byteArray0);
      ImageMetadata imageMetadata0 = icoImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = icoImageParser0.getICCProfileBytes((ByteSource) null, (Map<String, Object>) hashMap0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ImageFormat[] imageFormatArray0 = icoImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      String[] stringArray0 = icoImageParser0.getAcceptedExtensions();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[7];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icoImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: icon type is 0
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        icoImageParser0.getBufferedImage((ByteSource) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icoImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICO File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockFile mockFile0 = new MockFile("TIFF does not contain an image.");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icoImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      // Undeclared exception!
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2504);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "%Y^Ciu!Y");
      // Undeclared exception!
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICO File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      MockFile mockFile0 = new MockFile("[??<%q#je", "[??<%q#je");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      // Undeclared exception!
      try { 
        icoImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2491), 7);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "3PtGTH7");
      // Undeclared exception!
      try { 
        icoImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icoImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICO File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      MockFile mockFile0 = new MockFile("Not a Valid ICNS File: magic is 0x", "Not a Valid ICNS File: magic is 0x");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icoImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(map0);
      try { 
        icoImageParser0.writeImage((BufferedImage) null, (OutputStream) null, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: CTT
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("FORMAT", object0);
      IcoImageParser icoImageParser0 = new IcoImageParser();
      // Undeclared exception!
      try { 
        icoImageParser0.writeImage((BufferedImage) null, (OutputStream) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      // Undeclared exception!
      try { 
        icoImageParser0.writeImage((BufferedImage) null, (OutputStream) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-21);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("hu)u@nNk-:^/hZ@S`1", byteArray0);
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: reserved is 235
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[7];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icoImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICO File: icon type is 0
         //
         verifyException("org.apache.commons.imaging.formats.ico.IcoImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      String string0 = icoImageParser0.getName();
      assertEquals("ico-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      String string0 = icoImageParser0.getDefaultExtension();
      assertEquals(".ico", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Dimension dimension0 = icoImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
      assertNull(imageInfo0);
  }
}
