/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:09:27 GMT 2025
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.palette.ColorSpaceSubset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ColorSpaceSubset_ESTest extends ColorSpaceSubset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorSpaceSubset.RgbComparator colorSpaceSubset_RgbComparator0 = new ColorSpaceSubset.RgbComparator();
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1, 0);
      assertEquals(1, colorSpaceSubset0.getArea());
      
      int[] intArray0 = new int[1];
      colorSpaceSubset0.setAverageRGB(intArray0);
      int int0 = colorSpaceSubset_RgbComparator0.compare(colorSpaceSubset0, colorSpaceSubset0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1, 1);
      int[] intArray0 = new int[7];
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1, 1);
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1961;
      intArray0[1] = 1961;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1961, 1961, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1005481
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1961;
      intArray0[2] = 1961;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1961, 1961, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 514806272
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-661);
      int[] intArray1 = new int[9];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray1);
      int int0 = colorSpaceSubset0.getArea();
      assertEquals(662, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-8);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray0);
      int int0 = colorSpaceSubset0.getArea();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 223;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray0);
      int int0 = colorSpaceSubset0.getArea();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1961;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1961, 1961, intArray0, intArray0);
      colorSpaceSubset0.dumpJustRGB("");
      assertEquals(0, colorSpaceSubset0.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1961;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1961, 1961, intArray0, intArray0);
      colorSpaceSubset0.dumpJustRGB("");
      assertEquals(0, colorSpaceSubset0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1961;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1961, 1961, intArray0, intArray0);
      colorSpaceSubset0.dumpJustRGB("");
      assertEquals(1, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(353, (-2133));
      colorSpaceSubset0.dumpJustRGB("\trgb: ");
      assertEquals(0, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[6];
      intArray1[2] = (-453);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-453), 708, intArray0, intArray1);
      colorSpaceSubset0.dump("\trdiff: ");
      assertEquals((-452), colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[6];
      intArray1[1] = 708;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-453), 708, intArray0, intArray1);
      colorSpaceSubset0.dump("\trdiff: ");
      assertEquals(0, colorSpaceSubset0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[6];
      intArray1[0] = 708;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-453), 708, intArray0, intArray1);
      colorSpaceSubset0.dump("\trdiff: ");
      assertEquals(709, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-8);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray0);
      colorSpaceSubset0.dump(" *p@ohkcE^](@xz&}qX");
      assertEquals(0, colorSpaceSubset0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 223;
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray0);
      colorSpaceSubset0.dump(" *p@ohkcE^](@xz&}qX");
      assertEquals(0, colorSpaceSubset0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-661);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-8), 223, intArray0, intArray0);
      colorSpaceSubset0.dump(" *p@ohkcE^](@xz&}qX");
      assertEquals(1, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0);
      boolean boolean0 = colorSpaceSubset0.contains(2, 2, 2);
      assertEquals(1, colorSpaceSubset0.getArea());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 29);
      boolean boolean0 = colorSpaceSubset0.contains(2097151, 1, 1829);
      assertTrue(boolean0);
      assertEquals(0, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1, 0);
      boolean boolean0 = colorSpaceSubset0.contains(1, 2700, 1);
      assertFalse(boolean0);
      assertEquals(1, colorSpaceSubset0.getArea());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[3];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-453), 708, intArray0, intArray0);
      boolean boolean0 = colorSpaceSubset0.contains((-1428), 708, 215);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(2308, 2308);
      colorSpaceSubset0.setIndex(1234);
      int int0 = colorSpaceSubset0.getIndex();
      assertEquals(1234, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-150), (-150), intArray0, intArray0);
      assertEquals(0, colorSpaceSubset0.getIndex());
      
      colorSpaceSubset0.setIndex((-150));
      int int0 = colorSpaceSubset0.getIndex();
      assertEquals((-150), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 29);
      int int0 = colorSpaceSubset0.getArea();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[3];
      intArray1[2] = (-780);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-780), 1, intArray0, intArray1);
      int int0 = colorSpaceSubset0.getArea();
      assertEquals((-779), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[6];
      intArray1[0] = 708;
      intArray1[1] = 708;
      intArray1[2] = (-453);
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-453), 708, intArray0, intArray1);
      // Undeclared exception!
      colorSpaceSubset0.setAverageRGB(intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-1670), (-1670));
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(8191, 8191);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1073741824
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset((-1766), (-1766), (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.getArea();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(8, 8, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.dumpJustRGB("\")t.hhuoA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(10, 10, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.dump((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.dump("~-IEQG7Dq*8#Zjw3-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[5];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1834, 1834, (int[]) null, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.contains(0, 1834, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.contains(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[9];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.setAverageRGB(intArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0);
      boolean boolean0 = colorSpaceSubset0.contains(6, 6, 1420);
      assertEquals(1, colorSpaceSubset0.getArea());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0);
      boolean boolean0 = colorSpaceSubset0.contains(6, 6, (-1));
      assertEquals(1, colorSpaceSubset0.getArea());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0);
      boolean boolean0 = colorSpaceSubset0.contains(0, (-347), 0);
      assertEquals(1, colorSpaceSubset0.getArea());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[4];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(40, 40, intArray0, intArray0);
      boolean boolean0 = colorSpaceSubset0.contains(40, 2606, 2606);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColorSpaceSubset.RgbComparator colorSpaceSubset_RgbComparator0 = new ColorSpaceSubset.RgbComparator();
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(1, 0);
      ColorSpaceSubset colorSpaceSubset1 = new ColorSpaceSubset(1, 134217727);
      int int0 = colorSpaceSubset_RgbComparator0.compare(colorSpaceSubset0, colorSpaceSubset1);
      assertEquals(1, colorSpaceSubset0.getArea());
      assertEquals(0, colorSpaceSubset1.getArea());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[1];
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(0, 0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        colorSpaceSubset0.dumpJustRGB("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.palette.ColorSpaceSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColorSpaceSubset colorSpaceSubset0 = new ColorSpaceSubset(5, 5);
      int int0 = colorSpaceSubset0.getIndex();
      assertEquals(0, int0);
      assertEquals(32768, colorSpaceSubset0.getArea());
  }
}
