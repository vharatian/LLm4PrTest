/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:49:47 GMT 2025
 */

package org.apache.commons.imaging.palette;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.imaging.palette.ColorCount;
import org.apache.commons.imaging.palette.ColorGroup;
import org.apache.commons.imaging.palette.LongestAxisMedianCut;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LongestAxisMedianCut_ESTest extends LongestAxisMedianCut_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-44));
      colorCount0.count = 255;
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(774);
      linkedList1.add(colorCount1);
      linkedList1.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, true);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(0);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount((-1));
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1686));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(Integer.MAX_VALUE);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      LinkedList<ColorGroup> linkedList1 = new LinkedList<ColorGroup>();
      linkedList1.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList1, false);
      assertFalse(linkedList1.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(Integer.MAX_VALUE);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(4475);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(0);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(4475);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      linkedList0.add(colorGroup0);
      longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, true);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      // Undeclared exception!
      try { 
        longestAxisMedianCut0.performNextMedianCut((List<ColorGroup>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(781);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(3);
      linkedList1.add(colorCount1);
      linkedList1.add(colorCount0);
      colorCount1.count = 243;
      colorCount0.count = 781;
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount1.count = 781;
      linkedList0.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, true);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1636));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      linkedList0.remove();
      LinkedList<ColorGroup> linkedList1 = new LinkedList<ColorGroup>();
      linkedList1.add(colorGroup0);
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      try { 
        longestAxisMedianCut0.performNextMedianCut(linkedList1, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // empty color_group
         //
         verifyException("org.apache.commons.imaging.palette.ColorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-3203));
      colorCount0.count = (-3203);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(2147483645);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      linkedList0.add(colorGroup0);
      // Undeclared exception!
      try { 
        longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1621));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      ColorCount colorCount2 = new ColorCount(0);
      linkedList0.add(colorCount2);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      LinkedList<ColorGroup> linkedList1 = new LinkedList<ColorGroup>();
      linkedList1.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList1, true);
      assertFalse(linkedList1.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-3169));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(Integer.MAX_VALUE);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
      assertFalse(linkedList0.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-32));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      LinkedList<ColorGroup> linkedList1 = new LinkedList<ColorGroup>();
      linkedList1.add(colorGroup0);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList1, true);
      assertFalse(linkedList1.contains(colorGroup0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-3203));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(2147483645);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      linkedList0.add(colorGroup0);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup1 = new ColorGroup(linkedList1, false);
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      linkedList0.add(colorGroup1);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList0, false);
      assertFalse(linkedList0.contains(colorGroup1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongestAxisMedianCut longestAxisMedianCut0 = new LongestAxisMedianCut();
      LinkedList<ColorCount> linkedList0 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1686));
      linkedList0.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      linkedList0.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList0, true);
      LinkedList<ColorGroup> linkedList1 = new LinkedList<ColorGroup>();
      linkedList1.add(colorGroup0);
      longestAxisMedianCut0.performNextMedianCut(linkedList1, false);
      boolean boolean0 = longestAxisMedianCut0.performNextMedianCut(linkedList1, false);
      assertFalse(linkedList1.contains(colorGroup0));
      assertFalse(boolean0);
  }
}
