/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:44:12 GMT 2025
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.PixelDensity;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.formats.png.PhysicalScale;
import org.apache.commons.imaging.formats.png.PngImagingParameters;
import org.apache.commons.imaging.formats.png.PngText;
import org.apache.commons.imaging.formats.png.PngWriter;
import org.apache.commons.imaging.palette.PaletteFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PngWriter_ESTest extends PngWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(5, 5, true);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((-1.0), (-1.0));
      pngImagingParameters0.setPixelDensity(pixelDensity0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(W't>ze");
      PngWriter pngWriter0 = new PngWriter();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(5, 5, false);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre(1.7976931348623157E308, 5);
      pngImagingParameters0.setPixelDensity(pixelDensity0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.imaging.internal.Debug");
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(1, 1, false);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PaletteFactory paletteFactory0 = new PaletteFactory();
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, pngImagingParameters0, paletteFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        pngWriter0.writeImage((BufferedImage) null, (OutputStream) byteArrayOutputStream0, (PngImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!y._cI}GceMT\"iTU<4");
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, pngImagingParameters0);
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, pngImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(12, 12, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setPredictorEnabled(true);
      pngImagingParameters0.setForceTrueColor(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, paletteFactory0);
      assertNull(pngImagingParameters0.getFileName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(12, 12, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setPredictorEnabled(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, paletteFactory0);
      assertEquals(0, bufferedImage0.getMinTileY());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setForceTrueColor(true);
      pngImagingParameters0.setPredictorEnabled(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
      assertEquals(12, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(12, 12, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      ArrayList<PngText.Itxt> arrayList0 = new ArrayList<PngText.Itxt>();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setTextChunks(arrayList0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      PngText.Itxt pngText_Itxt0 = new PngText.Itxt("L#g1SR&K{9tb", "r<PQV~h@2%oPu+JwY", (String) null, "");
      arrayList0.add(pngText_Itxt0);
      // Undeclared exception!
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.PngWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      ArrayList<PngText.Itxt> arrayList0 = new ArrayList<PngText.Itxt>();
      arrayList0.add((PngText.Itxt) null);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setTextChunks(arrayList0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unknown text to embed in PNG: null
         //
         verifyException("org.apache.commons.imaging.formats.png.PngWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      ArrayList<PngText.Itxt> arrayList0 = new ArrayList<PngText.Itxt>();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setTextChunks(arrayList0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(12, 12, true);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngImagingParameters0.setXmpXml(": ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ", true);
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(12, 12, false);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, 1160.9913);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(12, 255, true);
      MockFile mockFile0 = new MockFile("q;9 <q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(2480.681829778238, (byte)8);
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setPhysicalScale(physicalScale0);
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters1, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(5, 5, false);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PixelDensity pixelDensity0 = PixelDensity.createUnitless(10000.0, 0.0);
      pngImagingParameters0.setPixelDensity(pixelDensity0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.imaging.internal.Debug");
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(5, 5, false);
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((byte)8, 0.0);
      pngImagingParameters0.setPixelDensity(pixelDensity0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.imaging.internal.Debug");
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(12, 12, false);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setForceIndexedColor(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(12, 255, true);
      MockFile mockFile0 = new MockFile("q;9 <q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setForceTrueColor(true);
      pngWriter0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, pngImagingParameters1, paletteFactory0);
      assertEquals(104L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(12, 12, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setForceTrueColor(true);
      pngImagingParameters1.setForceIndexedColor(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Params: Cannot force both indexed and true color modes
         //
         verifyException("org.apache.commons.imaging.formats.png.PngWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(12, 12, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setForceIndexedColor(true);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, paletteFactory0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      ArrayList<PngText.Itxt> arrayList0 = new ArrayList<PngText.Itxt>();
      arrayList0.add((PngText.Itxt) null);
      pngImagingParameters0.setTextChunks(arrayList0);
      try { 
        pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unknown text to embed in PNG: null
         //
         verifyException("org.apache.commons.imaging.formats.png.PngWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(1, 1, false);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0, (PaletteFactory) null);
      assertFalse(pngImagingParameters0.isForceIndexedColor());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      // Undeclared exception!
      try { 
        pngWriter0.writeImage((BufferedImage) null, (OutputStream) byteArrayOutputStream0, (PngImagingParameters) null, paletteFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PngImagingParameters pngImagingParameters1 = pngImagingParameters0.setBitDepth((byte)13);
      PaletteFactory paletteFactory0 = new PaletteFactory();
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters1, paletteFactory0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PngWriter pngWriter0 = new PngWriter();
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      PrintStream printStream0 = DebugGraphics.logStream();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      ArrayList<PngText.Itxt> arrayList0 = new ArrayList<PngText.Itxt>();
      PngText.Itxt pngText_Itxt0 = new PngText.Itxt("PNG tEXt chunk keyword is not ISO-8859-1: ", "PNG tEXt chunk keyword is not ISO-8859-1: ", "PNG tEXt chunk keyword is not ISO-8859-1: ", "PNG tEXt chunk keyword is not ISO-8859-1: ");
      arrayList0.add(pngText_Itxt0);
      pngImagingParameters0.setTextChunks(arrayList0);
      // Undeclared exception!
      pngWriter0.writeImage(bufferedImage0, (OutputStream) printStream0, pngImagingParameters0);
  }
}
