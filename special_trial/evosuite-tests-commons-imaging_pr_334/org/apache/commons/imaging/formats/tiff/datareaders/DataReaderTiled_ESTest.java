/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 17:52:47 GMT 2025
 */

package org.apache.commons.imaging.formats.tiff.datareaders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.RasterFormatException;
import java.io.IOException;
import java.nio.ByteOrder;
import java.util.LinkedList;
import org.apache.commons.imaging.formats.tiff.AbstractTiffElement;
import org.apache.commons.imaging.formats.tiff.AbstractTiffImageData;
import org.apache.commons.imaging.formats.tiff.JpegImageData;
import org.apache.commons.imaging.formats.tiff.TiffDirectory;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffRasterData;
import org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;
import org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreter;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;
import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DataReaderTiled_ESTest extends DataReaderTiled_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[46];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[2];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 3, 3, 3, intArray0, 3, 3, 3, 3, 3, 3, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[11];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel((-25), intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[1];
      byte[] byteArray0 = new byte[0];
      AbstractTiffImageData.Data abstractTiffImageData_Data0 = new AbstractTiffImageData.Data((-25), (-25), byteArray0);
      abstractTiffElement_DataElementArray0[0] = (AbstractTiffElement.DataElement) abstractTiffImageData_Data0;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, (-1453), (-25));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 1631, (-25), (-2790), intArray0, (-324), 2467, 2, (-324), 81, (-2108), tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[16];
      byte[] byteArray0 = new byte[7];
      JpegImageData jpegImageData0 = new JpegImageData((byte)42, 6, byteArray0);
      abstractTiffElement_DataElementArray0[0] = (AbstractTiffElement.DataElement) jpegImageData0;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 6, (byte)0);
      Rectangle rectangle0 = new Rectangle(6, 6);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, 6, 6, (-426), intArray0, 255, 2991, 3, 2991, (-105), 0, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(473, linkedList0, 473, 473, byteOrder0);
      int[] intArray0 = new int[35];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(473, intArray0, 473, 0, 6, true);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles((AbstractTiffElement.DataElement[]) null, 473, 473);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 473, 473, 473, intArray0, 6, 6, 2, 6, 473, 473, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(50215, 2, 116, (-16777222));
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Allocation limit 1,073,741,824 exceeded: -7,784,631,008
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int[] intArray0 = new int[65];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(2, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[1];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 2, 2);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 2, 2, 2, intArray0, 2, 2, 2, 2, 2, 2, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(2, 2, (-4165), 2);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[4];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(36867, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[6];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 36867, 36867);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 0, 0, 23, intArray0, 16, 0, 3, 0, 0, 4871, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(33437, linkedList0, 33437, 33437, byteOrder0);
      int[] intArray0 = new int[5];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(33437, intArray0, 33437, 0, 6, true);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles((AbstractTiffElement.DataElement[]) null, 33437, 33437);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 33437, 33437, 33437, intArray0, 6, 6, 2, 6, 33437, 33437, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(2, 33437, 6, 6);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Allocation limit 1,073,741,824 exceeded: 4,472,131,876
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[6];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 722, (byte)0);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, 722, 722, 722, intArray0, 722, 722, 722, 722, 722, 0, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setBounds(37390, 4, 37390, 16711680);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int[] intArray0 = new int[65];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[2];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 3, 3, 3, intArray0, 3, 3, 3, 3, 3, 3, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(3, 3, 3, 3);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[9];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[6];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 0, 3, 3, intArray0, 0, 0, 0, 0, 3, 3, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, false, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(476, linkedList0, 476, 476, byteOrder0);
      int[] intArray0 = new int[53];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(476, intArray0, 476, 0, 6, false);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 6, 6, 0, (int[]) null, 1372, 0, (-1171), 40963, 0, 631, tiffPlanarConfiguration0, byteOrder0, (AbstractTiffImageData.Tiles) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int[] intArray0 = new int[33];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[6];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = null;
      try {
        dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 3, 37, 3, intArray0, 3, (-89), (-89), 37, 37, 0, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.Allocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffDirectory tiffDirectory0 = new TiffDirectory(526, linkedList0, 526, 526, byteOrder0);
      int[] intArray0 = new int[35];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(526, intArray0, 526, 0, 6, false);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles((AbstractTiffElement.DataElement[]) null, 526, 526);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, 526, 526, 526, intArray0, 6, 6, 2, 6, 526, 526, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Dimension dimension0 = new Dimension(526, 526);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setRect((double) 526L, 0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster dimensions less than or equal to zero are not supported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffRasterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int[] intArray0 = new int[65];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(2, intArray0, 0, 0, 0, true);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[1];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 2, 2);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 2040, (-3067), 2, intArray0, 2, 2, 2, 2, (-3067), 2, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle((-3067), (-3067), 2040, 2040);
      TiffRasterData tiffRasterData0 = dataReaderTiled0.readRasterData(rectangle0);
      assertEquals(2040, tiffRasterData0.getHeight());
      assertEquals(2040, tiffRasterData0.getWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      int[] intArray0 = new int[65];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(2, intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[1];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 2, 2);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 2, 2, 2, intArray0, 2, 2, 2, 2, 2, 2, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      int[] intArray0 = new int[46];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, true);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[7];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 3, 3, 3, intArray0, 3, 3, 3, 3, 3, 3, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(3, 0, 0, 0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Raster dimensions less than or equal to zero are not supported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffRasterData", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[4];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(3, intArray0, 0, 0, 0, true);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[4];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 3, 3);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 3, 3, 3, intArray0, 3, 3, 3, 3, 3, 3, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readRasterData((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      int[] intArray0 = new int[9];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel((-1362), intArray0, 0, 0, 0, false);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[6];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, (-1362), (-1362));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterBiLevel0, 0, (-1362), (-1362), intArray0, 0, 0, 0, 0, (-1362), (-1362), tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      try { 
        dataReaderTiled0.readRasterData(rectangle0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported sample format, value=0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[23];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 6, 6);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, 6, (-23), 6, intArray0, 6, 6, 6, 6, 6, 6, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(6, 1267);
      rectangle0.translate(6, 1267);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[8];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 6, 6);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, 6, (-12), 6, intArray0, 6, 6, 6, 6, 6, 6, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle(6, 1262);
      rectangle0.setRect((double) 1262, 1447.652, 1447.652, 1447.652);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, false);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[4];
      byte[] byteArray0 = new byte[12];
      JpegImageData jpegImageData0 = new JpegImageData((byte)49, 6, byteArray0);
      abstractTiffElement_DataElementArray0[0] = (AbstractTiffElement.DataElement) jpegImageData0;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, (byte)49, (-864));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.PLANAR;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, (byte)49, (byte)49, (byte)49, intArray0, (byte)49, 6, 6, (-864), (byte)49, 7, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // TIFF file in non-supported configuration: JPEG compression used in planar configuration.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<TiffField> linkedList0 = new LinkedList<TiffField>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffDirectory tiffDirectory0 = new TiffDirectory(496, linkedList0, 496, 496, byteOrder0);
      int[] intArray0 = new int[46];
      PhotometricInterpreterBiLevel photometricInterpreterBiLevel0 = new PhotometricInterpreterBiLevel(496, intArray0, 496, 0, 6, true);
      byte[] byteArray0 = new byte[3];
      JpegImageData jpegImageData0 = new JpegImageData(82L, 6, byteArray0);
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[3];
      abstractTiffElement_DataElementArray0[0] = (AbstractTiffElement.DataElement) jpegImageData0;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, (byte) (-14), 331);
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled(tiffDirectory0, photometricInterpreterBiLevel0, (byte)21, 32766, (byte) (-14), intArray0, 37, 37, (byte) (-14), 331, (-97), 5, tiffPlanarConfiguration0, byteOrder0, abstractTiffImageData_Tiles0);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1146810
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(183, intArray0, (-742), 183, (-2268));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[2];
      byte[] byteArray0 = new byte[1];
      JpegImageData jpegImageData0 = new JpegImageData(0L, 183, byteArray0);
      abstractTiffElement_DataElementArray0[0] = (AbstractTiffElement.DataElement) jpegImageData0;
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 397, 183);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterYCbCr0, 183, 183, 183, intArray0, 183, 183, 7, 108, (-1672), 7, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // negative or zero subimage width
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[23];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, (-1223), 6);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, (PhotometricInterpreter) null, 6, (-23), 318, intArray0, 255, 255, 3135, 318, 50936, (-1720), tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData((Rectangle) null, true, true);
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
         //
         // subimage (y+height) is outside raster
         //
         verifyException("org.apache.commons.imaging.common.ImageBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      PhotometricInterpreterYCbCr photometricInterpreterYCbCr0 = new PhotometricInterpreterYCbCr(183, intArray0, (-742), 183, (-2268));
      TiffPlanarConfiguration tiffPlanarConfiguration0 = TiffPlanarConfiguration.CHUNKY;
      AbstractTiffElement.DataElement[] abstractTiffElement_DataElementArray0 = new AbstractTiffElement.DataElement[2];
      AbstractTiffImageData.Tiles abstractTiffImageData_Tiles0 = new AbstractTiffImageData.Tiles(abstractTiffElement_DataElementArray0, 397, 183);
      DataReaderTiled dataReaderTiled0 = new DataReaderTiled((TiffDirectory) null, photometricInterpreterYCbCr0, 183, 183, 183, intArray0, 183, 183, 7, 108, (-1672), 7, tiffPlanarConfiguration0, (ByteOrder) null, abstractTiffImageData_Tiles0);
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        dataReaderTiled0.readImageData(rectangle0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.datareaders.DataReaderTiled", e);
      }
  }
}
