/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:46:32 GMT 2025
 */

package org.apache.commons.imaging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.dcx.DcxImageParser;
import org.apache.commons.imaging.formats.gif.GifImageParser;
import org.apache.commons.imaging.formats.gif.GifImagingParameters;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.ico.IcoImageParser;
import org.apache.commons.imaging.formats.ico.IcoImagingParameters;
import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
import org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;
import org.apache.commons.imaging.formats.pcx.PcxImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.apache.commons.imaging.formats.png.PngImageParser;
import org.apache.commons.imaging.formats.png.PngImagingParameters;
import org.apache.commons.imaging.formats.pnm.PnmImageParser;
import org.apache.commons.imaging.formats.pnm.PnmImagingParameters;
import org.apache.commons.imaging.formats.rgbe.RgbeImageParser;
import org.apache.commons.imaging.formats.rgbe.RgbeImagingParameters;
import org.apache.commons.imaging.formats.tiff.TiffImageParser;
import org.apache.commons.imaging.formats.tiff.TiffImagingParameters;
import org.apache.commons.imaging.formats.wbmp.WbmpImageParser;
import org.apache.commons.imaging.formats.wbmp.WbmpImagingParameters;
import org.apache.commons.imaging.formats.xbm.XbmImageParser;
import org.apache.commons.imaging.formats.xbm.XbmImagingParameters;
import org.apache.commons.imaging.formats.xpm.XpmImageParser;
import org.apache.commons.imaging.formats.xpm.XpmImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ImageParser_ESTest extends ImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      String string0 = jpegImageParser0.getName();
      assertEquals("Jpeg-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[7];
      ImageMetadata imageMetadata0 = icoImageParser0.getMetadata(byteArray0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      IcoImagingParameters icoImagingParameters0 = new IcoImagingParameters();
      ImageMetadata imageMetadata0 = icoImageParser0.getMetadata((ByteSource) null, icoImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      ImageMetadata imageMetadata0 = dcxImageParser0.getMetadata((ByteSource) byteSourceArray0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[4];
      IcoImagingParameters icoImagingParameters0 = new IcoImagingParameters();
      Dimension dimension0 = icoImageParser0.getImageSize(byteArray0, icoImagingParameters0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[1];
      IcoImagingParameters icoImagingParameters0 = icoImageParser0.getDefaultParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(")ramEuy{<WJ", byteArray0);
      Dimension dimension0 = icoImageParser0.getImageSize((ByteSource) byteSourceArray0, icoImagingParameters0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      byte[] byteArray0 = new byte[2];
      ImageInfo imageInfo0 = dcxImageParser0.getImageInfo(byteArray0, pcxImagingParameters0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcoImagingParameters icoImagingParameters0 = icoImageParser0.getDefaultParameters();
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) byteSourceArray0, icoImagingParameters0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, ".getMetadata: ");
      ImageInfo imageInfo0 = icoImageParser0.getImageInfo((ByteSource) byteSourceInputStream0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      RgbeImagingParameters rgbeImagingParameters0 = new RgbeImagingParameters();
      byte[] byteArray1 = rgbeImageParser0.getICCProfileBytes(byteArray0, rgbeImagingParameters0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = icnsImageParser0.getICCProfileBytes(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0icnsOeaer");
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      WbmpImagingParameters wbmpImagingParameters0 = new WbmpImagingParameters();
      byte[] byteArray0 = wbmpImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, wbmpImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = jpegImageParser0.getDefaultParameters();
      assertNull(jpegImagingParameters0.getXmpXml());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      String string0 = pngImageParser0.getDefaultExtension();
      assertEquals("png", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("{EN':Kw|FQ", (byte[]) null);
      String string0 = rgbeImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = MockFile.createTempFile(") cannot be written.", "g");
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      boolean boolean0 = dcxImageParser0.canAcceptExtension(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      GifImageParser gifImageParser0 = new GifImageParser();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0);
      GifImagingParameters gifImagingParameters0 = new GifImagingParameters();
      // Undeclared exception!
      try { 
        gifImageParser0.writeImage((BufferedImage) null, binaryOutputStream0, gifImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.gif.GifImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = new JpegImagingParameters();
      try { 
        jpegImageParser0.getMetadata(byteArray0, jpegImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getMetadata((byte[]) null, (RgbeImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[7];
      GifImagingParameters gifImagingParameters0 = new GifImagingParameters();
      try { 
        gifImageParser0.getMetadata(byteArray0, gifImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        rgbeImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[9];
      try { 
        gifImageParser0.getMetadata(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("{EN':Kw|FQ", (byte[]) null);
      PngImageParser pngImageParser0 = new PngImageParser();
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      // Undeclared exception!
      try { 
        pngImageParser0.getMetadata((ByteSource) byteSourceArray0, pngImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      Hashtable<MockFileInputStream, MockFileInputStream> hashtable0 = new Hashtable<MockFileInputStream, MockFileInputStream>();
      Enumeration<MockFileInputStream> enumeration0 = hashtable0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(sequenceInputStream0, "dataparserindexed");
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceInputStream0, tiffImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      TiffImagingParameters tiffImagingParameters0 = tiffImageParser0.getDefaultParameters();
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceFile0, tiffImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getMetadata((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w~:O.p1Z|_f");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      try { 
        jpegImageParser0.getMetadata((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[2];
      RgbeImagingParameters rgbeImagingParameters0 = new RgbeImagingParameters();
      try { 
        rgbeImageParser0.getImageSize(byteArray0, rgbeImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a valid HDR: Incorrect Header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      try { 
        tiffImageParser0.getImageSize(byteArray0, tiffImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      try { 
        jpegImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageSize((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        icnsImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Dcx-Custom");
      File file0 = MockFile.createTempFile("Dcx-Custom", "Dcx-Custom", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      RgbeImagingParameters rgbeImagingParameters0 = new RgbeImagingParameters();
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      try { 
        rgbeImageParser0.getImageSize((ByteSource) byteSourceFile0, rgbeImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      // Undeclared exception!
      try { 
        tiffImageParser0.getImageSize((ByteSource) null, tiffImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("AgZxP|qJ:/D", byteArray0);
      TiffImagingParameters tiffImagingParameters0 = tiffImageParser0.getDefaultParameters();
      try { 
        tiffImageParser0.getImageSize((ByteSource) byteSourceArray0, tiffImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PnmImagingParameters pnmImagingParameters0 = new PnmImagingParameters();
      try { 
        pnmImageParser0.getImageSize((ByteSource) byteSourceFile0, pnmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = jpegImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        jpegImageParser0.getImageSize((File) null, jpegImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getImageSize((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = jpegImageParser0.getDefaultParameters();
      try { 
        jpegImageParser0.getImageInfo(byteArray0, jpegImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      // Undeclared exception!
      try { 
        tiffImageParser0.getImageInfo((byte[]) null, tiffImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      TiffImagingParameters tiffImagingParameters0 = tiffImageParser0.getDefaultParameters();
      try { 
        tiffImageParser0.getImageInfo((ByteSource) byteSourceArray0, tiffImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      XpmImagingParameters xpmImagingParameters0 = xpmImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        xpmImageParser0.getImageInfo((ByteSource) null, xpmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.xpm.XpmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-84);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("1pic", byteArray0);
      WbmpImagingParameters wbmpImagingParameters0 = new WbmpImagingParameters();
      try { 
        wbmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, wbmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error reading WBMP header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      try { 
        xbmImageParser0.getImageInfo((ByteSource) byteSourceFile0, xbmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        jpegImageParser0.getImageInfo((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getImageInfo((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.rgbe.RgbeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      File file0 = MockFile.createTempFile("jpg", "jpg");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      RgbeImagingParameters rgbeImagingParameters0 = new RgbeImagingParameters();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getImageInfo((File) null, rgbeImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = new JpegImagingParameters();
      // Undeclared exception!
      try { 
        jpegImageParser0.getICCProfileBytes((byte[]) null, jpegImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      // Undeclared exception!
      try { 
        pngImageParser0.getICCProfileBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        tiffImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      MockFile mockFile0 = new MockFile("Dcx-Custm");
      mockFile0.createNewFile();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      JpegImagingParameters jpegImagingParameters0 = new JpegImagingParameters();
      try { 
        jpegImageParser0.getICCProfileBytes((ByteSource) byteSourceFile0, jpegImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getICCProfileBytes((File) null, (JpegImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getICCProfileBytes((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      // Undeclared exception!
      try { 
        gifImageParser0.getFormatCompliance((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[1];
      try { 
        gifImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("png", byteArray0);
      try { 
        tiffImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("{EN':Kw|FB", (byte[]) null);
      // Undeclared exception!
      try { 
        gifImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getFormatCompliance((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[0];
      RgbeImagingParameters rgbeImagingParameters0 = rgbeImageParser0.getDefaultParameters();
      try { 
        rgbeImageParser0.getBufferedImage(byteArray0, rgbeImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      WbmpImagingParameters wbmpImagingParameters0 = wbmpImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        wbmpImageParser0.getBufferedImage((byte[]) null, wbmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      WbmpImageParser wbmpImageParser0 = new WbmpImageParser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      WbmpImagingParameters wbmpImagingParameters0 = new WbmpImagingParameters();
      try { 
        wbmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, wbmpImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported WBMP type 11
         //
         verifyException("org.apache.commons.imaging.formats.wbmp.WbmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      PnmImagingParameters pnmImagingParameters0 = pnmImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        pnmImageParser0.getBufferedImage((ByteSource) null, pnmImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pnm.PnmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      MockFile mockFile0 = new MockFile("s/Dy;yL*?", "bmp");
      File file0 = MockFile.createTempFile("s/Dy;yL*?", "s/Dy;yL*?", (File) mockFile0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      try { 
        gifImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (GifImagingParameters) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      XbmImagingParameters xbmImagingParameters0 = xbmImageParser0.getDefaultParameters();
      try { 
        xbmImageParser0.getBufferedImage((ByteSource) byteSourceFile0, xbmImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      // Undeclared exception!
      try { 
        dcxImageParser0.getBufferedImage((File) null, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pngImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        icnsImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("#", byteArray0);
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      try { 
        jpegImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, " ");
      // Undeclared exception!
      try { 
        jpegImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-68), 12);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, ": ");
      // Undeclared exception!
      try { 
        jpegImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "o0a~7(o^X>k/||&At-");
      try { 
        icoImageParser0.getAllBufferedImages((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dhtsegment$huffmantable");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      try { 
        jpegImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.getAllBufferedImages((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        jpegImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid JPEG File: doesn't begin with 0xffd8
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      // Undeclared exception!
      try { 
        xpmImageParser0.dumpImageFile((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[2];
      try { 
        icnsImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("pcc", byteArray0);
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      try { 
        jpegImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      // Undeclared exception!
      try { 
        dcxImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[1];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("_<V!|2oAn00n[#", byteArray0);
      try { 
        pcxImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 1 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        xbmImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // width not found
         //
         verifyException("org.apache.commons.imaging.formats.xbm.XbmImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      MockFile mockFile0 = new MockFile("tmp");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      // Undeclared exception!
      try { 
        tiffImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+D");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        tiffImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.dumpImageFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      boolean boolean0 = rgbeImageParser0.canAcceptExtension("4C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      boolean boolean0 = rgbeImageParser0.canAcceptExtension(".getMetadata: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      // Undeclared exception!
      try { 
        rgbeImageParser0.canAcceptExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{EN':Kw|FB", "{EN':Kw|FB");
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = rgbeImageParser0.getICCProfileBytes((File) mockFile0, (RgbeImagingParameters) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      Dimension dimension0 = pcxImageParser0.getImageSize((File) mockFile0, pcxImagingParameters0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XbmImageParser xbmImageParser0 = new XbmImageParser();
      MockFile mockFile0 = new MockFile((File) null, "X PixMap");
      XbmImagingParameters xbmImagingParameters0 = new XbmImagingParameters();
      ImageMetadata imageMetadata0 = xbmImageParser0.getMetadata((File) mockFile0, xbmImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = jpegImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((File) null, jpegImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("{EN':Kw|FB", (byte[]) null);
      boolean boolean0 = rgbeImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      JpegImagingParameters jpegImagingParameters0 = new JpegImagingParameters();
      try { 
        jpegImageParser0.getICCProfileBytes(byteArray0, jpegImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.jpeg.JpegUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      // Undeclared exception!
      try { 
        tiffImageParser0.getImageSize((byte[]) null, tiffImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      byte[] byteArray0 = new byte[0];
      ImageMetadata imageMetadata0 = xpmImageParser0.getMetadata(byteArray0, (XpmImagingParameters) null);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PnmImageParser pnmImageParser0 = new PnmImageParser();
      MockFile mockFile0 = new MockFile("  found: ");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pnmImageParser0.dumpImageFile((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.canAcceptExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      FormatCompliance formatCompliance0 = jpegImageParser0.getFormatCompliance((ByteSource) null);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      RgbeImagingParameters rgbeImagingParameters0 = rgbeImageParser0.getDefaultParameters();
      MockFile mockFile0 = new MockFile("a#:");
      ImageInfo imageInfo0 = rgbeImageParser0.getImageInfo((File) mockFile0, rgbeImagingParameters0);
      assertNull(imageInfo0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      ImageFormats imageFormats0 = ImageFormats.RGBE;
      boolean boolean0 = rgbeImageParser0.canAcceptType(imageFormats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = rgbeImageParser0.canAcceptType(imageFormats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      String string0 = rgbeImageParser0.dumpImageFile((File) mockFile0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      BufferedImage bufferedImage0 = dcxImageParser0.getBufferedImage((File) mockFile0, pcxImagingParameters0);
      assertNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      List<BufferedImage> list0 = rgbeImageParser0.getAllBufferedImages((File) mockFile0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FormatCompliance formatCompliance0 = rgbeImageParser0.getFormatCompliance((File) mockFile0);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = new byte[1];
      TiffImagingParameters tiffImagingParameters0 = new TiffImagingParameters();
      try { 
        tiffImageParser0.getImageInfo(byteArray0, tiffImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Dimension dimension0 = rgbeImageParser0.getImageSize((File) mockFile0);
      assertNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      XpmImageParser xpmImageParser0 = new XpmImageParser();
      try { 
        xpmImageParser0.getImageInfo((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JpegImageParser jpegImageParser0 = new JpegImageParser();
      // Undeclared exception!
      try { 
        jpegImageParser0.getMetadata((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      byte[] byteArray0 = tiffImageParser0.getICCProfileBytes((File) mockFile0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      List<ImageParser<?>> list0 = ImageParser.getAllImageParsers();
      assertEquals(15, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      RgbeImagingParameters rgbeImagingParameters0 = new RgbeImagingParameters();
      try { 
        rgbeImageParser0.writeImage((BufferedImage) null, mockFileOutputStream0, rgbeImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This image format (Radiance HDR) cannot be written.
         //
         verifyException("org.apache.commons.imaging.ImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      // Undeclared exception!
      try { 
        tiffImageParser0.getAllBufferedImages((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pushbackInputStream0, "jpeg");
      try { 
        tiffImageParser0.getMetadata((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      TiffImageParser tiffImageParser0 = new TiffImageParser();
      ImageMetadata imageMetadata0 = tiffImageParser0.getMetadata((File) mockFile0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GifImageParser gifImageParser0 = new GifImageParser();
      byte[] byteArray0 = new byte[0];
      GifImagingParameters gifImagingParameters0 = new GifImagingParameters();
      try { 
        gifImageParser0.getBufferedImage(byteArray0, gifImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid GIF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DcxImageParser dcxImageParser0 = new DcxImageParser();
      FormatCompliance formatCompliance0 = dcxImageParser0.getFormatCompliance((byte[]) null);
      assertNull(formatCompliance0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RgbeImageParser rgbeImageParser0 = new RgbeImageParser();
      byte[] byteArray0 = new byte[1];
      String string0 = rgbeImageParser0.dumpImageFile(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PngImageParser pngImageParser0 = new PngImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        pngImageParser0.getICCProfileBytes(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IcoImageParser icoImageParser0 = new IcoImageParser();
      Dimension dimension0 = icoImageParser0.getImageSize((byte[]) null);
      assertNull(dimension0);
  }
}
