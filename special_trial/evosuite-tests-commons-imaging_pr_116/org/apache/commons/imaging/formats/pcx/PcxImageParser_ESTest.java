/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:27:52 GMT 2025
 */

package org.apache.commons.imaging.formats.pcx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.pcx.PcxImageParser;
import org.apache.commons.imaging.formats.pcx.PcxImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PcxImageParser_ESTest extends PcxImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      String[] stringArray0 = pcxImageParser0.getAcceptedExtensions();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(1594, 1594, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1594);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      // Undeclared exception!
      pcxImageParser0.writeImage(bufferedImage0, (OutputStream) byteArrayOutputStream0, pcxImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("6.~SeKG9=~/As`");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      // Undeclared exception!
      try { 
        pcxImageParser0.writeImage((BufferedImage) null, (OutputStream) bufferedOutputStream0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = pcxImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        pcxImageParser0.getImageSize((ByteSource) null, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.PcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[0];
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pcxImageParser0.getImageSize((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 0 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      MockFile mockFile0 = new MockFile("");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pcxImageParser0.getImageSize((ByteSource) byteSourceFile0, pcxImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      // Undeclared exception!
      try { 
        pcxImageParser0.getImageInfo((ByteSource) null, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.PcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[0];
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-5808), 7);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "");
      // Undeclared exception!
      try { 
        pcxImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, pcxImagingParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      try { 
        pcxImageParser0.getImageInfo((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 15 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      MockFile mockFile0 = new MockFile("RGB", "RGB");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      try { 
        pcxImageParser0.getImageInfo((ByteSource) byteSourceFile0, pcxImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      // Undeclared exception!
      try { 
        pcxImageParser0.getBufferedImage((ByteSource) null, (PcxImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.PcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "te`8/,>OA4");
      // Undeclared exception!
      try { 
        pcxImageParser0.getBufferedImage((ByteSource) byteSourceInputStream0, pcxImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      MockFile mockFile0 = new MockFile("org.apache.commons.imaging.formats.bmp.PixelParserRle");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      try { 
        pcxImageParser0.getBufferedImage((ByteSource) byteSourceFile0, pcxImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      // Undeclared exception!
      try { 
        pcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.pcx.PcxImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 4 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      MockFile mockFile0 = new MockFile("~");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        pcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[0];
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        pcxImageParser0.getBufferedImage((ByteSource) byteSourceArray0, pcxImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid PCX File count: -1 read: 0 length: 128
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      String string0 = pcxImageParser0.getDefaultExtension();
      assertEquals("pcx", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)7);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "PaletteInfo: ");
      // Undeclared exception!
      try { 
        pcxImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      ImageFormat[] imageFormatArray0 = pcxImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = pcxImageParser0.getDefaultParameters();
      ImageMetadata imageMetadata0 = pcxImageParser0.getMetadata((ByteSource) null, pcxImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      BufferedImage bufferedImage0 = new BufferedImage(6, 1000, 6);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6.~SeKG9=~/As`");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      pcxImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, pcxImagingParameters0);
      assertEquals(6, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      String string0 = pcxImageParser0.getName();
      assertEquals("Pcx-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PcxImageParser pcxImageParser0 = new PcxImageParser();
      PcxImagingParameters pcxImagingParameters0 = new PcxImagingParameters();
      byte[] byteArray0 = pcxImageParser0.getICCProfileBytes((ByteSource) null, pcxImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      PcxImageParser.PcxHeader pcxImageParser_PcxHeader0 = new PcxImageParser.PcxHeader((-940), (-940), (-940), (-940), (-940), (-940), 8, (-940), (-940), (-940), intArray0, (-940), 8, 8, (-2012), 0, (-940));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Image width is negative");
      pcxImageParser_PcxHeader0.dump(mockPrintWriter0);
  }
}
