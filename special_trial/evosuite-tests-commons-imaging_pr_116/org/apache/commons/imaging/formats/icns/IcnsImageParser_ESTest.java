/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:09:58 GMT 2025
 */

package org.apache.commons.imaging.formats.icns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.formats.icns.IcnsImageParser;
import org.apache.commons.imaging.formats.icns.IcnsImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IcnsImageParser_ESTest extends IcnsImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(128, 620, false);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 128 and height 620
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(3555, 3555, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~WPG'Zyk:k0Ll6{");
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 3555 and height 3555
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(48, 15, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 48 and height 15
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 24, false);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 32 and height 24
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(16, 34, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 16 and height 34
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(8, 303, true);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, (IcnsImagingParameters) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 8 and height 303
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IcnsImageParser.IcnsElement icnsImageParser_IcnsElement0 = new IcnsImageParser.IcnsElement((-821), 3862, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YCCK");
      icnsImageParser_IcnsElement0.dump(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      try { 
        icnsImageParser0.dumpImageFile(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x7d000000
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Apple Icon Image");
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x66000000
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      ImageMetadata imageMetadata0 = icnsImageParser0.getMetadata((ByteSource) null, icnsImagingParameters0);
      assertNull(imageMetadata0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.writeImage((BufferedImage) null, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageSize((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Size", byteArray0);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("ICNS_32x32_2x_32BIT_ARGB_IMAGE");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getImageSize((ByteSource) byteSourceFile0, icnsImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getImageInfo((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("8P`0!z^?+E65");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.getImageInfo((ByteSource) byteSourceFile0, icnsImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[2];
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceArray0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("", "");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      try { 
        icnsImageParser0.getBufferedImage((ByteSource) byteSourceFile0, icnsImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      byte[] byteArray0 = new byte[8];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not a Valid ICNS File: magic is 0x0
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("J&@");
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("J&@", (byte[]) null);
      // Undeclared exception!
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("bR", "bR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      byte[] byteArray0 = new byte[3];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid ICNS File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@_y,6kAYQ3L5eP(");
      MockFile mockFile0 = new MockFile("@_y,6kAYQ3L5eP(", "@_y,6kAYQ3L5eP(");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(128, 10, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) objectOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 128 and height 10
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(128, 128, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      icnsImageParser0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, icnsImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(48, 58, false);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      PrintStream printStream0 = DebugGraphics.logStream();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) printStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 48 and height 58
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 32, false);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      // Undeclared exception!
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(32, 76, true);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 32 and height 76
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(16, 16, true);
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      MockFile mockFile0 = new MockFile("+D");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      icnsImageParser0.writeImage(bufferedImage0, (OutputStream) mockPrintStream0, icnsImagingParameters0);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) mockFileOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getColorBufferedImage(16, 3, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) bufferedOutputStream0, icnsImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported source width 16 and height 3
         //
         verifyException("org.apache.commons.imaging.formats.icns.IcnsImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(48, 48, true);
      IcnsImagingParameters icnsImagingParameters0 = new IcnsImagingParameters();
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      // Undeclared exception!
      try { 
        icnsImageParser0.writeImage(bufferedImage0, (OutputStream) null, icnsImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String[] stringArray0 = icnsImageParser0.getAcceptedExtensions();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      IcnsImagingParameters icnsImagingParameters0 = icnsImageParser0.getDefaultParameters();
      byte[] byteArray0 = icnsImageParser0.getICCProfileBytes((ByteSource) null, icnsImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      MockFile mockFile0 = new MockFile("", "");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        icnsImageParser0.getAllBufferedImages((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getDefaultExtension();
      assertEquals("icns", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      ImageFormat[] imageFormatArray0 = icnsImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IcnsImageParser icnsImageParser0 = new IcnsImageParser();
      String string0 = icnsImageParser0.getName();
      assertEquals("Apple Icon Image", string0);
  }
}
