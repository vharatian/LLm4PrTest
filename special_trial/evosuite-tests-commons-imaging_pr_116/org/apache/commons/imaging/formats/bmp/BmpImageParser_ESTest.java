/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:01:55 GMT 2025
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import org.apache.commons.imaging.FormatCompliance;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.ImageParser;
import org.apache.commons.imaging.PixelDensity;
import org.apache.commons.imaging.common.BufferedImageFactory;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.RgbBufferedImageFactory;
import org.apache.commons.imaging.common.SimpleBufferedImageFactory;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.apache.commons.imaging.formats.bmp.BmpImagingParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getGrayscaleBufferedImage(52, 52, true);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(52, bufferedImage0.getTileHeight());
      assertEquals(52, bufferedImage0.getTileWidth());
      assertEquals(52, bufferedImage0.getHeight());
      assertEquals(52, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bmpImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (BmpImagingParameters) null);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(52, bufferedImage0.getTileHeight());
      assertEquals(52, bufferedImage0.getTileWidth());
      assertEquals(52, bufferedImage0.getHeight());
      assertEquals(52, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(474, pipedInputStream0.available());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "t.O");
      assertNotNull(byteSourceInputStream0);
      assertEquals(474, pipedInputStream0.available());
      assertEquals("t.O", byteSourceInputStream0.getFileName());
      
      String string0 = byteSourceInputStream0.getDescription();
      assertNotNull(string0);
      assertEquals("Inputstream: 't.O'", string0);
      assertEquals(474, pipedInputStream0.available());
      assertEquals("t.O", byteSourceInputStream0.getFileName());
      
      ImageInfo imageInfo0 = bmpImageParser0.getImageInfo((ByteSource) byteSourceInputStream0, (BmpImagingParameters) null);
      assertNotNull(imageInfo0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("t.O", byteSourceInputStream0.getFileName());
      assertEquals(ImageInfo.CompressionAlgorithm.RLE, imageInfo0.getCompressionAlgorithm());
      assertEquals(ImageInfo.ColorType.RGB, imageInfo0.getColorType());
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
      assertEquals("image/x-ms-bmp", imageInfo0.getMimeType());
      assertEquals((-1), imageInfo0.getNumberOfImages());
      assertFalse(imageInfo0.isTransparent());
      assertEquals(52, imageInfo0.getWidth());
      assertEquals(1, imageInfo0.getBitsPerPixel());
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
      assertFalse(imageInfo0.isProgressive());
      assertEquals(Float.POSITIVE_INFINITY, imageInfo0.getPhysicalWidthInch(), 0.01F);
      assertTrue(imageInfo0.usesPalette());
      assertEquals(52, imageInfo0.getHeight());
      assertEquals("Bmp (BM: Windows 3.1x, 95, NT,)", imageInfo0.getFormatDetails());
      assertEquals(Float.POSITIVE_INFINITY, imageInfo0.getPhysicalHeightInch(), 0.01F);
      assertEquals("BMP Windows Bitmap", imageInfo0.getFormatName());
      
      Dimension dimension1 = bmpImageParser0.getImageSize((ByteSource) byteSourceInputStream0, (BmpImagingParameters) null);
      assertNotNull(dimension1);
      assertEquals(52, dimension1.width);
      assertEquals(52, dimension1.height);
      assertNotSame(dimension1, dimension0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("t.O", byteSourceInputStream0.getFileName());
      assertEquals(52.0, dimension1.getWidth(), 0.01);
      assertEquals(52.0, dimension1.getHeight(), 0.01);
      assertFalse(dimension1.equals((Object)dimension0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[17];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(17L, byteSourceArray0.getLength());
      assertEquals(17, byteArray0.length);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-224), 1349215087);
      assertNotNull(byteArrayInputStream0);
      assertEquals(241, byteArrayInputStream0.available());
      assertEquals(17, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((InputStream) byteArrayInputStream0, bmpImagingParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getGrayscaleBufferedImage(1, 1, true);
      assertNotNull(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      assertNotNull(bmpImageParser1);
      assertEquals("bmp", bmpImageParser1.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser1.getName());
      assertFalse(bmpImageParser1.equals((Object)bmpImageParser0));
      
      try { 
        bmpImageParser1.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (BmpImagingParameters) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getGrayscaleBufferedImage(1, 1, true);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bmpImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (BmpImagingParameters) null);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(62, pipedInputStream0.available());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter0.printf("CCITT Group 4", (Object[]) null);
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      assertNotNull(mockPrintWriter2);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter2.equals((Object)printWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getGrayscaleBufferedImage(1, 1, false);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bmpImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (BmpImagingParameters) null);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(62, pipedInputStream0.available());
      
      mockPrintWriter2.println(object1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter2);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter2, printWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter0);
      assertNotSame(mockPrintWriter2, mockPrintWriter1);
      assertNotSame(object1, object0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(26L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter2.equals((Object)printWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter1));
      assertFalse(object1.equals((Object)object0));
      
      mockPrintWriter1.print((Object) mockFile0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter2);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(26L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      MockFile mockFile1 = new MockFile(mockFile0, "ColorSpaceGreenY");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile1);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile1.isDirectory());
      assertEquals("ColorSpaceGreenY", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/CCITT Group 4", mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/CCITT Group 4/ColorSpaceGreenY", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertEquals("ColorSpaceGreenY", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(26L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(",-k;cZpa)Y/=f!");
      assertNotNull(mockPrintWriter3);
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter3.equals((Object)printWriter0));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter2));
      assertFalse(mockPrintWriter3.equals((Object)mockPrintWriter0));
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter3, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      SimpleBufferedImageFactory simpleBufferedImageFactory0 = new SimpleBufferedImageFactory();
      assertNotNull(simpleBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = simpleBufferedImageFactory0.getGrayscaleBufferedImage(2667, 77, true);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(77, bufferedImage0.getTileHeight());
      assertEquals(2667, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2667, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(77, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      // Undeclared exception!
      bmpImageParser0.writeImage(bufferedImage0, (OutputStream) null, bmpImagingParameters0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      assertNotNull(stringArray0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(2, stringArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, (OutputStream) null, (BmpImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, (OutputStream) dataOutputStream0, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      assertNotNull(stringArray0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(2, stringArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, (OutputStream) dataOutputStream0, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("CCITT Group 4", objectArray0);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      printWriter0.println((Object) mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertEquals(0, objectArray0.length);
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 778399081
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      //  // Unstable assertion: assertNotNull(bmpImageParser0);
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      //  // Unstable assertion: assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      //  // Unstable assertion: assertNotNull(mockPrintWriter1);
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      mockPrintWriter0.println(true);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      mockPrintWriter1.println((Object) mockPrintWriter0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertNotSame(mockPrintWriter1, mockPrintWriter0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(63L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(63L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(63L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      //  // Unstable assertion: assertNotNull(byteSourceFile0);
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(63L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      //  // Unstable assertion: assertEquals(63L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 1986095662
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      //  // Unstable assertion: assertNotNull(bmpImageParser0);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      //  // Unstable assertion: assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, ".e", objectArray0);
      //  // Unstable assertion: assertNotNull(printWriter0);
      //  // Unstable assertion: assertSame(mockPrintWriter0, printWriter0);
      //  // Unstable assertion: assertSame(printWriter0, mockPrintWriter0);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals(0, objectArray0.length);
      
      boolean boolean0 = mockFile0.mkdir();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      //  // Unstable assertion: assertNotNull(mockPrintWriter1);
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      //  // Unstable assertion: assertNotNull(bmpImagingParameters0);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertFalse(bmpImagingParameters0.isStrict());
      //  // Unstable assertion: assertNull(bmpImagingParameters0.getFileName());
      
      mockPrintWriter1.println((Object) mockPrintWriter0);
      //  // Unstable assertion: assertSame(mockPrintWriter0, printWriter0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertNotSame(mockPrintWriter1, mockPrintWriter0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter1, printWriter0);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(61L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      //  // Unstable assertion: assertSame(mockPrintWriter0, printWriter0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(61L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      //  // Unstable assertion: assertNotNull(byteSourceFile0);
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(61L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      //  // Unstable assertion: assertEquals(61L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintWriter1.println((Object) mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(59L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(59L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(59L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(59L, byteSourceFile0.getLength());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintWriter1.println((Object) mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(59L, mockFile0.length());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(59L, mockFile0.length());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(59L, mockFile0.length());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      assertEquals(59L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintWriter1.println(object0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(26L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(26L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "CCITT Group 4";
      objectArray0[2] = (Object) bmpImageParser0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) bmpImageParser0;
      objectArray0[5] = (Object) mockPrintWriter1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "CCITT Group 4";
      boolean boolean1 = mockFile0.setReadable(true);
      assertTrue(boolean1);
      assertEquals(26L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean1 == boolean0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("CCITT Group 4", objectArray0);
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(26L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertEquals(9, objectArray0.length);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(26L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(26L, byteSourceFile0.getLength());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      //  // Unstable assertion: assertNotNull(bmpImageParser0);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(file0, mockFile0);
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertFalse(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile0.canRead());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertFalse(mockFile0.exists());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(0L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals(0L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.exists());
      //  // Unstable assertion: assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2", file0.getParent());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals("CCITT Group 4", file0.getName());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/CCITT Group 4", file0.toString());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertFalse(file0.canWrite());
      //  // Unstable assertion: assertFalse(file0.canRead());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertFalse(file0.canExecute());
      //  // Unstable assertion: assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      //  // Unstable assertion: assertNotNull(mockPrintWriter0);
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      
      mockPrintWriter0.print(2410);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean0 = mockFile0.mkdir();
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      //  // Unstable assertion: assertNotNull(mockPrintWriter1);
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      mockPrintWriter1.println(object0);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertNotSame(mockPrintWriter1, mockPrintWriter0);
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(30L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      //  // Unstable assertion: assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      String[] stringArray0 = bmpImageParser0.getAcceptedExtensions();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertEquals(2, stringArray0.length);
      
      String string0 = bmpImageParser0.getDefaultExtension();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("bmp", string0);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      //  // Unstable assertion: assertNotSame(mockFile0, file0);
      //  // Unstable assertion: assertNotSame(mockPrintWriter0, mockPrintWriter1);
      //  // Unstable assertion: assertEquals("Bmp-Custom", bmpImageParser0.getName());
      //  // Unstable assertion: assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(30L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      //  // Unstable assertion: assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      //  // Unstable assertion: assertNotNull(byteSourceFile0);
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertEquals(30L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.getName());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("CCITT Group 4", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(30L, byteSourceFile0.getLength());
      //  // Unstable assertion: assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      //  // Unstable assertion: assertTrue(mockFile0.equals((Object)file0));
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintWriter1.println(object0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(26L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(26L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(26L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      assertEquals(26L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      assertNotNull(bmpImageParser1);
      assertEquals("bmp", bmpImageParser1.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser1.getName());
      assertFalse(bmpImageParser1.equals((Object)bmpImageParser0));
      
      mockPrintWriter1.println();
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(1L, mockFile0.length());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(bmpImageParser1, bmpImageParser0);
      assertEquals(1L, mockFile0.length());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("bmp", bmpImageParser1.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser1.getName());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(bmpImageParser1.equals((Object)bmpImageParser0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(1L, mockFile0.length());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      assertEquals(1L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      assertNotNull(bmpImageParser1);
      assertEquals("Bmp-Custom", bmpImageParser1.getName());
      assertEquals("bmp", bmpImageParser1.getDefaultExtension());
      assertFalse(bmpImageParser1.equals((Object)bmpImageParser0));
      
      mockPrintWriter0.print((Object) bmpImageParser1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(bmpImageParser1, bmpImageParser0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals("Bmp-Custom", bmpImageParser1.getName());
      assertEquals("bmp", bmpImageParser1.getDefaultExtension());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(bmpImageParser1.equals((Object)bmpImageParser0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "/;QlU6plJ5$KB&tNLh", 1, 1);
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(";QlU6plJ5$KB&tNLh", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("CCITT Group 4");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      mockPrintWriter0.print((Object) bmpImageParser0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("CCITT Group 4", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals("CCITT Group 4", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("CCITT Group 4", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[23];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(23L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertEquals(23, byteArray0.length);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RLE c");
      assertNotNull(mockPrintWriter0);
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[23];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(23L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertEquals(23, byteArray0.length);
      
      ByteSourceArray byteSourceArray1 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray1);
      assertNull(byteSourceArray1.getFileName());
      assertEquals(23L, byteSourceArray1.getLength());
      assertFalse(byteSourceArray1.equals((Object)byteSourceArray0));
      assertEquals(23, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray1, bmpImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("HCPwP", "HCPwP");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HCPwP");
      assertNotNull(mockPrintWriter0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(boolean0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/HCPwP/HCPwP", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("HCPwP", mockFile0.getName());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/HCPwP", mockFile0.getParent());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/HCPwP/HCPwP", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("HCPwP", mockFile0.getName());
      assertEquals("/Users/atakanakar/Desktop/imaging_experiment_2/HCPwP", mockFile0.getParent());
      assertEquals("HCPwP", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(3L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertArrayEquals(new byte[] {(byte)20, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((ByteSource) byteSourceArray0, bmpImagingParameters0);
      assertNull(imageMetadata0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(3L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      assertArrayEquals(new byte[] {(byte)20, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'U';
      charArray0[2] = 'K';
      charArray0[3] = '?';
      charArray0[4] = '#';
      charArray0[5] = 'O';
      charArray0[6] = 'a';
      charArray0[7] = 's';
      charArray0[8] = 'z';
      mockPrintWriter0.write(charArray0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertArrayEquals(new char[] {'G', 'U', 'K', '?', '#', 'O', 'a', 's', 'z'}, charArray0);
      assertEquals(9, charArray0.length);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "/;QlU6plJ5$KB&tNLh", 1, 1);
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(";QlU6plJ5$KB&tNLh", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((String) null, byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(3L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)65, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      ImageMetadata imageMetadata0 = bmpImageParser0.getMetadata((ByteSource) byteSourceArray0, bmpImagingParameters0);
      assertNull(imageMetadata0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertNull(byteSourceArray0.getFileName());
      assertEquals(3L, byteSourceArray0.getLength());
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      assertArrayEquals(new byte[] {(byte)65, (byte)49, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "/;QlU6plJ5$KB&tNLh", 1, 1);
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(";QlU6plJ5$KB&tNLh", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(";QlU6plJ5$KB&tNLh", byteSourceFile0.getFileName());
      assertEquals(0L, byteSourceFile0.getLength());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      List<ImageParser<?>> list0 = ImageParser.getAllImageParsers();
      assertNotNull(list0);
      assertEquals(15, list0.size());
      assertFalse(list0.isEmpty());
      
      byte[] byteArray0 = new byte[39];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(39L, byteSourceArray0.getLength());
      assertEquals(39, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(39L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertEquals(39, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[8];
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("", byteSourceFile0.getFileName());
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, bmpImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) null, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((InputStream) null, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[39];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)123;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(23L, byteSourceArray0.getLength());
      assertEquals(23, byteArray0.length);
      
      try { 
        bmpImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("ColorSpaceBlueZ");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("ColorSpaceBlueZ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("ColorSpaceBlueZ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("ColorSpaceBlueZ", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("", byteSourceFile0.getFileName());
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, bmpImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize((ByteSource) null, (BmpImagingParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getBufferedImage((InputStream) pipedInputStream0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-52);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte) (-52);
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)6;
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      String string0 = bmpImageParser0.getDefaultExtension();
      assertNotNull(string0);
      assertEquals("bmp", string0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      File file0 = null;
      ByteSourceFile byteSourceFile0 = null;
      try {
        byteSourceFile0 = new ByteSourceFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.bytesource.ByteSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(4L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (BmpImagingParameters) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)21;
      byte byte0 = (byte) (-5);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(9L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)82, (byte)125, (byte)50, (byte) (-119), (byte)21, (byte) (-5), (byte)12, (byte) (-48), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      PixelDensity pixelDensity0 = PixelDensity.createUnitless((byte)82, (byte)12);
      assertNotNull(pixelDensity0);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityMetres(), 0.01);
      assertEquals(82.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertTrue(pixelDensity0.isUnitless());
      assertFalse(pixelDensity0.isInCentimetres());
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityInches(), 0.01);
      assertEquals(12.0, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityCentimetres(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityCentimetres(), 0.01);
      assertFalse(pixelDensity0.isInMetres());
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityInches(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityMetres(), 0.01);
      assertFalse(pixelDensity0.isInInches());
      
      PixelDensity pixelDensity1 = PixelDensity.createFromPixelsPerCentimetre((-485.04382086), 0.0);
      assertNotNull(pixelDensity1);
      assertNotSame(pixelDensity1, pixelDensity0);
      assertEquals((-485.04382086), pixelDensity1.horizontalDensityCentimetres(), 0.01);
      assertFalse(pixelDensity1.isUnitless());
      assertEquals((-1232.0113049843999), pixelDensity1.horizontalDensityInches(), 0.01);
      assertEquals(0.0, pixelDensity1.getRawVerticalDensity(), 0.01);
      assertEquals(0.0, pixelDensity1.verticalDensityCentimetres(), 0.01);
      assertEquals((-48504.382086), pixelDensity1.horizontalDensityMetres(), 0.01);
      assertFalse(pixelDensity1.isInMetres());
      assertEquals(0.0, pixelDensity1.verticalDensityMetres(), 0.01);
      assertFalse(pixelDensity1.isInInches());
      assertEquals((-485.04382086), pixelDensity1.getRawHorizontalDensity(), 0.01);
      assertTrue(pixelDensity1.isInCentimetres());
      assertEquals(0.0, pixelDensity1.verticalDensityInches(), 0.01);
      assertFalse(pixelDensity1.equals((Object)pixelDensity0));
      
      bmpImagingParameters0.setPixelDensity(pixelDensity0);
      assertNotSame(pixelDensity0, pixelDensity1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityMetres(), 0.01);
      assertEquals(82.0, pixelDensity0.getRawHorizontalDensity(), 0.01);
      assertTrue(pixelDensity0.isUnitless());
      assertFalse(pixelDensity0.isInCentimetres());
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityInches(), 0.01);
      assertEquals(12.0, pixelDensity0.getRawVerticalDensity(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.horizontalDensityCentimetres(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityCentimetres(), 0.01);
      assertFalse(pixelDensity0.isInMetres());
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityInches(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pixelDensity0.verticalDensityMetres(), 0.01);
      assertFalse(pixelDensity0.isInInches());
      assertFalse(pixelDensity0.equals((Object)pixelDensity1));
      
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[7];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(7L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      BufferedImage bufferedImage0 = rgbBufferedImageFactory0.getColorBufferedImage(59, 59, true);
      assertNotNull(bufferedImage0);
      assertEquals(59, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bufferedImage0.coerceData(true);
      assertEquals(59, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      
      bmpImageParser0.writeImage(bufferedImage0, (OutputStream) pipedOutputStream0, (BmpImagingParameters) null);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(59, bufferedImage0.getWidth());
      assertEquals(59, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(59, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(59, bufferedImage0.getTileHeight());
      assertEquals(530, pipedInputStream0.available());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      String string0 = bmpImageParser0.getDefaultExtension();
      assertNotNull(string0);
      assertEquals("bmp", string0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "bmp");
      assertNotNull(byteSourceInputStream0);
      assertEquals(530, pipedInputStream0.available());
      assertEquals("bmp", byteSourceInputStream0.getFileName());
      
      FormatCompliance formatCompliance0 = bmpImageParser0.getFormatCompliance((ByteSource) byteSourceInputStream0);
      assertNotNull(formatCompliance0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("bmp", byteSourceInputStream0.getFileName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      String string0 = "3";
      MockFile mockFile0 = new MockFile("3");
      assertNotNull(mockFile0);
      
      List<BufferedImage> list0 = bmpImageParser0.getAllBufferedImages((File) mockFile0);
      assertNull(list0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("3", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("3", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(0L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      InputStream inputStream0 = byteSourceArray0.getInputStream();
      assertNotNull(inputStream0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(0L, byteSourceArray0.getLength());
      assertEquals(0, inputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[23];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(23L, byteSourceArray0.getLength());
      assertEquals(23, byteArray0.length);
      
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[4];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)77;
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals(1L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      byte[] byteArray1 = bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceArray0, bmpImagingParameters0);
      assertNull(byteArray1);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals(1L, byteSourceArray0.getLength());
      assertNull(byteSourceArray0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string0 = bmpImageParser0.getName();
      assertNotNull(string0);
      assertEquals("Bmp-Custom", string0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      assertNotNull(rgbBufferedImageFactory0);
      
      int int0 = 6;
      bmpImagingParameters0.setFileName("Bmp-Custom");
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertEquals("Bmp-Custom", bmpImagingParameters0.getFileName());
      
      bmpImagingParameters0.setBufferedImageFactory(rgbBufferedImageFactory0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertFalse(bmpImagingParameters0.isStrict());
      assertEquals("Bmp-Custom", bmpImagingParameters0.getFileName());
      
      // Undeclared exception!
      try { 
        rgbBufferedImageFactory0.getGrayscaleBufferedImage((-1759), (-1768), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1759) and height (-1768) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(0L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      assertNotNull(bmpImagingParameters0);
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      assertNotNull(byteSourceArray0);
      assertNull(byteSourceArray0.getFileName());
      assertEquals(2L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertNull(bmpImagingParameters0.getFileName());
      assertFalse(bmpImagingParameters0.isStrict());
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      long long0 = 1769L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("xpm", byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals("xpm", byteSourceArray0.getFileName());
      assertEquals(9L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-95), (byte)99, (byte) (-40), (byte)0, (byte)52, (byte)117, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockFile mockFile0 = new MockFile("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/;QlU6plJ5$KB&tNLh");
      assertNotNull(mockPrintWriter0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(";QlU6plJ5$KB&tNLh", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/;QlU6plJ5$KB&tNLh", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals(";QlU6plJ5$KB&tNLh", byteSourceFile0.getFileName());
      
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OS/2 Icon");
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'N', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("OS/2 Icon", byteArray0);
      assertNotNull(byteSourceArray0);
      assertEquals("OS/2 Icon", byteSourceArray0.getFileName());
      assertEquals(1L, byteSourceArray0.getLength());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      assertNotNull(bmpImageParser0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      assertNotNull(byteSourceFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, byteSourceFile0.getLength());
      assertEquals("", byteSourceFile0.getFileName());
      
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      assertNotNull(bmpImagingParameters0);
      assertEquals("bmp", bmpImageParser0.getDefaultExtension());
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
      assertFalse(bmpImagingParameters0.isStrict());
      assertNull(bmpImagingParameters0.getFileName());
      
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, bmpImagingParameters0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = "UVM<o";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)17;
      byte byte0 = (byte)0;
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      RgbBufferedImageFactory rgbBufferedImageFactory0 = new RgbBufferedImageFactory();
      bmpImagingParameters0.setBufferedImageFactory(rgbBufferedImageFactory0);
      try { 
        bmpImageParser0.getImageInfo(byteArray0, bmpImagingParameters0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) null, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      byte[] byteArray0 = bmpImageParser0.getICCProfileBytes((ByteSource) null, bmpImagingParameters0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSource byteSource0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)31;
      bmpImageParser0.getICCProfileBytes(byteArray0, (BmpImagingParameters) null);
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      bmpImagingParameters0.setBufferedImageFactory((BufferedImageFactory) null);
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) null, bmpImagingParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      bmpImageParser0.getAcceptedExtensions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("'|2{[kY+nC4K[kbZ{ap", byteArray0);
      byteSourceArray0.getInputStream();
      try { 
        byteSourceArray0.getInputStream((-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't skip bytes (0)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[39];
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BmpImagingParameters bmpImagingParameters0 = new BmpImagingParameters();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)123;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        bmpImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[23];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        bmpImageParser0.dumpImageFile((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("Bmp-Custom", byteArray0);
      BmpImagingParameters bmpImagingParameters0 = bmpImageParser0.getDefaultParameters();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerCentimetre((byte)90, 100.0);
      bmpImagingParameters0.setPixelDensity(pixelDensity0);
      PixelDensity pixelDensity1 = PixelDensity.createFromPixelsPerInch((byte)90, 0.0);
      bmpImagingParameters0.setPixelDensity(pixelDensity1);
      bmpImageParser0.getMetadata((ByteSource) byteSourceArray0, bmpImagingParameters0);
      bmpImageParser0.getAcceptedTypes();
      assertEquals("Bmp-Custom", bmpImageParser0.getName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertEquals(1, imageFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceArray0);
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
  }
}
