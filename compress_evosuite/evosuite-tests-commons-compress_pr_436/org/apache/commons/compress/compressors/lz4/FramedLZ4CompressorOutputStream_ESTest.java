/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:08:33 GMT 2025
 */

package org.apache.commons.compress.compressors.lz4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FramedLZ4CompressorOutputStream_ESTest extends FramedLZ4CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      MockFile mockFile0 = new MockFile("LZ4 Parameters with BlockSize ", "LZ4 Parameters with BlockSize K64, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, (int) (byte)22, 1048576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, false, parameters0);
      File file0 = MockFile.createTempFile("@# Qr[=nWo{IQ{OHL@", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[7];
      framedLZ4CompressorOutputStream0.write(byteArray0, (-1875), (int) (byte) (-37));
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.M1;
      int int0 = framedLZ4CompressorOutputStream_BlockSize0.getSize();
      assertEquals(1048576, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.M1;
      int int0 = framedLZ4CompressorOutputStream_BlockSize0.getIndex();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 629, 2, 0, 32768).when(parameters0).getMinBackReferenceLength();
      doReturn(629, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      framedLZ4CompressorOutputStream0.write(byteArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 2882, 2882);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn((-1357), 0).when(parameters0).getMinBackReferenceLength();
      doReturn(18, 18).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-267)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, 3, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream1, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[16];
      framedLZ4CompressorOutputStream2.write((int) (byte) (-122));
      framedLZ4CompressorOutputStream2.close();
      framedLZ4CompressorOutputStream2.write(byteArray0);
      byteArrayOutputStream0.writeTo(framedLZ4CompressorOutputStream1);
      framedLZ4CompressorOutputStream2.write((int) (byte) (-122));
      framedLZ4CompressorOutputStream2.write(byteArray0);
      // Undeclared exception!
      framedLZ4CompressorOutputStream2.write((int) (byte) (-122));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, false, parameters0);
      MockFile mockFile0 = new MockFile("LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum true, withBlockDependency false", "LZ4 Parameters with BlockSize K64, withContentChecksum true, withBlockChecksum true, withBlockDependency false");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-4499)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(parameters0).getLazyMatching();
      doReturn(36, 36).when(parameters0).getLazyMatchingThreshold();
      doReturn(36).when(parameters0).getMaxBackReferenceLength();
      doReturn((-1)).when(parameters0).getMaxCandidates();
      doReturn(112, (-1691)).when(parameters0).getMaxOffset();
      doReturn(36, 36, (-1691), 112).when(parameters0).getMinBackReferenceLength();
      doReturn(25).when(parameters0).getNiceBackReferenceLength();
      doReturn(36, 36, 884, 884, 36).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@# Qr[=nWo{IQ{OHL@");
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[8];
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write((int) (byte) (-55));
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((int) (byte) (-128));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed to find a block containing offset 10
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+O7;1V\"lN6-P8EUeP6");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockFileOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.close();
      try { 
        framedLZ4CompressorOutputStream0.write(65535);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[16];
      framedLZ4CompressorOutputStream1.write((int) (byte) (-122));
      framedLZ4CompressorOutputStream1.close();
      framedLZ4CompressorOutputStream1.write(byteArray0);
      framedLZ4CompressorOutputStream1.write(byteArray0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream1, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      framedLZ4CompressorOutputStream2.finish();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[16];
      framedLZ4CompressorOutputStream1.write((int) (byte)122);
      framedLZ4CompressorOutputStream1.write(byteArray0);
      framedLZ4CompressorOutputStream1.write(byteArray0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream1, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      framedLZ4CompressorOutputStream2.close();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(303, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = null;
      try {
        framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, (FramedLZ4CompressorOutputStream.Parameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn((-13), 0).when(parameters0).getMinBackReferenceLength();
      doReturn(64, 64).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = null;
      try {
        framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-579)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = null;
      try {
        framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(parameters0).getLazyMatching();
      doReturn(714, 8).when(parameters0).getLazyMatchingThreshold();
      doReturn(0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0).when(parameters0).getMaxCandidates();
      doReturn(0, 0).when(parameters0).getMaxOffset();
      doReturn(1621, 8, (-365729413), 124).when(parameters0).getMinBackReferenceLength();
      doReturn(0).when(parameters0).getNiceBackReferenceLength();
      doReturn(4194304, 4194304, 124, 3486, 8).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("LZ4 Parameters with BlockSize K64, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = null;
      try {
        framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed to find a block containing offset 6
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = null;
      try {
        framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(pipedOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false);
      MockFile mockFile0 = new MockFile("LZ4 Parameters with BlockSize K64, withContentChecksum false, withBlockChecksum false, withBlockDependency false", "LZ4 Parameters with BlockSize K64, withContentChecksum false, withBlockChecksum false, withBlockDependency false");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[38];
      framedLZ4CompressorOutputStream0.write(byteArray0);
      assertEquals(29L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, false, parameters0);
      File file0 = MockFile.createTempFile("@# Qr[=nWo{IQ{OHL@", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.close();
      framedLZ4CompressorOutputStream0.finish();
      assertEquals(15L, file0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, (Parameters) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.finish();
      assertEquals(11, byteArrayOutputStream0.size());
      assertEquals("\u0004\"M\u0018P@\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      String string0 = framedLZ4CompressorOutputStream_Parameters0.toString();
      assertEquals("LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum true, withBlockDependency true", string0);
  }
}
