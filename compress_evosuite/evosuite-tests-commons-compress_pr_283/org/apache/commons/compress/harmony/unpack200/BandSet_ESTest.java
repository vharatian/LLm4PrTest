/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:48:19 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BandSet_ESTest extends BandSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags("field_attr_count", (InputStream) null, 0, bHSDCodec0, false);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[][] intArray0 = new int[0][7];
      String[] stringArray0 = new String[4];
      String[][] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      int[][] intArray1 = cpBands0.decodeBandInt((String) null, (InputStream) sequenceInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.unpack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences(",%aT^x0A@0>a .0q!-R", (InputStream) null, bHSDCodec0, (int[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[6];
      intArray0[2] = (int) (byte) (-8);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        cpBands0.parseReferences("GMQ+i0mVo'", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        cpBands0.parseReferences("ghG68=^#sP", (InputStream) null, bHSDCodec0, 2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("7eVFoW{wl:", (InputStream) pushbackInputStream0, bHSDCodec0, (-69), (String[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseReferences("class_InnerClasses_N", (InputStream) pushbackInputStream0, bHSDCodec0, 177, (String[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        bcBands0.parseReferences("y/s_x<<awHyl>", (InputStream) sequenceInputStream0, bHSDCodec0, 128, (String[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int[] intArray0 = new int[6];
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        cpBands0.parseFlags(" does not define ", (InputStream) pipedInputStream0, intArray0, bHSDCodec0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      try { 
        cpBands0.parseFlags("", (InputStream) pipedInputStream0, intArray0, bHSDCodec0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      try { 
        cpBands0.parseFlags("", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      InputStream inputStream0 = null;
      CpBands cpBands0 = new CpBands(segment0);
      String string0 = "ghG68=^#sP";
      int[] intArray0 = new int[2];
      intArray0[1] = segment0.LOG_LEVEL_VERBOSE;
      // Undeclared exception!
      try { 
        cpBands0.parseFlags(string0, inputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[8];
      intArray0[6] = (int) (byte) (-29);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("", (InputStream) null, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[6];
      intArray0[2] = 2193;
      try { 
        cpBands0.parseFlags("XoF32(", (InputStream) pushbackInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseFlags("8MItUMm", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseFlags("Rp#xScRA'MuZ", (InputStream) pushbackInputStream0, 245, bHSDCodec0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      File file0 = MockFile.createTempFile("Something has gone wrong during parsing references, index = ", "_6`6uVykYlx23Qz@L$");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        bcBands0.parseFlags("_6`6uVykYlx23Qz@L$", (InputStream) dataInputStream0, 1, bHSDCodec0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("_Q", (InputStream) null, 2, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("", (InputStream) null, (-128), bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1180), 1843);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags((String) null, (InputStream) pushbackInputStream0, (int) (byte)4, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      try { 
        cpBands0.parseFlags("", (InputStream) pushbackInputStream0, 658, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseFlags((String) null, (InputStream) pushbackInputStream0, (int) (byte)4, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2773);
      // Undeclared exception!
      try { 
        cpBands0.parseCPUTF8References("", (InputStream) null, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      try { 
        cpBands0.parseCPUTF8References("fvmpl", (InputStream) bufferedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[2] = 7;
      try { 
        cpBands0.parseCPUTF8References("?K@1", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPUTF8References("", (InputStream) null, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("GMQ+i0mVo'", (InputStream) byteArrayInputStream0, bHSDCodec0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        cpBands0.parseCPUTF8References("", (InputStream) pipedInputStream0, bHSDCodec0, (int) (byte)52);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseCPUTF8References("3LsO!(8_6v/", (InputStream) byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPStringReferences("", (InputStream) null, bHSDCodec0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPStringReferences("", byteArrayInputStream0, bHSDCodec0, (-583));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      InputStream inputStream0 = null;
      CpBands cpBands0 = new CpBands(segment0);
      String string0 = "45X?!Zf[V4ZH<qDq4";
      int int0 = 32;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, int0);
      try { 
        cpBands0.parseCPStringReferences(string0, pushbackInputStream0, bHSDCodec0, int0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseCPStringReferences(", array size = ", byteArrayInputStream0, bHSDCodec0, 211);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences((String) null, (InputStream) dataInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[8];
      intArray0[3] = (-3585);
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences((String) null, (InputStream) null, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[8];
      intArray0[4] = 1;
      try { 
        cpBands0.parseCPSignatureReferences("1r#x}", (InputStream) pushbackInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[7];
      intArray0[1] = 2135;
      try { 
        bcBands0.parseCPSignatureReferences("GMQ+i0mVo'", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences("X=ktFu2d", (InputStream) null, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences("", (InputStream) null, bHSDCodec0, (-1362));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      try { 
        cpBands0.parseCPSignatureReferences("fcmpl", bufferedInputStream0, bHSDCodec0, (-3311));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 13, 0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        cpBands0.parseCPSignatureReferences("org.apache.commons.compress.harmony.unpack200.BandSet", byteArrayInputStream0, bHSDCodec0, (byte) (-63));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPMethodRefReferences("", pushbackInputStream0, bHSDCodec0, (byte) (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-63), 1193);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPMethodRefReferences("", byteArrayInputStream0, bHSDCodec0, 135);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 32);
      try { 
        cpBands0.parseCPMethodRefReferences("fvmpl", pushbackInputStream0, bHSDCodec0, 32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPLongReferences("", (InputStream) null, bHSDCodec0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences("8kHRoGY;g1T\"1VY9Xq", byteArrayInputStream0, bHSDCodec0, (-256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1142), 554);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences("v3m:oZ6h!w4['eF6", byteArrayInputStream0, bHSDCodec0, 152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences("", pipedInputStream0, bHSDCodec0, (-143));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPIntReferences("R{zZ5%]Ojbc", (InputStream) null, bHSDCodec0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPFloatReferences("r", byteArrayInputStream0, bHSDCodec0, (byte) (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        cpBands0.parseCPFloatReferences("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound", bufferedInputStream0, bHSDCodec0, 1130);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 1224);
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("Something has gone wrong during parsing references, index = ", byteArrayInputStream0, bHSDCodec0, (byte) (-74));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 314);
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("5`<", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Segment segment0 = new Segment();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPFieldRefReferences("8MItUMm", pushbackInputStream0, bHSDCodec0, 762);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        bcBands0.parseCPFieldRefReferences("-c-$T", byteArrayInputStream0, bHSDCodec0, (byte)52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDoubleReferences("net.bytebuddy.build.RepeatedAnnotationPlugin", byteArrayInputStream0, bHSDCodec0, (-2651));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-62), 941);
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPDoubleReferences("K1[fC5Qx\"jK", byteArrayInputStream0, bHSDCodec0, 172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseCPDoubleReferences("", byteArrayInputStream0, bHSDCodec0, 1984);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPDescriptorReferences("", (InputStream) null, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        bcBands0.parseCPDescriptorReferences("tn27rV**)[vq%]>=", pushbackInputStream0, bHSDCodec0, (-2837));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPDescriptorReferences("R,/yA", sequenceInputStream0, bHSDCodec0, 236);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPClassReferences("", byteArrayInputStream0, bHSDCodec0, (-256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      try { 
        cpBands0.parseCPClassReferences("", pipedInputStream0, bHSDCodec0, (-466));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      try { 
        cpBands0.parseCPClassReferences((String) null, byteArrayInputStream0, bHSDCodec0, 98);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        cpBands0.getReferences((int[][]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      String[] stringArray0 = new String[9];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1002);
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1002
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt("Something has gone wrong during parsing references, index = ", (InputStream) null, bHSDCodec0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      int[] intArray0 = new int[9];
      intArray0[2] = (-2214);
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt("_", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      try { 
        cpBands0.decodeBandInt("` #<4VZ<XUy", (InputStream) dataInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[1];
      intArray0[1] = (int) (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.decodeBandInt("net.bytebuddy.build.RepeatedAnnotationPlugin", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        cpBands0.decodeBandInt("", (InputStream) pipedInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      CpBands cpBands0 = new CpBands(segment0);
      try { 
        cpBands0.decodeBandInt("-%~M", (InputStream) byteArrayInputStream0, bHSDCodec0, 32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPMethodRefReferences("E3.w+pzE8<|", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      CPString[] cPStringArray0 = cpBands0.parseCPStringReferences(", array size = ", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      assertEquals(0, bHSDCodec0.lastBandLength);
      
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[2];
      String[] stringArray0 = new String[3];
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      String[][] stringArray1 = cpBands0.parseReferences(", array size = ", (InputStream) dataInputStream0, bHSDCodec0, intArray0, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      cpBands0.parseFlags(" was expected to be static:", (InputStream) byteArrayInputStream0, intArray0, (BHSDCodec) null, bHSDCodec0);
      assertEquals(9, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      cpBands0.parseFlags("", (InputStream) null, intArray0, bHSDCodec0, bHSDCodec0);
      //  // Unstable assertion: assertEquals(1, bHSDCodec0.lastBandLength);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      //  // Unstable assertion: assertEquals(3, bHSDCodec0.lastBandLength);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = cpBands0.decodeBandInt("jX%m\"93V", (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
      //  // Unstable assertion: assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-82);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt((String) null, (InputStream) byteArrayInputStream0, bHSDCodec0, (int) (byte) (-23));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt((String) null, (InputStream) byteArrayInputStream0, bHSDCodec0, (int) (byte) (-23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, 619);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, (-2511));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt("org.apache.commons.compress.harmony.unpack200.BandSet", (InputStream) byteArrayInputStream0, bHSDCodec0, (-2084));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = cpBands0.decodeBandInt("jlTJ1+c?HBvN5Ql", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[][] intArray0 = new int[1][3];
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[][] intArray0 = new int[2][0];
      String[] stringArray0 = new String[9];
      String[][] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[2];
      String[] stringArray0 = new String[3];
      String[] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences(", array size = ", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int[] intArray0 = new int[2];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPSignatureReferences((String) null, (InputStream) dataInputStream0, bHSDCodec0, intArray0);
      assertEquals(2, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPSignatureReferences((String) null, (InputStream) dataInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      CPUTF8[] cPUTF8Array0 = cpBands0.parseCPSignatureReferences("fvmpl", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      CPNameAndType[] cPNameAndTypeArray0 = cpBands0.parseCPDescriptorReferences(",n{cDxb}J/)?,Y5Cc", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPNameAndTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("}='X%=+decQW~!Mr", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      CPFieldRef[] cPFieldRefArray0 = bcBands0.parseCPFieldRefReferences("r", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPFieldRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      CPMethodRef[] cPMethodRefArray0 = cpBands0.parseCPMethodRefReferences("q", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      CPInterfaceMethodRef[] cPInterfaceMethodRefArray0 = cpBands0.parseCPInterfaceMethodRefReferences("bOF!\"tSww~ed>", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPInterfaceMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        cpBands0.parseCPUTF8References("]TSg", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPUTF8References("", (InputStream) null, bHSDCodec0, intArray0);
      assertEquals(1, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPUTF8References("", (InputStream) null, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CpBands cpBands0 = new CpBands(segment0);
      CPUTF8[] cPUTF8Array0 = cpBands0.parseCPUTF8References("45X?!Zf[V4ZH<qDq4", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPFloatReferences("fstore", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      CPFloat[] cPFloatArray0 = cpBands0.parseCPFloatReferences("fvmpl", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPFloatArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      CPDouble[] cPDoubleArray0 = cpBands0.parseCPDoubleReferences("ACCESS_CONTROLLER", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPDoubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      cpBands0.parseFlags("` #<4VZ<XUy", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      long[][] longArray0 = cpBands0.parseFlags("", (InputStream) null, intArray0, bHSDCodec0, true);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("G~el-8H]@^cneDC", (InputStream) null, (int[]) null, bHSDCodec0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("S><H(B", (InputStream) null, (-392), bHSDCodec0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      cpBands0.decodeBandInt("` #<4VZ<XUy", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
      assertEquals(9, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags("GMQ+i0mVo'", (InputStream) byteArrayInputStream0, 1, bHSDCodec0, false);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new long[] {16120L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 2, bHSDCodec0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-82);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences("org.mockito.internal.creation.bytebuddy.MockMethodAdvice", byteArrayInputStream0, bHSDCodec0, 2195);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences((String) null, byteArrayInputStream0, bHSDCodec0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseCPMethodRefReferences("", byteArrayInputStream0, bHSDCodec0, 404);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      CPClass[] cPClassArray0 = cpBands0.parseCPClassReferences(")7ZHj+}RGH4$+L+Ldpx", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      long[] longArray0 = cpBands0.parseFlags("", (InputStream) null, 0, bHSDCodec0, bHSDCodec0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.unpack((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      String[] stringArray0 = bcBands0.parseReferences("", (InputStream) null, bHSDCodec0, 0, (String[]) null);
      assertEquals(0, stringArray0.length);
  }
}
