/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:45:39 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AttributeLayout_ESTest extends AttributeLayout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("R", 0, ",E9orVd", 255);
      boolean boolean0 = attributeLayout0.matches((-1L));
      assertTrue(boolean0);
      assertEquals("R", attributeLayout0.getName());
      assertEquals(",E9orVd", attributeLayout0.getLayout());
      assertEquals(255, attributeLayout0.getIndex());
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "Something has gone wrong during parsing references, index = ", 1615);
      attributeLayout0.hashCode();
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getLayout());
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getName());
      assertEquals(1615, attributeLayout0.getIndex());
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("BIt`ldcnI5oXZ<k", 0, "BIt`ldcnI5oXZ<k", 1000);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals("BIt`ldcnI5oXZ<k", attributeLayout0.getName());
      assertEquals(1000, attributeLayout0.getIndex());
      assertEquals(0, bHSDCodec0.getL());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "RKRSKQRmrWobwVY{+7K[b2$", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals(4294967293L, bHSDCodec0.largest());
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getName());
      assertEquals("RKRSKQRmrWobwVY{+7K[b2$", attributeLayout0.getLayout());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KKRuntimeInvisibleAnnotationsACC_FINAL", 0, "KS", 31);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(4294967293L, bHSDCodec0.largest());
      assertEquals("KKRuntimeInvisibleAnnotationsACC_FINAL", attributeLayout0.getName());
      assertEquals("KS", attributeLayout0.getLayout());
      assertEquals(31, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "Something has gone wrong during parsing references, index = ", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getLayout());
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getName());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(1, bHSDCodec0.getS());
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(0, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("_nesttype_RS", 0, "Parsed #", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(0, attributeLayout0.getContext());
      assertEquals("_nesttype_RS", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("Parsed #", attributeLayout0.getLayout());
      assertEquals(0L, bHSDCodec0.smallest());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("*", 0, "On`X", 80);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(80, attributeLayout0.getIndex());
      assertEquals("On`X", attributeLayout0.getLayout());
      assertEquals("*", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getContext());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals((-21739L), bHSDCodec0.smallest());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeLayout attributeLayout0 = null;
      try {
        attributeLayout0 = new AttributeLayout("Failed tO read any dara from input strea1", (-11), "Failed tO read any dara from input strea1", (-11));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Attribute context out of range: -11
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("_d~hq?N", 1, "RNq$d(fQRIA,", 1);
      try { 
        attributeLayout0.getValue((long) 0, "ACC_ENUM", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: RNq$d(fQRIA,
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "Something has gone wrong during parsing references, index = ", 0);
      attributeLayout0.setBackwardsCallCount((-12437164));
      int int0 = attributeLayout0.numBackwardsCallables();
      assertEquals((-12437164), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("\u00A7NULL\u00A7", 0, "\u00A7NULL\u00A7", 0, true);
      attributeLayout0.isDefaultLayout();
      assertEquals("\u00A7NULL\u00A7", attributeLayout0.getName());
      assertEquals("\u00A7NULL\u00A7", attributeLayout0.getLayout());
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(0, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KF", 0, "KF", 0);
      assertEquals("KF", attributeLayout0.getLayout());
      
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      SegmentConstantPool segmentConstantPool0 = cpBands0.getConstantPool();
      attributeLayout0.getValue((-1L), segmentConstantPool0);
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("KF", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getContext());
      assertTrue(attributeLayout0.isDefaultLayout());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", 1, "RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", 1);
      assertEquals("RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", attributeLayout0.getLayout());
      
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      SegmentConstantPool segmentConstantPool0 = cpBands0.getConstantPool();
      attributeLayout0.getValue((-1L), "RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", segmentConstantPool0);
      assertEquals("RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", attributeLayout0.getName());
      assertEquals(1, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("N6Pkd0<o[S-x~AD,", 2, "", 1359, true);
      String string0 = attributeLayout0.getLayout();
      assertEquals("N6Pkd0<o[S-x~AD,", attributeLayout0.getName());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals("", string0);
      assertEquals(1359, attributeLayout0.getIndex());
      assertEquals(2, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("..*", 0, "_/dn!3_c", 0);
      int int0 = attributeLayout0.getIndex();
      assertEquals("_/dn!3_c", attributeLayout0.getLayout());
      assertEquals("..*", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("code_LocalVariableTypeTable_name_RU", 0, "ACC_PROTECTED", (-1509));
      int int0 = attributeLayout0.getIndex();
      assertEquals("ACC_PROTECTED", attributeLayout0.getLayout());
      assertEquals("code_LocalVariableTypeTable_name_RU", attributeLayout0.getName());
      assertEquals((-1509), int0);
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "Something has gone wrong during parsing references, index = ", 0);
      int int0 = attributeLayout0.getContext();
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getLayout());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K", 1, "K", 1);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 0, "class-file version", (SegmentConstantPool) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQ", 1, "*", 2537);
      int int0 = attributeLayout0.numBackwardsCallables();
      //  // Unstable assertion: assertEquals("*", attributeLayout0.getLayout());
      //  // Unstable assertion: assertTrue(attributeLayout0.isDefaultLayout());
      //  // Unstable assertion: assertEquals("KQ", attributeLayout0.getName());
      //  // Unstable assertion: assertEquals(1, attributeLayout0.getContext());
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(2537, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K]mrWobwVY{+7K[b2$", 0, "K]mrWobwVY{+7K[b2$", 0);
      boolean boolean0 = attributeLayout0.matches(1);
      assertTrue(boolean0);
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("K]mrWobwVY{+7K[b2$", attributeLayout0.getLayout());
      assertEquals("K]mrWobwVY{+7K[b2$", attributeLayout0.getName());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K]mrWobwVY{+7K[b2$", 0, "K]mrWobwVY{+7K[b2$", 0);
      boolean boolean0 = attributeLayout0.matches(0);
      assertEquals("K]mrWobwVY{+7K[b2$", attributeLayout0.getName());
      assertFalse(boolean0);
      assertEquals("K]mrWobwVY{+7K[b2$", attributeLayout0.getLayout());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Failed to read any data from input stream", 2, "Failed to read any data from input stream", 0);
      attributeLayout0.hashCode();
      assertEquals("Failed to read any data from input stream", attributeLayout0.getLayout());
      assertEquals(2, attributeLayout0.getContext());
      assertEquals("Failed to read any data from input stream", attributeLayout0.getName());
      assertEquals(0, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.IcBands", 0, "org.apache.commons.compress.harmony.unpack200.IcBands", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals("org.apache.commons.compress.harmony.unpack200.IcBands", attributeLayout0.getName());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals(1, bHSDCodec0.getB());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("RSomethng has gon_ wrog Auing parsing references, index = ", 0, "RSomethng has gon_ wrog Auing parsing references, index = ", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals(4294967293L, bHSDCodec0.largest());
      assertEquals("RSomethng has gon_ wrog Auing parsing references, index = ", attributeLayout0.getName());
      assertEquals("RSomethng has gon_ wrog Auing parsing references, index = ", attributeLayout0.getLayout());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getContext());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K#", 0, "Zhg6KS", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("K#", attributeLayout0.getName());
      assertEquals("Zhg6KS", attributeLayout0.getLayout());
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(4294967293L, bHSDCodec0.largest());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("/^!Nm+:B$e", 0, "KKO4C6*6II!3rPBy", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals("KKO4C6*6II!3rPBy", attributeLayout0.getLayout());
      assertEquals("/^!Nm+:B$e", attributeLayout0.getName());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals(2, bHSDCodec0.getS());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("ACC_PRIVATE", 0, "ACC_PRIVATE", 0);
      BHSDCodec bHSDCodec0 = (BHSDCodec)attributeLayout0.getCodec();
      assertEquals(0, attributeLayout0.getContext());
      assertEquals(0L, bHSDCodec0.smallest());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("ACC_PRIVATE", attributeLayout0.getLayout());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals("ACC_PRIVATE", attributeLayout0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AttributeLayout attributeLayout0 = null;
      try {
        attributeLayout0 = new AttributeLayout("", 0, "", 0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot have an unnamed layout
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AttributeLayout attributeLayout0 = null;
      try {
        attributeLayout0 = new AttributeLayout((String) null, 0, "nb%9x", 0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot have an unnamed layout
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AttributeLayout attributeLayout0 = null;
      try {
        attributeLayout0 = new AttributeLayout((String) null, 0, (String) null, 0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cannot have a null layout
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AttributeLayout attributeLayout0 = null;
      try {
        attributeLayout0 = new AttributeLayout("", 3488, "", 3488, true);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Attribute context out of range: 3488
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K]mrWobwVY{+7K[b2$", 0, "K]mrWobwVY{+7K[b2$", 0);
      try { 
        attributeLayout0.getValue((long) 0, "K]mrWobwVY{+7K[b2$", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: K]mrWobwVY{+7K[b2$
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQ", 1, "KQ", 1);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 1, "Ljava/lang/String;", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KRmrWobwVY{+7K[b2$", 0, "KRmrWobwVY{+7K[b2$", 0);
      try { 
        attributeLayout0.getValue((long) 0, "KRmrWobwVY{+7K[b2$", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KRmrWobwVY{+7K[b2$
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQ", 1, "KQ", 1);
      try { 
        attributeLayout0.getValue((long) 1, (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KQ
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("PJigAlF{V", 0, "KQ", 0);
      try { 
        attributeLayout0.getValue((long) 0, "PJigAlF{V", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KPJigAlF{V
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQKRmrWobwVY{+7K[b2$", 0, "KQKRmrWobwVY{+7K[b2$", 0);
      try { 
        attributeLayout0.getValue((long) 0, "O4C6*6II!3rPBy", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KO4C6*6II!3rPByKRmrWobwVY{+7K[b2$
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KN", 1, "KN", 1);
      try { 
        attributeLayout0.getValue((long) 0, "class-file version", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KN
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KM-40rP", 1, "KM-40rP", 1);
      try { 
        attributeLayout0.getValue((long) 1, "ACC_ANNOTATION", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KM-40rP
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KLVA`[GorEtjD;`", 2, "KLVA`[GorEtjD;`", 2);
      try { 
        attributeLayout0.getValue((long) 2, "KLVA`[GorEtjD;`", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KLVA`[GorEtjD;`
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQVwC", 0, "KQVwC", 0);
      try { 
        attributeLayout0.getValue((long) 0, "KQVwC", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KKQVwCVwC
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "KQRmrWobwVY{+7K[b2$", 0);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue(4294967295L, "Jl4ShbsO&0n.0m.7", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQ", 1, "KQ", 1);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 1, "I}nW[?o3", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KHQ", 1, "KHQ", 1);
      try { 
        attributeLayout0.getValue(0L, "KHQ", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KHQ
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("L+al'Var2!ble@1be", 1, "KQ", 1);
      try { 
        attributeLayout0.getValue((long) 1, "G4IUf", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KG4IUf
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQKRmrWobwVY{+7K[b2$", 0, "KQKRmrWobwVY{+7K[b2$", 0);
      try { 
        attributeLayout0.getValue((long) 0, "Exceptions", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: KExceptionsKRmrWobwVY{+7K[b2$
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KDR", 3, "KDR", 3);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 3, "KDR", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KQ", 3, "KQ", 3);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 3, "ConstantValue", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("LRG``Z+6", 0, "LRG``Z+6", 0);
      try { 
        attributeLayout0.getValue((long) 3, "Code", (SegmentConstantPool) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown layout encoding: LRG``Z+6
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", 1, "RSomehng has gon_ wrog Auing parsing Leferen\"es, inde = ", 1);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 1, (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("RU", 2, "RU", 2);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 2, "RU", (SegmentConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.AttributeLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KRmr)ob0VY{+K[b2$", 2, "KRmr)ob0VY{+K[b2$", 2);
      String string0 = attributeLayout0.getName();
      assertEquals("KRmr)ob0VY{+K[b2$", attributeLayout0.getLayout());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals("KRmr)ob0VY{+K[b2$", string0);
      assertEquals(2, attributeLayout0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Failed to read any data from input stream", 2, "Failed to read any data from input stream", 2);
      int int0 = attributeLayout0.getIndex();
      assertEquals("Failed to read any data from input stream", attributeLayout0.getName());
      assertEquals(2, attributeLayout0.getContext());
      assertEquals("Failed to read any data from input stream", attributeLayout0.getLayout());
      assertEquals(2, int0);
      assertTrue(attributeLayout0.isDefaultLayout());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Failed to read any data from input stream", 2, "Failed to read any data from input stream", 1651, false);
      int int0 = attributeLayout0.getContext();
      assertFalse(attributeLayout0.isDefaultLayout());
      assertEquals("Failed to read any data from input stream", attributeLayout0.getLayout());
      assertEquals(2, int0);
      assertEquals(1651, attributeLayout0.getIndex());
      assertEquals("Failed to read any data from input stream", attributeLayout0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("K", 2, "K", 2);
      // Undeclared exception!
      try { 
        attributeLayout0.getValue((long) 2, (SegmentConstantPool) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("KKF", 0, "KKF", 0);
      String string0 = attributeLayout0.getLayout();
      assertEquals(0, attributeLayout0.getContext());
      assertTrue(attributeLayout0.isDefaultLayout());
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("KKF", string0);
      assertEquals("KKF", attributeLayout0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("\u00A7NULL\u00A7", 0, "!@i", (-144), false);
      attributeLayout0.isDefaultLayout();
      assertEquals("!@i", attributeLayout0.getLayout());
      assertEquals((-144), attributeLayout0.getIndex());
      assertEquals("\u00A7NULL\u00A7", attributeLayout0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AttributeLayout attributeLayout0 = new AttributeLayout("Something has gone wrong during parsing references, index = ", 0, "Something has gone wrong during parsing references, index = ", 0);
      String string0 = attributeLayout0.toString();
      assertEquals(0, attributeLayout0.getIndex());
      assertEquals("Something has gone wrong during parsing references, index = ", attributeLayout0.getLayout());
      assertEquals("Class: Something has gone wrong during parsing references, index = ", string0);
  }
}
