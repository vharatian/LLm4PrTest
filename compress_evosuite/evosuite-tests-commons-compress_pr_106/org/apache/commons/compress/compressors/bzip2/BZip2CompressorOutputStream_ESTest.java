/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 05:58:43 GMT 2025
 */

package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BZip2CompressorOutputStream_ESTest extends BZip2CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)49;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
      assertEquals(50, byteArrayOutputStream0.size());
      assertEquals("BZh11AY&SY\uFFFDr\uFFFD\uFFFD\u0000\u0000\u0000\uFFFD\u0002\uFFFD\u0000 \u0000\u0010\u0011@\u0000\u0001\u0000 \u0000!\uFFFD\uFFFD!\uFFFDJN\uFFFDx\uFFFD\uFFFD)\u0084\uFFFD\uFFFD\uFFFD\uFFFDx", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)55;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.finish();
      assertEquals(48, byteArrayOutputStream0.size());
      assertEquals("BZh11AY&SYy\uFFFD>\uFFFD\u0000\u0000\u0003\uFFFD0@\u0000\u0000\uFFFD\u0000 \u0000\u0000\uFFFD\u0000!&\uFFFD\uFFFD4D\uFFFDc\uFFFD\uFFFD\"\uFFFD(H<\uFFFD\uFFFDl\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[26];
      byteArray0[2] = (byte)56;
      byteArray0[15] = (byte)17;
      byteArray0[10] = (byte) (-5);
      byteArray0[22] = (byte)56;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream1.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream1.close();
      assertEquals(148, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\uFFFDBZh11AY&SYI\uFFFD\u047E\u0000\u0000\u0019\uFFFD\uFFFD\uFFFDD \u0000q`0@pA\b0\u0002P\u0000\u0010@\b\uFFFD\u0006\b\u0000\u0000`\u0000D\u0000@\u0004\b \u0000u\u0011OI\uFFFD\u0000\u0000\uFFFD4\u001A4\u0475\u0002QM\u0000\t\uFFFD\u0000\u0004\u0453'\uFFFD\uFFFD\uFFFDF\n\f\u0010\u0014Q\f\uFFFD\f\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDt\uFFFD\u0010\uFFFD\uFFFD*\u0001\b,^\u000BE\uFFFDn\u0004\uFFFD$\u001F\u0004\uFFFD\u0001\u0004*^\uFFFDu\u001F?v\uFFFD\uFFFD5>\u0019\uFFFDFmh\u0017rE8P\uFFFDI\uFFFD\u047E", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)31;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
      assertEquals(39, byteArrayOutputStream0.size());
      assertEquals("BZh11AY&SY\uFFFD\u0016\uFFFDO\u0000\u0000\u0000`\u0000@\u0000\u0000\u0000\uFFFD\u00000\uFFFDAX\uFFFD\uFFFD)\u0084\uFFFDX\uFFFD\uFFFDx", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)56;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream1.write((int) (byte)56);
      bZip2CompressorOutputStream1.close();
      assertEquals(104, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005wbBZh11AY&SYyW\uFFFD\uFFFD\u0000\u0000\u000B\uFFFDU` \u0000M\u0000`Dx\u0000\b0\b@\u0000\uFFFD\u0002\u0004@\u0002\u0000\u0004 \u0000TP\u0000\u0000\u0000\u0002\u00054\u001E\uFFFD\u000FQ\uFFFD\u0019\uFFFD\uFFFD\uFFFDA\uFFFD\u000E\u0004(\uFFFDb\uFFFDu\uFFFDj\uFFFDN2v0R>\uFFFD\uFFFD7\uFFFD\uFFFD\uFFFD),D|]\uFFFD\u0014\uFFFDBA\uFFFD_\uFFFD\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(0L);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[7];
      bZip2CompressorOutputStream0.write(byteArray0, 1, 0);
      assertEquals(1, BZip2CompressorOutputStream.MIN_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[26];
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 4);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 4);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream1.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 4);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 4);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
      assertEquals(37, byteArrayOutputStream0.size());
      assertEquals("BZh11AY&SYS\b5h\u0000\u0000\u0000@\u0000\u0000@ \u00000\uFFFD#aw$S\uFFFD\t\u00050\uFFFDV\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[26];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(26, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(4) + len(4) > buf.length(0).
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 1, (-3597));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // len(-3597) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockPrintStream0, 1);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, (-2512), 3274);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(-2512) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      bZip2CompressorOutputStream0.flush();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.flush();
      assertEquals("BZh4\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(14, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.close();
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("BZh4\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      bZip2CompressorOutputStream0.finalize();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.finalize();
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("BZh1\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = null;
      try {
        bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, 260);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(260) > 9
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("4&,h3@;;{[[aER", "4&,h3@;;{[[aER", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(0) < 1
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(20L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize((-1676L));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 1);
      int int0 = bZip2CompressorOutputStream0.getBlockSize();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 4);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.finish();
      assertEquals("BZh4\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(14, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }
}
