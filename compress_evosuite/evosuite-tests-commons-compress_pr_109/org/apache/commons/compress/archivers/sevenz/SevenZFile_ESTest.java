/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 05:48:49 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.NoSuchFileException;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZFile_ESTest extends SevenZFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      boolean boolean0 = SevenZFile.matches(byteArray0, (byte)94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = SevenZFile.matches(byteArray0, 6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[11];
      mockFileInputStream0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, (SevenZFileOptions) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-n{yz}V21YN");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("totalInStreams", "i[m7B");
      File file0 = MockFile.createTempFile("i[m7B", "i[m7B", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("propertiesSize");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("yS{<muGe#,HMar/QZ", "yS{<muGe#,HMar/QZ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-sigFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("!Xo`?T/NnC:6(3cK", "!Xo`?T/NnC:6(3cK");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("file names length");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, " ", charArray0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[2];
      fileChannel0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Unsupported LZMA2 property bits", charArray0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", (char[]) null, (SevenZFileOptions) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "O'!Kd48DpPkwVY8", charArray0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("95fge^y\"u}M");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "95fge^y\"u}M", (char[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "^|l*z~(", charArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("Missing LZMA2 properties", "Missing LZMA2 properties");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Missing LZMA2 properties", charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~XF`J+X-");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "~XF`J+X-", (byte[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      mockFileInputStream0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "mY.", (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      File file0 = MockFile.createTempFile("numFiles", "numFiles");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "\n", byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%2xWrR~s![X");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "%2xWrR~s![X", sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("O'!Kd48DpkVY8", "O'!Kd48DpkVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "O'!Kd48DpkVY8", sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, ">5O", sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("Additional streams unsupported", "Additional streams unsupported");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Additional streams unsupported", (SevenZFileOptions) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(QJ%&zzw0U-a+p&+BC");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "(QJ%&zzw0U-a+p&+BC");
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("8>C", "8>C");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "8>C");
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Archive contains file with streams but no subStreamsInfo");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"P\"@`D|aBO[ aAh~(Tl", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@2bWrT+g^Y7");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      File file0 = MockFile.createTempFile("Not implemented", "Broken or unsupported archive: no Header");
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, charArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockFile mockFile0 = new MockFile("%UO|LZ7U\"J(2`R*4J\"");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = MockFile.createTempFile("okd", "okd");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, (SevenZFileOptions) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c7K{2N/", "c7K{2N/");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = SevenZFile.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        SevenZFile.matches((byte[]) null, 676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/O'!Kd48DpPkwVY80O'!Kd48DpPkwVY8");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "O'!Kd48DpPkwVY8");
      File file0 = MockFile.createTempFile("O'!Kd48DpPkwVY8", "O'!Kd48DpPkwVY8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported 7z version (56,68)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "=Gk>&BTt:X+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "kStartPos is unsupported, please report", charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "numPackStreams", sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      char[] charArray0 = new char[1];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "R!@Gk>&eBTWt:YX+x", charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }
}
