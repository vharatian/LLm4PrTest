/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:40:00 GMT 2025
 */

package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CpioArchiveEntry_ESTest extends CpioArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("D2R_[e86<b'D'keM", 54L);
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setMode(40946L);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(40946L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("keystore");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "keystore");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals("keystore", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(1L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(path0, "", linkOptionArray0);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Pt\n");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "include");
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals("include", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("optional", 8192L);
      cpioArchiveEntry0.setTime((-494L));
      cpioArchiveEntry0.getLastModifiedDate();
      assertEquals((-494L), cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("}. *T\"]4{'XW}", 4294967295L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1, int0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(">");
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(">", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "qB]'G|KfPCv7gP");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals(1, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, mockFile0, "");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[2];
      linkOptionArray0[4] = linkOption0;
      linkOptionArray0[5] = linkOption0;
      linkOptionArray0[6] = linkOptionArray0[2];
      linkOptionArray0[7] = linkOptionArray0[1];
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, path0, "c% :r#p%.?&L]7-!v", linkOptionArray0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("c% :r#p%.?&L]7-!v", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setUID(556L);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(556L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("dp{W(Z0{(:168Fs", 0L);
      cpioArchiveEntry0.setTime((long) 2);
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("optional", 8192L);
      cpioArchiveEntry0.setTime((-494L));
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals((-494L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("_.T>4*dZef0Od", 1851L);
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1851L, long0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(1, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("_.T>4*dZef0Od", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">[L");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, ">[L");
      cpioArchiveEntry0.setRemoteDeviceMin(1851L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(">[L", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1851L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unknown header type");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Unknown header type");
      cpioArchiveEntry0.setRemoteDeviceMin((-1282L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals((-1282L), long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("Unknown header type", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("FMjm]]}74m=%N");
      cpioArchiveEntry0.setRemoteDeviceMaj(1012L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(1012L, long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("FMjm]]}74m=%N", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setRemoteDevice((short)4);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("_.T>4*dZef0Od");
      cpioArchiveEntry0.setNumberOfLinks((-1279L));
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals((-1279L), long0);
      assertEquals("_.T>4*dZef0Od", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("dp{W(Z0{(:168Fs", 0L);
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("dp{W(Z0{(:168Fs", string0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, "");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", string0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid entry size <", "1Gz~V9~R");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "Invalid entry size <");
      cpioArchiveEntry0.setInode(2L);
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">[L");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "v7Bb[ak@^\"VDNs*s");
      cpioArchiveEntry0.setInode((-3444L));
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals((-3444L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("yp");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals("yp", cpioArchiveEntry0.getName());
      assertEquals(3, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("FMjm]]}74m=%N");
      cpioArchiveEntry0.setGID(8192L);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(8192L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!r");
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("TRAILER!!r", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("@+Q@L S)a[^5d7ksop", (short)4);
      cpioArchiveEntry0.setDeviceMin((short)4);
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("@+Q@L S)a[^5d7ksop", cpioArchiveEntry0.getName());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("SiG0dW#ub6DSQ}*-");
      cpioArchiveEntry0.setDeviceMin((-782L));
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals("SiG0dW#ub6DSQ}*-", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals((-782L), long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">[L");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, ">[L");
      cpioArchiveEntry0.setDeviceMaj(323L);
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(323L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(">[L", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("@MK30");
      cpioArchiveEntry0.setDeviceMaj((-1279L));
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((-1279L), long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("@MK30", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice((-2653L));
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals((-2653L), long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("n|$E5\"%k[%'5d6G]>", 0L);
      cpioArchiveEntry0.setChksum((-544L));
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4294966752L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("n|$E5\"%k[%'5d6G]>", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDevice((short)1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDevice((short)1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getChksum();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short) (-571), (Path) null, "TRAILER!!r", linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c9qnD", "c9qnD");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short) (-1366), path0, "c9qnD", linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)3, "Cd.Mh_|Anxd", (short)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)256, "The filter must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)4, (File) null, "dnWasv&z</R[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";0Xcf/(W)i#b", ";0Xcf/(W)i#b");
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short) (-4140), mockFile0, ";0Xcf/(W)i#b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((Path) null, "YRq30u>{NlG!j$@[E^(", linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((File) null, "U)t:np ^u).c'8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The strings must not be null");
      cpioArchiveEntry0.setMode(32768L);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("The strings must not be null", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 36864L);
      cpioArchiveEntry0.setMode(16384L);
      assertEquals(16384L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("RUnknown headerHtyp;");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize((-2357L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <-2357>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      
      cpioArchiveEntry0.setSize(1L);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("_.T>4*dZef0Od", 1851L);
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1, cpioArchiveEntry0.getDataPadCount());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("_.T>4*dZef0Od", cpioArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertTrue(boolean0);
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The strings must not be null");
      int int0 = cpioArchiveEntry0.getHeaderPadCount((-2676L));
      assertEquals(0, int0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("The strings must not be null", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("D2R_[e86<b'D'keM", 54L);
      int int0 = cpioArchiveEntry0.getHeaderPadCount(0L);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("D2R_[e86<b'D'keM", cpioArchiveEntry0.getName());
      assertEquals(1, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The strings must not be null");
      int int0 = cpioArchiveEntry0.getHeaderPadCount((Charset) null);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      Charset charset0 = Charset.defaultCharset();
      int int0 = cpioArchiveEntry0.getHeaderPadCount(charset0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, int0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("optional", 8192L);
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(8192L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("optional", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, "kuMq!wV) NI)");
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals("kuMq!wV) NI)", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(0, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getUID());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, "");
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry("", (short)4);
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(4, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertTrue(boolean0);
      assertEquals("", cpioArchiveEntry1.getName());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(4L, cpioArchiveEntry1.getSize());
      assertEquals(0L, cpioArchiveEntry1.getUID());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
      boolean boolean0 = cpioArchiveEntry0.equals("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertFalse(boolean0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, "");
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertTrue(boolean0);
      assertEquals(76, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertEquals(0, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals(0L, cpioArchiveEntry1.getUID());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.hashCode();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("D2R_[e86<b'D'keM", 54L);
      cpioArchiveEntry0.hashCode();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setMode((short)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode. Full: 4 Masked: 0
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("FMjm]]}74m$%N");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize(4294967299L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <4294967299>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((String) null, (-947L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <-947>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("D2R_[e86<b'D'keM", 54L);
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("SiG0dW#ub6DSQ}*-");
      cpioArchiveEntry0.setMode(49152);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, ">");
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertTrue(boolean0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(">", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("D2R_[e86<b'D'keM", 54L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("D2R_[e86<b'D'keM", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("v/ow*{Tdt,c");
      cpioArchiveEntry0.setMode(4096);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(4096L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setMode(40946L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(40946L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m");
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("m", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(",&");
      cpioArchiveEntry0.setMode(10000L);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(10000L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("_.T>4*dZef0Od");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("_.T>4*dZef0Od", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Invalid entry size <");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(32768L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals("Invalid entry size <", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(0, int0);
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      int int0 = cpioArchiveEntry0.getHeaderPadCount(0L);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1, int0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((long) (short)4);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("30QWILy2O");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("p]d)*v");
      Charset charset0 = Charset.defaultCharset();
      int int0 = cpioArchiveEntry0.getHeaderPadCount(charset0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(3, int0);
      assertEquals("p]d)*v", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unknown mode. Full: ");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry(path0, "Unknown mode. Full: ", linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine type of file Unknown mode. Full: 
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short) (-2807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "=4M", 1L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(1, int0);
      assertEquals("=4M", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(" Masked: ");
      cpioArchiveEntry0.setRemoteDeviceMaj((-4819L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals((-4819L), long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(" Masked: ", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Invalid entry size <");
      cpioArchiveEntry0.setGID((-1830L));
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals((-1830L), long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      String string0 = cpioArchiveEntry0.getName();
      assertNull(string0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("SiG0dW#ub6DSQ}*-");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals((short)1, short0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals("SiG0dW#ub6DSQ}*-", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Invalid entry size <");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setChksum((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Invalid entry size <");
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("Invalid entry size <", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Invalid entry size <");
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals("Invalid entry size <", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("iy7+|m` Z?e|K]Eh10", 24576L);
      cpioArchiveEntry0.setMode(24576L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(24576L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      int int0 = cpioArchiveEntry0.getHeaderSize();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setRemoteDevice((-5498L));
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-5498L), long0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(" Masked: ");
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(" Masked: ", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("or");
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, int0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("or", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, long0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setUID((-304L));
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals((-304L), long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice(496L);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(496L, long0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setNumberOfLinks((short)4);
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4L, long0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      
      FileTime fileTime0 = FileTime.fromMillis(61440L);
      cpioArchiveEntry0.setTime(fileTime0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("EW<@u~y+4a");
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("EW<@u~y+4a", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER&!");
      cpioArchiveEntry0.setName("TRAILER&!");
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("TRAILER&!", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }
}
