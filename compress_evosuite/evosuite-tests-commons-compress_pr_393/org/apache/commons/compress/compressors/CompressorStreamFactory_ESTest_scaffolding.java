/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Aug 22 21:02:07 GMT 2025
 */

package org.apache.commons.compress.compressors;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class CompressorStreamFactory_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.compress.compressors.CompressorStreamFactory"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/compress_experiment_2"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CompressorStreamFactory_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.compress.compressors.pack200.Pack200Strategy$2",
      "org.apache.commons.compress.utils.OsgiUtils",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState",
      "org.apache.commons.compress.compressors.pack200.Pack200Strategy$1",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream",
      "org.tukaani.xz.ArrayCache",
      "org.apache.commons.compress.compressors.bzip2.BlockSort",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream",
      "org.tukaani.xz.lz.HC4",
      "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream",
      "org.tukaani.xz.MemoryLimitException",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.brotli.dec.BitReader",
      "org.apache.commons.compress.utils.ByteUtils$ByteConsumer",
      "org.tukaani.xz.lz.Hash234",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.utils.ByteUtils$ByteSupplier",
      "org.apache.commons.compress.harmony.pack200.Pack200Exception",
      "org.tukaani.xz.rangecoder.RangeEncoderToStream",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize",
      "com.github.luben.zstd.ZstdIOException",
      "org.tukaani.xz.SingleXZInputStream",
      "org.tukaani.xz.lz.LZEncoder",
      "org.apache.commons.compress.utils.BitInputStream",
      "org.apache.commons.compress.harmony.unpack200.Archive",
      "org.tukaani.xz.XZInputStream",
      "org.tukaani.xz.check.CRC64",
      "org.apache.commons.compress.compressors.lz77support.Parameters",
      "org.apache.commons.compress.utils.CountingInputStream",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock",
      "org.tukaani.xz.rangecoder.RangeDecoderFromStream",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream",
      "org.tukaani.xz.LZMA2Encoder",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor",
      "org.tukaani.xz.LZMAInputStream",
      "org.apache.commons.compress.compressors.FileNameUtil",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$State",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils",
      "org.tukaani.xz.common.EncoderUtil",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$1",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.brotli.dec.BrotliInputStream",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "com.github.luben.zstd.ZstdOutputStream",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream$State",
      "org.tukaani.xz.FilterCoder",
      "org.apache.commons.compress.java.util.jar.Pack200$Unpacker",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream",
      "com.github.luben.zstd.util.Native",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState",
      "org.apache.commons.compress.compressors.zstandard.ZstdUtils",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream",
      "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder",
      "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference",
      "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream",
      "org.tukaani.xz.RawCoder",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "com.github.luben.zstd.ZstdInputStream",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.LZMA2InputStream",
      "org.tukaani.xz.CorruptedInputException",
      "org.apache.commons.compress.compressors.brotli.BrotliUtils$CachedAvailability",
      "org.brotli.dec.IntReader",
      "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream",
      "org.tukaani.xz.LZMA2Coder",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data",
      "org.tukaani.xz.rangecoder.RangeDecoder",
      "com.github.luben.zstd.ZstdInputStreamNoFinalizer",
      "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.lz.BT4",
      "org.brotli.dec.BrotliRuntimeException",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback",
      "org.tukaani.xz.check.CRC32",
      "org.apache.commons.compress.utils.Sets",
      "com.github.luben.zstd.util.Native$1",
      "com.github.luben.zstd.util.Native$2",
      "org.tukaani.xz.lz.Matches",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream",
      "org.apache.commons.compress.compressors.zstandard.ZstdUtils$CachedAvailability",
      "org.tukaani.xz.common.Util",
      "org.tukaani.xz.FilterOptions",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream",
      "org.apache.commons.compress.compressors.brotli.BrotliUtils",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream",
      "org.apache.commons.compress.MemoryLimitException",
      "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream",
      "org.apache.commons.compress.compressors.deflate.DeflateParameters",
      "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C",
      "org.tukaani.xz.lzma.LZMAEncoderFast",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream",
      "com.github.luben.zstd.ZstdOutputStreamNoFinalizer",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream",
      "org.tukaani.xz.common.StreamFlags",
      "org.tukaani.xz.XZFormatException",
      "org.apache.commons.compress.compressors.z.ZCompressorInputStream",
      "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream",
      "org.apache.commons.compress.harmony.pack200.Pack200Adapter",
      "com.github.luben.zstd.BufferPool",
      "org.tukaani.xz.XZIOException",
      "org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream",
      "org.tukaani.xz.UnsupportedOptionsException",
      "org.brotli.dec.HuffmanTreeGroup",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.tukaani.xz.check.SHA256",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState",
      "org.tukaani.xz.LZMAOutputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2Constants",
      "org.tukaani.xz.XZ",
      "org.apache.commons.compress.utils.CloseShieldFilterInputStream",
      "org.apache.commons.compress.compressors.lz77support.Parameters$Builder",
      "com.github.luben.zstd.NoPool",
      "org.tukaani.xz.check.Check",
      "org.apache.commons.compress.compressors.pack200.Pack200Strategy",
      "org.apache.commons.compress.compressors.bzip2.CRC",
      "org.tukaani.xz.index.IndexBase",
      "org.apache.commons.compress.compressors.pack200.StreamBridge",
      "org.apache.commons.compress.compressors.gzip.GzipParameters",
      "org.tukaani.xz.FilterEncoder",
      "org.osgi.framework.BundleEvent",
      "org.tukaani.xz.lzma.State",
      "org.apache.commons.compress.compressors.lz4.XXHash32",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream",
      "org.apache.commons.compress.compressors.xz.XZUtils",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.index.IndexEncoder",
      "org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge",
      "org.tukaani.xz.lzma.Optimum",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.compressors.CompressorStreamProvider",
      "org.tukaani.xz.check.None",
      "org.tukaani.xz.UncompressedLZMA2OutputStream",
      "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter",
      "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer",
      "org.apache.commons.compress.compressors.CompressorException",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory",
      "org.apache.commons.compress.utils.BoundedInputStream",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream",
      "org.apache.commons.compress.utils.ChecksumCalculatingInputStream",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream",
      "org.tukaani.xz.IndexIndicatorException",
      "org.apache.commons.compress.utils.IOUtils",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.apache.commons.compress.utils.InputStreamStatistics",
      "org.tukaani.xz.FinishableOutputStream",
      "org.apache.commons.compress.java.util.jar.Pack200",
      "org.tukaani.xz.XZOutputStream",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD",
      "org.brotli.dec.State"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CompressorStreamFactory_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream",
      "org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability",
      "org.apache.commons.compress.utils.OsgiUtils",
      "org.apache.commons.compress.compressors.FileNameUtil",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.tukaani.xz.XZ",
      "org.apache.commons.compress.compressors.xz.XZUtils",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream",
      "org.apache.commons.compress.compressors.zstandard.ZstdUtils$CachedAvailability",
      "com.github.luben.zstd.ZstdInputStream",
      "org.apache.commons.compress.compressors.zstandard.ZstdUtils",
      "org.apache.commons.compress.compressors.brotli.BrotliUtils$CachedAvailability",
      "org.brotli.dec.BrotliInputStream",
      "org.apache.commons.compress.compressors.brotli.BrotliUtils",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.apache.commons.compress.utils.Sets",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyDialect",
      "org.apache.commons.compress.compressors.snappy.PureJavaCrc32C",
      "org.apache.commons.compress.utils.CountingInputStream",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.compressors.CompressorException",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream",
      "org.apache.commons.compress.compressors.lz77support.Parameters",
      "org.apache.commons.compress.compressors.lz77support.Parameters$Builder",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor",
      "org.tukaani.xz.LZMAInputStream",
      "org.tukaani.xz.ArrayCache",
      "org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream",
      "com.github.luben.zstd.util.Native",
      "org.osgi.framework.BundleEvent",
      "com.github.luben.zstd.util.Native$1",
      "com.github.luben.zstd.util.Native$2",
      "com.github.luben.zstd.ZstdInputStreamNoFinalizer",
      "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$State",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.compressors.z.ZCompressorInputStream",
      "org.apache.commons.compress.utils.BitInputStream",
      "org.apache.commons.compress.compressors.pack200.Pack200Strategy",
      "org.apache.commons.compress.compressors.pack200.StreamBridge",
      "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge",
      "org.apache.commons.compress.java.util.jar.Pack200",
      "org.apache.commons.compress.harmony.pack200.Pack200Adapter",
      "org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter",
      "org.apache.commons.compress.utils.CloseShieldFilterInputStream",
      "org.apache.commons.compress.harmony.unpack200.Archive",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream",
      "org.apache.commons.compress.compressors.deflate.DeflateParameters",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream$State",
      "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState",
      "org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState",
      "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream",
      "org.brotli.dec.State",
      "org.brotli.dec.BitReader",
      "org.brotli.dec.IntReader",
      "org.brotli.dec.HuffmanTreeGroup",
      "org.brotli.dec.BrotliRuntimeException",
      "org.apache.commons.compress.compressors.gzip.GzipParameters",
      "org.tukaani.xz.SingleXZInputStream",
      "org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream",
      "com.github.luben.zstd.ZstdOutputStream",
      "com.github.luben.zstd.NoPool",
      "com.github.luben.zstd.ZstdOutputStreamNoFinalizer",
      "org.brotli.dec.Decode",
      "org.brotli.dec.Utils",
      "org.brotli.dec.Huffman",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream",
      "org.tukaani.xz.FinishableOutputStream",
      "org.tukaani.xz.LZMAOutputStream",
      "org.tukaani.xz.FilterOptions",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.tukaani.xz.rangecoder.RangeEncoderToStream",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.tukaani.xz.lz.LZEncoder",
      "org.tukaani.xz.lz.BT4",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.tukaani.xz.lz.Hash234",
      "org.tukaani.xz.lz.Matches",
      "org.tukaani.xz.lzma.State",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.tukaani.xz.lzma.Optimum",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters",
      "org.apache.commons.compress.compressors.lz4.XXHash32",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream",
      "org.apache.commons.compress.compressors.bzip2.CRC",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data",
      "org.apache.commons.compress.compressors.bzip2.BlockSort",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream",
      "org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer",
      "org.tukaani.xz.XZInputStream",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream",
      "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream",
      "org.tukaani.xz.XZOutputStream",
      "org.tukaani.xz.common.StreamFlags",
      "org.tukaani.xz.index.IndexBase",
      "org.tukaani.xz.index.IndexEncoder",
      "org.tukaani.xz.XZIOException",
      "org.tukaani.xz.LZMA2Coder",
      "org.tukaani.xz.LZMA2Encoder",
      "org.tukaani.xz.RawCoder",
      "org.tukaani.xz.check.Check",
      "org.tukaani.xz.check.CRC64",
      "org.tukaani.xz.common.Util",
      "org.tukaani.xz.common.EncoderUtil",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$1"
    );
  }
}
