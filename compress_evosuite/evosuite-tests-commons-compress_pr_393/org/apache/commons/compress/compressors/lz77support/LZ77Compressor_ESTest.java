/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:09:19 GMT 2025
 */

package org.apache.commons.compress.compressors.lz77support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LZ77Compressor_ESTest extends LZ77Compressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2, 2);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(parameters0).getLazyMatching();
      doReturn((-1809), (-1809)).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 35, 35).when(parameters0).getMinBackReferenceLength();
      doReturn(2, 2, 2, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[8];
      lZ77Compressor0.compress(byteArray0, 0, 2);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(571, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(9959).when(parameters0).getMaxBackReferenceLength();
      doReturn(571).when(parameters0).getMaxCandidates();
      doReturn(2, 2).when(parameters0).getMaxOffset();
      doReturn(0, 2, 571, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(571).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-128);
      lZ77Compressor0.prefill(byteArray0);
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(65).when(parameters0).getLazyMatchingThreshold();
      doReturn((-39), 141).when(parameters0).getMinBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The compressor has already started to accept data, can't prefill anymore
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(1990).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 560).when(parameters0).getMinBackReferenceLength();
      doReturn(594, 594).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The compressor has already started to accept data, can't prefill anymore
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(1693).when(parameters0).getLazyMatchingThreshold();
      doReturn(2470, 2470).when(parameters0).getMaxBackReferenceLength();
      doReturn((-733), 2902).when(parameters0).getMaxCandidates();
      doReturn(1360, 2902, (-1235)).when(parameters0).getMaxOffset();
      doReturn((-1065), 0, 119, 1693).when(parameters0).getMinBackReferenceLength();
      doReturn((-2593), (-3310)).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2470).when(parameters0).getWindowSize();
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 1693, 1662, 1508).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470, 2470, 2, (-400)).when(parameters0).getMaxCandidates();
      doReturn(1662, 2, 1632, 2470, 1632).when(parameters0).getMaxOffset();
      doReturn((-1036), (-1036), (-1036), 2, (-400)).when(parameters0).getMinBackReferenceLength();
      doReturn(1632, 1632, (-5176), 1632).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470).when(parameters0).getMaxCandidates();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(1662, 2).when(parameters0).getMaxOffset();
      doReturn(1693, 1693, (-1627), 2, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(1632).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor_BackReference0.getType();
      lZ77Compressor0.finish();
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(571, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 0).when(parameters0).getMaxCandidates();
      doReturn(571, 0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxOffset();
      doReturn(0, 2, 571, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-128);
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(566).when(parameters0).getLazyMatchingThreshold();
      doReturn(566).when(parameters0).getMaxBackReferenceLength();
      doReturn((-3095)).when(parameters0).getMaxCandidates();
      doReturn(1550, 9968).when(parameters0).getMaxOffset();
      doReturn((-1898), (-3095), 1764).when(parameters0).getMinBackReferenceLength();
      doReturn((-1898)).when(parameters0).getNiceBackReferenceLength();
      doReturn(566, 566).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn((-2742)).when(parameters0).getLazyMatchingThreshold();
      doReturn(0).when(parameters0).getMaxBackReferenceLength();
      doReturn(2458).when(parameters0).getMaxCandidates();
      doReturn(1978, 2446).when(parameters0).getMaxOffset();
      doReturn(2470, (-937), (-3), 1693).when(parameters0).getMinBackReferenceLength();
      doReturn(2447).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 3).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 1693, 0, 0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470, 2470, 0, 0, 0).when(parameters0).getMaxCandidates();
      doReturn(1662, 2, 1632, 2470, 1632).when(parameters0).getMaxOffset();
      doReturn((-1036), (-1036), (-1036), 2, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(1632, 1632, 0, 0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      int int0 = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(parameters0).getLazyMatching();
      doReturn(1693, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(3, 3).when(parameters0).getMaxBackReferenceLength();
      doReturn((-733), 2902).when(parameters0).getMaxCandidates();
      doReturn(1360, 2902, (-1235)).when(parameters0).getMaxOffset();
      doReturn((-1065), 0, 119, (-489), 0).when(parameters0).getMinBackReferenceLength();
      doReturn((-2593), (-3310)).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 3).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(1217).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 0).when(parameters0).getMaxCandidates();
      doReturn((-14), (-14), 0, 0, 0).when(parameters0).getMaxOffset();
      doReturn(0, (-14), 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(1217, 1217).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(571, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn((-1), 32767, 0, 0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 32767, 0, 0, 0).when(parameters0).getMaxCandidates();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(32767, 0, 330, 0, 0).when(parameters0).getMaxOffset();
      doReturn(571, (-1), 32767, 0, (-1014)).when(parameters0).getMinBackReferenceLength();
      doReturn(32767, 1327, 0, 0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 450, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      lZ77Compressor0.finish();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(1990, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(571).when(parameters0).getMaxBackReferenceLength();
      doReturn(571).when(parameters0).getMaxCandidates();
      doReturn(2, 2).when(parameters0).getMaxOffset();
      doReturn(0, 2, 1990, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(1990).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 1693).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470, 2470).when(parameters0).getMaxCandidates();
      doReturn(1662, 2, 1632, 2470, (-1532)).when(parameters0).getMaxOffset();
      doReturn((-1036), (-1036), (-1627), 2).when(parameters0).getMinBackReferenceLength();
      doReturn(1632, 1632).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LZ77Compressor.Block.BlockType.values();
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(1, 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 128, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      int int0 = (-171);
      // Undeclared exception!
      lZ77Compressor0.compress((byte[]) null, (-171), 592);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(566, 566).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LZ77Compressor.Block.BlockType.values();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      lZ77Compressor0.compress((byte[]) null, 1, 3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LZ77Compressor.Block.BlockType.values();
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(1, 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 128, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      int int0 = (-171);
      // Undeclared exception!
      lZ77Compressor0.compress((byte[]) null, (-171), 592);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2, 1693).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470, 2470).when(parameters0).getMaxCandidates();
      doReturn(1662, 2, 1632, 2470, (-1532)).when(parameters0).getMaxOffset();
      doReturn((-1036), (-1036), (-1627), 2).when(parameters0).getMinBackReferenceLength();
      doReturn(1632, 1632).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2, 8).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      lZ77Compressor0.finish();
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(2470).when(parameters0).getLazyMatchingThreshold();
      doReturn(2).when(parameters0).getMaxBackReferenceLength();
      doReturn(2470).when(parameters0).getMaxCandidates();
      doReturn((-1627), 2470, 2470).when(parameters0).getMaxLiteralLength();
      doReturn(1662, 2).when(parameters0).getMaxOffset();
      doReturn(1693, 1693, (-1627), 2, 1693).when(parameters0).getMinBackReferenceLength();
      doReturn(1632).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor_BackReference0.getType();
      lZ77Compressor0.finish();
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(580).when(parameters0).getLazyMatchingThreshold();
      doReturn(9959).when(parameters0).getMaxBackReferenceLength();
      doReturn(580).when(parameters0).getMaxCandidates();
      doReturn(580).when(parameters0).getMaxLiteralLength();
      doReturn(2, 2).when(parameters0).getMaxOffset();
      doReturn(0, 2, 580).when(parameters0).getMinBackReferenceLength();
      doReturn(580).when(parameters0).getNiceBackReferenceLength();
      doReturn(580, 580).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(571).when(parameters0).getLazyMatchingThreshold();
      doReturn(9959).when(parameters0).getMaxBackReferenceLength();
      doReturn(571).when(parameters0).getMaxCandidates();
      doReturn(571).when(parameters0).getMaxLiteralLength();
      doReturn(2, 2).when(parameters0).getMaxOffset();
      doReturn(0, 2, 571).when(parameters0).getMinBackReferenceLength();
      doReturn(571).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(571).when(parameters0).getLazyMatchingThreshold();
      doReturn(9959, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(571, 0).when(parameters0).getMaxCandidates();
      doReturn(571).when(parameters0).getMaxLiteralLength();
      doReturn(2, 2, 0).when(parameters0).getMaxOffset();
      doReturn(0, 2, 571, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(571, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(1693).when(parameters0).getLazyMatchingThreshold();
      doReturn(2470, 2470).when(parameters0).getMaxBackReferenceLength();
      doReturn((-733), 2902).when(parameters0).getMaxCandidates();
      doReturn(1360, 2902, (-1235)).when(parameters0).getMaxOffset();
      doReturn((-1065), 0, 119, (-489)).when(parameters0).getMinBackReferenceLength();
      doReturn((-2593), (-3310)).when(parameters0).getNiceBackReferenceLength();
      doReturn(1693, 2470).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0).when(parameters0).getMaxCandidates();
      doReturn(0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0).when(parameters0).getMaxOffset();
      doReturn(571, 0, 0, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.finish();
      lZ77Compressor0.prefill(byteArray0);
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.prefill(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The compressor has already started to accept data, can't prefill anymore
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2, 2);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 0).when(parameters0).getMaxCandidates();
      doReturn(0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxOffset();
      doReturn(2, 0, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(2, 2).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parameters0).getLazyMatching();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0).when(parameters0).getMaxCandidates();
      doReturn(0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0).when(parameters0).getMaxOffset();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(8, 0);
      lZ77Compressor_BackReference0.getOffset();
      byte[] byteArray0 = new byte[1];
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      byteArray0[0] = (byte)84;
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 8, 8);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getOffset();
      LZ77Compressor.BackReference lZ77Compressor_BackReference1 = new LZ77Compressor.BackReference(8, (byte)84);
      lZ77Compressor_LiteralBlock0.getType();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_BackReference1.toString();
      lZ77Compressor_LiteralBlock0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(parameters0).getMinBackReferenceLength();
      doReturn(1303, 1303, 1).when(parameters0).getWindowSize();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_BackReference1.toString();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(9981, (-511)).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(9959).when(parameters0).getMinBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(571).when(parameters0).getMinBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.finish();
      byteArray0[0] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parameters0).getLazyMatching();
      doReturn(571).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxCandidates();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxOffset();
      doReturn(571, (-1), 0, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571, 450).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[6];
      lZ77Compressor0.finish();
      byteArray0[0] = (byte)0;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      Parameters parameters1 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters1).getLazyMatching();
      doReturn(0).when(parameters1).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters1).getMinBackReferenceLength();
      doReturn(3, 0).when(parameters1).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters1, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(2470, 2470);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(1693, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      lZ77Compressor0.compress(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress((byte[]) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(652, 256, 652).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[1];
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-3049)).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = null;
      try {
        lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(271, 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.getOffset();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-1875)).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = null;
      try {
        lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LZ77Compressor.Block.BlockType.values();
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock((byte[]) null, 0, 0);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getLength();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.compress((byte[]) null, 0, (-889));
      lZ77Compressor_LiteralBlock0.getLength();
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      lZ77Compressor_EOD0.getType();
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(0, 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getLength();
      lZ77Compressor0.compress((byte[]) null, 0, 0);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getLength();
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(8, 0);
      lZ77Compressor_BackReference0.getOffset();
      byte[] byteArray0 = new byte[1];
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      byteArray0[0] = (byte)84;
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 8, 8);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getOffset();
      LZ77Compressor.BackReference lZ77Compressor_BackReference1 = new LZ77Compressor.BackReference(8, (byte)84);
      lZ77Compressor_LiteralBlock0.getType();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_BackReference1.toString();
      lZ77Compressor_LiteralBlock0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_BackReference1.toString();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[0];
      lZ77Compressor0.compress(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(271, 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getOffset();
      lZ77Compressor_BackReference0.getOffset();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)1;
      lZ77Compressor0.compress(byteArray0, (int) (byte) (-94), (-2002));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte) (-44);
      lZ77Compressor0.prefill(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)98, (byte) (-44)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(326, 326).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, (int) (byte) (-104), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)0;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 1711, (byte) (-1));
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      lZ77Compressor_EOD0.getType();
      lZ77Compressor_LiteralBlock0.getData();
      lZ77Compressor_EOD0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = null;
      try {
        lZ77Compressor0 = new LZ77Compressor(parameters0, (LZ77Compressor.Callback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // callback
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(1283).when(parameters0).getMinBackReferenceLength();
      doReturn(4940, 1283).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      lZ77Compressor0.compress(byteArray0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-2574), (-2574));
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      int int0 = lZ77Compressor_BackReference0.getLength();
      assertEquals((-2574), int0);
      
      lZ77Compressor_BackReference0.toString();
      LZ77Compressor.Block.BlockType.values();
      String string0 = lZ77Compressor_BackReference0.toString();
      assertEquals("BackReference with offset -2574 and length -2574", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 3497, 3497);
      int int1 = lZ77Compressor_LiteralBlock0.getOffset();
      assertEquals(3497, int1);
      
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getWindowSize();
      lZ77Compressor_LiteralBlock0.toString();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      String string1 = lZ77Compressor_LiteralBlock0.toString();
      assertEquals("LiteralBlock starting at 3497 with length 3497", string1);
      
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.finish();
      lZ77Compressor_LiteralBlock0.getType();
      lZ77Compressor_BackReference0.getType();
      assertEquals((-2574), lZ77Compressor_BackReference0.getLength());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-3301);
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-3301), (-3301));
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getType();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = null;
      try {
        lZ77Compressor0 = new LZ77Compressor((Parameters) null, lZ77Compressor_Callback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-508), (-508));
      lZ77Compressor_BackReference0.getType();
      int int0 = lZ77Compressor_BackReference0.getLength();
      assertEquals((-508), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)0;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 2, 256);
      String string0 = lZ77Compressor_LiteralBlock0.toString();
      assertEquals("LiteralBlock starting at 2 with length 256", string0);
      
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock1 = new LZ77Compressor.LiteralBlock(byteArray0, (-508), 3);
      String string1 = lZ77Compressor_BackReference0.toString();
      assertEquals("BackReference with offset -508 and length -508", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-923), (-923));
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.getLength();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, (-1541), (-858));
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getData();
      // Undeclared exception!
      try { 
        LZ77Compressor.Block.BlockType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 0, (-2952));
      lZ77Compressor_LiteralBlock0.getType();
      assertEquals((-2952), lZ77Compressor_LiteralBlock0.getLength());
      assertEquals(0, lZ77Compressor_LiteralBlock0.getOffset());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)16;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, (byte)0, (byte)98);
      lZ77Compressor_LiteralBlock0.getType();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor0.prefill(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)3;
      lZ77Compressor0.prefill(byteArray1);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte) (-17), (byte)0, (byte)3}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[1];
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 1238, 1016);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      byte[] byteArray1 = lZ77Compressor_LiteralBlock0.getData();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(1016).when(parameters0).getMinBackReferenceLength();
      doReturn((int)(byte)105, (int)(byte)105, 1016).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor0.prefill(byteArray0);
      lZ77Compressor0.compress(byteArray1);
      // Undeclared exception!
      try { 
        lZ77Compressor0.prefill(byteArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The compressor has already started to accept data, can't prefill anymore
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(1164, 1164).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)2;
      lZ77Compressor0.prefill(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-115), (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-1134), (-1134));
      String string0 = lZ77Compressor_BackReference0.toString();
      assertEquals("BackReference with offset -1134 and length -1134", string0);
      
      lZ77Compressor_BackReference0.getType();
      assertEquals((-1134), lZ77Compressor_BackReference0.getLength());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, (byte)93, (byte)0);
      int int0 = lZ77Compressor_LiteralBlock0.getLength();
      assertEquals(93, lZ77Compressor_LiteralBlock0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      byte[] byteArray0 = new byte[0];
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 0, 0);
      int int0 = lZ77Compressor_LiteralBlock0.getOffset();
      assertEquals(0, int0);
      assertEquals(0, lZ77Compressor_LiteralBlock0.getLength());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[0];
      lZ77Compressor0.prefill(byteArray0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((-1134), (-1134));
      lZ77Compressor_BackReference0.getType();
      assertEquals((-1134), lZ77Compressor_BackReference0.getOffset());
      assertEquals((-1134), lZ77Compressor_BackReference0.getLength());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      lZ77Compressor_EOD0.getType();
      LZ77Compressor.Block.BlockType[] lZ77Compressor_Block_BlockTypeArray0 = LZ77Compressor.Block.BlockType.values();
      assertEquals(3, lZ77Compressor_Block_BlockTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(32768, (-2178));
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      String string0 = lZ77Compressor_BackReference0.toString();
      assertEquals("BackReference with offset 32768 and length -2178", string0);
      
      int int0 = lZ77Compressor_BackReference0.getOffset();
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[0];
      lZ77Compressor0.prefill(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock((byte[]) null, 256, 1570);
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference(1570, 0);
      String string0 = lZ77Compressor_LiteralBlock0.toString();
      assertEquals("LiteralBlock starting at 256 with length 1570", string0);
      
      String string1 = lZ77Compressor_BackReference0.toString();
      assertEquals("BackReference with offset 1570 and length 0", string1);
      
      lZ77Compressor_BackReference0.getType();
      lZ77Compressor_LiteralBlock0.getData();
      assertEquals(256, lZ77Compressor_LiteralBlock0.getOffset());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 1;
      LZ77Compressor lZ77Compressor0 = null;
      try {
        lZ77Compressor0 = new LZ77Compressor((Parameters) null, (LZ77Compressor.Callback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxBackReferenceLength();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxCandidates();
      doReturn(0, 0, 0, 0).when(parameters0).getMaxLiteralLength();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMaxOffset();
      doReturn(0, 0, 0, 0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0, 0, 0).when(parameters0).getNiceBackReferenceLength();
      doReturn(571, 571).when(parameters0).getWindowSize();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      byte[] byteArray0 = new byte[3];
      lZ77Compressor0.compress(byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LZ77Compressor.EOD lZ77Compressor_EOD0 = new LZ77Compressor.EOD();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      LZ77Compressor.LiteralBlock lZ77Compressor_LiteralBlock0 = new LZ77Compressor.LiteralBlock(byteArray0, 0, 1517);
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.toString();
      lZ77Compressor_LiteralBlock0.getLength();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0, 0).when(parameters0).getWindowSize();
      lZ77Compressor_LiteralBlock0.toString();
      LZ77Compressor.Callback lZ77Compressor_Callback0 = mock(LZ77Compressor.Callback.class, new ViolatedAssumptionAnswer());
      LZ77Compressor lZ77Compressor0 = new LZ77Compressor(parameters0, lZ77Compressor_Callback0);
      LZ77Compressor.BackReference lZ77Compressor_BackReference0 = new LZ77Compressor.BackReference((byte) (-13), 0);
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor_BackReference0.toString();
      lZ77Compressor0.prefill(byteArray0);
      lZ77Compressor_LiteralBlock0.getLength();
      lZ77Compressor_BackReference0.getOffset();
      // Undeclared exception!
      try { 
        lZ77Compressor0.compress(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }
}
