/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:02:07 GMT 2025
 */

package org.apache.commons.compress.compressors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.time.ZoneId;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompressorStreamFactory_ESTest extends CompressorStreamFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      TreeMap<String, CompressorStreamProvider> treeMap0 = new TreeMap<String, CompressorStreamProvider>();
      CompressorStreamFactory.putAll(set0, compressorStreamFactory0, treeMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, (-745));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        compressorStreamFactory0.createCompressorOutputStream("gz", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      compressorStreamFactory0.getDecompressUntilEOF();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      compressorStreamFactory0.getDecompressUntilEOF();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      TreeMap<String, CompressorStreamProvider> treeMap0 = new TreeMap<String, CompressorStreamProvider>();
      // Undeclared exception!
      try { 
        CompressorStreamFactory.putAll((Set<String>) null, compressorStreamFactory0, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1940), (byte)37);
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 6);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("lz4-framed", bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-10), 1717);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      compressorStreamFactory0.getCompressorOutputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.getCompressorInputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("lz4-framed", (InputStream) mockFileInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, 61);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)91, 61);
      try { 
        compressorStreamFactory0.createCompressorInputStream("8J|>\"JG8Q?S8BQal", (InputStream) byteArrayInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: 8J|>\"JG8Q?S8BQal not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      compressorStreamFactory0.createCompressorInputStream("lz4-block", (InputStream) sequenceInputStream0, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      compressorStreamFactory0.createCompressorInputStream("deflate", (InputStream) sequenceInputStream0, false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-332), 929);
      compressorStreamFactory0.createCompressorInputStream("deflate64", (InputStream) byteArrayInputStream0, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("snappy-framed", (InputStream) byteArrayInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) sequenceInputStream0, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, (-745));
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      compressorStreamFactory0.createCompressorInputStream("pack200", (InputStream) byteArrayInputStream0, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2201), (byte)13);
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("z", (InputStream) byteArrayInputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2201
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("zstd", (InputStream) pipedInputStream0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdInputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("xz", (InputStream) mockFileInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, (-1465907028));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("br", (InputStream) mockFileInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("bzip2", (InputStream) byteArrayInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        compressorStreamFactory0.createCompressorInputStream("gz", (InputStream) sequenceInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        compressorStreamFactory0.createCompressorInputStream("lzma", (InputStream) pipedInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((String) null, (InputStream) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("xz", (InputStream) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.getOutputStreamCompressorNames();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      compressorStreamFactory0.getInputStreamCompressorNames();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, (-745));
      // Undeclared exception!
      try { 
        compressorStreamFactory0.setDecompressConcatenated(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot override the setting defined by the constructor
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.setDecompressConcatenated(true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      compressorStreamFactory0.getCompressorOutputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      compressorStreamFactory0.getCompressorInputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lz4-block");
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("zstd", mockFileOutputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdOutputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("snappy-framed");
      compressorStreamFactory0.createCompressorOutputStream("lz4-framed", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z");
      compressorStreamFactory0.createCompressorOutputStream("lz4-block", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lz4-block");
      compressorStreamFactory0.createCompressorOutputStream("snappy-framed", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("snappy-raw");
      compressorStreamFactory0.createCompressorOutputStream("deflate", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("snappy-raw");
      compressorStreamFactory0.createCompressorOutputStream("lzma", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lzma");
      compressorStreamFactory0.createCompressorOutputStream("pack200", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z");
      compressorStreamFactory0.createCompressorOutputStream("xz", mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockPrintStream mockPrintStream0 = new MockPrintStream("snappy-framed");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = (BZip2CompressorOutputStream)compressorStreamFactory0.createCompressorOutputStream("bzip2", mockPrintStream0);
      assertEquals(1, BZip2CompressorOutputStream.MIN_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("snappy-raw", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lz4-block");
      try { 
        compressorStreamFactory0.createCompressorOutputStream("br", mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: br not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream((String) null, pipedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        compressorStreamFactory0.createCompressorInputStream("lz4-framed", (InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = (BlockLZ4CompressorInputStream)compressorStreamFactory0.createCompressorInputStream("lz4-block", (InputStream) pipedInputStream0);
      assertEquals(0L, blockLZ4CompressorInputStream0.getCompressedCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("zstd", (InputStream) pipedInputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdInputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("bQ", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1199, 0);
      try { 
        CompressorStreamFactory.detect(byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CompressorInputStream compressorInputStream0 = compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect(compressorInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = CompressorStreamFactory.getSnappyRaw();
      assertEquals("snappy-raw", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = CompressorStreamFactory.getDeflate();
      assertEquals("deflate", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = CompressorStreamFactory.getSnappyFramed();
      assertEquals("snappy-framed", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLZ4Framed();
      assertEquals("lz4-framed", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = CompressorStreamFactory.getDeflate64();
      assertEquals("deflate64", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = CompressorStreamFactory.getGzip();
      assertEquals("gz", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SortedMap<String, CompressorStreamProvider> sortedMap0 = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
      assertEquals(10, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = CompressorStreamFactory.getZstandard();
      assertEquals("zstd", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, 1477399826);
      Boolean boolean0 = compressorStreamFactory0.getDecompressUntilEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLZ4Block();
      assertEquals("lz4-block", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = CompressorStreamFactory.getZ();
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = CompressorStreamFactory.getPack200();
      assertEquals("pack200", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = CompressorStreamFactory.getXz();
      assertEquals("xz", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = CompressorStreamFactory.getBrotli();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLzma();
      assertEquals("lzma", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = CompressorStreamFactory.getBzip2();
      assertEquals("bzip2", string0);
  }
}
