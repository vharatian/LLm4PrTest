/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:04:19 GMT 2025
 */

package org.apache.commons.compress.compressors.lz4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FramedLZ4CompressorInputStream_ESTest extends FramedLZ4CompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported version 0
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        FramedLZ4CompressorInputStream.matches((byte[]) null, (byte)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream((InputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-34), 17);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(sequenceInputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(pipedInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-680), (byte)80);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FramedLZ4CompressorInputStream.matches(byteArray0, (byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Not a LZ4 frame stream
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FramedLZ4CompressorInputStream.matches(byteArray0, 42);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FramedLZ4CompressorInputStream.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Not a LZ4 frame stream
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Not a LZ4 frame stream
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FramedLZ4CompressorInputStream framedLZ4CompressorInputStream0 = null;
      try {
        framedLZ4CompressorInputStream0 = new FramedLZ4CompressorInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }
}
