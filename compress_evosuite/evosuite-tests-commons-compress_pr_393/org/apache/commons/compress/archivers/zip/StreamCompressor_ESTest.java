/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:38:26 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.util.Locale;
import java.util.zip.Deflater;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StreamCompressor_ESTest extends StreamCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("~m?5");
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockPrintStream0);
      byte[] byteArray0 = new byte[2];
      streamCompressor0.writeCounted(byteArray0, 2771, 2771);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      streamCompressor0.reset();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(786);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((DataOutput) dataOutputStream0, deflater0);
      streamCompressor0.deflate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@3^Z", "@3^Z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockPrintStream0, (Deflater) null);
      byte[] byteArray0 = new byte[9];
      streamCompressor0.writeCounted(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "z`-jgq1Lt[U&+`OIE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockPrintStream0, (Deflater) null);
      byte[] byteArray0 = new byte[8];
      streamCompressor0.write(byteArray0, 0, 0, (byte) (-11));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@3^Z", "@3^Z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockPrintStream0, (Deflater) null);
      byte[] byteArray0 = new byte[4];
      streamCompressor0.write(byteArray0, 0, 1, 722);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("^1;Zg0ye");
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockPrintStream0);
      streamCompressor0.deflate(byteArrayInputStream0, 722);
      streamCompressor0.getTotalBytesWritten();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)58);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) byteArrayOutputStream0);
      streamCompressor0.deflate(byteArrayInputStream0, 59);
      streamCompressor0.getCrc32();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile("-j#_wF'9$Jdq3)*d&Q");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((SeekableByteChannel) fileChannel0, deflater0);
      streamCompressor0.deflate(byteArrayInputStream0, (-1070));
      streamCompressor0.getBytesWrittenForLastEntry();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) objectOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, (int) (byte) (-9), 721);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aA8h.3AG;]NE#>q,/2A");
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, (int) (byte) (-22), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -22
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        streamCompressor0.write(byteArray0, (byte)0, (byte)0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        streamCompressor0.write(byteArray0, (byte) (-125), (byte) (-125), (byte) (-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      streamCompressor0.close();
      // Undeclared exception!
      try { 
        streamCompressor0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Deflater deflater0 = new Deflater(0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0, deflater0);
      try { 
        streamCompressor0.flushDeflater();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.forLanguageTag("vhxQ5{?");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "e$5onG:NQa{TtYe~JO", objectArray0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) printStream0);
      // Undeclared exception!
      streamCompressor0.deflate(pipedInputStream0, 1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[80];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Deflater deflater0 = new Deflater(0, false);
      StreamCompressor streamCompressor0 = StreamCompressor.create((SeekableByteChannel) fileChannel0, deflater0);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate(byteArrayInputStream0, 8);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2113), (byte)108);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate(byteArrayInputStream0, 843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        streamCompressor0.deflate(pipedInputStream0, 2004);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) null);
      streamCompressor0.close();
      // Undeclared exception!
      try { 
        streamCompressor0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0, deflater0);
      try { 
        streamCompressor0.deflate();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamCompressor.create(1931, (ScatterGatherBackingStore) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) null, (Deflater) null);
      // Undeclared exception!
      try { 
        streamCompressor0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, 1546, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      Deflater deflater0 = new Deflater(5);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) bufferedOutputStream0, deflater0);
      streamCompressor0.flushDeflater();
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8L, streamCompressor0.getBytesWrittenForLastEntry());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate(byteArrayInputStream0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      streamCompressor0.deflate();
      assertEquals(0L, streamCompressor0.getCrc32());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(4, (ScatterGatherBackingStore) null);
      streamCompressor0.close();
      assertEquals(0L, streamCompressor0.getCrc32());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((DataOutput) null, deflater0);
      // Undeclared exception!
      try { 
        streamCompressor0.flushDeflater();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) byteArrayOutputStream0);
      long long0 = streamCompressor0.getTotalBytesWritten();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      long long0 = streamCompressor0.getBytesWrittenForLastEntry();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      long long0 = streamCompressor0.getCrc32();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      long long0 = streamCompressor0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((SeekableByteChannel) fileChannel0, deflater0);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }
}
