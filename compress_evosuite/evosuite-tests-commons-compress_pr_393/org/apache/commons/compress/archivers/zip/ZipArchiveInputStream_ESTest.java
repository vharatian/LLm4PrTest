/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:47:21 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
import org.apache.commons.compress.compressors.snappy.FramedSnappyDialect;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      long long0 = jarArchiveInputStream0.skip(1024L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[6];
      int int0 = jarArchiveInputStream0.read(byteArray0, 0, (-2256));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)87);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, (String) null, false);
      assertEquals(0, zipArchiveInputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null);
      assertEquals(0L, zipArchiveInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      int int0 = zipArchiveInputStream0.read(byteArray0, (int) (byte)4, (int) (byte)75);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches((byte[]) null, (byte)80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ZipArchiveInputStream.matches(byteArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      try { 
        jarArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0x0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FramedSnappyDialect framedSnappyDialect0 = FramedSnappyDialect.IWORK_ARCHIVE;
      FramedSnappyCompressorInputStream framedSnappyCompressorInputStream0 = new FramedSnappyCompressorInputStream((InputStream) null, framedSnappyDialect0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(framedSnappyCompressorInputStream0);
      // Undeclared exception!
      try { 
        jarArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      try { 
        jarArchiveInputStream0.getNextZipEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream((InputStream) null);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(blockLZ4CompressorInputStream0);
      // Undeclared exception!
      try { 
        jarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      try { 
        jarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        jarArchiveInputStream0.getCompressedCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, " q+R*JkJTZB~Mq(", true, true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  q+R*JkJTZB~Mq(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "archive contains corrupted zip64 extra field", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // archive contains corrupted zip64 extra field
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = null;
      try {
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null, (String) null);
      byte[] byteArray0 = new byte[3];
      jarArchiveInputStream0.close();
      try { 
        jarArchiveInputStream0.read(byteArray0, (int) (byte)4, (int) (byte)75);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      long long0 = jarArchiveInputStream0.skip((byte)4);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      long long0 = jarArchiveInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      // Undeclared exception!
      try { 
        jarArchiveInputStream0.skip((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      jarArchiveInputStream0.close();
      try { 
        jarArchiveInputStream0.skip(1030L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      int int0 = zipArchiveInputStream0.read(byteArray0, (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      JarArchiveInputStream jarArchiveInputStream1 = new JarArchiveInputStream(jarArchiveInputStream0);
      jarArchiveInputStream1.getNextZipEntry();
      assertEquals(0, jarArchiveInputStream1.getCount());
      assertEquals(0L, jarArchiveInputStream1.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false, false);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      jarArchiveInputStream0.close();
      jarArchiveInputStream0.getNextEntry();
      assertEquals(0L, jarArchiveInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      jarArchiveInputStream0.close();
      jarArchiveInputStream0.close();
      assertEquals(0L, jarArchiveInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("%");
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
      boolean boolean0 = zipArchiveInputStream0.canReadEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      boolean boolean0 = jarArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)80);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte)4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null, false, false, false);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      long long0 = jarArchiveInputStream0.getUncompressedCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      zipArchiveInputStream0.getNextEntry();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      try { 
        jarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0x0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }
}
