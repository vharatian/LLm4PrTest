/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:07:45 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.apache.commons.compress.archivers.sevenz.BindPair;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.Folder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Folder_ESTest extends Folder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Folder folder0 = new Folder();
      folder0.totalInputStreams = (-2116L);
      BindPair[] bindPairArray0 = new BindPair[0];
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[0];
      folder0.hasCrc = true;
      folder0.unpackSizes = longArray0;
      folder0.coders = coderArray0;
      folder0.bindPairs = bindPairArray0;
      String string0 = folder0.toString();
      assertEquals("Folder with 0 coders, -2116 input streams, 0 output streams, 0 bind pairs, 1 packed streams, 1 unpack sizes, with CRC 0 and 0 unpack streams", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[0];
      long[] longArray0 = new long[8];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[0];
      folder0.totalOutputStreams = (-2116L);
      folder0.hasCrc = true;
      folder0.unpackSizes = longArray0;
      folder0.coders = coderArray0;
      folder0.bindPairs = bindPairArray0;
      String string0 = folder0.toString();
      assertEquals("Folder with 0 coders, 0 input streams, -2116 output streams, 0 bind pairs, 8 packed streams, 8 unpack sizes, with CRC 0 and 0 unpack streams", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[0];
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[0];
      folder0.coders = coderArray0;
      folder0.bindPairs = bindPairArray0;
      // Undeclared exception!
      try { 
        folder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Folder folder0 = new Folder();
      Coder coder0 = new Coder();
      Coder[] coderArray0 = new Coder[1];
      coderArray0[0] = coder0;
      folder0.numUnpackSubStreams = 1553;
      folder0.coders = coderArray0;
      // Undeclared exception!
      try { 
        folder0.getUnpackSizeForCoder(coder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      BindPair bindPair1 = new BindPair();
      bindPairArray0[1] = bindPair1;
      folder0.bindPairs = bindPairArray0;
      bindPair0.outIndex = 5166L;
      folder0.totalOutputStreams = 1L;
      long long0 = folder0.getUnpackSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Folder folder0 = new Folder();
      folder0.totalOutputStreams = (-3808L);
      long long0 = folder0.getUnpackSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[12];
      folder0.coders = coderArray0;
      BindPair[] bindPairArray0 = new BindPair[9];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      BindPair bindPair1 = new BindPair();
      bindPairArray0[1] = bindPair1;
      bindPair0.outIndex = (-541L);
      folder0.bindPairs = bindPairArray0;
      try { 
        folder0.getOrderedCoders();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // folder uses the same coder more than once in coder chain
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Folder folder0 = new Folder();
      Coder[] coderArray0 = new Coder[9];
      folder0.numUnpackSubStreams = 2146070829;
      long[] longArray0 = new long[7];
      folder0.packedStreams = longArray0;
      folder0.coders = coderArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[1];
      folder0.coders = coderArray0;
      BindPair[] bindPairArray0 = new BindPair[4];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      bindPair0.inIndex = 1L;
      folder0.bindPairs = bindPairArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      bindPair0.outIndex = 5166L;
      folder0.totalOutputStreams = 1L;
      // Undeclared exception!
      try { 
        folder0.getUnpackSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      // Undeclared exception!
      try { 
        folder0.findBindPairForOutStream(2104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Folder folder0 = new Folder();
      Coder coder0 = new Coder();
      Coder[] coderArray0 = new Coder[1];
      coderArray0[0] = coder0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1553;
      folder0.unpackSizes = longArray0;
      folder0.coders = coderArray0;
      long long0 = folder0.getUnpackSizeForCoder(coder0);
      assertEquals(1553L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Folder folder0 = new Folder();
      Coder coder0 = new Coder();
      long[] longArray0 = new long[1];
      longArray0[0] = (-508L);
      folder0.unpackSizes = longArray0;
      Coder[] coderArray0 = new Coder[5];
      coderArray0[0] = coder0;
      folder0.coders = coderArray0;
      long long0 = folder0.getUnpackSizeForCoder(coder0);
      assertEquals((-508L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[3];
      longArray0[0] = 251L;
      folder0.unpackSizes = longArray0;
      folder0.totalOutputStreams = 1L;
      long long0 = folder0.getUnpackSize();
      assertEquals(251L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      folder0.unpackSizes = longArray0;
      folder0.totalOutputStreams = 1L;
      long long0 = folder0.getUnpackSize();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[1];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      int int0 = folder0.findBindPairForOutStream(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[2];
      BindPair bindPair0 = new BindPair();
      bindPair0.outIndex = (-1L);
      bindPairArray0[0] = bindPair0;
      BindPair bindPair1 = new BindPair();
      bindPairArray0[1] = bindPair1;
      folder0.bindPairs = bindPairArray0;
      int int0 = folder0.findBindPairForOutStream(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[1];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      bindPair0.inIndex = (long) (-1131);
      int int0 = folder0.findBindPairForInStream((-1131));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[0];
      folder0.unpackSizes = longArray0;
      Coder[] coderArray0 = new Coder[10];
      folder0.coders = coderArray0;
      // Undeclared exception!
      try { 
        folder0.getUnpackSizeForCoder((Coder) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[0];
      folder0.unpackSizes = longArray0;
      folder0.totalOutputStreams = 1546L;
      // Undeclared exception!
      try { 
        folder0.getUnpackSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1545
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[3];
      BindPair[] bindPairArray0 = new BindPair[3];
      folder0.bindPairs = bindPairArray0;
      folder0.unpackSizes = longArray0;
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[0];
      folder0.coders = coderArray0;
      String string0 = folder0.toString();
      assertEquals("Folder with 0 coders, 0 input streams, 0 output streams, 3 bind pairs, 3 packed streams, 3 unpack sizes, without CRC and 0 unpack streams", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Folder folder0 = new Folder();
      Coder[] coderArray0 = new Coder[12];
      folder0.coders = coderArray0;
      Coder coder0 = new Coder();
      long long0 = folder0.getUnpackSizeForCoder(coder0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Folder folder0 = new Folder();
      long long0 = folder0.getUnpackSizeForCoder((Coder) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      folder0.totalOutputStreams = 1L;
      long long0 = folder0.getUnpackSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Folder folder0 = new Folder();
      long long0 = folder0.getUnpackSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[1];
      longArray0[0] = 173L;
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[1];
      folder0.coders = coderArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[3];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[0];
      folder0.coders = coderArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[0];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[1];
      folder0.coders = coderArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Folder folder0 = new Folder();
      Iterable<Coder> iterable0 = folder0.getOrderedCoders();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Folder folder0 = new Folder();
      long[] longArray0 = new long[1];
      folder0.packedStreams = longArray0;
      Coder[] coderArray0 = new Coder[12];
      folder0.coders = coderArray0;
      BindPair[] bindPairArray0 = new BindPair[9];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      bindPair0.outIndex = (-541L);
      folder0.bindPairs = bindPairArray0;
      // Undeclared exception!
      try { 
        folder0.getOrderedCoders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[0];
      folder0.bindPairs = bindPairArray0;
      int int0 = folder0.findBindPairForOutStream(4083);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      bindPairArray0[1] = bindPairArray0[0];
      BindPair bindPair1 = new BindPair();
      bindPairArray0[2] = bindPair1;
      folder0.bindPairs = bindPairArray0;
      bindPair1.inIndex = (long) (-1);
      int int0 = folder0.findBindPairForInStream((-1));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      BindPair bindPair0 = new BindPair();
      bindPairArray0[0] = bindPair0;
      bindPairArray0[1] = bindPair0;
      bindPairArray0[2] = bindPair0;
      folder0.bindPairs = bindPairArray0;
      int int0 = folder0.findBindPairForInStream(173);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Folder folder0 = new Folder();
      BindPair[] bindPairArray0 = new BindPair[3];
      folder0.bindPairs = bindPairArray0;
      // Undeclared exception!
      try { 
        folder0.findBindPairForInStream(173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Folder folder0 = new Folder();
      int int0 = folder0.findBindPairForInStream(0);
      assertEquals((-1), int0);
  }
}
