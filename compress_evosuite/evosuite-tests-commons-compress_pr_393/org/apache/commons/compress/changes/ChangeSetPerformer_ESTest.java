/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 20:56:37 GMT 2025
 */

package org.apache.commons.compress.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.util.Enumeration;
import java.util.Stack;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.changes.ChangeSet;
import org.apache.commons.compress.changes.ChangeSetPerformer;
import org.apache.commons.compress.changes.ChangeSetResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ChangeSetPerformer_ESTest extends ChangeSetPerformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)6);
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(byteArrayOutputStream0);
      File file0 = MockFile.createTempFile(":///", "k/]5");
      ArchiveEntry archiveEntry0 = jarArchiveOutputStream0.createArchiveEntry(file0, ":///");
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 80, 977);
      changeSet0.add(archiveEntry0, (InputStream) byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) null, (ArchiveOutputStream) jarArchiveOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      ArArchiveOutputStream arArchiveOutputStream0 = new ArArchiveOutputStream(byteArrayOutputStream0);
      ChangeSetResults changeSetResults0 = changeSetPerformer0.perform((ArchiveInputStream) zipArchiveInputStream0, (ArchiveOutputStream) arArchiveOutputStream0);
      assertNotNull(changeSetResults0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      ArArchiveOutputStream arArchiveOutputStream0 = new ArArchiveOutputStream(mockPrintStream0);
      MockFile mockFile0 = new MockFile("!P\"*jq V", "!P\"*jq V");
      ArchiveEntry archiveEntry0 = arArchiveOutputStream0.createArchiveEntry((File) mockFile0, "tdBDw+uT nu");
      PipedInputStream pipedInputStream0 = new PipedInputStream(679);
      changeSet0.add(archiveEntry0, (InputStream) pipedInputStream0, false);
      Stack<ArjArchiveInputStream> stack0 = new Stack<ArjArchiveInputStream>();
      pipedOutputStream0.connect(pipedInputStream0);
      Enumeration<ArjArchiveInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, "org.apache.commons.compress.changes.ChangeSetPerformer");
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) arArchiveOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=");
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      changeSet0.add((ArchiveEntry) jarArchiveEntry0, (InputStream) byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod((byte)4);
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) zipArchiveOutputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // Unsupported compression method 4 (EXPANDING_LEVEL_3) used in entry =
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) zipArchiveOutputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, false);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(tarArchiveInputStream0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) cpioArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=");
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      changeSet0.add((ArchiveEntry) jarArchiveEntry0, (InputStream) byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod((byte) (-7));
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) zipArchiveOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -7
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      changeSet0.add((ArchiveEntry) jarArchiveEntry0, (InputStream) byteArrayInputStream0);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) tarArchiveOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.jar.JarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2210), 4);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) cpioArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChangeSetPerformer changeSetPerformer0 = null;
      try {
        changeSetPerformer0 = new ChangeSetPerformer((ChangeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      ArArchiveOutputStream arArchiveOutputStream0 = new ArArchiveOutputStream(mockPrintStream0);
      MockFile mockFile0 = new MockFile("!P\"*jq V", "!P\"*jq V");
      ArchiveEntry archiveEntry0 = arArchiveOutputStream0.createArchiveEntry((File) mockFile0, "org.apache.commons.compress.changes.ChangeSetPerformer");
      PipedInputStream pipedInputStream0 = new PipedInputStream(679);
      changeSet0.add(archiveEntry0, (InputStream) pipedInputStream0, false);
      Stack<ArjArchiveInputStream> stack0 = new Stack<ArjArchiveInputStream>();
      Enumeration<ArjArchiveInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, "org.apache.commons.compress.changes.ChangeSetPerformer");
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) arArchiveOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File name too long, > 16 chars: org.apache.commons.compress.changes.ChangeSetPerformer
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      changeSet0.delete("org.apache.commons.compress.changes.ChangeSetPerformer");
      Stack<ArjArchiveInputStream> stack0 = new Stack<ArjArchiveInputStream>();
      Enumeration<ArjArchiveInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, "org.apache.commons.compress.changes.ChangeSetPerformer");
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) tarArchiveInputStream0, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      changeSet0.deleteDir("org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator");
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ArchiveInputStream) null, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform((ZipFile) null, (ArchiveOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator", e);
      }
  }
}
