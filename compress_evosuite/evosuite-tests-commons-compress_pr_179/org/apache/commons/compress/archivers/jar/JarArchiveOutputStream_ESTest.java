/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:08:33 GMT 2025
 */

package org.apache.commons.compress.archivers.jar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JarArchiveOutputStream_ESTest extends JarArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        jarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.jar.JarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0);
      JarArchiveOutputStream jarArchiveOutputStream1 = new JarArchiveOutputStream(jarArchiveOutputStream0);
      MockFile mockFile0 = new MockFile("", "[YS~:wy7F-^!z");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
      // Undeclared exception!
      try { 
        jarArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        jarArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.jar.JarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      try { 
        jarArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = null;
      try {
        jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(pipedOutputStream0, (String) null);
      assertEquals(0L, jarArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Xlw%{@`s%ucBQp-#7");
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream(mockPrintStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("E`E^Chk!d)O");
      jarArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      jarArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }
}
