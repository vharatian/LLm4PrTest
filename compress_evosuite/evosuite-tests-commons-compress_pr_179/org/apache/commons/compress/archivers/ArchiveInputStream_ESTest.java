/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:44:32 GMT 2025
 */

package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArchiveInputStream_ESTest extends ArchiveInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(zipArchiveInputStream0);
      ArchiveEntry archiveEntry0 = jarArchiveInputStream0.getNextEntry();
      assertNull(archiveEntry0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1));
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
      long long0 = tarArchiveInputStream0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      boolean boolean0 = jarArchiveInputStream0.canReadEntryData((ArchiveEntry) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        tarArchiveInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      jarArchiveInputStream0.close();
      try { 
        jarArchiveInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The stream is closed
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        tarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 1828);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(tarArchiveInputStream0);
      // Undeclared exception!
      try { 
        jarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      try { 
        jarArchiveInputStream0.getNextEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      int int0 = jarArchiveInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(byteArrayInputStream0);
      jarArchiveInputStream0.getNextEntry();
      long long0 = jarArchiveInputStream0.getBytesRead();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(jarArchiveInputStream0, (String) null);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry((String) null, 22L, (-1), 0, 0, 0);
      boolean boolean0 = cpioArchiveInputStream0.canReadEntryData(arArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      int int0 = jarArchiveInputStream0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(jarArchiveInputStream0);
      try { 
        cpioArchiveInputStream0.getNextEntry();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }
}
