/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:12:44 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AES256SHA256Decoder_ESTest extends AES256SHA256Decoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-7), (-7));
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AES256SHA256Decoder aES256SHA256Decoder1 = new AES256SHA256Decoder();
      InputStream inputStream0 = aES256SHA256Decoder1.decode("storetype", byteArrayInputStream0, 1L, coder0, (byte[]) null, (-7));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Cannot read encrypted content from storetype without a password.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      Coder coder0 = new Coder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-109);
      byte byte0 = (byte) (-65);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-93);
      aES256SHA256Decoder0.decode("SHA-256 is unsupported by your Java implementation", pipedInputStream0, 19, coder0, byteArray0, 3073);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)25;
      coder0.properties = byteArray1;
      byte byte1 = (byte)7;
      byteArray1[1] = (byte)7;
      InputStream inputStream0 = aES256SHA256Decoder0.decode((String) null, pipedInputStream0, 19, coder0, byteArray1, (byte)25);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Salt size + IV size too long in null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = aES256SHA256Decoder0.decode("B`XNsXPz8 [jhB", (InputStream) null, 710L, coder0, (byte[]) null, 984);
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, inputStream0);
      try { 
        sequenceInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing AES256 properties in B`XNsXPz8 [jhB
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      Coder coder0 = new Coder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte) (-85);
      byte byte0 = (byte) (-65);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-93);
      aES256SHA256Decoder0.decode("SHA-256 is unsupported by your Java implementation", pipedInputStream0, 7, coder0, byteArray0, 3073);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      coder0.properties = byteArray1;
      byte byte1 = (byte)7;
      byteArray1[1] = (byte)7;
      InputStream inputStream0 = aES256SHA256Decoder0.decode((String) null, pipedInputStream0, 7, coder0, byteArray1, (byte)0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Salt size + IV size too long in null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      Coder coder0 = new Coder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-85);
      byte byte0 = (byte) (-65);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-93);
      aES256SHA256Decoder0.decode("SHA-256 is unsupported by your Java implementation", pipedInputStream0, 7, coder0, byteArray0, 3073);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      coder0.properties = byteArray1;
      byte byte1 = (byte)7;
      byteArray1[1] = (byte)7;
      InputStream inputStream0 = aES256SHA256Decoder0.decode((String) null, pipedInputStream0, 7, coder0, byteArray1, (byte)0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Salt size + IV size too long in null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-7), (-7));
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, (-7), coder0, byteArray0, (-7));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[19];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, 0, coder0, byteArray0, 0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, 0, coder0, byteArray0, 0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // AES256 properties too short in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-7), (-7));
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, (-7), coder0, byteArray0, (-7));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // AES256 properties too short in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 423, 423);
      Coder coder0 = new Coder();
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, 423, coder0, byteArray0, 423);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Missing AES256 properties in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      byte[] byteArray0 = new byte[1];
      String string0 = "p`pq";
      String string1 = "";
      int int0 = 423;
      int int1 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 423, 0);
      Coder coder0 = new Coder();
      int int2 = 3;
      InputStream inputStream0 = aES256SHA256Decoder0.decode("", byteArrayInputStream0, 0, coder0, byteArray0, 3);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Missing AES256 properties in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      String string0 = "SHA-256 is unsupported by your Java implementation";
      InputStream inputStream0 = null;
      long long0 = 2235L;
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)104;
      byteArray0[3] = (byte)104;
      aES256SHA256Decoder0.decode("", (InputStream) null, (byte)102, coder0, byteArray0, (byte)0);
      String string1 = "net.bytebuddy.asm.Advice$OnNonDefaultValue";
      MockFile mockFile0 = new MockFile("", "net.bytebuddy.asm.Advice$OnNonDefaultValue");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "AES256 properties too short in ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // AES256 properties too short in 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      Coder coder0 = new Coder();
      InputStream inputStream0 = aES256SHA256Decoder0.decode("<M(y^aC", (InputStream) null, 1354, coder0, (byte[]) null, 1354);
      assertNotNull(inputStream0);
  }
}
