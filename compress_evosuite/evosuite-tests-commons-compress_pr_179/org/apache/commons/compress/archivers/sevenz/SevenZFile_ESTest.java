/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:15:02 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.net.URI;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.NoSuchFileException;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZFile_ESTest extends SevenZFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      boolean boolean0 = SevenZFile.matches(byteArray0, (byte)88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = SevenZFile.matches(byteArray0, 6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("storetype");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      File file0 = MockFile.createTempFile("Badly terminated UnpackInfo", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d>Kq}@1-Ks");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("Total output streams can't be 0", "Total output streams can't be 0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[1FO#0-({");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("dynamic", "dynamic");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hw`=G5=DR");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("wfn-DLQ", "LZMA properties too short");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("wfn-DLQ", "LZMA properties too short");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<~kKv9NW$");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, ">=", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "e#SmJ4QR7", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      File file0 = MockFile.createTempFile("Can not find ", ",0* YzD|+PFenP%)m'");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Can not find ", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J@:LO]Z>Ds58");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", charArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "*3zA8-wkxfIaU`V", (char[]) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("g5Q$?yFfAU9KYB)>>", "$");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "g5Q$?yFfAU9KYB)>>", (char[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Bad 7z signature");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Bad 7z signature", byteArray0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("%!Arbx", "%!Arbx");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "%!Arbx", byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rY-*|nI2");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "rY-*|nI2", sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "q$]3.r%)h*3-l<l'", sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "e6=Y&`,", sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("Total output streams can't be 0", "Total output streams can't be 0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Total output streams can't be 0", sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.bytebuddy.asm.Advice$OnDefaultValue");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "net.bytebuddy.asm.Advice$OnDefaultValue");
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "2r!}bLJ#'.|%f?7");
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Incomplete kDummy property");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = MockFile.createTempFile("Total output streams can't be 0", "Total output streams can't be 0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "buffersize must be bigger than 0");
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V;2N+{&\"_Qz");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I7z?.?CQ9YW");
      File file0 = MockFile.createTempFile("I7z?.?CQ9YW", "I7z?.?CQ9YW", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]", "]");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too few folders in archive", ",u");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("LZMA");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (byte[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ".class");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = SevenZFile.matches((byte[]) null, (-2238));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        SevenZFile.matches((byte[]) null, (byte)113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("Total output streams can't be 0", "Total output streams can't be 0");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Total output streams can't be 00Total output streams can't be 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Total output streams can't be 0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unsupported 7z version (111,117)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "*F6|y|W36]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "e~'mD?acY[k9]`kUcv", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (String) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[1];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[1];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      char[] charArray0 = new char[1];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[9];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (String) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }
}
