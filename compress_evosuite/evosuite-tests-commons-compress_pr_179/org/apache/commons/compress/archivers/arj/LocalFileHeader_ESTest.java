/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:55:39 GMT 2025
 */

package org.apache.commons.compress.archivers.arj;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.compress.archivers.arj.LocalFileHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LocalFileHeader_ESTest extends LocalFileHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.extendedFilePosition = 8;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.lastChapter = (-155);
      localFileHeader1.lastChapter = 1258;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.fileAccessMode = 1056;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileSpecPosition = (-1);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
      assertFalse(localFileHeader0.equals((Object)localFileHeader1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.originalCrc32 = 1181L;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.originalSize = (-746L);
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.compressedSize = 1626L;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.dateTimeModified = (-2058);
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.reserved = 2146287278;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.fileType = 1;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.arjFlags = (-283);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      localFileHeader1.arjFlags = (-283);
      localFileHeader1.method = 4344;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.arjFlags = 1400;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.minVersionToExtract = (-2663);
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileType = 171;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.dateTimeCreated = 1;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.dateTimeModified = (-2058);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.extendedFilePosition = (-283);
      localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.lastChapter = 5;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.dateTimeAccessed = 3;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.firstChapter = 2523;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.hostOS = (-657);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileType = 171;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=171, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.reserved = 1955;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=1955, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.dateTimeCreated = (-943);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=-943, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.extendedFilePosition = 9;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=9, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.lastChapter = (-1231);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=-1231, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.dateTimeAccessed = 3;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=3, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.firstChapter = 2145871423;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=2145871423, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.arjFlags = (-283);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=-283, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.minVersionToExtract = (-2663);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=-2663, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileAccessMode = 757;
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=757, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.method = (-1);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=-1, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileSpecPosition = (-927);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=0, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=-927, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.archiverVersionNumber = (-2662);
      String string0 = localFileHeader0.toString();
      assertEquals("LocalFileHeader [archiverVersionNumber=-2662, minVersionToExtract=0, hostOS=0, arjFlags=0, method=0, fileType=0, reserved=0, dateTimeModified=0, compressedSize=0, originalSize=0, originalCrc32=0, fileSpecPosition=0, fileAccessMode=0, firstChapter=0, lastChapter=0, extendedFilePosition=0, dateTimeAccessed=0, dateTimeCreated=0, originalSizeEvenForVolumes=0, name=null, comment=null, extendedHeaders=null]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      byte[][] byteArray0 = new byte[6][7];
      localFileHeader1.extendedHeaders = byteArray0;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.comment = "";
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.name = ", firstChapter=";
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      localFileHeader1.originalSizeEvenForVolumes = (-2183);
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.dateTimeAccessed = 2145871423;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader0.extendedFilePosition = 9;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.firstChapter = 2523;
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileAccessMode = 1441;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.fileSpecPosition = 127;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.originalCrc32 = 720L;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.originalSize = (-21L);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(boolean0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.compressedSize = (-1425L);
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.reserved = 3209;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.arjFlags = (-283);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      localFileHeader1.arjFlags = (-283);
      localFileHeader1.method = 4344;
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(localFileHeader0.equals((Object)localFileHeader1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.arjFlags = (-283);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      assertTrue(localFileHeader1.equals((Object)localFileHeader0));
      
      localFileHeader1.hostOS = (-4786);
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.minVersionToExtract = (-1);
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.archiverVersionNumber = 356;
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader1);
      assertFalse(localFileHeader1.equals((Object)localFileHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      Object object0 = new Object();
      boolean boolean0 = localFileHeader0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      boolean boolean0 = localFileHeader0.equals(localFileHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      LocalFileHeader localFileHeader1 = new LocalFileHeader();
      boolean boolean0 = localFileHeader1.equals(localFileHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalFileHeader localFileHeader0 = new LocalFileHeader();
      localFileHeader0.name = "";
      localFileHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalFileHeader.Flags localFileHeader_Flags0 = new LocalFileHeader.Flags();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalFileHeader.FileTypes localFileHeader_FileTypes0 = new LocalFileHeader.FileTypes();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalFileHeader.Methods localFileHeader_Methods0 = new LocalFileHeader.Methods();
  }
}
