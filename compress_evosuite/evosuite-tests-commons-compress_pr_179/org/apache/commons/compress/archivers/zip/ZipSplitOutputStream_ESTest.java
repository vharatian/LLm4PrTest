/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:52:29 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipSplitOutputStream_ESTest extends ZipSplitOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip", ".zip");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 808471385L);
      byte[] byteArray0 = new byte[0];
      zipSplitOutputStream0.write(byteArray0);
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4Ql!<Wctp{", "4Ql!<Wctp{");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(1055L);
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DvY4vv)");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65542L);
      byte[] byteArray0 = new byte[14];
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 61440);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, 2, 157);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 9);
      zipSplitOutputStream0.write(byteArray0, 2, 3810);
      zipSplitOutputStream0.write(byteArray0, 2, 61440);
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4Ql!<Wctp{", "4Ql!<Wctp{");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
      int int0 = zipSplitOutputStream0.getCurrentSplitSegmentIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4Ql!<Wctp{", "4Ql!<Wctp{");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
      long long0 = zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten();
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("]HmK]{7i g4", "]HmK]{7i g4");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 2147483646);
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write((byte[]) null, 2147483646, 2147483646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Fb~2@0emI'BY]/");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 2147483632);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write(byteArray0, (-501), 2147483632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("g%`<`_D`4JV\"");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967278L);
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^HwRm]{7il g4");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 808471327L);
      byte[] byteArray0 = new byte[7];
      zipSplitOutputStream0.close();
      try { 
        zipSplitOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^HwRm]{7il g4", "^HwRm]{7il g4");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 2147483642);
      zipSplitOutputStream0.close();
      try { 
        zipSplitOutputStream0.write(2147483642);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kTo", "kTo");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65610L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/LLm4PrTest/compress_experiment_2");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(65610L);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("^Hwm]{7il g4", "^Hwm]{7il g4");
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 117853008L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 117853025L);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("^HwRm]{7il g4", (String) null);
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/^HwRm]{7il g40.z03");
      FileSystemHandling.createFolder(evoSuiteFile0);
      zipSplitOutputStream0.write(byteArray0);
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // split zip segment ^HwRm]{7il g40.z03 already exists
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("^HwRm]{7il g4", "^HwRm]{7il g4");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 117853008L);
      zipSplitOutputStream0.close();
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(117853008L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to rename /tmp/^HwRm]{7il g40^HwRm]{7il g4 to /tmp/^HwRm]{7il g40^HwRm]{7il g4.z01
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kTo");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65590L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65590L);
      zipSplitOutputStream0.write(4096);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65590L);
      assertEquals(0L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".zip");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 808471385L);
      try { 
        zipSplitOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to rename .zip to .zip
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iLa");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65557L);
      zipSplitOutputStream0.close();
      zipSplitOutputStream0.close();
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kTo");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65590L);
      byte[] byteArray0 = new byte[7];
      try { 
        zipSplitOutputStream0.write(byteArray0, 0, 2147450271);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D4v)");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65541L);
      zipSplitOutputStream0.write((int) (byte)0);
      zipSplitOutputStream0.write((int) (byte)0);
      byte[] byteArray0 = new byte[14];
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 61450);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(61450);
      zipSplitOutputStream0.write(6);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 157);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(61450);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(157);
      zipSplitOutputStream0.write(327);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(157);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, 6, 3810);
      try { 
        zipSplitOutputStream0.write(byteArray0, 3810, 61450);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DvY4vv)");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65542L);
      byte[] byteArray0 = new byte[14];
      zipSplitOutputStream0.write(byteArray0, 2079, (-2147450886));
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kTo");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65590L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65590L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65590L);
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("^HwRm]{7il g4", "^HwRm]{7il g4");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 117853008L);
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The unsplittable content size is bigger than the split segment size
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("iLa");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65557L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      byte[] byteArray0 = new byte[5];
      zipSplitOutputStream0.write(byteArray0, 1, 1);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(4090);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65557L);
      assertEquals(0L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 4294967305L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zip split segment size should between 64K and 4,294,967,295
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 388L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zip split segment size should between 64K and 4,294,967,295
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("DvY4vv)");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65542L);
      int int0 = zipSplitOutputStream0.getCurrentSplitSegmentIndex();
      assertEquals(0, int0);
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D4v)");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65541L);
      long long0 = zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten();
      assertEquals(4L, long0);
  }
}
