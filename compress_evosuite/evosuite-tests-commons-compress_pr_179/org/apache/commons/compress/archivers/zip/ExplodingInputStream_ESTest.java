/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:27:17 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExplodingInputStream_ESTest extends ExplodingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(8192, (-10), (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of trees must be 2 or 3
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(8197, (-10), (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dictionary size must be 4096 or 8192
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, byteArrayInputStream0);
      // Undeclared exception!
      explodingInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, byteArrayInputStream0);
      try { 
        explodingInputStream0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.BinaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 2, (InputStream) null);
      // Undeclared exception!
      try { 
        explodingInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 269);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      explodingInputStream0.close();
      assertEquals(0L, explodingInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 2, (InputStream) null);
      // Undeclared exception!
      try { 
        explodingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8192);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      try { 
        explodingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream((-850), 124, sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dictionary size must be 4096 or 8192
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(4096, 4096, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of trees must be 2 or 3
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 2, (InputStream) null);
      // Undeclared exception!
      try { 
        explodingInputStream0.getCompressedCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(42);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 2, pipedInputStream0);
      long long0 = explodingInputStream0.getUncompressedCount();
      assertEquals(0L, long0);
  }
}
