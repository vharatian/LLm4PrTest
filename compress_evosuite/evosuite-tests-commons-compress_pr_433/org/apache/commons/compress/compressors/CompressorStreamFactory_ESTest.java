/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:12:39 GMT 2025
 */

package org.apache.commons.compress.compressors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorOutputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.apache.commons.compress.compressors.CompressorStreamProvider;
import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompressorStreamFactory_ESTest extends CompressorStreamFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      TreeMap<String, CompressorStreamProvider> treeMap0 = new TreeMap<String, CompressorStreamProvider>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      CompressorStreamFactory.putAll(set0, compressorStreamFactory0, treeMap0);
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, (-1121741762));
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNotNull(compressorStreamFactory0);
      
      Boolean boolean0 = compressorStreamFactory0.getDecompressUntilEOF();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      Boolean boolean0 = compressorStreamFactory0.getDecompressUntilEOF();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertNotNull(compressorStreamFactory0);
      
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      SnappyCompressorInputStream snappyCompressorInputStream0 = (SnappyCompressorInputStream)compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) byteArrayInputStream0, true);
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, snappyCompressorInputStream0.getSize());
      assertEquals(1L, snappyCompressorInputStream0.getCompressedCount());
      assertEquals(0, snappyCompressorInputStream0.available());
      assertEquals(1, snappyCompressorInputStream0.getCount());
      assertEquals(1L, snappyCompressorInputStream0.getBytesRead());
      assertEquals(1L, snappyCompressorInputStream0.getUncompressedCount());
      assertNotNull(snappyCompressorInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(32768, SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      SnappyCompressorInputStream snappyCompressorInputStream0 = (SnappyCompressorInputStream)compressorStreamFactory0.createCompressorInputStream("snappy-raw", (InputStream) byteArrayInputStream0);
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, snappyCompressorInputStream0.available());
      assertEquals(1L, snappyCompressorInputStream0.getUncompressedCount());
      assertEquals(1L, snappyCompressorInputStream0.getBytesRead());
      assertEquals(0, snappyCompressorInputStream0.getSize());
      assertEquals(1L, snappyCompressorInputStream0.getCompressedCount());
      assertEquals(1, snappyCompressorInputStream0.getCount());
      assertNotNull(snappyCompressorInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(32768, SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      Set<String> set0 = compressorStreamFactory0.getOutputStreamCompressorNames();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals(10, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        CompressorStreamFactory.putAll(set0, compressorStreamFactory0, (TreeMap<String, CompressorStreamProvider>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect(pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("lzma", mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2062615879), (byte)115);
      assertEquals(115, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(604, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0, set0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1614825884), (-1229830922));
      assertEquals(1614825886, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, (-1795018558));
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertNotNull(compressorStreamFactory0);
      
      SortedMap<String, CompressorStreamProvider> sortedMap0 = compressorStreamFactory0.getCompressorOutputStreamProviders();
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(10, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      SortedMap<String, CompressorStreamProvider> sortedMap0 = compressorStreamFactory0.getCompressorOutputStreamProviders();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(10, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertNotNull(compressorStreamFactory0);
      
      SortedMap<String, CompressorStreamProvider> sortedMap0 = compressorStreamFactory0.getCompressorInputStreamProviders();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals(14, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("FyJ*<,g IXIq%}6k", (InputStream) byteArrayInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: FyJ*<,g IXIq%}6k not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("lz4-framed", (InputStream) byteArrayInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertNotNull(compressorStreamFactory0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("zstd", (InputStream) pipedInputStream0, false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdInputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, 955);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BrotliCompressorInputStream brotliCompressorInputStream0 = (BrotliCompressorInputStream)compressorStreamFactory0.createCompressorInputStream("br", (InputStream) byteArrayInputStream0);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, brotliCompressorInputStream0.getCompressedCount());
      assertEquals(0L, brotliCompressorInputStream0.getUncompressedCount());
      assertEquals(0L, brotliCompressorInputStream0.getBytesRead());
      assertEquals(0, brotliCompressorInputStream0.getCount());
      assertNotNull(brotliCompressorInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("bzip2", (InputStream) brotliCompressorInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true, 2585);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CompressorInputStream compressorInputStream0 = compressorStreamFactory0.createCompressorInputStream("pack200", (InputStream) byteArrayInputStream0);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, compressorInputStream0.getCount());
      assertEquals(0L, compressorInputStream0.getUncompressedCount());
      assertEquals(0L, compressorInputStream0.getBytesRead());
      assertNotNull(compressorInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("gz", (InputStream) compressorInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertTrue(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertNotNull(compressorStreamFactory0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("", (InputStream) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Set<String> set0 = compressorStreamFactory0.getInputStreamCompressorNames();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      try { 
        CompressorStreamFactory.detect((InputStream) byteArrayInputStream0, set0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      try { 
        CompressorStreamFactory.detect((InputStream) byteArrayInputStream0, set0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4465);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Set<String> set0 = compressorStreamFactory0.getInputStreamCompressorNames();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect((InputStream) pipedInputStream0, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = (BlockLZ4CompressorInputStream)compressorStreamFactory0.createCompressorInputStream("lz4-block", (InputStream) byteArrayInputStream0);
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0L, blockLZ4CompressorInputStream0.getBytesRead());
      assertEquals(0, blockLZ4CompressorInputStream0.getSize());
      assertEquals(0L, blockLZ4CompressorInputStream0.getUncompressedCount());
      assertEquals(0, blockLZ4CompressorInputStream0.available());
      assertEquals(0, blockLZ4CompressorInputStream0.getCount());
      assertEquals(0L, blockLZ4CompressorInputStream0.getCompressedCount());
      assertNotNull(blockLZ4CompressorInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("lz4-block"));
      
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect((InputStream) blockLZ4CompressorInputStream0, (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor names cannot be null or empty
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect((InputStream) null, (Set<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SortedMap<String, CompressorStreamProvider> sortedMap0 = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
      assertFalse(sortedMap0.isEmpty());
      assertEquals(10, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      try { 
        CompressorStreamFactory.detect(bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false);
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.setDecompressConcatenated(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot override the setting defined by the constructor
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      compressorStreamFactory0.setDecompressConcatenated(false);
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("br", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Compressor: br not found.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertNotNull(compressorStreamFactory0);
      
      SortedMap<String, CompressorStreamProvider> sortedMap0 = compressorStreamFactory0.getCompressorInputStreamProviders();
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(14, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("zstd", pipedOutputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdOutputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("lz4-framed", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("lz4-block", pipedOutputStream0);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("snappy-framed", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("deflate", pipedOutputStream0);
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      CompressorOutputStream compressorOutputStream0 = compressorStreamFactory0.createCompressorOutputStream("pack200", pipedOutputStream0);
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertNotNull(compressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("xz", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("bzip2", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorOutputStream("gz", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorOutputStream
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream("pack200", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorOutputStream((String) null, pipedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("lz4-framed", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = (BlockLZ4CompressorInputStream)compressorStreamFactory0.createCompressorInputStream("lz4-block", (InputStream) pipedInputStream0, false);
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, blockLZ4CompressorInputStream0.getUncompressedCount());
      assertEquals(0, blockLZ4CompressorInputStream0.getCount());
      assertEquals(0L, blockLZ4CompressorInputStream0.getCompressedCount());
      assertEquals(0L, blockLZ4CompressorInputStream0.getBytesRead());
      assertEquals(0, blockLZ4CompressorInputStream0.available());
      assertEquals(0, blockLZ4CompressorInputStream0.getSize());
      assertNotNull(blockLZ4CompressorInputStream0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = (Deflate64CompressorInputStream)compressorStreamFactory0.createCompressorInputStream("deflate64", (InputStream) pipedInputStream0, true);
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, deflate64CompressorInputStream0.getBytesRead());
      assertEquals(0L, deflate64CompressorInputStream0.getCompressedCount());
      assertEquals(0L, deflate64CompressorInputStream0.getUncompressedCount());
      assertEquals(0, deflate64CompressorInputStream0.getCount());
      assertNotNull(deflate64CompressorInputStream0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DeflateCompressorInputStream deflateCompressorInputStream0 = (DeflateCompressorInputStream)compressorStreamFactory0.createCompressorInputStream("deflate", (InputStream) pipedInputStream0, true);
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, deflateCompressorInputStream0.getCompressedCount());
      assertEquals(0, deflateCompressorInputStream0.getCount());
      assertEquals(0L, deflateCompressorInputStream0.getUncompressedCount());
      assertEquals(0L, deflateCompressorInputStream0.getBytesRead());
      assertNotNull(deflateCompressorInputStream0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("z", (InputStream) pipedInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(false, (-652));
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertFalse(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertNotNull(compressorStreamFactory0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("snappy-framed", (InputStream) sequenceInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("pack200", (InputStream) pipedInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("lzma", (InputStream) pipedInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("zstd", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.github.luben.zstd.ZstdInputStreamNoFinalizer
         //
         verifyException("com.github.luben.zstd.ZstdInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      assertEquals("deflate64", compressorStreamFactory0.getDeflate64());
      assertEquals("lz4-framed", compressorStreamFactory0.getLZ4Framed());
      assertEquals("lz4-block", compressorStreamFactory0.getLZ4Block());
      assertEquals("gz", compressorStreamFactory0.getGzip());
      assertEquals("z", compressorStreamFactory0.getZ());
      assertNull(compressorStreamFactory0.getDecompressUntilEOF());
      assertEquals("deflate", compressorStreamFactory0.getDeflate());
      assertEquals("lzma", compressorStreamFactory0.getLzma());
      assertEquals("pack200", compressorStreamFactory0.getPack200());
      assertEquals("snappy-framed", compressorStreamFactory0.getSnappyFramed());
      assertEquals("snappy-raw", compressorStreamFactory0.getSnappyRaw());
      assertEquals("xz", compressorStreamFactory0.getXz());
      assertEquals("zstd", compressorStreamFactory0.getZstandard());
      assertEquals("br", compressorStreamFactory0.getBrotli());
      assertEquals("bzip2", compressorStreamFactory0.getBzip2());
      assertNotNull(compressorStreamFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        compressorStreamFactory0.createCompressorInputStream("xz", (InputStream) pipedInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        compressorStreamFactory0.createCompressorInputStream("br", (InputStream) pipedInputStream0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create CompressorInputStream.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream("~", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((String) null, (InputStream) pipedInputStream0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor name and stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("deflate64");
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0, (Set<String>) linkedHashSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        CompressorStreamFactory.detect((InputStream) pipedInputStream0, (Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Compressor names cannot be null or empty
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      Set<String> set0 = compressorStreamFactory0.getOutputStreamCompressorNames();
      // Undeclared exception!
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) null, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = CompressorStreamFactory.getSnappyRaw();
      assertEquals("snappy-raw", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = CompressorStreamFactory.getDeflate();
      assertEquals("deflate", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = CompressorStreamFactory.getSnappyFramed();
      assertEquals("snappy-framed", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLZ4Framed();
      assertEquals("lz4-framed", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = CompressorStreamFactory.getDeflate64();
      assertEquals("deflate64", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SortedMap<String, CompressorStreamProvider> sortedMap0 = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
      assertEquals(14, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = CompressorStreamFactory.getGzip();
      assertEquals("gz", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = CompressorStreamFactory.getZstandard();
      assertEquals("zstd", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory();
      Boolean boolean0 = compressorStreamFactory0.getDecompressUntilEOF();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLZ4Block();
      assertEquals("lz4-block", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = CompressorStreamFactory.getZ();
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = CompressorStreamFactory.getPack200();
      assertEquals("pack200", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = CompressorStreamFactory.getXz();
      assertEquals("xz", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = CompressorStreamFactory.getBrotli();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = CompressorStreamFactory.getSingleton();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        compressorStreamFactory0.createCompressorInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Compressor found for the stream signature.
         //
         verifyException("org.apache.commons.compress.compressors.CompressorStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompressorStreamFactory compressorStreamFactory0 = new CompressorStreamFactory(true);
      boolean boolean0 = compressorStreamFactory0.getDecompressConcatenated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = CompressorStreamFactory.getLzma();
      assertEquals("lzma", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = CompressorStreamFactory.getBzip2();
      assertEquals("bzip2", string0);
  }
}
