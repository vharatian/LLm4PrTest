/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:12:04 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.commons.compress.archivers.zip.ZipSplitOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipSplitOutputStream_ESTest extends ZipSplitOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("4f!l@52f", "4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      byte[] byteArray0 = new byte[5];
      try { 
        zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 2147451167);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("storepass", "storepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent((-1328));
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
      assertEquals(0, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Lta)4p:a#");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65550L);
      byte[] byteArray0 = new byte[12];
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 1812);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, (int) (byte)6, 1272);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, 7, (int) (byte)117);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, 7, 8365);
      zipSplitOutputStream0.write(byteArray0, (int) (byte)0, 8365);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(byteArray0, 7, 4153);
      zipSplitOutputStream0.write(byteArray0, 7, 32953);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.write(7);
      zipSplitOutputStream0.write(byteArray0, 7, 8365);
      zipSplitOutputStream0.write(byteArray0);
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("storepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(4294967295L);
      long long0 = zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten();
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4f!l@df", "4f!l@df");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 2147451182);
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write((byte[]) null, 2147451182, 2147451182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4f!l@df", "4f!l@df");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 2147451182);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write(byteArray0, (-1), 2147451182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("4f!l@52f", "4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      // Undeclared exception!
      try { 
        zipSplitOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65536L);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipSplitOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4f!l@df", "4f!l@df");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 2147451182);
      zipSplitOutputStream0.close();
      try { 
        zipSplitOutputStream0.write(2147451182);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";,N<(,y-jl4iUv");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipSplitOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 2147483645L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<yy0^N0H05", "<yy0^N0H05");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 134695760L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 134695760L);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("storepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      byte[] byteArray0 = new byte[14];
      zipSplitOutputStream0.write(byteArray0, 92, (int) (byte) (-27));
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
      assertEquals(0, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("storepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("storepass.z02");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ":i");
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(4294967295L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // split zip segment storepass.z02 already exists
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-stepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65568L);
      byte[] byteArray0 = new byte[11];
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      zipSplitOutputStream0.write((-8));
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      zipSplitOutputStream0.write((-8));
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      zipSplitOutputStream0.write((-8));
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      zipSplitOutputStream0.write(byteArray0, 9, 65568);
      zipSplitOutputStream0.write(byteArray0, 0, 65568);
      zipSplitOutputStream0.write(byteArray0, 9, 9);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568);
      zipSplitOutputStream0.write(byteArray0);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      assertEquals(0L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("4f!l@52f", "4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      zipSplitOutputStream0.close();
      zipSplitOutputStream0.close();
      assertFalse(file0.canExecute());
      assertEquals(0, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-stepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65568L);
      byte[] byteArray0 = new byte[0];
      zipSplitOutputStream0.write(byteArray0);
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
      assertEquals(0, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("4f!l@52f", "4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65536L);
      assertFalse(file0.canExecute());
      assertEquals(1, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("4f!l@52f", "4f!l@52f");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(file0, 65536L);
      try { 
        zipSplitOutputStream0.prepareToWriteUnsplittableContent(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The unsplittable content size is bigger than the split segment size
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-stepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65568L);
      zipSplitOutputStream0.prepareToWriteUnsplittableContent(65568L);
      int int0 = zipSplitOutputStream0.getCurrentSplitSegmentIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 4294967305L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zip split segment size should between 64K and 4,294,967,295
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipSplitOutputStream zipSplitOutputStream0 = null;
      try {
        zipSplitOutputStream0 = new ZipSplitOutputStream((File) null, 379L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zip split segment size should between 64K and 4,294,967,295
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipSplitOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-stepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 65568L);
      int int0 = zipSplitOutputStream0.getCurrentSplitSegmentIndex();
      assertEquals(4L, zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("storepass");
      ZipSplitOutputStream zipSplitOutputStream0 = new ZipSplitOutputStream(mockFile0, 4294967295L);
      long long0 = zipSplitOutputStream0.getCurrentSplitSegmentBytesWritten();
      assertEquals(4L, long0);
      assertEquals(0, zipSplitOutputStream0.getCurrentSplitSegmentIndex());
  }
}
