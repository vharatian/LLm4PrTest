/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:40:22 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NewAttributeBands_ESTest extends NewAttributeBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3937);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("7k?Yh/Mr#1B\"66H", linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        newAttributeBands_Union0.readBands(pipedInputStream0, (-3843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("2k3T7Pp<k% w_0ju;", 1, "2k3T7Pp<k% w_0ju;", 2665);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("RS", linkedList0, linkedList0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2129);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      try { 
        newAttributeBands_Union0.readBands(sequenceInputStream0, (-2124));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("MgoR(!)DE4<.K", 0, "MgoR(!)DE4<.K", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("SourceFile");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(1, bHSDCodec0.getS());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, "P", 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      try { 
        newAttributeBands0.parseAttributes(pipedInputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, "P", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 166, 0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((-3541));
      newAttributeBands_Call0.readBands(byteArrayInputStream0, 166);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals((-3541), newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("ACC_SYNTHETIC", "TNw;J8;XqR@; wN");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("LocalVariableTypeTable", "The wildcard array must not be null");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KFACC_TRANSIENT", 2, "KFACC_TRANSIENT", (-100));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("LocalVariableTable");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        newAttributeBands_Integral0.readBands(mockFileInputStream0, 1406);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KJ", 0, "KJ", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_ENUM", 91);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement", "KFP]e)!}hlfv#jV=)!");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addToAttribute((byte)10, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-561));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      newAttributeBands0.unpack();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 0, "RVPA", 1556, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      newAttributeBands0.read(sequenceInputStream0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("RuntimeVisibleParameterAnnotations", 2);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("org.apache.commons.io.file.CountingPatVistor", "F:UT");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)8);
      // Undeclared exception!
      try { 
        newAttributeBands_Replication0.addToAttribute(56, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("1<=h<=256", 0, "RSRDACC_TRANSIENT", 31);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("~/", 2092);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)4);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((byte)12);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Call0.setCallable(newAttributeBands_Callable0);
      assertFalse(newAttributeBands_Callable0.isBackwardsCallable());
      
      newAttributeBands_Call0.addToAttribute(2, newAttribute0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(12, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("ACC_VOLATILE", 3, "RuntimeInvisibleParameterAnnotations", 0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes(pipedInputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      // Undeclared exception!
      try { 
        newAttributeBands0.getCodec((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 0, "O%*$|m$uWo-T<I70}", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("j eI.j");
      assertEquals(4294967293L, bHSDCodec0.largest());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("ACC_VOLATILE");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(252, bHSDCodec0.getL());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 0, "56", (-3070));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("ACC_PRIVATE", 2, "LineNumberTable", (-2297));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("(%*PK7yG]", 0, "(%*PK7yG]", (-1051));
      NewAttributeBands newAttributeBands0 = null;
      try {
        newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("B", 1, "B", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      newAttributeBands0.setBackwardsCalls((int[]) null);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T@S", 1, "T@S", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("KS");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(4294967293L, bHSDCodec0.largest());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("MgoR(!)DE4<.K", 0, "MgoR(!)DE4<.K", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("RccLPH]xu.>U11yNY");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0L, bHSDCodec0.smallest());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 0, "O%*$|m$uWo-T<I70}", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes((InputStream) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<NewAttributeBands.Callable> linkedList0 = new LinkedList<NewAttributeBands.Callable>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0);
      List list0 = newAttributeBands_UnionCase0.getBody();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0, linkedList0);
      newAttributeBands_UnionCase0.getBody();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PROTECTED", 0);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 53);
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0, linkedList0);
      newAttributeBands_UnionCase0.addToAttribute(0, newAttribute0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<NewAttributeBands.Callable> linkedList0 = new LinkedList<NewAttributeBands.Callable>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0);
      CPUTF8 cPUTF8_0 = new CPUTF8("Deprecated", 2);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      newAttributeBands_UnionCase0.addToAttribute(2113, newAttribute0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RI", 1, "fh6\"Yi\"W[I?8*", 1584);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0, linkedList0);
      linkedList0.add((Object) segment0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 91);
      // Undeclared exception!
      try { 
        newAttributeBands_UnionCase0.readBands(pipedInputStream0, 72);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.unpack200.Segment cannot be cast to org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0, linkedList0);
      newAttributeBands_UnionCase0.readBands(pipedInputStream0, (byte)4);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("%_{d7#n", 2, "!", (-490), true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 83);
      newAttributeBands_UnionCase0.readBands(pipedInputStream0, (byte) (-99));
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 0, ".jar", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0);
      boolean boolean0 = newAttributeBands_UnionCase0.hasTag((long) 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerLast((Integer) null);
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      // Undeclared exception!
      try { 
        newAttributeBands_Callable0.readBands((InputStream) null, (-3064));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.readBands((InputStream) null, (-3064));
      assertFalse(linkedList0.contains((-3064)));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 0, "InnerClasses: ", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("ACC_SYNTHETIC");
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PROTECTED", 43);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      linkedList0.push(newAttributeBands_Reference0);
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.addNextToAttribute(newAttribute0);
      assertTrue(newAttribute0.hasBCIRenumbering());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RI", 1, "fh6\"Yi\"W[I?8*", 1584);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RU");
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PUBLIC", 3);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(4513, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", 1, "org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 64);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RMdQrvOvq>qwf5");
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_STRICT", 1650);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)3);
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(63, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("@]+\"F", 1, "Qn9}-<SuTR9.z", (-1));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("InnerClasses", (-1));
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RF");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(1, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_VOLATILE", 1);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RDACC_TRANSIENT");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((-1743), newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T@S+", 1, "]bfA=r9z.>", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("KDACC_SYNTHETIC", 3318);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)1);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RSConstantValue");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((-279), newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("MgoR(!)DE4<.K", 2, "&|c:V F", 0, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("RSCollision detected in <*hisClassMtring, IcTuple> mapping. There are at least two inner clases with the same name.", 153);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)9);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KSCollision detected in <*hisClassMtring, IcTuple> mapping. There are at least two inner clases with the same name.");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)10, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 0, "K6k:3K}z", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("LocalVariableTable", 3);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (-1357));
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KD");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(2941, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("class-file version");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KJdQrvOvq>qwf5");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(58, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 0, "org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 1556, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KI");
      CPUTF8 cPUTF8_0 = new CPUTF8("H.[9f", 0);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 71);
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)5, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 0, "InnerClasses: ", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("ACC_SYNTHETIC");
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PROTECTED", 43);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)10);
      newAttributeBands_Reference0.addToAttribute(0, newAttribute0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", 1, "org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 64);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RMdQrvOvq>qwf5");
      PipedInputStream pipedInputStream0 = new PipedInputStream(83);
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, (byte)3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("FH", 0, "MgoR(!)DE4<.K", 0, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RF@e7xr4n$uiep");
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 49);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RDACC_TRANSIENT");
      try { 
        newAttributeBands_Reference0.readBands(bufferedInputStream0, (-46547694));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RSclass-file version");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)6, (byte)11);
      try { 
        newAttributeBands_Reference0.readBands(byteArrayInputStream0, 85);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("%_{d7#n", 2, "!", 0, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RC*X");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 393);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AttributeLayout attributeLayout0 = new AttributeLayout("F_@QGA{I]@)!t", 2, "F_@QGA{I]@)!t", 79, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KSRDACC_TRANSIENT");
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 144);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 0, "K6k:3K}z", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KD");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 0, "InnerClasses: ", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("ACC_SYNTHETIC");
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      newAttributeBands_Reference0.readBands(pipedInputStream0, (byte)1);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KJdQrvOvq>qwf5");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 0, "org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 1556, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KI");
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)9);
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(3);
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.readBands((InputStream) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, "P", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 166, 0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(0);
      newAttributeBands_Call0.readBands(byteArrayInputStream0, 166);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((-1879));
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.setCallable((NewAttributeBands.Callable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)7);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) attributeLayout0.CONTEXT_CLASS);
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("KJ", linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        newAttributeBands_Union0.readBands(pipedInputStream0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-561));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("V");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RI");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(1391, (NewAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-561));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("E5j]X2>qr4(Q24wjGH");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RI", 1, "fh6\"Yi\"W[I?8*", 1584);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("FB");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("MgoR(!)DE4<.K", 0, "MgoR(!)DE4<.K", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("MgoR(!)DE4<.K", "T-<5>T_V\"<Av?OlDAK");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 0, ")D9]J\"Z_wY;mV)", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("FH", "OS");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("InnerClasses", 1, "PqeLG`U=~l!%80sbP4a", 1148);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("J/?%{3Ry;f|", 1, "IUH:|02|`", 3493, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("SENSITIVE", 1, "SENSITIVE", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("MgoR(!)DE4<.K", 2, "MgoR(!)DE4<.K", 0, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("FI", 101);
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 75);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RCSignature");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((-3092), newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", 2, "9", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("<&cCD`MI<J.", "LocalVariableTable");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("J|avVsn'.krF#", 1, "J|avVsn'.krF#", 61);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RDAnnotationDefault", 1, "HlO^97RMl*", 44);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-564));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication((String) null, "G,z-p^EWaYS");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("code_LocalVariableTypeTable_span_O", 3, "Ewmg53qY]<<}64Q%", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("$B}Lt;pP6\"whZ`v", 2, "KFRDACC_VOLATILE", 0, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("class-file version", linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        newAttributeBands_Union0.addToAttribute(78, (NewAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("B", 1, "B", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RUError reading from the input stream", "B");
      newAttributeBands_Replication0.readBands((InputStream) null, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("Error reading class file of ", ">=");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KSCollision detected in <*hisClassMtring, IcTuple> mapping. There are at least two inner clases with the same name.", 1, "ACC_STRICT", (-2836), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication(" parameters", ";~");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(",\"jDd3|m", 1, ":zDEJNsr,D:a3J", (-303), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("8%m|7v+-x", 1, "8%m|7v+-x", 2834);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RS-2R:v>\"IX(K", 0, "6xQsC", 1740);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("45g>$i2;kPUvy?g", 2, "45g>$i2;kPUvy?g", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-561));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RUACC_NATIVE", "3:u'=w9iu:~a|dg/dA");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("1<=h<=256", 0, "1<=h<=256", (-678), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RUPO", 0, "RE30O0SW4-~", 0, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("/FO~HIYVv'92`", 2, "/FO~HIYVv'92`", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("K|", 2, "-^XHmxw\"nbdr9l2&X-", (-3321), true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T@S+", 1, "]bfA=r9z.>", 66, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("j(", ",-!");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("<Ubl6Psj*D", 1, "<Ubl6Psj*D", (-561));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("ACC_PUBLIC", "+)JPj'>]V18OT9{b=}");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 0, "O%*$|m$uWo-T<I70}", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("ACC_ANNOTATION", "PO");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("H", 0, "[t;>}U+~QW8", 53, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(" on ", 1, "RU", 54, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("KDRSEnclosingMethod");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(4294967293L, bHSDCodec0.largest());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("aqv5qcj:c]9\"yu/|2.", 1, "7*{c%vPfgY/", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      newAttributeBands0.parseAttributes(pipedInputStream0, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("s|;)28;7", 2, "KFACC_SYNTHETIC", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        newAttributeBands0.parseAttributes(pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("1<=h<=256", 0, "=ykX", (-662), true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes(pipedInputStream0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication", 0, "InnerClasses: ", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("SourceFile", linkedList0, linkedList0);
      newAttributeBands_Union0.getDefaultCaseBody();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("29JVRB9 GJsk:P", 1, "29JVRB9 GJsk:P", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<FilterInputStream> linkedList1 = new LinkedList<FilterInputStream>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union((String) null, linkedList0, linkedList1);
      newAttributeBands_Union0.getUnionTag();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("Vlo%BQ<", 0, "Vlo%BQ<", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("9pnb,Fs-);jM{", linkedList0, linkedList0);
      newAttributeBands_Union0.getUnionCases();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.UnionCase newAttributeBands_UnionCase0 = newAttributeBands0.new UnionCase(linkedList0, linkedList0);
      boolean boolean0 = newAttributeBands_UnionCase0.hasTag(2);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("Exceptions");
      newAttributeBands_Reference0.getTag();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(1);
      newAttributeBands_Call0.getCallable();
      assertEquals(1, newAttributeBands_Call0.getCallableIndex());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((byte)11);
      int int0 = newAttributeBands_Call0.getCallableIndex();
      assertEquals(11, int0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("%_{d7#n", 2, "!", (-490), true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("m@!cH|j5{8<LKM6=s", "RuntimeVisibleAnnotations");
      List list0 = newAttributeBands_Replication0.getLayoutElements();
      assertEquals(1, list0.size());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 0, ".jar", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      int int0 = newAttributeBands0.getBackwardsCallCount();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      List list0 = newAttributeBands_Callable0.getBody();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.addCount(1);
      assertFalse(newAttributeBands_Callable0.isBackwardsCallable());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.setBackwardsCallable();
      assertTrue(newAttributeBands_Callable0.isBackwardsCallable());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.setFirstCallable(false);
      assertFalse(linkedList0.contains(false));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<NewAttributeBands.Callable> linkedList0 = new LinkedList<NewAttributeBands.Callable>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      boolean boolean0 = newAttributeBands_Callable0.isBackwardsCallable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<FilterInputStream> linkedList0 = new LinkedList<FilterInputStream>();
      NewAttributeBands.Callable newAttributeBands_Callable0 = new NewAttributeBands.Callable(linkedList0);
      newAttributeBands_Callable0.addToAttribute(1, (NewAttribute) null);
      assertFalse(newAttributeBands_Callable0.isBackwardsCallable());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(")D9]J\"Z_wY;mV)", 2, ")D9]J\"Z_wY;mV)", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)7);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      NewAttributeBands.Union newAttributeBands_Union0 = newAttributeBands0.new Union("KJ", linkedList0, linkedList0);
      newAttributeBands_Union0.readBands(pipedInputStream0, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.getValue(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("org.apache.commons.io.file.CountingPatVistor", 2, "org.apache.commons.io.file.CountingPatVistor", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("v;bMG'M,l@{/", "&v2%<9})E\"");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      String string0 = newAttributeBands_Integral0.getTag();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals("v;bMG'M,l@{/", string0);
  }
}
