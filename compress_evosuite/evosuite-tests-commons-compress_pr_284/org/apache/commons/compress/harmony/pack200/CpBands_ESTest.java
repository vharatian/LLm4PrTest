/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:29:12 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.pack200.CPConstant;
import org.apache.commons.compress.harmony.pack200.CPMethodOrField;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.harmony.pack200.CPSignature;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CpBands_ESTest extends CpBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 973);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod("", " bytes", "");
      assertEquals((-1), cPMethodOrField0.getIndexInClass());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature("]<YL!nn_");
      assertEquals((-1), cPSignature0.getIndexInCpUtf8());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1045));
      cpBands0.addCPUtf8("");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1<=b<=5");
      PackingOptions packingOptions0 = new PackingOptions();
      // Undeclared exception!
      try { 
        segment0.pack(archive_SegmentUnit0, mockFileOutputStream0, packingOptions0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("ahfJN=-<&Jx");
      cPUTF8_0.setIndex(262144);
      CPUTF8 cPUTF8_1 = cpBands0.getCPUtf8("ahfJN=-<&Jx");
      assertEquals("ahfJN=-<&Jx", cPUTF8_1.getUnderlyingString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-579));
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("org.ipache.commons.io.filefilter.DelegateFileFilter");
      cPUTF8_0.setIndex(2090);
      CPSignature cPSignature0 = cpBands0.getCPSignature("org.ipache.commons.io.filefilter.DelegateFileFilter");
      assertEquals(2090, cPSignature0.getIndexInCpUtf8());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1045));
      CPClass cPClass0 = cpBands0.getCPClass("");
      cPClass0.setIndex(0);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod(cPClass0, "", "");
      assertEquals((-1), cPMethodOrField0.getDescIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("/~J2n51");
      cPClass0.setIndex(262144);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod(cPClass0, "/~J2n51", "/~J2n51");
      assertEquals((-1), cPMethodOrField0.getIndexInClassForConstructor());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("/~J2n51");
      cPClass0.setIndex(109);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod("/~J2n51", "/~J2n51", "/~J2n51");
      assertEquals((-1), cPMethodOrField0.getIndexInClassForConstructor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1045));
      CPClass cPClass0 = cpBands0.getCPClass("ConstantValue");
      cPClass0.setIndex(262144);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPIMethod(cPClass0, "X[%", "cp_Double_lo");
      assertEquals((-1), cPMethodOrField0.getIndexInClassForConstructor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("/~J2n51");
      cPClass0.setIndex(109);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPIMethod("/~J2n51", "cpUtf8Suffix", "4?{Cf*)IH>zZ6");
      assertNotNull(cPMethodOrField0);
      assertEquals(109, cPMethodOrField0.getClassIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("<=");
      cPClass0.setIndex(2147483645);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPField(cPClass0, "<=", "<=");
      assertEquals((-1), cPMethodOrField0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("ConstantValue");
      cPClass0.setIndex(4085);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPField("ConstantValue", "ConstantValue", "Dk%juG'(VW~L&=u");
      assertEquals((-1), cPMethodOrField0.getDescIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("ConstantValue");
      cPClass0.setIndex(4083);
      CPClass cPClass1 = cpBands0.getCPClass("ConstantValue");
      assertFalse(cPClass1.isInnerClass());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-653));
      cpBands0.getCPNameAndType("vclji4vfQLg@BNH?z", "vclji4vfQLg@BNH?z");
      // Undeclared exception!
      try { 
        cpBands0.pack((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-45));
      cpBands0.getCPNameAndType("LLvclji4vfQLg@BNH?z", "LLvclji4vfQLg@BNH?z");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        cpBands0.pack(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPNameAndType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CPNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPMethod("HUX'", "HUX'", "HUX'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPIMethod((CPClass) null, "org.apache.commons.compress.harmony.pack200.IcBands", "org.apache.commons.compress.harmony.pack200.IcBands");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPIMethod("VlS$~-mU;", "VlS$~-mU;", "VlS$~-mU;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPField((CPClass) null, "WZ:*K.o", "WZ:*K.o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPField("fq: w", "fq: w", "fq: w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      // Undeclared exception!
      try { 
        cpBands0.addCPClass(">r,$L\"$8R^4;30v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CpBands cpBands0 = null;
      try {
        cpBands0 = new CpBands((Segment) null, 262144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1045));
      CPClass cPClass0 = cpBands0.getCPClass("");
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod(cPClass0, "", "");
      CPMethodOrField cPMethodOrField1 = cpBands0.getCPMethod(cPClass0, "", "");
      assertNotNull(cPMethodOrField1);
      assertSame(cPMethodOrField1, cPMethodOrField0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass((String) null);
      assertNull(cPClass0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPNameAndType("vcljivfQLg@BNHz", "vcljivfQLg@BNHz");
      CPSignature cPSignature0 = cpBands0.getCPSignature("vclji4vfQLg@BNH?z");
      assertEquals((-1), cPSignature0.getIndexInCpUtf8());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature(";eH%f?BL$7D.|iZ=p");
      assertEquals(";eH%f?BL$7D.|iZ=p", cPSignature0.getUnderlyingString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 359);
      CPSignature cPSignature0 = cpBands0.getCPSignature("Me;:brP!_rLF");
      assertEquals("Me;:brP!_rLF", cPSignature0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature((String) null);
      assertNull(cPSignature0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPClass("1<=b<=5");
      boolean boolean0 = cpBands0.existsCpClass("1<=b<=5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      boolean boolean0 = cpBands0.existsCpClass("1<=b<=5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("/~J[5K>1");
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPIMethod(cPClass0, "/~J[5K>1", "/~J[5K>1");
      CPMethodOrField cPMethodOrField1 = cpBands0.getCPIMethod(cPClass0, "/~J[5K>1", "/~J[5K>1");
      assertNotNull(cPMethodOrField1);
      assertSame(cPMethodOrField1, cPMethodOrField0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1703));
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPMethod("PuXW]vL{", "PuXW]vL{", "PuXW]vL{");
      CPMethodOrField cPMethodOrField1 = cpBands0.getCPMethod("PuXW]vL{", "PuXW]vL{", "PuXW]vL{");
      assertSame(cPMethodOrField1, cPMethodOrField0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPConstant cPConstant0 = cpBands0.getConstant(cpBands0);
      assertNull(cPConstant0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 907);
      CPConstant cPConstant0 = cpBands0.getConstant("vclji4vfQLg@BNH?");
      CPConstant cPConstant1 = cpBands0.getConstant("vclji4vfQLg@BNH?");
      assertSame(cPConstant1, cPConstant0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPField("Pu]vLv{", "Pu]vLv{", "Pu]vLv{");
      CPClass cPClass0 = cpBands0.getCPClass("Pu]vLv{");
      CPMethodOrField cPMethodOrField1 = cpBands0.getCPField(cPClass0, "Pu]vLv{", "Pu]vLv{");
      assertNotNull(cPMethodOrField1);
      assertSame(cPMethodOrField1, cPMethodOrField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPNameAndType cPNameAndType0 = cpBands0.getCPNameAndType("vcljivfQLg@BNHz", "vcljivfQLg@BNHz");
      CPNameAndType cPNameAndType1 = cpBands0.getCPNameAndType("vcljivfQLg@BNHz", "vcljivfQLg@BNHz");
      assertEquals("vcljivfQLg@BNHz", cPNameAndType1.getName());
      assertSame(cPNameAndType1, cPNameAndType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.getCPClass("ahfJN=-<&Jx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature(" bytes from code_LocalVariableTable_N[");
      assertEquals(" bytes from code_LocalVariableTable_N[", cPSignature0.getUnderlyingString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature("I$xxz~L/|ncJ 5");
      assertEquals((-1), cPSignature0.getIndexInCpUtf8());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPSignature cPSignature0 = cpBands0.getCPSignature("");
      assertEquals((-1), cPSignature0.getIndexInCpUtf8());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-579));
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("org.ipache.commons.io.filefilter.DelegateFileFilter");
      CPClass cPClass0 = new CPClass(cPUTF8_0);
      cpBands0.getCPField(cPClass0, "org.ipache.commons.io.filefilter.DelegateFileFilter", "org.ipache.commons.io.filefilter.DelegateFileFilter");
      CPSignature cPSignature0 = cpBands0.getCPSignature("org.ipache.commons.io.filefilter.DelegateFileFilter");
      assertEquals((-1), cPSignature0.getIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-579));
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("org.ipache.commons.io.filefilter.DelegateFileFilter");
      CPClass cPClass0 = new CPClass(cPUTF8_0);
      // Undeclared exception!
      try { 
        cpBands0.getCPMethod(cPClass0, "org.ipache.commons.io.filefilter.DelegateFileFilter", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CPNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8((String) null);
      assertNull(cPUTF8_0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPMethodOrField cPMethodOrField0 = cpBands0.getCPField(";", "org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor", "Puo:<Lv{");
      assertEquals((-1), cPMethodOrField0.getIndexInClass());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPClass cPClass0 = cpBands0.getCPClass("<init>");
      cpBands0.getCPMethod(cPClass0, "<init>", "<int>");
      cpBands0.getCPMethod(cPClass0, "<init>", "<init>");
      // Undeclared exception!
      try { 
        cpBands0.finaliseBands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPMethod("PWLv", "PWLv", "PWLv");
      cpBands0.getCPMethod("PWLv", "PWLv", "com.github.marschall.memoryfilesystem.MemoryEntryAttributes$MemoryUserDefinedFileAttributeView");
      // Undeclared exception!
      try { 
        cpBands0.finaliseBands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPField("PuXW]vLv{", "PuXW]vLv{", "bindingMechanic");
      cpBands0.getCPField("PuXW]vLv{", "PuXW]vLv{", "PuXW]vLv{");
      // Undeclared exception!
      try { 
        cpBands0.finaliseBands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1703));
      cpBands0.getCPIMethod("PuXW]vL{", "PuXW]vL{", "PuXW]vL{");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cpBands0.pack(byteArrayOutputStream0);
      assertEquals("\bPuXW]vL{\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000U\u0001\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDU\u0001\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDU\u0001\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(36, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1703));
      cpBands0.getConstant("org.apache.commons.io.flefilter.SizeFileFilter");
      cpBands0.getCPField("org.apache.commons.io.flefilter.SizeFileFilter", "org.apache.commons.io.flefilter.SizeFileFilter", "org.apache.commons.io.flefilter.SizeFileFilter");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      cpBands0.pack(byteArrayOutputStream0);
      assertEquals(".org/apache/commons/io/flefilter/SizeFileFilter\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDU\u0001U\u0001\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDU\u0001\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(73, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPField("P", "PuW]_vL{", "PuW]_vL{");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        cpBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-1703));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        cpBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.getCPMethod("PuvLH2v{", "PuvLH2v{", "PuvLH2v{");
      // Undeclared exception!
      try { 
        cpBands0.pack((OutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      cpBands0.addCPClass((String) null);
  }
}
