/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 06:13:19 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AbstractUnicodeExtraField_ESTest extends AbstractUnicodeExtraField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        unicodePathExtraField0.parseFromLocalFileData(byteArray0, (byte)0, 2444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      unicodeCommentExtraField0.setUnicodeName(byteArray0);
      byte[] byteArray1 = unicodeCommentExtraField0.getUnicodeName();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[3] = (byte)1;
      unicodePathExtraField0.parseFromLocalFileData(byteArray0, 0, 5);
      long long0 = unicodePathExtraField0.getNameCRC32();
      assertEquals(65536L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("", byteArray0);
      unicodeCommentExtraField0.setNameCRC32((-2573L));
      long long0 = unicodeCommentExtraField0.getNameCRC32();
      assertEquals((-2573L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      // Undeclared exception!
      try { 
        unicodeCommentExtraField0.parseFromLocalFileData((byte[]) null, 2720, 2720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      // Undeclared exception!
      try { 
        unicodeCommentExtraField0.parseFromCentralDirectoryData((byte[]) null, 25473, 25473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        unicodeCommentExtraField0.parseFromCentralDirectoryData(byteArray0, 1293, 1293);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1293
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      try { 
        unicodeCommentExtraField0.parseFromLocalFileData(byteArray0, (-20), (-20));
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // UniCode path extra data must have at least 5 bytes.
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      ZipShort zipShort0 = unicodeCommentExtraField0.getCentralDirectoryLength();
      assertEquals(0, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      byte[] byteArray0 = unicodePathExtraField0.getCentralDirectoryData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = new byte[9];
      try { 
        unicodeCommentExtraField0.parseFromLocalFileData(byteArray0, 2, 5);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Unsupported version [0] for UniCode path extra data.
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      ZipShort zipShort0 = unicodePathExtraField0.getLocalFileDataLength();
      assertEquals(0, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = new byte[0];
      unicodeCommentExtraField0.setUnicodeName(byteArray0);
      byte[] byteArray1 = unicodeCommentExtraField0.getLocalFileDataData();
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      ZipShort zipShort0 = unicodeCommentExtraField0.getCentralDirectoryLength();
      assertEquals(5, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = new byte[1];
      unicodeCommentExtraField0.setUnicodeName(byteArray0);
      ZipShort zipShort0 = unicodeCommentExtraField0.getLocalFileDataLength();
      assertEquals(6, zipShort0.getValue());
      
      byte[] byteArray1 = unicodeCommentExtraField0.getCentralDirectoryData();
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      unicodePathExtraField0.setUnicodeName((byte[]) null);
      assertEquals(0L, unicodePathExtraField0.getNameCRC32());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("", byteArray0);
      unicodeCommentExtraField0.getUnicodeName();
      assertEquals(3523407757L, unicodeCommentExtraField0.getNameCRC32());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = unicodeCommentExtraField0.getUnicodeName();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      try { 
        unicodePathExtraField0.parseFromCentralDirectoryData((byte[]) null, (-778), (byte)1);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // UniCode path extra data must have at least 5 bytes.
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("org.apache.commons.compress.archivers.zip.ZipShort", byteArray0);
      byte[] byteArray1 = unicodeCommentExtraField0.getCentralDirectoryData();
      unicodeCommentExtraField0.parseFromCentralDirectoryData(byteArray1, (byte)0, 8);
      assertEquals(55, byteArray1.length);
      assertEquals(1696784233L, unicodeCommentExtraField0.getNameCRC32());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      long long0 = unicodePathExtraField0.getNameCRC32();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      byte[] byteArray0 = unicodeCommentExtraField0.getLocalFileDataData();
      assertNull(byteArray0);
  }
}
