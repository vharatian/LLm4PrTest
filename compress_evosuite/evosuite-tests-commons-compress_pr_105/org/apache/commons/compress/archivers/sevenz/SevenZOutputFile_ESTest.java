/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 06:06:22 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.InvalidPathException;
import java.util.TreeSet;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("This archive has already been finished");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZOutputFile0.setContentMethods(treeSet0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, (int) (byte)74, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setAntiItem(true);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[3];
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("quIf/fB<Q-x");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "quIf/fB<Q-x");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null, 0, 259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("keypass");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null, 1912, 1912);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("././@LongLink");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H+:bb)", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quI7/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      mockFileOutputStream0.close();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.close();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[9];
      sevenZOutputFile0.write(byteArray0);
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("././@LongLink");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(1359);
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      mockFileOutputStream0.close();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H~b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0\u0000", "0\u0000");
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("quIf/fB<Q-x", "quIf/fB<Q-x");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "Badly terminated header, found ");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H+:bb)", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[3];
      sevenZOutputFile0.write(byteArray0, (int) (byte) (-69), (int) (byte) (-69));
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("This archive has already been finished");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZOutputFile0.setContentMethods(treeSet0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, (int) (byte) (-65), 16384);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile", "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(324L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quI7ofBp<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("quI7ofBp<Q-x", "quI7ofBp<Q-x");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "quI7ofBp<Q-x");
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(96L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.arc^ivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.ommons.cZmpress.arc^ivers.sevenz.SevenZOutputFile", "org.apache.ommons.cZmpress.arc^ivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.arc^ivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.arc^ivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry1.setHasLastModifiedDate(false);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(308L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile", "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(328L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("quIf/fB<Q-x");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "quIf/fB<Q-x");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(32L, fileChannel0.position());
      assertEquals(98L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile", "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(328L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apacheommons.cZmpress.archivers.evenz.SeveZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apacheommons.cZmpress.archivers.evenz.SeveZOutputFile", "org.apacheommons.cZmpress.archivers.evenz.SeveZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apacheommons.cZmpress.archivers.evenz.SeveZOutputFile");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(190L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "Badly te|minate heades, found ");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile", "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.ommons.cZmpress.archivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry1.setHasStream(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(315L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(1359);
      sevenZOutputFile0.closeArchiveEntry();
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write((-2264));
      sevenZOutputFile0.write((-2264));
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("quI7/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.finish();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[0];
      sevenZOutputFile0.write(byteArray0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.close();
      sevenZOutputFile0.close();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null, (-2130706431), 2585);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(1359);
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BquIf/fB<Q-x");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.createArchiveEntry((File) null, "BquIf/fB<Q-x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((-69));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H:b");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_X86_FILTER;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" jz:\"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      // Undeclared exception!
      try { 
        sevenZOutputFile0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.jar.JarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }
}
