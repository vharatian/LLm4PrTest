/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:22:03 GMT 2025
 */

package org.apache.commons.compress.compressors.snappy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SnappyCompressorInputStream_ESTest extends SnappyCompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)90;
      int int0 = (-981);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-981), 25);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0, (byte)90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-56);
      byteArray1[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      dataInputStream0.readUnsignedByte();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(dataInputStream0);
      snappyCompressorInputStream0.read(byteArray1, (-2691), 21);
      try { 
        snappyCompressorInputStream1.read(byteArray1, (int) (byte)42, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(byteArrayInputStream0);
      snappyCompressorInputStream0.read(byteArray0, (int) (byte)3, 2);
      try { 
        snappyCompressorInputStream1.read(byteArray0, 32768, 32768);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream2 = null;
      try {
        snappyCompressorInputStream2 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading block start
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byteArrayInputStream0.read(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)42;
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0, (byte)42);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading block start
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      snappyCompressorInputStream0.read(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      snappyCompressorInputStream0.getSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byte byte1 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArrayInputStream0.read();
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream2 = null;
      try {
        snappyCompressorInputStream2 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream2 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream2.read(byteArray0, 27, (-1176));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-57);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      int int0 = 177;
      try { 
        snappyCompressorInputStream1.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream reading literal
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = snappyCompressorInputStream0.read(byteArray0, 46, 1037);
      assertEquals((-1), int0);
      
      snappyCompressorInputStream0.getSize();
      int int1 = snappyCompressorInputStream0.read(byteArray0, 7, (-163));
      assertEquals(0, snappyCompressorInputStream0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      snappyCompressorInputStream0.markSupported();
      snappyCompressorInputStream1.read(byteArray0, (int) (byte)42, (-3068));
      snappyCompressorInputStream1.getSize();
      try { 
        snappyCompressorInputStream0.read(byteArray0, (-291), (int) (byte)106);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      snappyCompressorInputStream0.read(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0, (-1485));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be bigger than 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0, 119);
      snappyCompressorInputStream0.read(byteArray0, 119, (int) (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(dataInputStream0, (byte)9);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = snappyCompressorInputStream0.read(byteArray0, (-2775), (int) (byte)0);
      assertEquals(0, snappyCompressorInputStream0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArray1[2] = (byte) (-56);
      snappyCompressorInputStream0.prefill(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream1.read(byteArray1, (int) (byte)3, (int) (byte) (-56));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = 0;
      int int1 = (-1400);
      snappyCompressorInputStream0.read(byteArray0, int0, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byte byte0 = (byte)2;
      byte byte1 = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      snappyCompressorInputStream1.markSupported();
      snappyCompressorInputStream1.mark(32768);
      SnappyCompressorInputStream snappyCompressorInputStream2 = null;
      try {
        snappyCompressorInputStream2 = new SnappyCompressorInputStream(snappyCompressorInputStream1, (byte)26);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byte byte1 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArrayInputStream0.reset();
      try { 
        snappyCompressorInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byte byte1 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)42;
      byte byte2 = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)42, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      int int0 = SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE;
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-56);
      snappyCompressorInputStream0.prefill(byteArray1);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream1.read(byteArray0, (int) (byte)42, 224);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      snappyCompressorInputStream0.markSupported();
      snappyCompressorInputStream0.mark(6);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(byteArrayInputStream0, 32768);
      snappyCompressorInputStream1.getSize();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)2;
      try { 
        snappyCompressorInputStream0.read(byteArray1, 378, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream reading literal
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      assertEquals(0, snappyCompressorInputStream0.getSize());
      
      int int0 = snappyCompressorInputStream0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      snappyCompressorInputStream0.mark((byte)115);
      snappyCompressorInputStream0.getSize();
      // Undeclared exception!
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)115, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)9, (int) (byte)9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)0, 2846);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream reading literal
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)42);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-56);
      byteArray1[7] = (byte) (-56);
      byteArray1[8] = (byte)106;
      snappyCompressorInputStream0.prefill(byteArray1);
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)3, (int) (byte)106);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream reading literal
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 36);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(pushbackInputStream0, 36);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0, (byte)61);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading back-reference length
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 3978;
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream((InputStream) null, 3978);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream((InputStream) null, 259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      sequenceInputStream0.skip((-4226L));
      int int0 = 0;
      sequenceInputStream0.mark(0);
      sequenceInputStream0.available();
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(638);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }
}
