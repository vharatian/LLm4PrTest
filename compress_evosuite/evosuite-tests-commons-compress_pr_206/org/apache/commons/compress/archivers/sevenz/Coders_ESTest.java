/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:03:52 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.CoderBase;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.DeltaInputStream;
import org.tukaani.xz.DeltaOptions;
import org.tukaani.xz.FilterOptions;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Coders_ESTest extends Coders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream((DeflaterOutputStream) null, (Deflater) null);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderOutputStream0.write(byteArray0, (-2119160460), (int) (byte)93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeltaOptions deltaOptions0 = new DeltaOptions();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(deltaOptions0);
      File file0 = MockFile.createTempFile("jEwN72@tVC(&pAm ", "5G3EF`a");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      DeltaInputStream deltaInputStream0 = (DeltaInputStream)coders_BCJDecoder0.decode("jEwN72@tVC(&pAm ", mockFileInputStream0, 4328L, coder0, byteArray0, 256);
      assertEquals(256, DeltaInputStream.DISTANCE_MAX);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      MockFile mockFile0 = new MockFile("xPMqhfU_T!mpN/R");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(byteArrayInputStream0);
      Inflater inflater0 = new Inflater(false);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(coders_DeflateDecoder_DeflateDecoderInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      OutputStream outputStream0 = coders_CopyDecoder0.encode(mockFileOutputStream0, dataInputStream0);
      assertSame(outputStream0, mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      DeltaOptions deltaOptions0 = new DeltaOptions();
      // Undeclared exception!
      try { 
        coders_BZIP2Decoder0.encode((OutputStream) null, deltaOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream((DeflaterOutputStream) null, (Deflater) null);
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      OutputStream outputStream0 = coders_DeflateDecoder0.encode(coders_DeflateDecoder_DeflateDecoderOutputStream0, aES256SHA256Decoder0);
      byte[] byteArray0 = new byte[9];
      outputStream0.write(byteArray0);
      assertFalse(outputStream0.equals((Object)coders_DeflateDecoder_DeflateDecoderOutputStream0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream((DeflaterOutputStream) null, (Deflater) null);
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      OutputStream outputStream0 = coders_DeflateDecoder0.encode(coders_DeflateDecoder_DeflateDecoderOutputStream0, aES256SHA256Decoder0);
      outputStream0.write((-145));
      assertFalse(coders_DeflateDecoder_DeflateDecoderOutputStream0.equals((Object)outputStream0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Crld}QXu>kfaEb4V", "Crld}QXu>kfaEb4V");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Deflater deflater0 = new Deflater();
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockFileOutputStream0, deflater0, 3112, true);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      coders_DeflateDecoder_DeflateDecoderOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pipedInputStream0);
      Inflater inflater0 = new Inflater(false);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      coders_DeflateDecoder_DeflateDecoderInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CoderBase coderBase0 = Coders.findByMethod((SevenZMethod) null);
      assertNull(coderBase0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE64;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method doesn't support writing
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.CoderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Coders.addDecoder("p~ZK_X-^F1`bT", (InputStream) null, 0L, (Coder) null, byteArray0, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        Coders.addEncoder((OutputStream) null, (SevenZMethod) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_SPARC_FILTER;
      OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder((FilterOptions) null);
      // Undeclared exception!
      try { 
        coders_BCJDecoder0.encode((OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Inflater inflater0 = new Inflater(false);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(dataInputStream0, inflater0);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read(byteArray0, (int) (byte) (-127), (-1502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(byteArrayInputStream0);
      Inflater inflater0 = new Inflater(true);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      int int0 = coders_DeflateDecoder_DeflateDecoderInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2579));
      Inflater inflater0 = new Inflater();
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(byteArrayInputStream0, inflater0, 224);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
      OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      coder0.decompressionMethodId = byteArray0;
      InputStream inputStream0 = Coders.addDecoder("9F4", (InputStream) null, 33L, coder0, byteArray0, 5);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      InputStream inputStream0 = coders_CopyDecoder0.decode("", dataInputStream0, (-1745L), coder0, byteArray0, (byte)103);
      assertSame(dataInputStream0, inputStream0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      OutputStream outputStream0 = coders_DeflateDecoder0.encode(byteArrayOutputStream0, byteArrayOutputStream0);
      byteArrayOutputStream0.writeTo(outputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      InputStream inputStream0 = coders_DeflateDecoder0.decode("The list of suffixes must not be null", pipedInputStream0, 257L, coder0, (byte[]) null, 0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      InputStream inputStream0 = coders_Deflate64Decoder0.decode("", (InputStream) null, 0L, coder0, byteArray0, 2003);
      try { 
        Coders.addDecoder("", inputStream0, (-2194L), coder0, byteArray0, 2003);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null used in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.BZIP2;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(byteArrayInputStream0);
      Coder coder0 = new Coder();
      try { 
        coders_BZIP2Decoder0.decode("!RFO", inflaterInputStream0, (byte) (-81), coder0, byteArray0, (byte) (-81));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_IA64_FILTER;
      Coders.BCJDecoder coders_BCJDecoder0 = (Coders.BCJDecoder)Coders.findByMethod(sevenZMethod0);
      Coder coder0 = new Coder();
      // Undeclared exception!
      try { 
        coders_BCJDecoder0.decode("", (InputStream) null, (-57), coder0, (byte[]) null, (-57));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.SimpleInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coders coders0 = new Coders();
  }
}
