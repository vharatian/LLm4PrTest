/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 01:01:40 GMT 2025
 */

package org.apache.commons.compress.archivers.dump;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Set;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DumpArchiveEntry_ESTest extends DumpArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.find(4);
      assertEquals(DumpArchiveEntry.TYPE.DIRECTORY, dumpArchiveEntry_TYPE0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry1 = new DumpArchiveEntry("JW", (String) null, 1067, dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.equals(dumpArchiveEntry1);
      assertFalse(boolean0);
      assertEquals(0L, dumpArchiveEntry1.getOffset());
      assertFalse(dumpArchiveEntry1.equals((Object)dumpArchiveEntry0));
      assertEquals("JW/", dumpArchiveEntry1.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("STICKY", "[YJddH@Lcd$7+B6");
      MockDate mockDate0 = new MockDate(265L);
      dumpArchiveEntry0.setAccessTime(mockDate0);
      assertEquals("[YJddH@Lcd$7+B6", dumpArchiveEntry0.getSimpleName());
      assertEquals("STICKY", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.update(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 160
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("2k", "pXVZ'Xe?", 1, dumpArchiveEntry_TYPE0);
      String string0 = dumpArchiveEntry0.toString();
      assertEquals("2k/", string0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("pXVZ'Xe?", dumpArchiveEntry0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "");
      String string0 = dumpArchiveEntry0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("STICKY", "[YJddH@Lcd$7+B6");
      dumpArchiveEntry0.setVolume(3100);
      int int0 = dumpArchiveEntry0.getVolume();
      assertEquals(3100, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setUserId(1);
      int int0 = dumpArchiveEntry0.getUserId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      dumpArchiveEntry0.setSize(1101L);
      long long0 = dumpArchiveEntry0.getSize();
      assertEquals(1101L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.SOCKET;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("-sigFile", "~-W7N", 0, dumpArchiveEntry_TYPE0);
      String string0 = dumpArchiveEntry0.getSimpleName();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("~-W7N", string0);
      assertEquals("-sigFile", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "");
      dumpArchiveEntry0.getSimpleName();
      assertEquals("", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setName("~xoZmBfD");
      dumpArchiveEntry0.getOriginalName();
      assertEquals("~xoZmBfD", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.FILE;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "m7hPk[M=O", 0, dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.getOriginalName();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("m7hPk[M=O", dumpArchiveEntry0.getSimpleName());
      assertEquals("", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setOffset(1L);
      long long0 = dumpArchiveEntry0.getOffset();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("./SETUID", "E@d.W;%nK@m-_j+%)}");
      dumpArchiveEntry0.setOffset((-1426L));
      long long0 = dumpArchiveEntry0.getOffset();
      assertEquals((-1426L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setNlink(59);
      int int0 = dumpArchiveEntry0.getNlink();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "C?5jZh$oCHvjs7", (-1055), dumpArchiveEntry_TYPE0);
      String string0 = dumpArchiveEntry0.getName();
      assertEquals("/", string0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("C?5jZh$oCHvjs7", dumpArchiveEntry0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.BLKDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "", (-287), dumpArchiveEntry_TYPE0);
      String string0 = dumpArchiveEntry0.getName();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setGroupId((-4988));
      int int0 = dumpArchiveEntry0.getGroupId();
      assertEquals((-4988), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("", "");
      dumpArchiveEntry0.setGeneration(11);
      int int0 = dumpArchiveEntry0.getGeneration();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry(":i", "4r QPr|u$,]R", (-2093064), dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.setGeneration((-2093064));
      int int0 = dumpArchiveEntry0.getGeneration();
      assertEquals((-2093064), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setSize(4);
      long long0 = dumpArchiveEntry0.getEntrySize();
      assertEquals(4L, dumpArchiveEntry0.getSize());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setSize((-140L));
      long long0 = dumpArchiveEntry0.getEntrySize();
      assertEquals((-140L), dumpArchiveEntry0.getSize());
      assertEquals((-140L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.update((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.setLastModifiedDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.setCreationTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DumpArchiveEntry.parse((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.isSparseRecord((-1094019766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1094019766
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Set<DumpArchiveEntry.PERMISSION> set0 = DumpArchiveEntry.PERMISSION.find(0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("JW", (String) null, 1067, dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isDirectory();
      assertEquals("JW/", dumpArchiveEntry0.toString());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isDirectory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("JL/jh`{dV]jb+", "./end index must be 1/", 1, dumpArchiveEntry_TYPE0);
      assertEquals("JL/jh`{dV]jb+/", dumpArchiveEntry0.toString());
      
      dumpArchiveEntry0.setName("./end index must be 1/");
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("q", "q", 1277, dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.setName("q");
      assertEquals("q/", dumpArchiveEntry0.getName());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      // Undeclared exception!
      try { 
        dumpArchiveEntry_TapeSegmentHeader0.getCdata((-538));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -538
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      // Undeclared exception!
      try { 
        dumpArchiveEntry0.setAccessTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      int int0 = dumpArchiveEntry_TapeSegmentHeader0.getIno();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      int int0 = dumpArchiveEntry_TapeSegmentHeader0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      dumpArchiveEntry_TapeSegmentHeader0.getType();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.WHITEOUT;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("j{@S", "7t4[J+bK0V (F2A4n", 2061, dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.setMode(2061);
      int int0 = dumpArchiveEntry0.getMode();
      assertEquals(2061, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = dumpArchiveEntry0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      int int0 = dumpArchiveEntry_TapeSegmentHeader0.getHoles();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<DumpArchiveEntry.PERMISSION> set0 = DumpArchiveEntry.PERMISSION.find((-108523458));
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.find(10);
      assertEquals(DumpArchiveEntry.TYPE.LINK, dumpArchiveEntry_TYPE0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("JL/jh{dV]jb+", (String) null, 1, dumpArchiveEntry_TYPE0);
      long long0 = dumpArchiveEntry0.getSize();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals((-1L), long0);
      assertEquals("JL/jh{dV]jb+/", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      long long0 = dumpArchiveEntry0.getSize();
      assertEquals(0L, long0);
      assertEquals("kPo8(Z", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.FIFO;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("}", "}", 831, dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isFifo();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertTrue(boolean0);
      assertEquals("}", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isFifo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.BLKDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("PI>h(/9w", "PI>h(/9w", 42, dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isBlkDev();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertTrue(boolean0);
      assertEquals("PI>h(/9w", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isBlkDev();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("./7mu,Qu}%xhvU/", (String) null, 36, dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isChrDev();
      assertEquals(0L, dumpArchiveEntry0.getSize());
      assertTrue(boolean0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("7mu,Qu}%xhvU/", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isChrDev();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.SOCKET;
      dumpArchiveEntry0.setType(dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isSocket();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isSocket();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.FILE;
      dumpArchiveEntry0.setType(dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.isFile();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      assertEquals("kPo8(Z", dumpArchiveEntry0.getName());
      
      dumpArchiveEntry0.setName((String) null);
      assertFalse(dumpArchiveEntry0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      DumpArchiveEntry dumpArchiveEntry1 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.equals(dumpArchiveEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.DIRECTORY;
      DumpArchiveEntry dumpArchiveEntry1 = new DumpArchiveEntry("././p0", "././p0", (-71537600), dumpArchiveEntry_TYPE0);
      boolean boolean0 = dumpArchiveEntry0.equals(dumpArchiveEntry1);
      assertFalse(dumpArchiveEntry1.equals((Object)dumpArchiveEntry0));
      assertEquals(0L, dumpArchiveEntry1.getOffset());
      assertEquals("./p0/", dumpArchiveEntry1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.equals(dumpArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      Object object0 = new Object();
      boolean boolean0 = dumpArchiveEntry0.equals(object0);
      assertFalse(boolean0);
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.toString());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      dumpArchiveEntry_TapeSegmentHeader0.setIno(11);
      assertEquals(11, dumpArchiveEntry_TapeSegmentHeader0.getIno());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isSparseRecord(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DumpArchiveEntry.TapeSegmentHeader dumpArchiveEntry_TapeSegmentHeader0 = new DumpArchiveEntry.TapeSegmentHeader();
      int int0 = dumpArchiveEntry_TapeSegmentHeader0.getVolume();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry(":i", "4r QPr|u$,]R", (-2093064), dumpArchiveEntry_TYPE0);
      Date date0 = dumpArchiveEntry0.getCreationTime();
      dumpArchiveEntry0.setCreationTime(date0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("4r QPr|u$,]R", dumpArchiveEntry0.getSimpleName());
      assertEquals(":i", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      dumpArchiveEntry0.getHeaderType();
      assertEquals("kPo8(Z", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry(":i", "4r QPr|u$,]R", (-2093064), dumpArchiveEntry_TYPE0);
      int int0 = dumpArchiveEntry0.getHeaderCount();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals(0, int0);
      assertEquals("4r QPr|u$,]R", dumpArchiveEntry0.getSimpleName());
      assertEquals(":i", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.setVolume((-1563));
      int int0 = dumpArchiveEntry0.getVolume();
      assertEquals((-1563), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry(":i", "4r QPr|u$,]R", (-2093064), dumpArchiveEntry_TYPE0);
      int int0 = dumpArchiveEntry0.getGeneration();
      assertEquals(0, int0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("4r QPr|u$,]R", dumpArchiveEntry0.getSimpleName());
      assertEquals(":i", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      long long0 = dumpArchiveEntry0.getEntrySize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      int int0 = dumpArchiveEntry0.getGroupId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      int int0 = dumpArchiveEntry0.getVolume();
      assertEquals(0, int0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = dumpArchiveEntry0.getSimpleName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      Date date0 = dumpArchiveEntry0.getLastModifiedDate();
      dumpArchiveEntry0.setLastModifiedDate(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setNlink((-1383));
      int int0 = dumpArchiveEntry0.getNlink();
      assertEquals((-1383), int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      int int0 = dumpArchiveEntry0.getUserId();
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.toString());
      assertEquals(0, int0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setDeleted(true);
      boolean boolean0 = dumpArchiveEntry0.isDeleted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      Date date0 = dumpArchiveEntry0.getAccessTime();
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.setUserId((-20));
      int int0 = dumpArchiveEntry0.getUserId();
      assertEquals((-20), int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      int int0 = dumpArchiveEntry0.getHeaderHoles();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      int int0 = dumpArchiveEntry0.getMode();
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.toString());
      assertEquals(0, int0);
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      dumpArchiveEntry0.setGroupId(512);
      int int0 = dumpArchiveEntry0.getGroupId();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = dumpArchiveEntry0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      int int0 = dumpArchiveEntry0.getIno();
      assertEquals("kPo8(Z", dumpArchiveEntry0.getName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.setSimpleName("pu$2mu)]N.shBq\"]");
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.getName());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = dumpArchiveEntry0.isDeleted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[72];
      // Undeclared exception!
      try { 
        DumpArchiveEntry.parse(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 140
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.LINK;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("D.q0V-5mpz_a?]o3h`$", "D.q0V-5mpz_a?]o3h`$", (-1563), dumpArchiveEntry_TYPE0);
      dumpArchiveEntry0.getPermissions();
      assertEquals("D.q0V-5mpz_a?]o3h`$", dumpArchiveEntry0.getName());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("kPo8(Z", "kPo8(Z");
      dumpArchiveEntry0.getType();
      assertEquals("kPo8(Z", dumpArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = dumpArchiveEntry0.getOriginalName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DumpArchiveEntry.TYPE dumpArchiveEntry_TYPE0 = DumpArchiveEntry.TYPE.CHRDEV;
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry(":i", "4r QPr|u$,]R", (-2093064), dumpArchiveEntry_TYPE0);
      long long0 = dumpArchiveEntry0.getOffset();
      assertEquals(0L, long0);
      assertEquals("4r QPr|u$,]R", dumpArchiveEntry0.getSimpleName());
      assertEquals(":i", dumpArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      int int0 = dumpArchiveEntry0.getNlink();
      assertEquals(0, int0);
  }
}
