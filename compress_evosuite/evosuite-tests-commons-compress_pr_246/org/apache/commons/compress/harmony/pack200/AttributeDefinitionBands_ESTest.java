/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:15:06 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.objectweb.asm.Attribute;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AttributeDefinitionBands_ESTest extends AttributeDefinitionBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("shaded.org.apache.commons.io.filefilter.FileFileFilter", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      packingOptions0.addFieldAttributeAction("", "");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      segment0.pack(archive_SegmentUnit0, bufferedOutputStream0, packingOptions0);
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      // Undeclared exception!
      try { 
        attributeDefinitionBands0.pack((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("shaded.org.apache.commons.io.filefilter.FileFileFilter", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(155);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      attributeDefinitionBands0.finaliseBands();
      assertEquals(1, AttributeDefinitionBands.CONTEXT_FIELD);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      List list0 = attributeDefinitionBands0.getMethodAttributeLayouts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      List list0 = attributeDefinitionBands0.getFieldAttributeLayouts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("shaded.org.apache.commons.io.filefilter.FileFileFilter", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00006shaded.org.apache.commons.io.filefilter.FileFileFilter", byteArrayOutputStream0.toString());
      
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      List list0 = attributeDefinitionBands0.getFieldAttributeLayouts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      List list0 = attributeDefinitionBands0.getCodeAttributeLayouts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      List list0 = attributeDefinitionBands0.getClassAttributeLayouts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("attributeDefinitionLayout");
      LinkedList<NewAttribute.ErrorAttribute> linkedList0 = new LinkedList<NewAttribute.ErrorAttribute>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, mockFileOutputStream0, packingOptions0);
      assertEquals(77, archive_SegmentUnit0.getPackedByteAmount());
      
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      List list0 = attributeDefinitionBands0.getClassAttributeLayouts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      // Undeclared exception!
      try { 
        attributeDefinitionBands0.pack((OutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, (-68), attributeArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" cases_RU", false);
      try { 
        attributeDefinitionBands0.pack(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[0];
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      // Undeclared exception!
      try { 
        attributeDefinitionBands0.finaliseBands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-877), 236, cPUTF8_0, cPUTF8_0);
      assertEquals((-877), attributeDefinitionBands_AttributeDefinition0.index);
      assertEquals(236, attributeDefinitionBands_AttributeDefinition0.contextType);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("pass", "Writing attribute defiition bands...");
      packingOptions0.addClassAttributeAction("keep", "Writing attribute defiition bands...");
      packingOptions0.addClassAttributeAction("Writing attribute defiition bands...", "Writing attribute defiition bands...");
      packingOptions0.addClassAttributeAction("strip", "Writing attribute defiition bands...");
      packingOptions0.addClassAttributeAction("[o", "8J1D'o,uO3f");
      packingOptions0.addClassAttributeAction("", "Writing attribute defiition bands...");
      packingOptions0.addClassAttributeAction("rB=L0^e", "rB=L0^e");
      packingOptions0.addClassAttributeAction("8J1D'o,uO3f", "Writing attribute defiition bands...");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(104, archive_SegmentUnit0.getPackedByteAmount());
      assertEquals(104, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addCodeAttributeAction("shaded.org.apache.commons.io.filefilter.FileFileFilter", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Class too large: ");
      segment0.pack(archive_SegmentUnit0, mockPrintStream0, packingOptions0);
      assertEquals(77, archive_SegmentUnit0.getPackedByteAmount());
      
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      List list0 = attributeDefinitionBands0.getCodeAttributeLayouts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      packingOptions0.addMethodAttributeAction("{&o(7~-yG", "shaded.org.apache.commons.io.filefilter.FileFileFilter");
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(88, byteArrayOutputStream0.size());
      
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      List list0 = attributeDefinitionBands0.getMethodAttributeLayouts();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[12];
      NewAttribute.StripAttribute newAttribute_StripAttribute0 = new NewAttribute.StripAttribute("{(7~-yG", 262144);
      attributeArray0[0] = (Attribute) newAttribute_StripAttribute0;
      AttributeDefinitionBands attributeDefinitionBands0 = null;
      try {
        attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[1];
      NewAttribute.PassAttribute newAttribute_PassAttribute0 = new NewAttribute.PassAttribute("W*6{ \"D%7", (-255));
      attributeArray0[0] = (Attribute) newAttribute_PassAttribute0;
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      assertEquals(0, AttributeDefinitionBands.CONTEXT_CLASS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      Attribute[] attributeArray0 = new Attribute[1];
      NewAttribute.ErrorAttribute newAttribute_ErrorAttribute0 = new NewAttribute.ErrorAttribute("]", 262144);
      attributeArray0[0] = (Attribute) newAttribute_ErrorAttribute0;
      AttributeDefinitionBands attributeDefinitionBands0 = new AttributeDefinitionBands(segment0, 262144, attributeArray0);
      assertEquals(1, AttributeDefinitionBands.CONTEXT_FIELD);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Segment segment0 = new Segment();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("pass", "Writing attribute defiition bands...");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      AttributeDefinitionBands attributeDefinitionBands0 = segment0.getAttrBands();
      attributeDefinitionBands0.pack(byteArrayOutputStream0);
      assertEquals(68, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0004Writing attribute defiition bands...passh\u0002\u0001", byteArrayOutputStream0.toString());
  }
}
