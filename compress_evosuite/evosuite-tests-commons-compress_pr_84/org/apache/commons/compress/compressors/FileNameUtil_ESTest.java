/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:24:01 GMT 2025
 */

package org.apache.commons.compress.compressors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.compressors.FileNameUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileNameUtil_ESTest extends FileNameUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FileNameUtil.getBaseName("Z@/x/~[e.I*<3+");
      assertEquals("~[e", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = FileNameUtil.getBaseName("v/f%5$=jc");
      assertEquals("f%5$=jc", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FileNameUtil.getExtension(" .K");
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", ")#yfQHkO9Lm5x");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, ")#yfQHkO9Lm5x");
      String string0 = fileNameUtil0.getCompressedFilename(")#yfQHkO9Lm5x");
      assertEquals(")#yfQHkO9Lm5x)#yfQHkO9Lm5x", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ilenameutil", "K");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "org.apache.commons.compresskcompressorsWFileNameUtil");
      String string0 = fileNameUtil0.getUncompressedFilename("org.apache.commons.compresskcompressorsWFileNameUtil");
      assertEquals("org.apache.commons.compresskcompressorsWFK", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1gD", "+q\"k");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "|s50xixh");
      String string0 = fileNameUtil0.getUncompressedFilename("`");
      assertEquals("`", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("designateFactory", "designateFactory");
      hashMap0.put("", "keypass");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "keypass");
      String string0 = fileNameUtil0.getUncompressedFilename("path");
      assertEquals("pathkeypass", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1gD", "+q\"k");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "|s50xixh");
      boolean boolean0 = fileNameUtil0.isCompressedFilename("oG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("designateFactory", "designateFactory");
      hashMap0.put("", "keypass");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "keypass");
      boolean boolean0 = fileNameUtil0.isCompressedFilename("Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("path", "|s50xixh");
      hashMap0.put("-sigFile", "q0*,qk,");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "|s50xixh");
      String string0 = fileNameUtil0.getCompressedFilename("path");
      assertEquals("path|s50xixh", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("i]k:bi/j", "");
      hashMap0.put("signdjar", "signdjar");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "signdjar");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "");
      String string0 = fileNameUtil0.getCompressedFilename("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = FileNameUtil.getBaseName(".filenameutil");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "keypass");
      // Undeclared exception!
      try { 
        fileNameUtil0.isCompressedFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.FileNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "");
      // Undeclared exception!
      try { 
        fileNameUtil0.getUncompressedFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.FileNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, (String) null);
      // Undeclared exception!
      try { 
        fileNameUtil0.getCompressedFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.FileNameUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileNameUtil fileNameUtil0 = null;
      try {
        fileNameUtil0 = new FileNameUtil((Map<String, String>) null, "(E.KE%[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = FileNameUtil.getExtension("LaQute/bnd/annotation/component/Modified;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = FileNameUtil.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = FileNameUtil.getExtension("gns9");
      assertEquals("gns9", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = FileNameUtil.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.compress.compressors.FileNameUtil", "designate");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "pressors.filenameutil");
      String string0 = fileNameUtil0.getCompressedFilename(",X(]7*Z((w}t=I+6}[designate");
      assertEquals(",X(]7*Z((w}t=I+6}[org.apache.commons.compress.compressors.FileNameUtil", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.compress.compressors.FileNameUtil", "designate");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "pressors.filenameutil");
      String string0 = fileNameUtil0.getCompressedFilename(",X(]7*Z((w}t=I+6}[");
      assertEquals(",X(]7*Z((w}t=I+6}[pressors.filenameutil", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("exlde", ">Tpn9~ge(2d!Y8+&");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "\"");
      String string0 = fileNameUtil0.getUncompressedFilename("UBajQx/w}j0EZ<");
      assertEquals("UBajQx/w}j0EZ<", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "pressors.filenameutil");
      String string0 = fileNameUtil0.getUncompressedFilename("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("exlde", ">Tpn9~ge(2d!Y8+&");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "\"");
      boolean boolean0 = fileNameUtil0.isCompressedFilename("keypass");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("(E.KE%[", "(E.KE%[");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, (String) null);
      boolean boolean0 = fileNameUtil0.isCompressedFilename("(E.KE%[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("K", "K");
      hashMap0.put("ilenameutil", "K");
      FileNameUtil fileNameUtil0 = new FileNameUtil(hashMap0, "org.apache.commons.compresskcompressorsWFileNameUtil");
  }
}
