/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:15:43 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.SegmentOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SegmentHeader_ESTest extends SegmentHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        segment0.unpackRead(pushbackInputStream0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Bad header
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      segmentHeader0.setArchiveSize(1497L);
      long long0 = segmentHeader0.getArchiveSize();
      assertEquals(1497L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      // Undeclared exception!
      try { 
        segmentHeader0.read((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2096), 1);
      // Undeclared exception!
      try { 
        segmentHeader0.read(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2096
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        segmentHeader0.read(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      try { 
        segmentHeader0.read(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      segmentHeader0.getBandHeadersInputStream();
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      assertNotNull(inputStream0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        segment0.unpackRead(byteArrayInputStream0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Bad header
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[5];
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        segmentHeader0.read(byteArrayInputStream0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Bad header
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getArchiveSizeOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      segmentHeader0.setArchiveModtime(1);
      assertEquals(1L, segmentHeader0.getArchiveModtime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getInnerClassCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpUTF8Count();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpIMethodCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getNumberOfFiles();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader((Segment) null);
      int int0 = segmentHeader0.getAttributeDefinitionCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpLongCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getSegmentsRemaining();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader((Segment) null);
      segmentHeader0.unpack();
      assertEquals(0L, segmentHeader0.getArchiveModtime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      SegmentOptions segmentOptions0 = segmentHeader0.getOptions();
      assertNull(segmentOptions0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpDoubleCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getBandHeadersSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpStringCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpIntCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getDefaultClassMajorVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpDescriptorCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      long long0 = segmentHeader0.getArchiveSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getClassCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpFieldCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      segmentHeader0.setSegmentsRemaining(202);
      int int0 = segmentHeader0.getSegmentsRemaining();
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpClassCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      long long0 = segmentHeader0.getArchiveModtime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getDefaultClassMinorVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpMethodCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpFloatCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      int int0 = segmentHeader0.getCpSignatureCount();
      assertEquals(0, int0);
  }
}
