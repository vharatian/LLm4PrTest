/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:04:36 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BandSet_ESTest extends BandSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = new BHSDCodec(2, 1);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("D 3", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("U", byteArrayInputStream0, bHSDCodec0, (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags((String) null, (InputStream) null, 0, bHSDCodec0, false);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPUTF8References("wS(AYNsv--fO4:8;shp", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[0][0];
      String[] stringArray0 = new String[3];
      String[][] stringArray1 = bcBands0.getReferences(intArray0, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Segment segment0 = new Segment();
      String[] stringArray0 = new String[3];
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[3];
      String[] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      int[] intArray0 = new int[0];
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray1 = bcBands0.decodeBandInt("Something has gone wrong during parsing references, index = ", (InputStream) null, bHSDCodec0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.unpack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.read(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("org.apache.commons.compress.harmony.unpack200.BandSet", (InputStream) byteArrayInputStream0, bHSDCodec0, (int[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[4];
      intArray0[3] = (-3028);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1523), 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      String[] stringArray0 = new String[3];
      try { 
        bcBands0.parseReferences("", (InputStream) pipedInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      int[] intArray0 = new int[4];
      intArray0[0] = 1426;
      String[] stringArray0 = new String[0];
      try { 
        bcBands0.parseReferences("8B$r![.F+", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String[] stringArray0 = new String[5];
      try { 
        bcBands0.parseReferences("", (InputStream) byteArrayInputStream0, bHSDCodec0, 3, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Something has gone wrong during parsing references, index = 212, array size = 5
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("dyQu~Ru|0j", (InputStream) byteArrayInputStream0, bHSDCodec0, 2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("4cI_n((y5}gb", (InputStream) byteArrayInputStream0, bHSDCodec0, (-920), (String[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      String[] stringArray0 = new String[1];
      try { 
        bcBands0.parseReferences("7U)[", (InputStream) pipedInputStream0, bHSDCodec0, 126, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseReferences("dyQu~Ru|0j", (InputStream) byteArrayInputStream0, bHSDCodec0, 1404, (String[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[3];
      intArray0[1] = (-2345);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("mo zy", (InputStream) dataInputStream0, intArray0, bHSDCodec0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      try { 
        bcBands0.parseFlags("l2d", (InputStream) pipedInputStream0, intArray0, bHSDCodec0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "";
      int[] intArray0 = new int[9];
      intArray0[1] = segment0.LOG_LEVEL_VERBOSE;
      try { 
        cpBands0.parseFlags(string0, (InputStream) sequenceInputStream0, intArray0, bHSDCodec0, boolean0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[3];
      intArray0[1] = (-1308);
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("Somthing has gone wrong during parsing references, index = ", (InputStream) null, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[17];
      intArray0[1] = 1;
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        cpBands0.parseFlags((String) null, (InputStream) pipedInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[7];
      intArray0[1] = 677;
      try { 
        cpBands0.parseFlags("dyQu~Ru|0j", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, (int) (byte) (-1), bHSDCodec0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseFlags("p^bp", (InputStream) mockFileInputStream0, 1319, bHSDCodec0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("wy@5*n*h)w*GaR8[", (InputStream) null, (-504), bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      try { 
        bcBands0.parseFlags("1m&fAAy=r]$RR?", (InputStream) mockFileInputStream0, 2, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 2, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[4];
      intArray0[0] = (-3257);
      // Undeclared exception!
      try { 
        cpBands0.parseCPUTF8References("org.apache.commons.compress.harmony.unpack200.BandSet", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-486), 26);
      int[] intArray0 = new int[1];
      intArray0[0] = 26;
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("ethoddRef", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[3];
      intArray0[2] = 2;
      try { 
        bcBands0.parseCPUTF8References("org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      try { 
        bcBands0.parseCPUTF8References("a,q1OQ", (InputStream) sequenceInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References((String) null, (InputStream) null, bHSDCodec0, (-27));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      try { 
        bcBands0.parseCPUTF8References("wS(AYNsv--fO4:8;shp", (InputStream) pipedInputStream0, bHSDCodec0, 103);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPUTF8References("", (InputStream) byteArrayInputStream0, bHSDCodec0, 1744);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        cpBands0.parseCPStringReferences("wy@5*n*h)w*GaR8[", mockFileInputStream0, bHSDCodec0, (-2769));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      try { 
        cpBands0.parseCPStringReferences("wy@5*n*h)w*GaR8[", mockFileInputStream0, bHSDCodec0, (-3142));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      try { 
        cpBands0.parseCPStringReferences(".J57IF}7?6(oI>I[", byteArrayInputStream0, bHSDCodec0, 255);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        bcBands0.parseCPSignatureReferences("P/", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      try { 
        cpBands0.parseCPSignatureReferences("", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPSignatureReferences("_`o0", byteArrayInputStream0, bHSDCodec0, (-128));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      try { 
        bcBands0.parseCPSignatureReferences("", pipedInputStream0, bHSDCodec0, 196);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPSignatureReferences("", byteArrayInputStream0, bHSDCodec0, 9);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseCPMethodRefReferences("", mockFileInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseCPMethodRefReferences("=($Sff", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPLongReferences((String) null, mockFileInputStream0, bHSDCodec0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("", byteArrayInputStream0, bHSDCodec0, (byte) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        cpBands0.parseCPInterfaceMethodRefReferences("", mockFileInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("NK-uP/:t", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPIntReferences("ufl%ao}phz'PYDnl", (InputStream) null, bHSDCodec0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("U", byteArrayInputStream0, bHSDCodec0, (-247));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-48), 862);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("Hf&^6f_", byteArrayInputStream0, bHSDCodec0, 307);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        bcBands0.parseCPFloatReferences("method", pipedInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseCPFieldRefReferences("", mockFileInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        bcBands0.parseCPFieldRefReferences("E(Ta1sBBD=Kw&T 6", byteArrayInputStream0, bHSDCodec0, 95);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDoubleReferences("(L!-}.Zf", byteArrayInputStream0, bHSDCodec0, (-1117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        bcBands0.parseCPDoubleReferences("\"G\">N", pipedInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPDoubleReferences("o($S7ff ", byteArrayInputStream0, bHSDCodec0, 32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDescriptorReferences("%i.*", byteArrayInputStream0, bHSDCodec0, (-1254));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPDescriptorReferences("%i.*", byteArrayInputStream0, bHSDCodec0, 2629);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences("Mvq{j^B&v@lE@", byteArrayInputStream0, bHSDCodec0, (-3142));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      try { 
        cpBands0.parseCPClassReferences("I&.,bNUa2Mw{aG+?a", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[10][6];
      int[] intArray1 = new int[3];
      intArray1[2] = (int) (byte) (-1);
      intArray0[0] = intArray1;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        bcBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("", (InputStream) null, bHSDCodec0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      try { 
        bcBands0.decodeBandInt("dyQu~Ru|0j", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      try { 
        bcBands0.decodeBandInt("Expected an interface instead of ", (InputStream) pipedInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      String[] stringArray0 = new String[4];
      bcBands0.parseReferences("O~xQ_{n3'U5Z", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) null, intArray0, (BHSDCodec) null, (BHSDCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.decodeBandInt("", (InputStream) byteArrayInputStream0, bHSDCodec0, 2013);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("", (InputStream) byteArrayInputStream0, bHSDCodec0, 2013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = bcBands0.decodeBandInt((String) null, (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("", (InputStream) byteArrayInputStream0, bHSDCodec0, (-3153));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("ConstantValue", (InputStream) byteArrayInputStream0, bHSDCodec0, (int) (byte)41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      int[] intArray0 = bcBands0.decodeBandInt("[B#1lev", (InputStream) byteArrayInputStream0, bHSDCodec0, 2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = bcBands0.decodeBandInt((String) null, (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = bcBands0.decodeBandInt((String) null, (InputStream) mockFileInputStream0, bHSDCodec0, 0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[8][4];
      // Undeclared exception!
      try { 
        bcBands0.getReferences(intArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[1][0];
      String[] stringArray0 = new String[3];
      String[][] stringArray1 = bcBands0.getReferences(intArray0, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      String[] stringArray0 = cpBands0.getReferences(intArray0, (String[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences("I&.,bNUa2Mw{aG+?a", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CPClass[] cPClassArray0 = cpBands0.parseCPClassReferences("dyQu~Ru|0j", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences(".J57IF}7?6(oI>I[", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      int[] intArray0 = new int[6];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPSignatureReferences("", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0);
      assertEquals(6, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = cpBands0.parseCPSignatureReferences("", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences((String) null, byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      CPUTF8[] cPUTF8Array0 = bcBands0.parseCPSignatureReferences("", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDescriptorReferences(":i", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      CPNameAndType[] cPNameAndTypeArray0 = bcBands0.parseCPDescriptorReferences("", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPNameAndTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("bc_doubleref", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CPFieldRef[] cPFieldRefArray0 = bcBands0.parseCPFieldRefReferences("%i.*", pipedInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPFieldRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPMethodRefReferences("k :}mE,oRli|XT$cT'*", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CPMethodRef[] cPMethodRefArray0 = bcBands0.parseCPMethodRefReferences("wy@5*n*h)w*GaR8[", mockFileInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences((String) null, byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      CPInterfaceMethodRef[] cPInterfaceMethodRefArray0 = bcBands0.parseCPInterfaceMethodRefReferences("Something has gone wrong during parsing references, index = ", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPInterfaceMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPStringReferences("", byteArrayInputStream0, bHSDCodec0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      CPString[] cPStringArray0 = cpBands0.parseCPStringReferences("", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("Wrly", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[1];
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPUTF8References("wS(AYNsv--fO4:8;shp", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
      assertEquals(1, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("y-@MP!HUUfnFie|", (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      CPUTF8[] cPUTF8Array0 = bcBands0.parseCPUTF8References((String) null, (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("~D", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDoubleReferences("", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CPDouble[] cPDoubleArray0 = bcBands0.parseCPDoubleReferences("o($S7ff", (InputStream) null, bHSDCodec0, 0);
      assertEquals(0, cPDoubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[4];
      intArray0[2] = 1;
      String[] stringArray0 = new String[0];
      try { 
        bcBands0.parseReferences("Z9", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Something has gone wrong during parsing references, index = 0, array size = 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[5];
      bcBands0.parseReferences("", (InputStream) pipedInputStream0, bHSDCodec0, intArray0, stringArray0);
      //  // Unstable assertion: assertEquals(1, bHSDCodec0.lastBandLength);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      long[][] longArray0 = cpBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) null, intArray0, bHSDCodec0, bHSDCodec0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[4];
      long[][] longArray0 = bcBands0.parseFlags("n!#')LJwj52cc", (InputStream) pipedInputStream0, intArray0, bHSDCodec0, true);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("wy@5*n*h)w*GaR8[", (InputStream) mockFileInputStream0, (int[]) null, bHSDCodec0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags((String) null, (InputStream) null, 1245, bHSDCodec0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 2, bHSDCodec0, false);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      bcBands0.decodeBandInt("t{3X;Fi8.2,_", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CPFloat[] cPFloatArray0 = bcBands0.parseCPFloatReferences("~vyiw!", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPFloatArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 1009, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPMethodRefReferences("k :}mE,oRli|XT$cT'*", byteArrayInputStream0, bHSDCodec0, (byte) (-52));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      long[][] longArray0 = cpBands0.parseFlags(".J57IF}7?6(oI>I[", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BHSDCodec bHSDCodec1 = Codec.BYTE1;
      long[] longArray0 = bcBands0.parseFlags("o($S7ff", (InputStream) null, 0, bHSDCodec0, bHSDCodec1);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 1, bHSDCodec0, bHSDCodec0);
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, 2, bHSDCodec0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      // Undeclared exception!
      try { 
        bcBands0.unpack((InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      String[] stringArray0 = new String[3];
      bcBands0.parseReferences(".J57IF}7?6(oI>I[", (InputStream) byteArrayInputStream0, bHSDCodec0, 1, stringArray0);
      assertEquals(5, byteArrayInputStream0.available());
  }
}
