/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:46:23 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.DeltaInputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DeltaDecoder_ESTest extends DeltaDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      coder0.properties = byteArray0;
      Object object0 = deltaDecoder0.getOptionsFromCoder(coder0, (InputStream) null);
      assertEquals(218, object0);
      
      byte[] byteArray1 = deltaDecoder0.getOptionsAsProperties(object0);
      assertArrayEquals(new byte[] {(byte) (-39)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      // Undeclared exception!
      try { 
        deltaDecoder0.getOptionsFromCoder((Coder) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.DeltaDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("shaded.org.apache.commons.io.filefilter.CanReadFileFilter");
      Integer integer0 = new Integer(2059);
      try { 
        deltaDecoder0.encode(mockFileOutputStream0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Delta distance must be in the range [1, 256]: 2059
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.DeltaDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        deltaDecoder0.decode("", byteArrayInputStream0, (-2496L), (Coder) null, byteArray0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.DeltaDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        deltaDecoder0.decode("FUB*CspA", (InputStream) null, 1512L, coder0, byteArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.DeltaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      Object object0 = deltaDecoder0.getOptionsFromCoder(coder0, (InputStream) null);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DeltaInputStream deltaInputStream0 = (DeltaInputStream)deltaDecoder0.decode("=", pipedInputStream0, 1, coder0, coder0.properties, 1);
      assertEquals(1, DeltaInputStream.DISTANCE_MIN);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      OutputStream outputStream0 = deltaDecoder0.encode((OutputStream) null, (Object) null);
      assertNotNull(outputStream0);
  }
}
