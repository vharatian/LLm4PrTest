/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:50:50 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.tukaani.xz.ArrayCache;
import org.tukaani.xz.FilterOptions;
import org.tukaani.xz.FinishableOutputStream;
import org.tukaani.xz.LZMA2Options;
import org.tukaani.xz.LZMAInputStream;
import org.tukaani.xz.XZOutputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LZMADecoder_ESTest extends LZMADecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 18);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("Dictionary larger than 4GiB maximum size used in ", (InputStream) null, 8L, coder0, byteArray0, 8214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStream outputStream0 = lZMADecoder0.encode(byteArrayOutputStream0, byteArrayOutputStream0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[18];
      coder0.properties = byteArray0;
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LZMAInputStream lZMAInputStream0 = (LZMAInputStream)lZMADecoder0.decode("V)3w", byteArrayInputStream0, (byte)127, coder0, coder0.decompressionMethodId, 2143813632);
      assertEquals(2147483632, LZMAInputStream.DICT_SIZE_MAX);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      coder0.properties = byteArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(399);
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // lc + lp must not exceed 4: 5 + 0
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Integer integer0 = new Integer(127);
      try { 
        lZMADecoder0.getOptionsAsProperties(integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 127 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Integer integer0 = new Integer(4);
      try { 
        lZMADecoder0.encode((OutputStream) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 4 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOptions[] filterOptionsArray0 = new FilterOptions[1];
      filterOptionsArray0[0] = (FilterOptions) lZMA2Options0;
      ArrayCache arrayCache0 = new ArrayCache();
      XZOutputStream xZOutputStream0 = new XZOutputStream(byteArrayOutputStream0, filterOptionsArray0, arrayCache0);
      XZOutputStream xZOutputStream1 = new XZOutputStream(xZOutputStream0, filterOptionsArray0[0]);
      FinishableOutputStream finishableOutputStream0 = lZMA2Options0.getOutputStream((FinishableOutputStream) xZOutputStream1);
      // Undeclared exception!
      lZMADecoder0.encode(finishableOutputStream0, finishableOutputStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("", (InputStream) null, 4181L, coder0, byteArray0, 1762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        lZMADecoder0.decode("!e!", sequenceInputStream0, 265L, coder0, coder0.properties, 1924905915);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte) (-128), (byte)0}, byteArray0);
      
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(coder0.properties);
      Object object1 = lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
      byte[] byteArray1 = lZMADecoder0.getOptionsAsProperties(object1);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte) (-128), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(coder0.properties);
      try { 
        lZMADecoder0.decode("w%W@is_ij", byteArrayInputStream0, 1904, coder0, coder0.properties, 1904);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 8214 kb of memory would be needed; limit was 1904 kb. If the file is not corrupt, consider increasing the memory limit.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      coder0.properties = byteArray0;
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(coder0.properties);
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      try { 
        lZMADecoder0.decode("", byteArrayInputStream0, (byte) (-1), coder0, coder0.properties, (byte)127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Dictionary larger than 4GiB maximum size used in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Object object0 = new Object();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(object0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        lZMADecoder0.decode("Y9M`pDw]Yy#", byteArrayInputStream0, (-3231L), coder0, coder0.properties, 8388608);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Uncompressed size is too big
         //
         verifyException("org.tukaani.xz.LZMAInputStream", e);
      }
  }
}
