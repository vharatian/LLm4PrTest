/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:48:41 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.ArrayCache;
import org.tukaani.xz.LZMA2InputStream;
import org.tukaani.xz.LZMA2Options;
import org.tukaani.xz.LZMAOutputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LZMA2Decoder_ESTest extends LZMA2Decoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Integer integer0 = new Integer((byte)0);
      byte[] byteArray0 = lZMA2Decoder0.getOptionsAsProperties(integer0);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      byte[] byteArray0 = lZMA2Decoder0.getOptionsAsProperties((Object) null);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMA2Decoder0.decode("BT1LB/gXAbl8$\"V]W=", (InputStream) null, (byte)97, coder0, byteArray0, 8296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[4];
      coder0.properties = byteArray0;
      Object object0 = lZMA2Decoder0.getOptionsFromCoder(coder0, (InputStream) null);
      assertEquals(4096, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[4];
      coder0.properties = byteArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2188);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      LZMA2InputStream lZMA2InputStream0 = (LZMA2InputStream)lZMA2Decoder0.decode("iLY8>T}?'.Z>DP", pushbackInputStream0, 1L, coder0, byteArray0, 805306368);
      assertEquals(4096, LZMA2InputStream.DICT_SIZE_MIN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        lZMA2Decoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Integer integer0 = new Integer(1836);
      try { 
        lZMA2Decoder0.encode(byteArrayOutputStream0, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 1836 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      OutputStream outputStream0 = lZMA2Decoder0.encode((OutputStream) null, (Object) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(outputStream0);
      lZMA2Decoder0.encode(objectOutputStream0, (Object) null);
      // Undeclared exception!
      lZMA2Decoder0.encode((OutputStream) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      Coder coder0 = new Coder();
      // Undeclared exception!
      try { 
        lZMA2Decoder0.decode("Unsupported LZMA2 property bits", byteArrayInputStream0, 0, coder0, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMA2Decoder0.decode("", (InputStream) null, 9L, coder0, byteArray0, 2481);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      byte[] byteArray0 = lZMA2Decoder0.getOptionsAsProperties((Object) null);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)40;
      coder0.properties = byteArray1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1922), (-1922));
      try { 
        lZMA2Decoder0.decode("", byteArrayInputStream0, (-1922), coder0, byteArray0, (-1618));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported dictionary size -1
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMA2Decoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dictionary larger than 4GiB maximum size
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-79), 14);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      try { 
        lZMA2Decoder0.decode((String) null, byteArrayInputStream0, (byte) (-79), coder0, byteArray0, (byte) (-79));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported LZMA2 property bits
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      byte[] byteArray0 = lZMA2Decoder0.getOptionsAsProperties(lZMA2Decoder0);
      Coder coder0 = new Coder();
      coder0.properties = byteArray0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        lZMA2Decoder0.decode((String) null, pipedInputStream0, 255, coder0, coder0.properties, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 8296 kb of memory would be needed; limit was 255 kb. If the file is not corrupt, consider increasing the memory limit.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W740m<M");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      ArrayCache arrayCache0 = new ArrayCache();
      LZMAOutputStream lZMAOutputStream0 = new LZMAOutputStream(mockPrintStream0, lZMA2Options0, true, arrayCache0);
      OutputStream outputStream0 = lZMA2Decoder0.encode(lZMAOutputStream0, lZMA2Options0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      // Undeclared exception!
      try { 
        lZMA2Decoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Integer integer0 = new Integer((-1117));
      byte[] byteArray0 = lZMA2Decoder0.getOptionsAsProperties(integer0);
      assertArrayEquals(new byte[] {(byte)39}, byteArray0);
  }
}
