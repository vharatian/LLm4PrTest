/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:44:13 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.CoderBase;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.ARMOptions;
import org.tukaani.xz.ArrayCache;
import org.tukaani.xz.LZMA2Options;
import org.tukaani.xz.LZMAOutputStream;
import org.tukaani.xz.SPARCOptions;
import org.tukaani.xz.XZOutputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Coders_ESTest extends Coders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Deflater deflater0 = new Deflater((byte)2, false);
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(byteArrayOutputStream0, deflater0, 136, false);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderOutputStream0.write(byteArray0, (-2740), 136);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      OutputStream outputStream0 = coders_CopyDecoder0.encode((OutputStream) null, (Object) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U^adWWu@Qc=X0&ln5", false);
      Deflater deflater0 = new Deflater();
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockFileOutputStream0, deflater0, true);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      coders_BZIP2Decoder0.encode(coders_DeflateDecoder_DeflateDecoderOutputStream0, deflaterOutputStream0);
      assertEquals(31785221, deflater0.getAdler());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ARMOptions aRMOptions0 = new ARMOptions();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(aRMOptions0);
      OutputStream outputStream0 = coders_BCJDecoder0.encode((OutputStream) null, (Object) null);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA;
      CoderBase coderBase0 = Coders.findByMethod(sevenZMethod0);
      assertNotNull(coderBase0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GY&JdrdB");
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      ArrayCache arrayCache0 = ArrayCache.getDummyCache();
      LZMAOutputStream lZMAOutputStream0 = new LZMAOutputStream(mockFileOutputStream0, lZMA2Options0, 4, arrayCache0);
      Deflater deflater0 = new Deflater();
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(lZMAOutputStream0, deflater0, true);
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA2;
      Object object0 = new Object();
      OutputStream outputStream0 = Coders.addEncoder(deflaterOutputStream0, sevenZMethod0, object0);
      // Undeclared exception!
      Coders.addEncoder(outputStream0, sevenZMethod0, deflater0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // method doesn't support writing
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.CoderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Coders.addDecoder("#~cRpNwh.", mockFileInputStream0, 0L, (Coder) null, byteArray0, 687);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        Coders.addEncoder((OutputStream) null, (SevenZMethod) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      try { 
        Coders.addDecoder("", pipedInputStream0, 2892L, coder0, byteArray0, (-2652));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null used in 
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      coder0.decompressionMethodId = byteArray0;
      InputStream inputStream0 = Coders.addDecoder("js20)Zm^9e\"fUY'B]I", sequenceInputStream0, 656L, coder0, byteArray0, 47);
      assertSame(sequenceInputStream0, inputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SPARCOptions sPARCOptions0 = new SPARCOptions();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(sPARCOptions0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Inflater inflater0 = new Inflater();
      Coder coder0 = new Coder();
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(byteArrayInputStream0, inflater0, 1129);
      InputStream inputStream0 = coders_BCJDecoder0.decode("-S", inflaterInputStream0, (byte) (-1), coder0, byteArray0, (byte) (-29));
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(mockFileInputStream0);
      Inflater inflater0 = new Inflater(false);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read(byteArray0, (int) (byte) (-38), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(mockFileInputStream0);
      Inflater inflater0 = new Inflater();
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(dataInputStream0);
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, (Inflater) null);
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(82);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pipedInputStream0);
      Inflater inflater0 = new Inflater();
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      coders_DeflateDecoder_DeflateDecoderInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.tukaani.xz.PowerPCOptions");
      Deflater deflater0 = new Deflater(1);
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockFileOutputStream0, deflater0);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      byte[] byteArray0 = new byte[5];
      coders_DeflateDecoder_DeflateDecoderOutputStream0.write(byteArray0, (int) (byte)0, 0);
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U^adWWu@Qc=X0&ln5", false);
      Deflater deflater0 = new Deflater();
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockFileOutputStream0, deflater0, false);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      coders_DeflateDecoder_DeflateDecoderOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      OutputStream outputStream0 = coders_DeflateDecoder0.encode(pipedOutputStream0, aES256SHA256Decoder0);
      XZOutputStream xZOutputStream0 = new XZOutputStream(outputStream0, lZMA2Options0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(196);
      Coder coder0 = new Coder();
      InputStream inputStream0 = coders_CopyDecoder0.decode("q4g?`WV1^{qi{+I_-==", pipedInputStream0, (-1L), coder0, (byte[]) null, 196);
      assertSame(inputStream0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      Coder coder0 = new Coder();
      // Undeclared exception!
      try { 
        coders_DeflateDecoder0.decode("BCJ filter used in ", (InputStream) null, (-1128L), coder0, (byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = (Deflate64CompressorInputStream)coders_Deflate64Decoder0.decode("org.tukaani.xz.BCJOptions", (InputStream) null, 0L, coder0, byteArray0, (-1535));
      assertEquals(0L, deflate64CompressorInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      try { 
        coders_BZIP2Decoder0.decode("Expected uncompressed size (", pipedInputStream0, (-849L), coder0, byteArray0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, aES256SHA256Decoder0);
      assertNull(outputStream0);
  }
}
