/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:41:49 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.CoderBase;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.sevenz.LZMA2Decoder;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.X86Options;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CoderBase_ESTest extends CoderBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = CoderBase.numberOptionOrDefault(integer0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      int int0 = CoderBase.numberOptionOrDefault(integer0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tZw|a>3x>r_k");
      byte[] byteArray0 = deltaDecoder0.getOptionsAsProperties(mockFileOutputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      X86Options x86Options0 = new X86Options();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(x86Options0);
      OutputStream outputStream0 = coders_BCJDecoder0.encode((OutputStream) null, x86Options0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[8];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 0 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      Coder coder0 = new Coder();
      // Undeclared exception!
      try { 
        lZMA2Decoder0.getOptionsFromCoder(coder0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMA2Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      X86Options x86Options0 = new X86Options();
      // Undeclared exception!
      try { 
        coders_BZIP2Decoder0.encode((OutputStream) null, x86Options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      Integer integer0 = Integer.valueOf((-141));
      // Undeclared exception!
      try { 
        coders_DeflateDecoder0.encode((OutputStream) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      Object object0 = new Object();
      byte[] byteArray0 = coders_BZIP2Decoder0.getOptionsAsProperties(object0);
      LZMA2Decoder lZMA2Decoder0 = new LZMA2Decoder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1668);
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      Coder coder0 = new Coder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Object object1 = deltaDecoder0.getOptionsFromCoder(coder0, byteArrayInputStream0);
      try { 
        lZMA2Decoder0.encode(byteArrayOutputStream0, object1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 1 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      int int0 = CoderBase.numberOptionOrDefault(coders_Deflate64Decoder0, (-1023));
      assertEquals((-1023), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      Integer integer0 = new Integer(1752);
      boolean boolean0 = coders_BZIP2Decoder0.canAcceptOptions(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      boolean boolean0 = coders_BZIP2Decoder0.canAcceptOptions((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        coders_Deflate64Decoder0.encode((OutputStream) null, dataInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // method doesn't support writing
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.CoderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      Coder coder0 = new Coder();
      Object object0 = coders_Deflate64Decoder0.getOptionsFromCoder(coder0, sequenceInputStream0);
      assertNull(object0);
  }
}
