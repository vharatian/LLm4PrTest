/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 05:54:55 GMT 2025
 */

package org.apache.commons.compress.compressors.deflate64;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HuffmanDecoder_ESTest extends HuffmanDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(huffmanDecoder0);
      
      int int0 = huffmanDecoder0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(6, int0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)27, (byte)27, (byte)27}, byteArray0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, 545, (int) (byte) (-94));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-94), (byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-94), (byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to read beyond memory: dist=17
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte) (-80), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte) (-80), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(huffmanDecoder0);
      
      int int0 = huffmanDecoder0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(2, int0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)25, (byte)57, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)71;
      byteArray0[4] = (byte) (-22);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)0, (byte) (-22), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)0, (byte) (-22), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal LEN / NLEN values
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)124, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)124, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal LEN / NLEN values
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(huffmanDecoder0);
      
      huffmanDecoder0.close();
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.getBytesRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder((InputStream) null);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (-2590), (-2590));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, 272, 3345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 272
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(huffmanDecoder0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        huffmanDecoder0.decode(byteArray0, 53, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder((InputStream) null);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-888), (byte)63);
      assertEquals(7, byteArray0.length);
      assertEquals(63, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(63, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(huffmanDecoder0);
      
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(huffmanDecoder0);
      
      int int0 = huffmanDecoder0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        huffmanDecoder0.decode(byteArray0);
       //  fail("Expecting exception: EOFException");
       // Unstable assertion
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-4), (-1));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(huffmanDecoder0);
      
      int int0 = huffmanDecoder0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = huffmanDecoder0.decode(byteArray0, 524318, 4);
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)85, (byte) (-109), (byte)28, (byte)0, (byte)85, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)85, (byte) (-109), (byte)28, (byte)0, (byte)85, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node doesn't exist in Huffman tree
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-11), (byte)36, (byte)36, (byte)36, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-11), (byte)36, (byte)36, (byte)36, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node doesn't exist in Huffman tree
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[3] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)54, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)0, (byte)54, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)28, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)28, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(huffmanDecoder0);
      
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      int int0 = huffmanDecoder0.available();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(54, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray0, 2, 0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte)50, (int) (byte)50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal LEN / NLEN values
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray0, (int) (byte)85, (int) (byte) (-94));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, 1449, 275);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unsupported compression: 3
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      int int0 = huffmanDecoder0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      int int0 = huffmanDecoder0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      long long0 = huffmanDecoder0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0, (int) (byte)0, 36);
      long long0 = huffmanDecoder0.getBytesRead();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(3L, long0);
  }
}
