/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:04:38 GMT 2025
 */

package org.apache.commons.compress.compressors.lz4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FramedLZ4CompressorOutputStream_ESTest extends FramedLZ4CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[9];
      framedLZ4CompressorOutputStream0.write(byteArray0, (int) (byte)109, (-1361));
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[6];
      framedLZ4CompressorOutputStream0.write(byteArray0, 1, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      int int0 = framedLZ4CompressorOutputStream_BlockSize0.getSize();
      assertEquals(65536, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      int int0 = framedLZ4CompressorOutputStream_BlockSize0.getIndex();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'QsmoaCTV*nb");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[113];
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write((int) (byte)37);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write((int) (byte)37);
      // Undeclared exception!
      framedLZ4CompressorOutputStream0.finish();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters1 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, true, false, (Parameters) null);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters1);
      framedLZ4CompressorOutputStream1.write(1400);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream1.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn(0, 0).when(parameters0).getMinBackReferenceLength();
      doReturn(65326, 65326).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(262070);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-196)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(82);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(262070);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(bufferedOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, (Parameters) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-1436)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(bufferedOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(pipedOutputStream0, (FramedLZ4CompressorOutputStream.Parameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(pipedOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("9EZf1@>ZY");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[76];
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write((int) (byte)8);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      framedLZ4CompressorOutputStream1.close();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 19, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, 2841, 262143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.finish();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.close();
      framedLZ4CompressorOutputStream0.finish();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream2.write((-1367));
      framedLZ4CompressorOutputStream2.close();
      assertNotSame(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"6@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, false, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream1, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream2.close();
      assertNotSame(framedLZ4CompressorOutputStream2, framedLZ4CompressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid lambda deserialization");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream1.close();
      assertNotSame(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"6@W-aI?}");
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(parameters0).getLazyMatching();
      doReturn(14, Integer.MIN_VALUE).when(parameters0).getLazyMatchingThreshold();
      doReturn(Integer.MIN_VALUE).when(parameters0).getMaxBackReferenceLength();
      doReturn(13).when(parameters0).getMaxCandidates();
      doReturn(Integer.MIN_VALUE).when(parameters0).getMaxLiteralLength();
      doReturn(Integer.MIN_VALUE, 13, 0).when(parameters0).getMaxOffset();
      doReturn(14, 14, Integer.MIN_VALUE, 1542).when(parameters0).getMinBackReferenceLength();
      doReturn(14).when(parameters0).getNiceBackReferenceLength();
      doReturn(14, 14).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, false, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters1 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, false, false, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters1);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream1, framedLZ4CompressorOutputStream_Parameters1);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream2.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed to find a block containing offset 2
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4/Z\"-@W-aI?}");
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.close();
      framedLZ4CompressorOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, false, true);
      String string0 = framedLZ4CompressorOutputStream_Parameters0.toString();
      assertEquals("LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum false, withBlockDependency true", string0);
  }
}
