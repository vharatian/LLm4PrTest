/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:34:08 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSmR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("/dp_]", "");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "No current 7z entry");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZArchiveEntry0.setAntiItem(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(153L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.closeArchiveEntry();
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, (-1129027987), (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile(", lastChapter=");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, ", lastChapter=");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, (int) (byte) (-70), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ks)AR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      ArrayList<SevenZMethodConfiguration> arrayList0 = new ArrayList<SevenZMethodConfiguration>();
      mockFileOutputStream0.close();
      sevenZOutputFile0.setContentMethods(arrayList0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[22];
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Zu7$%|o:ca%O%xWq}P");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      ArrayList<SevenZMethodConfiguration> arrayList0 = new ArrayList<SevenZMethodConfiguration>(36);
      sevenZOutputFile0.setContentMethods(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("W'O+6.}", "W'O+6.}");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<X");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[18];
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.putArchiveEntry(arjArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.arj.ArjArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      fileChannel0.close();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.createArchiveEntry((File) null, "gJ|oRs{bbOdsSAup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("ksfSR<X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<X");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      mockFileOutputStream0.close();
      sevenZOutputFile0.write(258);
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ksf)SH-X");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      sevenZOutputFile0.write((-146));
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&.4EY+T:z^}fx{NYSv");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      mockFileOutputStream0.close();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("rcount: ");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.close();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/\"asCwB");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, 17, 17);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[1];
      sevenZOutputFile0.write(byteArray0, 102, (-892));
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("ksfSR<#X", "ksfSR<#X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<#X");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<#X");
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(115L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(32L, fileChannel0.position());
      assertEquals(194L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSmR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("", "ksfSmR<#X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZArchiveEntry0.setLastModifiedDate((Date) null);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "0!L@dH");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(79L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSmR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("B<?_AJgSivVY", "ksfSmR<#X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "B<?_AJgSivVY");
      sevenZArchiveEntry0.setLastModifiedDate((Date) null);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(76L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("ksfSR<X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<X");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "z9ec");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(109L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("ksf)H-X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksf)H-X");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(32L, fileChannel0.position());
      assertEquals(90L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<#X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("ksfSR<#X", "ksfSR<#X");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<#X");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "ksfSR<#X");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.finish();
      assertEquals(119L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ex1eual uNsuported");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("Ex1eual uNsuported", "Ex1eual uNsuported");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "Ex1eual uNsuported");
      sevenZArchiveEntry0.setHasCreationDate(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(112L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U6");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAntiItem(true);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.finish();
      assertEquals(32L, fileChannel0.position());
      assertEquals(61L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Zu7$%|o:ca%O%xWq}P");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      SevenZArchiveEntry sevenZArchiveEntry1 = sevenZOutputFile0.createArchiveEntry(mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry1);
      sevenZOutputFile0.write(258);
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(2034458192);
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Vector<SevenZMethodConfiguration> vector0 = new Vector<SevenZMethodConfiguration>(1023, (-2019));
      sevenZArchiveEntry0.setContentMethods(vector0);
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(2034458192);
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.close();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("This archive has already been finished");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[0];
      sevenZOutputFile0.write(byteArray0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)SH-X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksf)H-X", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.close();
      sevenZOutputFile0.close();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ks)AR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[22];
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.write(byteArray0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ksfSR<X");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(258);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE64;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
      assertEquals(32L, fileChannel0.position());
  }
}
