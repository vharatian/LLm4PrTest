/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:28:06 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.util.Date;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZArchiveEntry_ESTest extends SevenZArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc(1);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals(1L, sevenZArchiveEntry0.getCrcValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setWindowsAttributes((-1073741823));
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-1073741823), sevenZArchiveEntry1.getWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime(0L);
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(date0);
      assertEquals(116444736010000000L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime((-1L));
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(date0);
      assertEquals((-10000L), long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setDirectory(true);
      boolean boolean0 = sevenZArchiveEntry0.isDirectory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasStream(true);
      boolean boolean0 = sevenZArchiveEntry0.hasStream();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setWindowsAttributes(1343);
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals(1343, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setWindowsAttributes((-2147483647));
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setSize(4L);
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setSize((-1636L));
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals((-1636L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("oR|(:G6}(G:?im%");
      String string0 = sevenZArchiveEntry0.getName();
      assertEquals("oR|(:G6}(G:?im%", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      FileTime fileTime0 = FileTime.fromMillis(1663L);
      sevenZArchiveEntry0.setLastModifiedTime(fileTime0);
      FileTime fileTime1 = sevenZArchiveEntry0.getLastModifiedTime();
      assertSame(fileTime1, fileTime0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime(2564L);
      sevenZArchiveEntry0.setLastModifiedDate(date0);
      assertTrue(sevenZArchiveEntry0.getHasLastModifiedDate());
      
      Date date1 = sevenZArchiveEntry0.getLastModifiedDate();
      assertEquals("Mon Jan 01 00:00:00 GMT 1601", date1.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime(2505L);
      sevenZArchiveEntry0.setLastModifiedDate(date0);
      boolean boolean0 = sevenZArchiveEntry0.getHasLastModifiedDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FileTime fileTime0 = FileTime.from(instant0);
      sevenZArchiveEntry0.setCreationTime(fileTime0);
      boolean boolean0 = sevenZArchiveEntry0.getHasCreationDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCrc(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasCrc();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasAccessDate(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasAccessDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCreationDate(true);
      Date date0 = sevenZArchiveEntry0.getCreationDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate(1619, 991, 2400);
      sevenZArchiveEntry0.setCreationDate((Date) mockDate0);
      Date date0 = sevenZArchiveEntry0.getCreationDate();
      assertTrue(date0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrcValue(1453L);
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals(1453, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc((-2141400123));
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals((-2141400123), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      PriorityQueue<SevenZMethodConfiguration> priorityQueue0 = new PriorityQueue<SevenZMethodConfiguration>(3117);
      sevenZArchiveEntry0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) priorityQueue0);
      Iterable<? extends SevenZMethodConfiguration> iterable0 = sevenZArchiveEntry0.getContentMethods();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedSize(1L);
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedSize((-1427L));
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals((-1427L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrc(3891);
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals(3891L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrcValue((-4856L));
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals((-4856), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasAccessDate(true);
      FileTime fileTime0 = sevenZArchiveEntry0.getAccessTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate((-1555L));
      sevenZArchiveEntry0.setAccessDate((Date) mockDate0);
      Date date0 = sevenZArchiveEntry0.getAccessDate();
      assertTrue(date0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.setContentMethods((SevenZMethodConfiguration[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        SevenZArchiveEntry.javaTimeToNtfsTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAccessTime((FileTime) null);
      assertFalse(sevenZArchiveEntry0.getHasAccessDate());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getAccessTime();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      FileTime fileTime0 = FileTime.from(902L, timeUnit0);
      sevenZArchiveEntry0.setAccessTime(fileTime0);
      FileTime fileTime1 = sevenZArchiveEntry0.getAccessTime();
      assertSame(fileTime1, fileTime0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setLastModifiedTime((FileTime) null);
      assertFalse(sevenZArchiveEntry0.getHasLastModifiedDate());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getLastModifiedTime();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasLastModifiedDate(true);
      FileTime fileTime0 = sevenZArchiveEntry0.getLastModifiedTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FileTime fileTime0 = FileTime.from(instant0);
      sevenZArchiveEntry0.setCreationTime(fileTime0);
      FileTime fileTime1 = sevenZArchiveEntry0.getCreationTime();
      assertSame(fileTime1, fileTime0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getCreationTime();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZArchiveEntry0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) treeSet0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[6];
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[1];
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_SPARC_FILTER;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      sevenZMethodConfigurationArray0[0] = sevenZMethodConfiguration0;
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray1 = new SevenZMethodConfiguration[1];
      sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray1);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZArchiveEntry0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) treeSet0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[5];
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[1];
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE64;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      sevenZMethodConfigurationArray0[0] = sevenZMethodConfiguration0;
      sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[1];
      sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      // Undeclared exception!
      try { 
        sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[1];
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setContentMethods(sevenZMethodConfigurationArray0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setCompressedSize(5L);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setSize((-727L));
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-727L), sevenZArchiveEntry1.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrcValue(352L);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrcValue((-176L));
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-176L), sevenZArchiveEntry0.getCrcValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setHasWindowsAttributes(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry1.getHasWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setAccessDate(91L);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setLastModifiedDate(0L);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setCreationDate(6L);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate(191L);
      sevenZArchiveEntry0.setAccessDate((Date) mockDate0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry0.getHasAccessDate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setHasLastModifiedDate(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate();
      sevenZArchiveEntry1.setCreationDate((Date) mockDate0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry1.getHasCreationDate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setAntiItem(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry1.isAntiItem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setDirectory(true);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setName("");
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Object object0 = new Object();
      boolean boolean0 = sevenZArchiveEntry0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry");
      sevenZArchiveEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) null);
      assertFalse(sevenZArchiveEntry0.getHasCreationDate());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCreationTime((FileTime) null);
      assertFalse(sevenZArchiveEntry0.getHasCreationDate());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getAccessDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasWindowsAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2146695579), (-2146695579), (-2146695579), (-2146695579), (-2146695579));
      // Undeclared exception!
      try { 
        SevenZArchiveEntry.javaTimeToNtfsTime(mockDate0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasCrc();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.hasStream();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasLastModifiedDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAntiItem(true);
      boolean boolean0 = sevenZArchiveEntry0.isAntiItem();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Iterable<? extends SevenZMethodConfiguration> iterable0 = sevenZArchiveEntry0.getContentMethods();
      assertNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethodConfiguration[] sevenZMethodConfigurationArray0 = new SevenZMethodConfiguration[1];
      sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc(606);
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals(606L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = sevenZArchiveEntry0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrcValue((-2561L));
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals((-2561L), long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getCreationDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setWindowsAttributes((-2147483647));
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-2147483647), sevenZArchiveEntry0.getWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCreationDate(true);
      FileTime fileTime0 = sevenZArchiveEntry0.getCreationTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrc(2400);
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals(2400, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasAccessDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasCreationDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrcValue((-915L));
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals((-915L), long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasStream(true);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry0.hasStream());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasAccessDate(true);
      Date date0 = sevenZArchiveEntry0.getAccessDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("");
      String string0 = sevenZArchiveEntry0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCrc(true);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry0.getHasCrc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasWindowsAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.isAntiItem();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasLastModifiedDate(true);
      Date date0 = sevenZArchiveEntry0.getLastModifiedDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.isDirectory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getLastModifiedDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }
}
