/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:35:39 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class X000A_NTFS_ESTest extends X000A_NTFS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getLocalFileDataData();
      x000A_NTFS0.parseFromLocalFileData(byteArray0, 0, 32);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      FileTime fileTime0 = FileTime.from(instant0);
      x000A_NTFS0.setCreateFileTime(fileTime0);
      x000A_NTFS0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate(2930, 1557, 1557);
      x000A_NTFS0.setAccessJavaTime(mockDate0);
      x000A_NTFS0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate(2930, 1557, 1557);
      Instant instant0 = mockDate0.toInstant();
      FileTime fileTime0 = FileTime.from(instant0);
      x000A_NTFS0.setModifyFileTime(fileTime0);
      x000A_NTFS0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getCentralDirectoryData();
      x000A_NTFS0.parseFromCentralDirectoryData(byteArray0, (byte) (-3), (byte)21);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate(2930, 1557, 1557);
      Instant instant0 = mockDate0.toInstant();
      FileTime fileTime0 = FileTime.from(instant0);
      x000A_NTFS0.setModifyFileTime(fileTime0);
      Date date0 = x000A_NTFS0.getModifyJavaTime();
      assertEquals("Wed Jan 04 00:00:00 GMT 4964", date0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate(0, 8, 0);
      x000A_NTFS0.setModifyJavaTime(mockDate0);
      FileTime fileTime0 = x000A_NTFS0.getModifyFileTime();
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      x000A_NTFS0.setCreateJavaTime(date0);
      Date date1 = x000A_NTFS0.getCreateJavaTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      FileTime fileTime0 = FileTime.from(instant0);
      x000A_NTFS0.setCreateFileTime(fileTime0);
      FileTime fileTime1 = x000A_NTFS0.getCreateFileTime();
      assertTrue(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate();
      x000A_NTFS0.setAccessJavaTime(mockDate0);
      Date date0 = x000A_NTFS0.getAccessJavaTime();
      assertTrue(date0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate(0, 8, 0);
      x000A_NTFS0.setAccessJavaTime(mockDate0);
      FileTime fileTime0 = x000A_NTFS0.getAccessFileTime();
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-128);
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(byteArray0);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.toString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      // Undeclared exception!
      try { 
        x000A_NTFS0.parseFromLocalFileData((byte[]) null, 11, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getLocalFileDataData();
      // Undeclared exception!
      try { 
        x000A_NTFS0.parseFromLocalFileData(byteArray0, 32, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getCentralDirectoryData();
      // Undeclared exception!
      try { 
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray0, (byte)21, (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getLocalFileDataData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setCreateTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getCreateJavaTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getCentralDirectoryData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setAccessTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getAccessJavaTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setAccessTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getAccessFileTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setAccessTime(zipEightByteInteger0);
      X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
      // Undeclared exception!
      try { 
        x000A_NTFS0.equals(x000A_NTFS1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setCreateTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getCreateFileTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      x000A_NTFS0.setCreateTime((ZipEightByteInteger) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setAccessTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      x000A_NTFS0.setAccessTime((ZipEightByteInteger) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      x000A_NTFS0.setModifyTime((ZipEightByteInteger) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      FileTime fileTime0 = x000A_NTFS0.getAccessFileTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)59;
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(byteArray0);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      String string0 = x000A_NTFS0.toString();
      assertEquals("0x000A Zip Extra Field: Modify:[1601-01-01T00:00:00.0015104Z]  Access:[null]  Create:[null] ", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((BigInteger) null);
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
      // Undeclared exception!
      try { 
        x000A_NTFS0.getModifyJavaTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEightByteInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getCentralDirectoryData();
      x000A_NTFS0.parseFromLocalFileData(byteArray0, (-4), 37);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
      assertTrue(x000A_NTFS1.equals((Object)x000A_NTFS0));
      
      MockDate mockDate0 = new MockDate(1411L);
      x000A_NTFS0.setCreateJavaTime(mockDate0);
      boolean boolean0 = x000A_NTFS0.equals(x000A_NTFS1);
      assertFalse(x000A_NTFS1.equals((Object)x000A_NTFS0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
      assertTrue(x000A_NTFS1.equals((Object)x000A_NTFS0));
      
      MockDate mockDate0 = new MockDate(172, 172, 172, 172, 172);
      x000A_NTFS1.setAccessJavaTime(mockDate0);
      boolean boolean0 = x000A_NTFS0.equals(x000A_NTFS1);
      assertFalse(x000A_NTFS1.equals((Object)x000A_NTFS0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      X000A_NTFS x000A_NTFS1 = new X000A_NTFS();
      MockDate mockDate0 = new MockDate();
      x000A_NTFS0.setModifyJavaTime(mockDate0);
      boolean boolean0 = x000A_NTFS1.equals(x000A_NTFS0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      boolean boolean0 = x000A_NTFS0.equals(x000A_NTFS0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipShort zipShort0 = x000A_NTFS0.getLocalFileDataLength();
      boolean boolean0 = x000A_NTFS0.equals(zipShort0);
      assertFalse(boolean0);
      assertEquals(32, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = new byte[22];
      byteArray0[5] = (byte)1;
      x000A_NTFS0.parseFromLocalFileData(byteArray0, (byte)1, 5072);
      assertEquals(22, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getLocalFileDataData();
      x000A_NTFS0.parseFromLocalFileData(byteArray0, 8, 8);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Date date0 = x000A_NTFS0.getModifyJavaTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
      assertNotNull(zipEightByteInteger0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Date date0 = x000A_NTFS0.getAccessJavaTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      FileTime fileTime0 = x000A_NTFS0.getCreateFileTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      x000A_NTFS0.setCreateJavaTime((Date) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      Date date0 = x000A_NTFS0.getCreateJavaTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getCreateTime();
      x000A_NTFS0.setModifyTime(zipEightByteInteger0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      // Undeclared exception!
      try { 
        x000A_NTFS0.parseFromCentralDirectoryData((byte[]) null, 46, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipShort zipShort0 = x000A_NTFS0.getHeaderId();
      assertEquals(10, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      x000A_NTFS0.setAccessFileTime((FileTime) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      byte[] byteArray0 = x000A_NTFS0.getCentralDirectoryData();
      x000A_NTFS0.parseFromLocalFileData(byteArray0, 0, 8);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipShort zipShort0 = x000A_NTFS0.getCentralDirectoryLength();
      assertEquals(32, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      FileTime fileTime0 = x000A_NTFS0.getModifyFileTime();
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getAccessTime();
      assertNotNull(zipEightByteInteger0);
  }
}
