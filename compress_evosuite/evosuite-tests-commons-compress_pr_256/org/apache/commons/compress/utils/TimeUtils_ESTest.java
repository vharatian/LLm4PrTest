/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 23:37:46 GMT 2025
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import org.apache.commons.compress.utils.TimeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimeUtils_ESTest extends TimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime((-3805));
      FileTime fileTime1 = TimeUtils.truncateToHundredNanos(fileTime0);
      assertTrue(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, (-3805), (-398), 1);
      Instant instant0 = mockDate0.toInstant();
      FileTime fileTime0 = FileTime.from(instant0);
      long long0 = TimeUtils.fileTimeToNtfsTime(fileTime0);
      assertEquals(91394280600000000L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Date date0 = TimeUtils.ntfsTimeToDate((-3126L));
      FileTime fileTime0 = TimeUtils.dateToFileTime(date0);
      long long0 = TimeUtils.fileTimeToNtfsTime(fileTime0);
      assertEquals((-10000L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(1136);
      Date date0 = TimeUtils.fileTimeToDate(fileTime0);
      long long0 = TimeUtils.dateToNtfsTime(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = TimeUtils.ntfsTimeToDate((-3126L));
      long long0 = TimeUtils.dateToNtfsTime(date0);
      assertEquals((-10000L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.truncateToHundredNanos((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.ntfsTimeToFileTime((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.fileTimeToNtfsTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.dateToNtfsTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = TimeUtils.fileTimeToDate((FileTime) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.dateToFileTime((Date) null);
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1136, (-1917), 1136);
      long long0 = TimeUtils.dateToNtfsTime(mockDate0);
      assertEquals(403410240000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(0L);
      long long0 = TimeUtils.fileTimeToNtfsTime(fileTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.ntfsTimeToDate((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
}
