/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:17:51 GMT 2025
 */

package org.apache.commons.compress.archivers.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.FileSystemException;
import java.nio.file.InvalidPathException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.Stack;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Expander_ESTest extends Expander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("");
      File file0 = mockFile0.getAbsoluteFile();
      try { 
        expander0.expand("M|KC6SfqEn", file0, (File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: M|KC6SfqEn not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "org.apache.commons.compress.archivers.zip.ZipShort");
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand("fKA)W1iv;)Y\"B:dB", path0, (Path) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("EG+J[DY@Bq NcF", "7z", (File) mockFile0);
      try { 
        expander0.expand("7z", (File) mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "Archive contains more than 65535 entries.");
      MockFile mockFile1 = new MockFile("Archive contains more than 65535 entries.", "Archive contains more than 65535 entries.");
      try { 
        expander0.expand((File) mockFile0, (File) mockFile1);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[7];
      TarFile tarFile0 = new TarFile(byteArray0, false);
      expander0.expand(tarFile0, (Path) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expander expander0 = new Expander();
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(sequenceInputStream0);
      File file0 = MockFile.createTempFile("=4:", "=4:");
      Path path0 = file0.toPath();
      expander0.expand((ArchiveInputStream) jarArchiveInputStream0, path0);
      assertEquals(0L, jarArchiveInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      expander0.expand("tar", (SeekableByteChannel) fileChannel0, file0, closeableConsumer0);
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("/9pw?{6*9#", ":");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      expander0.expand("tar", (InputStream) mockFileInputStream0, file0, closeableConsumer0);
      assertEquals("/tmp/9pw?{6*9#0:", file0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("");
      byte[] byteArray0 = new byte[1];
      TarFile tarFile0 = new TarFile(byteArray0);
      expander0.expand(tarFile0, (File) mockFile0);
      assertEquals("", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expander expander0 = new Expander();
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(sequenceInputStream0);
      File file0 = MockFile.createTempFile("=4:", "=4:");
      expander0.expand((ArchiveInputStream) jarArchiveInputStream0, file0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expander expander0 = new Expander();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, (-1081492359));
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(tarArchiveInputStream0);
      MockFile mockFile0 = new MockFile("8/G^I6P");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) cpioArchiveInputStream0, path0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2022136942), (-2022136942));
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(byteArrayInputStream0);
      MockFile mockFile0 = new MockFile("/)#LIw45W;-");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) arArchiveInputStream0, path0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5z", "5z");
      Expander expander0 = new Expander();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand((ArchiveInputStream) jarArchiveInputStream0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(mockFileInputStream0);
      Path path0 = file0.toPath();
      try { 
        expander0.expand((ArchiveInputStream) cpioArchiveInputStream0, path0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ziv");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expander expander0 = new Expander();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      try { 
        expander0.expand((ArchiveInputStream) jarArchiveInputStream0, (File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Expander expander0 = new Expander();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(sequenceInputStream0, 16384);
      try { 
        expander0.expand((ArchiveInputStream) cpioArchiveInputStream0, (File) mockFile0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("archive contains unparseable zip64 extra field", "archive contains unparseable zip64 extra field");
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand(path0, path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile((File) null, "actual and claimed size don't match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile");
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand("actual and claimed size don't match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile", path0, path0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand((String) null, path0, path0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile(" pftlr_lXR");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand(" pftlr_lXR", (SeekableByteChannel) fileChannel0, (Path) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver:  pftlr_lXR not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8V", "8V");
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8V");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand("8V", (SeekableByteChannel) fileChannel0, path0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("len(");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (SeekableByteChannel) fileChannel0, path0, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Path path0 = file0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("7z", (SeekableByteChannel) fileChannel0, path0, closeableConsumer0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("()Ar");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("()Ar", (SeekableByteChannel) fileChannel0, (File) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: ()Ar not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tar");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("tar", (SeekableByteChannel) fileChannel0, (File) null, closeableConsumer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("LoD*AI");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("LoD*AI");
      // Undeclared exception!
      try { 
        expander0.expand("LoD*AI", (SeekableByteChannel) fileChannel0, (File) mockFile0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("zip", (SeekableByteChannel) fileChannel0, file0, closeableConsumer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("/9pw?{6*9#", "/9pw?{6*9#");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      try { 
        expander0.expand("/9pw?{6*9#", (SeekableByteChannel) fileChannel0, file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: /9pw?{6*9# not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        expander0.expand("tar", (SeekableByteChannel) fileChannel0, file0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      try { 
        expander0.expand("tar", (SeekableByteChannel) fileChannel0, file0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expander expander0 = new Expander();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (SeekableByteChannel) fileChannel0, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Expander expander0 = new Expander();
      try { 
        expander0.expand("zip", (SeekableByteChannel) fileChannel0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      try { 
        expander0.expand("7z", (SeekableByteChannel) fileChannel0, file0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("uv", "uv");
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("7z", (InputStream) byteArrayInputStream0, path0, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand("", (InputStream) null, path0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("`s", "`s");
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("`s", (InputStream) null, path0, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("tar", (InputStream) pipedInputStream0, path0, closeableConsumer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("", (InputStream) pipedInputStream0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver:  not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Expander expander0 = new Expander();
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(mockFileInputStream0);
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("zip", (InputStream) arArchiveInputStream0, file0, closeableConsumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current ar entry
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (InputStream) pipedInputStream0, (File) null, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Expander expander0 = new Expander();
      file0.delete();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("zip", (InputStream) mockFileInputStream0, file0, closeableConsumer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Expander expander0 = new Expander();
      try { 
        expander0.expand("a parameter cannot be negative: ", (InputStream) pipedInputStream0, (File) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: a parameter cannot be negative:  not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J6E");
      Expander expander0 = new Expander();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);
      try { 
        expander0.expand("7z", (InputStream) tarArchiveInputStream0, (File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 155, (byte)44);
      File file0 = MockFile.createTempFile("gd%.`C7 x5 }1|", "tar\u0000");
      // Undeclared exception!
      try { 
        expander0.expand("gd%.`C7 x5 }1|", (InputStream) byteArrayInputStream0, file0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Expander expander0 = new Expander();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, "tal");
      // Undeclared exception!
      try { 
        expander0.expand("tar", (InputStream) tarArchiveInputStream0, file0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-875), (byte)71);
      // Undeclared exception!
      try { 
        expander0.expand("zip", (InputStream) byteArrayInputStream0, file0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("tar", "tar");
      try { 
        expander0.expand("tar", (InputStream) pipedInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("{+jA+AyiHznY|z1g@;", "{+jA+AyiHznY|z1g@;");
      try { 
        expander0.expand("{+jA+AyiHznY|z1g@;", (File) mockFile0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tal");
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tal", "\u0000\u0000");
      // Undeclared exception!
      try { 
        expander0.expand("org.apache.commons.compress.archivers.examples.Expander", file0, (File) mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 49152);
      MockFile mockFile0 = new MockFile("Mode 0 only allowed in the trailer. Found entry name: ");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("+oZmT:&?j~]q)");
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2147483645), (byte) (-83));
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      expander0.expand((InputStream) byteArrayInputStream0, (File) mockFile0, closeableConsumer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) mockFileInputStream0, file0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Expander expander0 = new Expander();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      MockFile mockFile0 = new MockFile("Insensitive");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) dataInputStream0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-13), 49152);
      MockFile mockFile0 = new MockFile("Mode 0 only allowed in the trailer. Found entry name: ");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Expander expander0 = new Expander();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) dataInputStream0, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]q8h");
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1564);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(jarArchiveInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(arArchiveInputStream0);
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) bufferedInputStream0, (File) mockFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current ar entry
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-595), 476);
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Path path0 = file0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      expander0.expand("tar", (SeekableByteChannel) fileChannel0, path0, closeableConsumer0);
      assertTrue(fileChannel0.isOpen());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      File file0 = MockFile.createTempFile("zip", "zip");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      Expander expander0 = new Expander();
      Path path0 = file0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("zip", (SeekableByteChannel) fileChannel0, path0, closeableConsumer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7z", "7z");
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("7z", (SeekableByteChannel) fileChannel0, path0, closeableConsumer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("Mode 0 only allowed in the trailer. Found entry name: ", "Mode 0 only allowed in the trailer. Found entry name: ");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand("tar", (SeekableByteChannel) null, path0, closeableConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand("", path0, path0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver:  not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand("zip", path0, path0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      Path path0 = mockFile0.toPath();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      expander0.expand("zip", (InputStream) zipArchiveInputStream0, path0, closeableConsumer0);
      assertEquals(0L, zipArchiveInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Expander expander0 = new Expander();
      Enumeration<TarArchiveInputStream> enumeration0 = (Enumeration<TarArchiveInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("tz'V:x8%U", (InputStream) sequenceInputStream0, (Path) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: tz'V:x8%U not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Expander expander0 = new Expander();
      Path path0 = mockFile0.toPath();
      try { 
        expander0.expand(path0, path0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) null, (File) null, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      // Undeclared exception!
      try { 
        expander0.expand("tar", (InputStream) mockFileInputStream0, file0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ZipFile) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((SevenZFile) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("/9pw?{a6* 9#", "aF{A13>GO6#E\"'m~J");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      expander0.expand("tar", (SeekableByteChannel) fileChannel0, file0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("zip", (Path) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      try { 
        expander0.expand((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("tar", "tar");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      expander0.expand("tar", (InputStream) mockFileInputStream0, file0);
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) null, (Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile(".");
      // Undeclared exception!
      try { 
        expander0.expand(".", (SeekableByteChannel) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"ch\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((SevenZFile) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("<=", (SeekableByteChannel) null, (File) null, closeableConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"ch\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("", (InputStream) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("Q", (File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((TarFile) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zup", "zup");
      Expander expander0 = new Expander();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 67);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(tarArchiveInputStream0);
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) cpioArchiveInputStream0, (File) mockFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ZipFile) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockFile mockFile0 = new MockFile("26,", "26,");
      Expander expander0 = new Expander();
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        expander0.expand((TarFile) null, path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }
}
