/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Aug 22 19:17:51 GMT 2025
 */

package org.apache.commons.compress.archivers.examples;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Expander_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.compress.archivers.examples.Expander"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/compress_experiment_2"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.name", "azureuser"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Expander_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipSplitOutputStream",
      "org.apache.commons.compress.utils.Sets",
      "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream",
      "org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel",
      "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions",
      "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
      "org.apache.commons.compress.utils.ArchiveUtils",
      "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream",
      "org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$2",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1",
      "org.apache.commons.compress.archivers.ArchiveException",
      "org.apache.commons.compress.archivers.StreamingNotSupportedException",
      "org.apache.commons.compress.archivers.cpio.CpioConstants",
      "org.apache.commons.compress.utils.BoundedArchiveInputStream",
      "org.apache.commons.compress.utils.ChecksumVerifyingInputStream",
      "org.apache.commons.compress.archivers.zip.CharsetAccessor",
      "org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream",
      "org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.archivers.zip.ZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipFile",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder",
      "org.apache.commons.compress.utils.CountingInputStream",
      "org.apache.commons.compress.archivers.zip.ZipExtraField",
      "org.apache.commons.compress.archivers.zip.ZipFile$1",
      "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveException",
      "org.apache.commons.compress.archivers.dump.TapeInputStream",
      "org.apache.commons.compress.archivers.tar.TarFile",
      "org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
      "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException",
      "org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2Constants",
      "org.apache.commons.compress.archivers.sevenz.AbstractCoder",
      "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior",
      "org.apache.commons.compress.archivers.examples.Expander$ArchiveEntrySupplier",
      "org.apache.commons.compress.archivers.zip.Zip64RequiredException",
      "org.apache.commons.compress.archivers.zip.ExplodingInputStream",
      "org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveEntry",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.commons.compress.archivers.examples.CloseableConsumer",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile$1",
      "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream",
      "org.apache.commons.compress.archivers.examples.Expander",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream",
      "org.apache.commons.compress.archivers.tar.TarConstants",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.dump.InvalidFormatException",
      "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "org.apache.commons.compress.utils.CRC32VerifyingInputStream",
      "org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer",
      "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream",
      "org.apache.commons.compress.utils.ByteUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream",
      "org.apache.commons.compress.utils.BoundedInputStream",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.utils.SeekableInMemoryByteChannel",
      "org.apache.commons.compress.utils.InputStreamStatistics",
      "org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream",
      "org.apache.commons.compress.archivers.ArchiveStreamProvider",
      "org.apache.commons.compress.archivers.jar.JarArchiveEntry",
      "org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior",
      "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.apache.commons.compress.archivers.EntryStreamOffsets",
      "org.apache.commons.compress.archivers.zip.ZipFile$Entry"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Enumeration", false, Expander_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.commons.compress.archivers.examples.CloseableConsumer", false, Expander_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Expander_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.compress.archivers.examples.Expander",
      "org.apache.commons.compress.archivers.examples.CloseableConsumer",
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.utils.ByteUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.apache.commons.compress.archivers.dump.TapeInputStream",
      "org.apache.commons.compress.archivers.tar.TarFile",
      "org.apache.commons.compress.utils.SeekableInMemoryByteChannel",
      "org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter",
      "org.apache.commons.compress.utils.Sets",
      "org.apache.commons.compress.archivers.ArchiveException",
      "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions",
      "org.apache.commons.compress.archivers.sevenz.AbstractCoder",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipFile",
      "org.apache.commons.compress.archivers.dump.DumpArchiveException",
      "org.apache.commons.compress.archivers.dump.ShortFileException",
      "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder",
      "org.apache.commons.compress.archivers.StreamingNotSupportedException",
      "org.apache.commons.compress.utils.ArchiveUtils",
      "org.apache.commons.compress.archivers.tar.TarUtils$1",
      "org.apache.commons.compress.archivers.tar.TarUtils",
      "org.apache.commons.compress.utils.BoundedArchiveInputStream",
      "org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
      "org.apache.commons.compress.archivers.jar.JarArchiveEntry",
      "org.apache.commons.compress.archivers.zip.GeneralPurposeBit",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource",
      "org.apache.commons.compress.archivers.zip.ZipShort",
      "org.apache.commons.compress.archivers.zip.AsiExtraField",
      "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp",
      "org.apache.commons.compress.archivers.zip.X7875_NewUnix",
      "org.apache.commons.compress.archivers.zip.JarMarker",
      "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField",
      "org.apache.commons.compress.archivers.zip.UnicodePathExtraField",
      "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField",
      "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField",
      "org.apache.commons.compress.archivers.zip.X000A_NTFS",
      "org.apache.commons.compress.archivers.zip.ZipEightByteInteger",
      "org.apache.commons.compress.archivers.zip.PKWareExtraHeader",
      "org.apache.commons.compress.archivers.zip.X0014_X509Certificates",
      "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile",
      "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory",
      "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader",
      "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList",
      "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField",
      "org.apache.commons.compress.archivers.zip.ExtraFieldUtils",
      "org.apache.commons.compress.archivers.cpio.CpioUtil",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry"
    );
  }
}
