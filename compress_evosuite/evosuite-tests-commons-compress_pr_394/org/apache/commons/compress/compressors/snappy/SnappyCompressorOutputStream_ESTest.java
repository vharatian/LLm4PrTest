/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:33:39 GMT 2025
 */

package org.apache.commons.compress.compressors.snappy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SnappyCompressorOutputStream_ESTest extends SnappyCompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2162L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[3];
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.print((int) (byte) (-118));
      Locale locale0 = Locale.UK;
      mockPrintStream0.print((Object) pipedOutputStream0);
      mockPrintStream0.print("United Kingdom");
      char[] charArray0 = new char[8];
      charArray0[6] = 'F';
      charArray0[4] = 'M';
      mockPrintStream0.print(charArray0);
      mockPrintStream0.print((-865.2889955361137));
      String[] stringArray0 = Locale.getISOCountries();
      snappyCompressorOutputStream0.finish();
      pipedInputStream0.close();
      mockPrintStream0.println();
      mockPrintStream0.println((long) (byte) (-118));
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "net.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", (Object[]) stringArray0);
      PrintStream printStream1 = mockPrintStream0.printf(locale0, "com.github.marschall.memoryfilesystem.MemoryEntryAttributes$MemoryFileAttributes", (Object[]) stringArray0);
      printStream1.print(false);
      printStream1.print(false);
      char[] charArray1 = new char[3];
      printStream1.println(charArray1);
      mockPrintStream0.println("United Kingdom");
      SnappyCompressorOutputStream snappyCompressorOutputStream1 = new SnappyCompressorOutputStream(printStream1, 10029L);
      printStream0.print('F');
      PrintStream printStream2 = printStream1.printf(locale0, "United Kingdom", (Object[]) stringArray0);
      assertSame(printStream2, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2143L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.print((int) (byte) (-110));
      mockPrintStream0.print((Object) pipedOutputStream0);
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.format("org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream", objectArray0);
      //  // Unstable assertion: assertEquals(92, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2143L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[4];
      mockPrintStream0.write(byteArray0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.format("org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream", objectArray0);
      String[] stringArray0 = Locale.getISOCountries();
      mockPrintStream0.printf(locale0, "com.github.marschall.memoryfilesystem.MemoryEntryAttributes$MemoryEntryFileAttributesView", (Object[]) stringArray0);
      printStream0.printf(locale0, "com.github.marschall.memoryfilesystem.MemoryEntryAttributes$MemoryEntryFileAttributesView", (Object[]) stringArray0);
      snappyCompressorOutputStream0.write(byteArray0);
      assertEquals(145, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 63);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(mockPrintStream0, 63);
      byte[] byteArray0 = new byte[3];
      snappyCompressorOutputStream0.write(byteArray0, 2, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.implementation.auxiliary.AuxiliaryType", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(mockFileOutputStream0, (-1781L), 128);
      snappyCompressorOutputStream0.write(909);
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = SnappyCompressorOutputStream.createParameterBuilder(65536);
      assertNotNull(parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(byteArrayOutputStream0, (-1067L));
      // Undeclared exception!
      try { 
        snappyCompressorOutputStream0.write((byte[]) null, 937, 937);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(byteArrayOutputStream0, (-4677L));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        snappyCompressorOutputStream0.write(byteArray0, 21, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-1016L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[9];
      pipedInputStream0.close();
      mockPrintStream0.write(byteArray0);
      try { 
        snappyCompressorOutputStream0.write((int) (byte) (-31));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2130L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      pipedInputStream0.close();
      mockPrintStream0.print((Object) pipedOutputStream0);
      try { 
        snappyCompressorOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SnappyCompressorOutputStream.createParameterBuilder(3901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be a power of two
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.Parameters$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2162L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[3];
      mockPrintStream0.write(byteArray0);
      pipedInputStream0.close();
      try { 
        snappyCompressorOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, 2541L, (Parameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-2146905278)).when(parameters0).getWindowSize();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, 3773L, parameters0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getWindowSize();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, 3773L, parameters0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream((OutputStream) null, 2362L, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-412L), 340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be a power of two
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.Parameters$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, 4, 4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2162L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      pipedInputStream0.close();
      char[] charArray0 = new char[14];
      mockPrintStream0.println(charArray0);
      SnappyCompressorOutputStream snappyCompressorOutputStream1 = new SnappyCompressorOutputStream(mockPrintStream0, 10029L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream((OutputStream) null, 2703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(byteArrayOutputStream0, 2398L, parameters0);
      SnappyCompressorOutputStream snappyCompressorOutputStream1 = null;
      try {
        snappyCompressorOutputStream1 = new SnappyCompressorOutputStream(snappyCompressorOutputStream0, 2398L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = null;
      try {
        snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, 2381L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream$1", "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream$1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getWindowSize();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(mockFileOutputStream0, 255L, parameters0);
      snappyCompressorOutputStream0.close();
      snappyCompressorOutputStream0.finish();
      assertEquals(2L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(1472, (-713)).when(parameters0).getWindowSize();
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(byteArrayOutputStream0, 2398L, parameters0);
      // Undeclared exception!
      try { 
        snappyCompressorOutputStream0.write((-719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SnappyCompressorOutputStream snappyCompressorOutputStream0 = new SnappyCompressorOutputStream(pipedOutputStream0, (-2162L));
      MockPrintStream mockPrintStream0 = new MockPrintStream(snappyCompressorOutputStream0);
      byte[] byteArray0 = new byte[3];
      mockPrintStream0.write(byteArray0);
      mockPrintStream0.print((int) (byte) (-118));
      Locale locale0 = Locale.UK;
      mockPrintStream0.print((Object) pipedOutputStream0);
      mockPrintStream0.print("United Kingdom");
      char[] charArray0 = new char[8];
      charArray0[4] = 'F';
      mockPrintStream0.print((-865.2889955361137));
      String[] stringArray0 = IOFileFilter.EMPTY_STRING_ARRAY;
      snappyCompressorOutputStream0.finish();
      pipedInputStream0.close();
      mockPrintStream0.println((long) (byte) (-118));
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "net.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", (Object[]) stringArray0);
      PrintStream printStream1 = mockPrintStream0.printf(locale0, "com.github.marschall.memoryfilesystem.MemoryEntryAttributes$MemoryFileAttributes", (Object[]) stringArray0);
      printStream0.print((float) (-2162L));
      printStream1.print(false);
      printStream1.print(false);
      printStream1.println(charArray0);
      mockPrintStream0.println("United Kingdom");
      SnappyCompressorOutputStream snappyCompressorOutputStream1 = new SnappyCompressorOutputStream(printStream1, 10029L);
      printStream0.print('F');
      assertSame(printStream0, printStream1);
  }
}
