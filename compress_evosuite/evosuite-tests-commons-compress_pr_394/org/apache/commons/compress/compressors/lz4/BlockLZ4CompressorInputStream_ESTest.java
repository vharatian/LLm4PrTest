/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:30:51 GMT 2025
 */

package org.apache.commons.compress.compressors.lz4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BlockLZ4CompressorInputStream_ESTest extends BlockLZ4CompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      int int0 = blockLZ4CompressorInputStream0.read(byteArray0, 255, (-3801));
      assertEquals(1L, blockLZ4CompressorInputStream0.getUncompressedCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      try { 
        blockLZ4CompressorInputStream0.read(byteArray0, (int) (byte) (-37), (int) (byte) (-37));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        blockLZ4CompressorInputStream0.read(byteArray0, 4, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      int int0 = blockLZ4CompressorInputStream0.read(byteArray0, 0, 3);
      assertEquals(3, blockLZ4CompressorInputStream0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      blockLZ4CompressorInputStream0.read(byteArray0);
      try { 
        blockLZ4CompressorInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      try { 
        blockLZ4CompressorInputStream0.read(byteArray0, 275, 275);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream while looking for next block
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      blockLZ4CompressorInputStream0.read(byteArray0, 2, 2);
      int int0 = blockLZ4CompressorInputStream0.read(byteArray0, 2, 2);
      assertEquals(1L, blockLZ4CompressorInputStream0.getCompressedCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      int int0 = blockLZ4CompressorInputStream0.read(byteArray0, (int) (byte)59, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)24);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      try { 
        blockLZ4CompressorInputStream0.read(byteArray0, (int) (byte)15, (int) (byte)15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream while parsing length
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream(byteArrayInputStream0);
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream1 = new BlockLZ4CompressorInputStream(blockLZ4CompressorInputStream0);
      try { 
        blockLZ4CompressorInputStream1.read(byteArray0, 1424, 8024);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of data
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockLZ4CompressorInputStream blockLZ4CompressorInputStream0 = new BlockLZ4CompressorInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        blockLZ4CompressorInputStream0.read((byte[]) null, (-1611), 977);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }
}
