/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:14:07 GMT 2025
 */

package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ArchiveStreamProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArchiveStreamFactory_ESTest extends ArchiveStreamFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("Stream must not be null.");
      TreeMap<String, ArchiveStreamProvider> treeMap0 = new TreeMap<String, ArchiveStreamProvider>();
      ArchiveStreamFactory.putAll(set0, archiveStreamFactory0, treeMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      archiveStreamFactory0.setEntryEncoding("org.apache.commons.io.filefilter.HiddenFileFilter");
      archiveStreamFactory0.getEntryEncoding();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      archiveStreamFactory0.setEntryEncoding("");
      archiveStreamFactory0.getEntryEncoding();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("var");
      TreeMap<String, ArchiveStreamProvider> treeMap0 = new TreeMap<String, ArchiveStreamProvider>();
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.putAll((Set<String>) null, archiveStreamFactory0, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.detect(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) sequenceInputStream0, "The array of names must not be null");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(archiveInputStream0, 6);
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.detect(bufferedInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current ar entry
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2013556489), (-2013556489));
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.detect(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      try { 
        archiveStreamFactory0.createArchiveOutputStream("arj", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: arj not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ds");
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("|tq");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) mockPrintStream0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |tq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("apk", (InputStream) pipedInputStream0, "vJml&!^u ESkwd28wo");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // vJml&!^u ESkwd28wo
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) pipedInputStream0);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) archiveInputStream0, "dump");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        archiveStreamFactory0.createArchiveInputStream("7z", (InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("BZip2 block size is invalid");
      PipedInputStream pipedInputStream0 = new PipedInputStream(917);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // BZip2 block size is invalid
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-95), (byte)15);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("apk");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-7), 8);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      archiveStreamFactory0.getArchiveInputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      try { 
        archiveStreamFactory0.createArchiveOutputStream("7z", (OutputStream) pipedOutputStream0, "apk");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      archiveStreamFactory0.createArchiveOutputStream("cpio", (OutputStream) pipedOutputStream0, "cpio");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ds");
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) mockPrintStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("zip");
      archiveStreamFactory0.createArchiveOutputStream("zip", (OutputStream) mockPrintStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream("zip", (OutputStream) null, "zip");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("2'7(tJWbc90'5J");
      PipedInputStream pipedInputStream0 = new PipedInputStream(911);
      try { 
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) pipedInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("|Om");
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) sequenceInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      archiveStreamFactory0.createArchiveInputStream("apk", (InputStream) pipedInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream(512);
      archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) pipedInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("", (InputStream) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1909), 0);
      try { 
        ArchiveStreamFactory.detect(byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.detect(pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      archiveStreamFactory0.getInputStreamArchiveNames();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("tMD:7SC[z");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.setEntryEncoding(":///");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot overide encoding set by the constructor
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      archiveStreamFactory0.getArchiveOutputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      archiveStreamFactory0.getArchiveInputStreamProviders();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("zip");
      try { 
        archiveStreamFactory0.createArchiveOutputStream("7z", (OutputStream) mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("2'H7(tmybc90'5J");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ug9HLQn-6,{@wS");
      archiveStreamFactory0.createArchiveOutputStream("cpio", (OutputStream) mockPrintStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("2'H7(tmybc90'5J");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ug9HLQn-6,{@wS");
      try { 
        archiveStreamFactory0.createArchiveOutputStream("_mhc^DH2xLGV_1", (OutputStream) mockPrintStream0, "cpio");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: _mhc^DH2xLGV_1 not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      MockPrintStream mockPrintStream0 = new MockPrintStream("cpio");
      archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockFile mockFile0 = new MockFile("%aEQ", ".?9");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) mockPrintStream0, "p6o{yt07g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p6o{yt07g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      archiveStreamFactory0.createArchiveOutputStream("tar", (OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("jar");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      archiveStreamFactory0.createArchiveOutputStream("tar", (OutputStream) bufferedOutputStream0, "zip");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("K`");
      archiveStreamFactory0.createArchiveOutputStream("zip", (OutputStream) mockPrintStream0, "org.apache.commons.compress.archivers.ArchiveStreamFactory");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("jar");
      archiveStreamFactory0.createArchiveOutputStream("ar", (OutputStream) mockPrintStream0, "=+n aJt>%.JQm`-");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("Ds");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream("Ds", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockFile mockFile0 = new MockFile("g2Yd^K#K9)|C8&1&h", "]LNAurUBk{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream((String) null, (OutputStream) mockPrintStream0, "ar");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        archiveStreamFactory0.createArchiveInputStream("xapk", (InputStream) pipedInputStream0, "arj");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: xapk not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        archiveStreamFactory0.DEFAULT.createArchiveInputStream("dump", (InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) pipedInputStream0, "jar");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        archiveStreamFactory0.createArchiveInputStream("7z", (InputStream) pipedInputStream0, "zip");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) pipedInputStream0, "jar");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory((String) null);
      archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) pipedInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream(917);
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) pipedInputStream0, "zip");
      try { 
        archiveStreamFactory0.createArchiveInputStream("arj", (InputStream) archiveInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.arj.ArjArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("2'H7(tmybc90'5J");
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("apk", (InputStream) sequenceInputStream0, "apks");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(archiveInputStream0, (byte)8);
      try { 
        archiveStreamFactory0.createArchiveInputStream("arj", (InputStream) pushbackInputStream0, "apks");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.arj.ArjArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) pipedInputStream0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1858);
      try { 
        ArchiveStreamFactory.detect(bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveStreamFactory.detect((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SortedMap<String, ArchiveStreamProvider> sortedMap0 = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
      assertEquals(8, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream("Q5{_iEpwEp|lB=", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)8);
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) pipedInputStream0, "WBO:shu");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) archiveInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mark is not supported.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SortedMap<String, ArchiveStreamProvider> sortedMap0 = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
      assertEquals(6, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = ArchiveStreamFactory.DEFAULT;
      String string0 = archiveStreamFactory0.getEntryEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("2'H7(tmybc90'5J");
      Set<String> set0 = archiveStreamFactory0.getOutputStreamArchiveNames();
      assertEquals("2'H7(tmybc90'5J", archiveStreamFactory0.getEntryEncoding());
      assertEquals(6, set0.size());
  }
}
