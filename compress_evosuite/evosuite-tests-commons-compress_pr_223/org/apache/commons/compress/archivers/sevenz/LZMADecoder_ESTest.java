/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:46:23 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.ArrayCache;
import org.tukaani.xz.LZMA2Options;
import org.tukaani.xz.LZMAOutputStream;
import org.tukaani.xz.PowerPCOptions;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LZMADecoder_ESTest extends LZMADecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // lc + lp must not exceed 4: 2 + 4
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // pb must not exceed 4: 5
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.decode(";`L", pipedInputStream0, (byte)12, coder0, byteArray0, (byte)12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 15 kb of memory would be needed; limit was 12 kb. If the file is not corrupt, consider increasing the memory limit.
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.decode("Dictionary larger than 4GiB maximum size used in ", pipedInputStream0, (-1L), coder0, coder0.properties, 15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-91);
      coder0.properties = byteArray0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      LZMA2Options lZMA2Options0 = (LZMA2Options)lZMADecoder0.getOptionsFromCoder(coder0, bufferedInputStream0);
      assertEquals(0, lZMA2Options0.getPb());
      assertEquals(0, lZMA2Options0.getLc());
      assertEquals(42240, lZMA2Options0.getDictSize());
      assertEquals(0, lZMA2Options0.getLp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder((Coder) null, mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Integer integer0 = new Integer((-1460));
      try { 
        lZMADecoder0.encode((OutputStream) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: -1460 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PowerPCOptions powerPCOptions0 = new PowerPCOptions();
      ArrayCache arrayCache0 = ArrayCache.getDefaultCache();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wDZ^!1GIJ9V.o~", false);
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      lZMADecoder0.encode(mockFileOutputStream0, powerPCOptions0);
      LZMAOutputStream lZMAOutputStream0 = new LZMAOutputStream(mockFileOutputStream0, lZMA2Options0, 2, arrayCache0);
      // Undeclared exception!
      lZMADecoder0.encode(lZMAOutputStream0, coder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      // Undeclared exception!
      try { 
        lZMADecoder0.encode((OutputStream) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(lZMADecoder0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2016), (-2016));
      // Undeclared exception!
      try { 
        lZMADecoder0.decode((String) null, byteArrayInputStream0, (-2016), (Coder) null, byteArray0, 900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[3];
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMADecoder0.decode("", pipedInputStream0, 3436, coder0, coder0.properties, 3436);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      coder0.properties = byteArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(coder0.properties, (byte)109, 19);
      try { 
        lZMADecoder0.decode("0:&iz2tj.", byteArrayInputStream0, 255L, coder0, coder0.properties, (byte)109);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[3];
      coder0.properties = byteArray0;
      // Undeclared exception!
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ByteUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA properties too short
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        lZMADecoder0.getOptionsFromCoder(coder0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[0];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.decode((String) null, (InputStream) null, (-818L), coder0, byteArray0, 2630);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA properties too short
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      try { 
        lZMADecoder0.decode("qn", pipedInputStream0, 3484, coder0, (byte[]) null, 3484);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing LZMA properties
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.LZMADecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[5];
      coder0.properties = byteArray0;
      try { 
        lZMADecoder0.decode("L$ E.;m(", pipedInputStream0, (-3002L), coder0, byteArray0, 3484);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Uncompressed size is too big
         //
         verifyException("org.tukaani.xz.LZMAInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      Integer integer0 = Integer.valueOf(0);
      try { 
        lZMADecoder0.getOptionsAsProperties(integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LZMA2 dictionary size must be at least 4 KiB: 0 B
         //
         verifyException("org.tukaani.xz.LZMA2Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      LZMA2Options lZMA2Options0 = new LZMA2Options();
      byte[] byteArray0 = lZMADecoder0.getOptionsAsProperties(lZMA2Options0);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte) (-128), (byte)0}, byteArray0);
  }
}
