/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:53:35 GMT 2025
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.compress.utils.TimeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimeUtils_ESTest extends TimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(5070L);
      FileTime fileTime1 = TimeUtils.truncateToHundredNanos(fileTime0);
      assertTrue(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = TimeUtils.isUnixTime(2147483647L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.unixTimeToFileTime(3666L);
      long long0 = TimeUtils.toUnixTime(fileTime0);
      assertEquals(3666L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(912L);
      long long0 = TimeUtils.toUnixTime(fileTime0);
      assertEquals((-11644473600L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(0L);
      Date date0 = TimeUtils.toDate(fileTime0);
      long long0 = TimeUtils.toNtfsTime(date0);
      assertEquals(116444736000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Date date0 = TimeUtils.ntfsTimeToDate((-116444736000000000L));
      long long0 = TimeUtils.toNtfsTime(date0);
      assertEquals((-116444736000000000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(0L);
      long long0 = TimeUtils.toNtfsTime(fileTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime((-1L));
      long long0 = TimeUtils.toNtfsTime(fileTime0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = TimeUtils.toNtfsTime((-11644473600000L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = TimeUtils.toNtfsTime(596L);
      assertEquals(116444736005960000L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = TimeUtils.ntfsTimeToDate(0L);
      assertEquals("Mon Jan 01 00:00:00 GMT 1601", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = TimeUtils.javaTimeToUnixTime(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = TimeUtils.javaTimeToUnixTime(2010L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(912L);
      boolean boolean0 = TimeUtils.isUnixTime(fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.truncateToHundredNanos((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.toUnixTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.toNtfsTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.toNtfsTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = TimeUtils.isUnixTime((-2147483648L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(0L);
      Date date0 = TimeUtils.toDate(fileTime0);
      FileTime fileTime1 = TimeUtils.toFileTime(date0);
      assertNotSame(fileTime0, fileTime1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.toFileTime((Date) null);
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = TimeUtils.toDate((FileTime) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = TimeUtils.isUnixTime(2147483658L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = TimeUtils.isUnixTime((-532034117970000000L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = TimeUtils.isUnixTime((FileTime) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = TimeUtils.javaTimeToUnixTime((-27660L));
      assertEquals((-27L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(0L);
      long long0 = TimeUtils.toNtfsTime(fileTime0);
      assertEquals(116444736000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.ntfsTimeToDate((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileTime fileTime0 = TimeUtils.ntfsTimeToFileTime(0L);
      Date date0 = TimeUtils.toDate(fileTime0);
      assertNotNull(date0);
      
      long long0 = TimeUtils.toNtfsTime(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.ntfsTimeToFileTime((-9223372036854775797L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = TimeUtils.toNtfsTime((-116444735999999982L));
      assertEquals((-2186038620298068192L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(0L);
      long long0 = TimeUtils.toUnixTime(fileTime0);
      assertEquals(0L, long0);
  }
}
