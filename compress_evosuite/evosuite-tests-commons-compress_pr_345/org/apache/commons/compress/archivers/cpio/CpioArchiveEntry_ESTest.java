/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:30:48 GMT 2025
 */

package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CpioArchiveEntry_ESTest extends CpioArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(".METcr0 -K");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("#3k76O Exj@q@_O(");
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q 43/Ik_aB,CN.", "Q 43/Ik_aB,CN.");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Q 43/Ik_aB,CN.");
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertFalse(boolean0);
      assertEquals("Q 43/Ik_aB,CN.", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q 43/Ik_aB,CN.", "Q 43/Ik_aB,CN.");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Q 43/Ik_aB,CN.");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("2w-oI_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.DirectoryFileFilter");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "f{4%VQh");
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("f{4%VQh", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*P%Yk<");
      cpioArchiveEntry0.setMode(49163L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(49163L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setNumberOfLinks(1L);
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(1L, long0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals("2w-oI_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      Date date0 = cpioArchiveEntry0.getLastModifiedDate();
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)4, short0);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("'", 4114L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2, int0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("'", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(0, int0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      FileTime fileTime0 = FileTime.fromMillis((short)4);
      cpioArchiveEntry0.setTime(fileTime0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=<)+'+0}\"LZu.I%", "zNW[ZxF");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, mockFile0, "=<)+'+0}\"LZu.I%");
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals("=<)+'+0}\"LZu.I%", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      cpioArchiveEntry0.setUID(1217L);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(1217L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("X)DH`m>'n");
      cpioArchiveEntry0.setUID((-774L));
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals((-774L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("XDH`m>'n");
      cpioArchiveEntry0.setTime((-2098L));
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals((-2098L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mV%m9w", "mV%m9w");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "mV%m9w");
      cpioArchiveEntry0.setSize(1L);
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Resolved method for ");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals("Resolved method for ", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2, "RkilOn");
      cpioArchiveEntry0.setRemoteDeviceMin((-1L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals((-1L), long0);
      assertEquals((short)2, cpioArchiveEntry0.getFormat());
      assertEquals("RkilOn", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      cpioArchiveEntry0.setRemoteDeviceMaj(999L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("2w-oI_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(999L, long0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setRemoteDevice((short)4);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(4L, long0);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setRemoteDevice((-1208L));
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((-1208L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertNull(string0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Resolved method for ");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("", string0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setInode(110);
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(110L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("r{z");
      assertEquals(0L, cpioArchiveEntry0.getInode());
      
      cpioArchiveEntry0.setInode((-1L));
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      cpioArchiveEntry0.setGID(110L);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(110L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(";q$bECqHV\"+lQ3I6");
      cpioArchiveEntry0.setGID((-360L));
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals((-360L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("zNW[ZxF");
      cpioArchiveEntry0.setDeviceMin(36864L);
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(36864L, long0);
      assertEquals("zNW[ZxF", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.DirectoryFileFilter");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "f{4%VQh");
      cpioArchiveEntry0.setDeviceMin((-2019L));
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("f{4%VQh", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((-2019L), long0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(">[nXn9~FQuk", 617L);
      cpioArchiveEntry0.setDeviceMaj(2147483647L);
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(3, cpioArchiveEntry0.getDataPadCount());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(2147483647L, long0);
      assertEquals(">[nXn9~FQuk", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(">[nXn9~FQuk", 617L);
      cpioArchiveEntry0.setDeviceMaj((-5479L));
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(">[nXn9~FQuk", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals((-5479L), long0);
      assertEquals(3, cpioArchiveEntry0.getDataPadCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice(36864L);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(36864L, long0);
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice((-1890L));
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1890L), long0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, int0);
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setChksum((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("-kM$/q:");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getChksum();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)4, (Path) null, "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".ET(0-8", ".ET(0-8");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short) (-9360), path0, ".ET(0-8", linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type -9360
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)1759, "Unknown mode. Full: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 1759
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)1171, (File) null, ".ETM0Ea -8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile("G3&");
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)16384, mockFile0, "G3&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 16384
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(">");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize((-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <-1981>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize(4294967300L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <4294967300>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("net.bytebuddy.description.NamedElement");
      cpioArchiveEntry0.setMode(16384L);
      assertEquals(16384L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("X)DH`m>'n");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertFalse(boolean0);
      assertEquals("X)DH`m>'n", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertTrue(boolean0);
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("]", 4242L);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((-1237L));
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("]", cpioArchiveEntry0.getName());
      assertEquals(0, int0);
      assertEquals(2, cpioArchiveEntry0.getDataPadCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((long) (short)4);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("2NW[Z<xy");
      int int0 = cpioArchiveEntry0.getHeaderPadCount((Charset) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((Charset) null);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, int0);
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(path0, "", linkOptionArray0);
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(1392409281L, long0);
      assertEquals("2w-oI_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry("OVERRIDE_READ_ONLY", 4294967300L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <4294967300>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setMode((short)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode. Full: 4 Masked: 0
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("sw\",P");
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals("QZ?)((", cpioArchiveEntry0.getName());
      assertEquals(8L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*P%Yk<");
      cpioArchiveEntry0.setMode(49163L);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(49163L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SS*ACeE?");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "SS*ACeE?");
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertTrue(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("SS*ACeE?", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("zkr}I0J");
      cpioArchiveEntry0.setMode(5108L);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(5108L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "#Q^gZIAcvCIbkOU");
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals("#Q^gZIAcvCIbkOU", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("xu#)Erozva$");
      cpioArchiveEntry0.setMode(36864L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(36864L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(8L, cpioArchiveEntry0.getSize());
      assertEquals("QZ?)((", cpioArchiveEntry0.getName());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("t~+");
      cpioArchiveEntry0.setMode(10000L);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(10000L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(">");
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(">", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Resolved method for ");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      cpioArchiveEntry0.setMode(24576L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(24576L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*P%Yk<");
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals("*P%Yk<", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("X)DH`m>'n");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("X)DH`m>'n", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*4tU6RW` Ge5V");
      cpioArchiveEntry0.setMode((-116444736000000000L));
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals((-116444736000000000L), long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "#Q^gZIAcvCIbkOU");
      Charset charset0 = Charset.defaultCharset();
      int int0 = cpioArchiveEntry0.getHeaderPadCount(charset0);
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((long) (short)8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[8];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      linkOptionArray0[2] = linkOption0;
      linkOptionArray0[3] = linkOptionArray0[0];
      linkOptionArray0[4] = linkOptionArray0[2];
      linkOptionArray0[5] = linkOptionArray0[3];
      linkOptionArray0[6] = linkOptionArray0[0];
      linkOptionArray0[7] = linkOptionArray0[5];
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, path0, "E^2\"y1,y09r}", linkOptionArray0);
      Charset charset0 = Charset.defaultCharset();
      int int0 = cpioArchiveEntry0.getHeaderPadCount(charset0);
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, int0);
      assertEquals("E^2\"y1,y09r}", cpioArchiveEntry0.getName());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      cpioArchiveEntry0.setSize(941L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(941L, cpioArchiveEntry0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
      assertEquals(0, int0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry1);
      assertEquals((short)4, cpioArchiveEntry1.getFormat());
      assertTrue(boolean0);
      assertEquals(0, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry1.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile(">Hl-6Jb", ">Hl-6Jb");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, ">Hl-6Jb");
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry(file0, (String) null);
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals(110, cpioArchiveEntry1.getHeaderSize());
      assertEquals(4, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(1392409281L, cpioArchiveEntry1.getTime());
      assertEquals((short)1, cpioArchiveEntry1.getFormat());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals("TRAILER!!!");
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2w-I_QY]b7M7U", "2w-I_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "2w-I_QY]b7M7U");
      boolean boolean0 = cpioArchiveEntry0.equals((Object) null);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals("2w-I_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry0);
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertTrue(boolean0);
      assertEquals("2w-oI_QY]b7M7U", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = MockFile.createTempFile(">Hl-6Jb", ">Hl-6Jb");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, ">Hl-6Jb");
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry(file0, ">Hl-6Jb");
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertEquals(">Hl-6Jb", cpioArchiveEntry1.getName());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals((short)1, cpioArchiveEntry1.getFormat());
      assertTrue(boolean0);
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals(4, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(1392409281L, cpioArchiveEntry1.getTime());
      assertEquals(110, cpioArchiveEntry1.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry(path0, "'", linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine type of file '
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertEquals(2L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)1833, "s6tVA7&S(~]G", (short)1833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 1833
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 7
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 6
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 5
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type 3
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      cpioArchiveEntry0.hashCode();
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals("QZ?)((", cpioArchiveEntry0.getName());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(8L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      cpioArchiveEntry0.setRemoteDeviceMaj((-2330L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
      assertEquals((-2330L), long0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(0L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("2w-oI_QY]b7M7U", "2w-oI_QY]b7M7U");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "2w-oI_QY]b7M7U");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals("2w-oI_QY]b7M7U", string0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, short0);
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(0L, long0);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)4, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(0L, long0);
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(8L, cpioArchiveEntry0.getSize());
      assertEquals("QZ?)((", cpioArchiveEntry0.getName());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*P%Yk<");
      cpioArchiveEntry0.setChksum(49163L);
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(49163L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("*P%Yk<", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("*4tU6RW` Ge5V");
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals("*4tU6RW` Ge5V", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("9(Z~:/rGLNM&r|c^`", 4294967295L);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getHeaderPadCount(4294967295L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((Path) null, "m0", (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      int int0 = cpioArchiveEntry0.getHeaderSize();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDevice((short)1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(".METcr0 -K");
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(".METcr0 -K", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((File) null, "TRAI4ER!!!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "#Q^gZIAcvCIbkOU");
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals((short)8, cpioArchiveEntry0.getFormat());
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals("#Q^gZIAcvCIbkOU", cpioArchiveEntry0.getName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("X)DH`m>'n");
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("X)DH`m>'n", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDevice((short)1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("t~+");
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals("t~+", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView");
      cpioArchiveEntry0.setNumberOfLinks((-1136L));
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals((-1136L), long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("com.github.marschall.memoryfilesystem.MemoryEntryAttributes$DelegatingFileAttributesView", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null);
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(0L, long0);
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setRemoteDeviceMin(287L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(287L, long0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "QZ?)((", (short)8);
      cpioArchiveEntry0.setName("Signing Jarlout: %s \nerr: %s");
      assertEquals("Signing Jarlout: %s \nerr: %s", cpioArchiveEntry0.getName());
  }
}
