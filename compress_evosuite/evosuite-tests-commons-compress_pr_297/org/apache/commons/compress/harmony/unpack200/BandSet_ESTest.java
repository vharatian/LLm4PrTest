/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:18:42 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.unpack200.BcBands;
import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BandSet_ESTest extends BandSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPStringReferences("", byteArrayInputStream0, bHSDCodec0, (byte)31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      cpBands0.unpack();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      //  // Unstable assertion: assertEquals(1, bHSDCodec0.lastBandLength);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      String[] stringArray0 = new String[9];
      bcBands0.parseReferences((String) null, (InputStream) bufferedInputStream0, bHSDCodec0, 0, stringArray0);
      //  // Unstable assertion: assertEquals(0, bHSDCodec0.lastBandLength);
      //  // Unstable assertion: assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags("dcmpl", (InputStream) byteArrayInputStream0, 1, bHSDCodec0, bHSDCodec0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags("%bE!", (InputStream) byteArrayInputStream0, 0, bHSDCodec0, bHSDCodec0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[0][3];
      String[] stringArray0 = new String[1];
      String[][] stringArray1 = bcBands0.getReferences(intArray0, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      int[] intArray0 = new int[0];
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[][] intArray1 = cpBands0.decodeBandInt("(", (InputStream) dataInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        bcBands0.read(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseReferences("o5(&+gn=CN/", (InputStream) byteArrayInputStream0, bHSDCodec0, (int[]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-732);
      // Undeclared exception!
      try { 
        cpBands0.parseReferences("=T`T5ILSGJ", inputStream0, bHSDCodec0, intArray0, (String[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      String[] stringArray0 = new String[1];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[4];
      intArray0[3] = 1;
      try { 
        cpBands0.parseReferences("", (InputStream) dataInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      String[] stringArray0 = new String[0];
      try { 
        cpBands0.parseReferences("RunCodec[k=", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        bcBands0.parseReferences("$|!Z|", (InputStream) byteArrayInputStream0, bHSDCodec0, 2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        cpBands0.parseReferences("(5,4,2)", (InputStream) byteArrayInputStream0, bHSDCodec0, (-1349), stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      String[] stringArray0 = new String[5];
      try { 
        bcBands0.parseReferences("d6V<mrWmA\"O", inputStream0, bHSDCodec0, 15, stringArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 2201);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[4];
      intArray0[2] = (int) (byte) (-48);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("(C/", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Segment segment0 = new Segment();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-3), 2201);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      cpBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
      try { 
        bcBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) dataInputStream0, intArray0, bHSDCodec0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("<sj/KBCi7%", (InputStream) byteArrayInputStream0, (int[]) null, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1065);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        cpBands0.parseFlags("", (InputStream) sequenceInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      try { 
        cpBands0.parseFlags((String) null, (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("$|!Z|", (InputStream) byteArrayInputStream0, 2, bHSDCodec0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags(", array size = ", (InputStream) mockFileInputStream0, (-1637), bHSDCodec0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      BHSDCodec bHSDCodec0 = new BHSDCodec(2, 2, 2, 1);
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1624), 1);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("dload_3", (InputStream) byteArrayInputStream0, 1, bHSDCodec0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("$|!Z|", (InputStream) byteArrayInputStream0, 22, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      try { 
        bcBands0.parseFlags("0N>.%*6/", (InputStream) pipedInputStream0, 1, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseFlags("X>jc$E>xoRbVg5N", inputStream0, 2, bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1918), (byte)1);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("O", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2884;
      try { 
        bcBands0.parseCPUTF8References("0N>.%*6/", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      try { 
        bcBands0.parseCPUTF8References("8fR", inputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPUTF8References("(5,4,2)", (InputStream) byteArrayInputStream0, bHSDCodec0, (-256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        cpBands0.parseCPUTF8References(", array size = ", (InputStream) mockFileInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        cpBands0.parseCPUTF8References("(5,4,2)", (InputStream) byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPStringReferences("EuR{`", byteArrayInputStream0, bHSDCodec0, (-769));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPStringReferences(":GU#km", dataInputStream0, bHSDCodec0, (-1980));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        bcBands0.parseCPStringReferences("", inputStream0, bHSDCodec0, (-2137));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        bcBands0.parseCPSignatureReferences(", array size = ", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-178), 535);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences("", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      try { 
        bcBands0.parseCPSignatureReferences("wI`ZSK", (InputStream) pipedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      try { 
        bcBands0.parseCPSignatureReferences("8f#R", inputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPSignatureReferences("aload_0_invokevirtualthis", mockFileInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPSignatureReferences("x~}#x*", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPMethodRefReferences(".h>Z6L", byteArrayInputStream0, bHSDCodec0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      CpBands cpBands0 = new CpBands(segment0);
      try { 
        cpBands0.parseCPMethodRefReferences("XyND?holQS8", pushbackInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      try { 
        cpBands0.parseCPMethodRefReferences("y", inputStream0, bHSDCodec0, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPLongReferences(", array size = ", pipedInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("", byteArrayInputStream0, bHSDCodec0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("aload_0_invokevirtualthis", mockFileInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("2PoK~cKg)7A%", inputStream0, bHSDCodec0, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPIntReferences("org.apache.commons.compress.harmony.unpack200.BandSet", inputStream0, bHSDCodec0, 894);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("}_gcAvMgt!$CE'5", sequenceInputStream0, bHSDCodec0, (-2324));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      try { 
        bcBands0.parseCPFloatReferences("0N>.%*6/", pipedInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPFloatReferences("", bufferedInputStream0, bHSDCodec0, (-957));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("", byteArrayInputStream0, bHSDCodec0, (-256));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-256), 1);
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("M/H_e)H[wr8r", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        bcBands0.parseCPFieldRefReferences("", pipedInputStream0, bHSDCodec0, 186);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPDoubleReferences("", byteArrayInputStream0, bHSDCodec0, (-1576));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      try { 
        cpBands0.parseCPDoubleReferences("+b@?L", dataInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      CpBands cpBands0 = new CpBands(segment0);
      try { 
        cpBands0.parseCPDoubleReferences("", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDescriptorReferences("G.,LSYYV@?", mockFileInputStream0, bHSDCodec0, (-1271));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseCPDescriptorReferences("aload_0_invokevirtualthis", mockFileInputStream0, bHSDCodec0, (-120));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseCPDescriptorReferences("*X'B{]?PIJM'f~'yG", inputStream0, bHSDCodec0, 52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences("[#@E=mp^pu", byteArrayInputStream0, bHSDCodec0, (-2678));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[0];
      BHSDCodec bHSDCodec0 = new BHSDCodec(2, 2, 2, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1424), 2);
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences("", byteArrayInputStream0, bHSDCodec0, (-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      try { 
        cpBands0.parseCPClassReferences("_HAB6;H+E0L", inputStream0, bHSDCodec0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.getReferences((int[][]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[1][3];
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        bcBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[9];
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        cpBands0.getReferences(intArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("", (InputStream) mockFileInputStream0, bHSDCodec0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      CpBands cpBands0 = new CpBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      int[] intArray0 = new int[8];
      intArray0[7] = (-2017);
      // Undeclared exception!
      try { 
        cpBands0.decodeBandInt(">", (InputStream) bufferedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1821), 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1821);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("8fR", (InputStream) bufferedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      try { 
        cpBands0.decodeBandInt("SourceFile", (InputStream) bufferedInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2065);
      try { 
        cpBands0.decodeBandInt("", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.decodeBandInt("aQute.bnd.osgi.Instruction", (InputStream) mockFileInputStream0, bHSDCodec0, (-1538));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CPNameAndType[] cPNameAndTypeArray0 = bcBands0.parseCPDescriptorReferences(">", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPNameAndTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPFieldRefReferences("", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      int[] intArray0 = bcBands0.decodeBandInt("$|!Z|", (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.decodeBandInt("$|!Z|", (InputStream) byteArrayInputStream0, bHSDCodec0, (int) (byte)125);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt(", array size = ", (InputStream) byteArrayInputStream0, bHSDCodec0, (-620));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("$|!Z|", (InputStream) byteArrayInputStream0, bHSDCodec0, (int) (byte)125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        bcBands0.decodeBandInt("[b%a", (InputStream) pushbackInputStream0, bHSDCodec0, (-192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      int[][] intArray0 = new int[7][3];
      String[] stringArray0 = new String[14];
      String[][] stringArray1 = bcBands0.getReferences(intArray0, stringArray0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[9];
      String[] stringArray0 = new String[7];
      String[] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[0];
      String[] stringArray1 = cpBands0.getReferences(intArray0, stringArray0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPClassReferences("", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CPClass[] cPClassArray0 = cpBands0.parseCPClassReferences("iastore", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      // Undeclared exception!
      try { 
        cpBands0.parseCPSignatureReferences("org.apache.commons.compress.harmony.unpack200.BandSet", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[1];
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPSignatureReferences("8f#R", inputStream0, bHSDCodec0, intArray0);
      assertEquals(1, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPSignatureReferences("8fR", inputStream0, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPSignatureReferences("", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      CPUTF8[] cPUTF8Array0 = bcBands0.parseCPSignatureReferences("", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CPFieldRef[] cPFieldRefArray0 = bcBands0.parseCPFieldRefReferences("Something has gone wrong during parsing references, index = ", dataInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPFieldRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      try { 
        bcBands0.parseCPFieldRefReferences("8fR", inputStream0, bHSDCodec0, 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[9];
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.parseCPMethodRefReferences("wE;[{H2?.h;WJ'74", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      CPMethodRef[] cPMethodRefArray0 = cpBands0.parseCPMethodRefReferences("0N>.%*6/", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      BcBands bcBands0 = new BcBands(segment0);
      CPInterfaceMethodRef[] cPInterfaceMethodRefArray0 = bcBands0.parseCPInterfaceMethodRefReferences("aload_0_invokevirtualthis", mockFileInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPInterfaceMethodRefArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[5];
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPStringReferences((String) null, byteArrayInputStream0, bHSDCodec0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CPString[] cPStringArray0 = bcBands0.parseCPStringReferences(">", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Segment segment0 = new Segment();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("^", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Segment segment0 = new Segment();
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPUTF8References((String) null, (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
      assertEquals(9, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      int[] intArray0 = new int[0];
      CPUTF8[][] cPUTF8Array0 = bcBands0.parseCPUTF8References("0N>.%*6/", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPUTF8References("Z&xJAlM=z", (InputStream) byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Segment segment0 = new Segment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      CPUTF8[] cPUTF8Array0 = cpBands0.parseCPUTF8References("0N>.%*6/", (InputStream) pipedInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPUTF8Array0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPFloatReferences("0N>.%*6/", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CPFloat[] cPFloatArray0 = bcBands0.parseCPFloatReferences("0N>.%*6/", pipedInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPFloatArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDoubleReferences("(5,4,2)", byteArrayInputStream0, bHSDCodec0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[0];
      BHSDCodec bHSDCodec0 = new BHSDCodec(2, 2, 2, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CPDouble[] cPDoubleArray0 = cpBands0.parseCPDoubleReferences("", byteArrayInputStream0, bHSDCodec0, 0);
      assertEquals(0, cPDoubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      String[] stringArray0 = new String[1];
      cpBands0.parseReferences("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      String[] stringArray0 = new String[0];
      try { 
        cpBands0.parseReferences("Something has gone wrong during parsing references, index = ", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Something has gone wrong during parsing references, index = 0, array size = 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[0];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      String[][] stringArray1 = cpBands0.parseReferences("=h", (InputStream) mockFileInputStream0, bHSDCodec0, intArray0, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      assertEquals(0, bHSDCodec0.lastBandLength);
      
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags((String) null, (InputStream) byteArrayInputStream0, 2, bHSDCodec0, false);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      byte[] byteArray0 = new byte[0];
      BHSDCodec bHSDCodec0 = new BHSDCodec(2, 2, 2, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      int[] intArray0 = bHSDCodec0.decodeInts(0, (InputStream) pushbackInputStream0);
      long[][] longArray0 = cpBands0.parseFlags("", (InputStream) byteArrayInputStream0, intArray0, bHSDCodec0, bHSDCodec0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      //  // Unstable assertion: assertEquals(2, bHSDCodec0.lastBandLength);
      
      int[] intArray0 = new int[1];
      bcBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) dataInputStream0, intArray0, bHSDCodec0, true);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("8fR", inputStream0, intArray0, (BHSDCodec) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      BcBands bcBands0 = new BcBands(segment0);
      try { 
        bcBands0.parseFlags((String) null, (InputStream) byteArrayInputStream0, 2, bHSDCodec0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Segment segment0 = new Segment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      long[] longArray0 = bcBands0.parseFlags("", (InputStream) mockFileInputStream0, 0, bHSDCodec0, false);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      CpBands cpBands0 = new CpBands(segment0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      cpBands0.decodeBandInt("0N>.%*6/", (InputStream) byteArrayInputStream0, bHSDCodec0, intArray0);
      assertEquals(8, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)6;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BcBands bcBands0 = new BcBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      // Undeclared exception!
      try { 
        bcBands0.parseCPInterfaceMethodRefReferences("Something has gone wrong during parsing references, index = ", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[6];
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      BcBands bcBands0 = new BcBands(segment0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        bcBands0.parseCPDescriptorReferences(">", byteArrayInputStream0, bHSDCodec0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      int[] intArray0 = cpBands0.decodeBandInt("yW<${DY~ajQ", (InputStream) null, bHSDCodec0, 0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        bcBands0.parseCPSignatureReferences("8f#R", inputStream0, bHSDCodec0, (-1144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Segment segment0 = new Segment();
      BcBands bcBands0 = new BcBands(segment0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        bcBands0.parseFlags("Something has gone wrong during parsing references, index = ", (InputStream) dataInputStream0, (-1), bHSDCodec0, bHSDCodec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      // Undeclared exception!
      try { 
        cpBands0.unpack((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      String[] stringArray0 = new String[0];
      try { 
        cpBands0.parseReferences("", (InputStream) mockFileInputStream0, bHSDCodec0, 1, stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
}
