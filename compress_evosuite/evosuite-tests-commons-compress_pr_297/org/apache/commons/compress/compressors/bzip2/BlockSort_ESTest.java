/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:16:10 GMT 2025
 */

package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BlockSort_ESTest extends BlockSort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[3] = (byte)17;
      blockSort0.fallbackSort(intArray0, byteArray0, (byte)5);
      assertArrayEquals(new int[] {1, 4, 2, 0, 3, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.mainSort(bZip2CompressorOutputStream_Data0, 9);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      blockSort0.fallbackSort(intArray0, byteArray0, 65537);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, (byte[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, byteArray0, (-315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -251
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, byteArray0, (byte) (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -4
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, byteArray0, 1364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.fallbackSort(bZip2CompressorOutputStream_Data0, 1752);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data1 = new BZip2CompressorOutputStream.Data(0);
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(bZip2CompressorOutputStream_Data1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.blockSort((BZip2CompressorOutputStream.Data) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.blockSort(bZip2CompressorOutputStream_Data0, (-1348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1347
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockSort blockSort0 = null;
      try {
        blockSort0 = new BlockSort((BZip2CompressorOutputStream.Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)5;
      blockSort0.fallbackSort(intArray0, byteArray0, (byte)5);
      assertArrayEquals(new int[] {3, 1, 4, 2, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      blockSort0.fallbackSort(intArray0, byteArray0, (byte)5);
      assertArrayEquals(new int[] {1, 2, 3, 4, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, (-1));
      // Undeclared exception!
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 2915);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 55548);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 20);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 9);
      blockSort0.fallbackSort(bZip2CompressorOutputStream_Data0, 9);
  }
}
