/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:28:54 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.NoSuchFileException;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.sevenz.SevenZFileOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZFile_ESTest extends SevenZFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      boolean boolean0 = SevenZFile.matches(byteArray0, (byte)67);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        SevenZFile.matches(byteArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vK_");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("-keypass", "-keypass");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.close();
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("-keypass", "-keypass");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("G'hH1rgsrx@D7rN0t", "A%Ea%:1|", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[1];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";~:G4H)4)NRS`&");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("uCR#?Bce]n", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, (byte[]) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4`uY<r1-;%$b2Zh3");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("totalOutputStreams");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("totalOutputStreams");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$bI^i");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "$bI^i", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      mockFileInputStream0.close();
      char[] charArray0 = new char[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", charArray0, sevenZFileOptions0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "uoaPmZIp^X,d", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      File file0 = MockFile.createTempFile("numPackedStreams", "numPackedStreams");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "numPackedStreams", (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":i");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, ":i", (char[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[5];
      mockFileInputStream0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "4", charArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("Archive contains file with streams but no subStreamsInfo", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(9223372036854775807L);
      char[] charArray0 = new char[9];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel1, "", charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, ">d1BtYilzR", (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockFile mockFile0 = new MockFile("d4sUM\"qV_2lE", "d4sUM\"qV_2lE");
      File file0 = MockFile.createTempFile("d4sUM\"qV_2lE", "d4sUM\"qV_2lE", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "d4sUM\"qV_2lE", charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The list of suffixes must not be null");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "The list of suffixes must not be null", (byte[]) null);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("Incomplete kDummy property", "Incomplete kDummy property");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      byte[] byteArray0 = new byte[19];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "Incomplete kDummy property", byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("The array of names must not be null");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "The array of names must not be null", sevenZFileOptions0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "", sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZMethod", "org.apache.commons.compress.archivers.sevenz.SevenZMethod");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "org.apache.commons.compress.archivers.sevenz.SevenZMethod", (SevenZFileOptions) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "-");
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "5Y:cJ[+kF':gIPK?e2");
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "5Y:cJ[+kF':gIPK?e2");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile("$a1_B;wBju|", "$a1_B;wBju|");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0, "$a1_B;wBju|");
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y7>~P}~o>f2hFsyf");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "r");
      FileChannel fileChannel0 = mockRandomAccessFile0.getChannel();
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(fileChannel0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ATS^2[", "ATS^2[");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The filters must not be null");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[1];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockFile mockFile0 = new MockFile("ATS^2[");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = MockFile.createTempFile("|Pam&I4", "OJeh;8DsFL4tj~");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(file0, sevenZFileOptions0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null, (SevenZFileOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PA9s6_P");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = SevenZFile.matches(byteArray0, 69);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        SevenZFile.matches(byteArray0, (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = SevenZFile.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SevenZFile.matches((byte[]) null, 18003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "Stream finished or closed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      char[] charArray0 = new char[16];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "", charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "", sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      byte[] byteArray0 = new byte[0];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, (char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      char[] charArray0 = new char[2];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, charArray0, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[2];
      MockFile mockFile0 = new MockFile("", "");
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile(mockFile0, charArray0, sevenZFileOptions0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[10];
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "Cannot handle ", charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, "-UC'#lJ)lE4jS", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SevenZFileOptions sevenZFileOptions0 = SevenZFileOptions.DEFAULT;
      SevenZFile sevenZFile0 = null;
      try {
        sevenZFile0 = new SevenZFile((SeekableByteChannel) null, sevenZFileOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.IOUtils", e);
      }
  }
}
