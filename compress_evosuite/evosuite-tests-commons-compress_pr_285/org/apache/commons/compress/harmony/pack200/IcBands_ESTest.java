/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:23:50 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IcBands_ESTest extends IcBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("$sHcjy\"4_D)xA;+^E");
      CPClass cPClass0 = new CPClass(cPUTF8_0);
      IcBands.IcTuple icBands_IcTuple0 = icBands0.new IcTuple(cPClass0, 0, (CPClass) null, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.isAnonymous();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 1111);
      IcBands icBands0 = new IcBands((SegmentHeader) null, cpBands0, (-1));
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("@fdm\"z~k-.0^F");
      CPClass cPClass0 = new CPClass(cPUTF8_0);
      CPClass cPClass1 = new CPClass(cPUTF8_0);
      IcBands.IcTuple icBands_IcTuple0 = icBands0.new IcTuple(cPClass1, (-1058), cPClass0, cPUTF8_0);
      String string0 = icBands_IcTuple0.toString();
      assertEquals("@fdm\"z~k-.0^F", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 262144);
      CPClass cPClass0 = cpBands0.getCPClass("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple1 = icBands0.new IcTuple(cPClass0, 262144, cPClass0, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple1);
      assertFalse(icBands_IcTuple1.equals((Object)icBands_IcTuple0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      // Undeclared exception!
      try { 
        icBands0.addInnerClass("ic_name$ic_name", "ic_name", "ic_name", (-2078566191));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 36);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, (-3769));
      // Undeclared exception!
      try { 
        icBands0.addInnerClass((String) null, (String) null, (String) null, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("ic_name", "ic_name", "ic_name", 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("ic_name");
      cPUTF8_0.setIndex(1);
      // Undeclared exception!
      try { 
        icBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Am/}T`:");
      cPClass0.setIndex(262144);
      // Undeclared exception!
      try { 
        icBands0.pack((OutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("c_Fme", "c_Fme", "c_Fme", 262144);
      CPClass cPClass0 = cpBands0.getCPClass("c_Fme");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      icBands0.addInnerClass("dqGD2}:d>", "c_Fme", (String) null, 5999);
      icBands_IcTuple0.F = 5999;
      // Undeclared exception!
      try { 
        icBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      IcBands icBands0 = new IcBands(segmentHeader0, (CpBands) null, (-498));
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.compress.harmony.pack200.IcBands");
      icBands0.pack(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.finaliseBands();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 65536);
      List list0 = icBands0.getInnerClassesForOuter("Am/}T`:");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      IcBands icBands0 = new IcBands(segmentHeader0, (CpBands) null, 1);
      // Undeclared exception!
      try { 
        icBands0.pack((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, (-1347));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        icBands0.pack(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      CPUTF8 cPUTF8_0 = new CPUTF8("Am/}T`:");
      CPClass cPClass1 = new CPClass(cPUTF8_0);
      IcBands.IcTuple icBands_IcTuple1 = icBands0.new IcTuple(cPClass1, 65536, cPClass0, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands((SegmentHeader) null, cpBands0, (-932));
      icBands0.addInnerClass("", "", "", (-932));
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple((CPClass) null);
      assertNull(icBands_IcTuple0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      CPUTF8 cPUTF8_0 = new CPUTF8("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple1 = icBands0.new IcTuple(cPClass0, 65536, cPClass0, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands((SegmentHeader) null, cpBands0, 262144);
      icBands0.addInnerClass("Dr@e", "@4Gu/vW", "Dr@e", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Dr@e");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("Dr@e");
      IcBands.IcTuple icBands_IcTuple1 = icBands0.new IcTuple(cPClass0, 65536, (CPClass) null, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands((SegmentHeader) null, cpBands0, 262144);
      icBands0.addInnerClass("Dr@e", "@4Gu/vW", "Dr@e", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Dr@e");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      CPUTF8 cPUTF8_0 = new CPUTF8("OkO.oR$b\"(f6");
      IcBands.IcTuple icBands_IcTuple1 = icBands0.new IcTuple(cPClass0, 262144, cPClass0, cPUTF8_0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 65536);
      CPClass cPClass0 = cpBands0.getCPClass("Am/}T`:");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      boolean boolean0 = icBands_IcTuple0.equals(icBands_IcTuple0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("0yqlq", "Am/}T`:", "Am/}T`:", 262144);
      CPClass cPClass0 = cpBands0.getCPClass("0yqlq");
      IcBands.IcTuple icBands_IcTuple0 = icBands0.getIcTuple(cPClass0);
      assertNotNull(icBands_IcTuple0);
      
      Object object0 = new Object();
      boolean boolean0 = icBands_IcTuple0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 262144);
      icBands0.addInnerClass("Am/}T`:", "Am/}T`:", "Am/}T`:", 262144);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      icBands0.addInnerClass("Am:/}T`:", (String) null, "Am:/}T`:", 262144);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        icBands0.pack(pipedOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IcBands icBands0 = new IcBands((SegmentHeader) null, (CpBands) null, 262144);
      // Undeclared exception!
      try { 
        icBands0.finaliseBands();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IcBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, (-585));
      List list0 = icBands0.getInnerClassesForOuter("Signature");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      IcBands icBands0 = new IcBands(segmentHeader0, cpBands0, 262144);
      // Undeclared exception!
      try { 
        icBands0.addInnerClass("org.apache.commons.compress.harmony.pack200.CPMethodOrField", (String) null, (String) null, 262144);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
