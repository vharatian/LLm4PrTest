/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Aug 22 22:23:50 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class IcBands_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.compress.harmony.pack200.IcBands"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/compress_experiment_2"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IcBands_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.compress.harmony.pack200.BandSet",
      "org.objectweb.asm.AnnotationVisitor",
      "org.objectweb.asm.MethodVisitor",
      "org.apache.commons.compress.harmony.pack200.CPConstant",
      "org.apache.commons.compress.harmony.pack200.CPUTF8",
      "org.apache.commons.compress.harmony.pack200.IntList",
      "org.apache.commons.compress.harmony.pack200.Segment",
      "org.objectweb.asm.FieldVisitor",
      "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands",
      "org.apache.commons.compress.harmony.pack200.ClassBands",
      "org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter",
      "org.apache.commons.compress.harmony.pack200.Pack200ClassReader",
      "org.apache.commons.compress.harmony.pack200.Codec",
      "org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor",
      "org.apache.commons.compress.harmony.pack200.IcBands$IcTuple",
      "org.apache.commons.compress.harmony.pack200.CpBands",
      "org.apache.commons.compress.harmony.pack200.PackingUtils",
      "org.apache.commons.compress.harmony.pack200.Pack200Exception",
      "org.apache.commons.compress.harmony.pack200.CPFloat",
      "org.apache.commons.compress.harmony.pack200.CPString",
      "org.objectweb.asm.Attribute",
      "org.apache.commons.compress.harmony.pack200.CPInt",
      "org.apache.commons.compress.harmony.pack200.PackingOptions",
      "org.objectweb.asm.ClassVisitor",
      "org.apache.commons.compress.harmony.pack200.CPLong",
      "org.apache.commons.compress.harmony.pack200.SegmentHeader",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor",
      "org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit",
      "org.objectweb.asm.ModuleVisitor",
      "org.objectweb.asm.RecordComponentVisitor",
      "org.apache.commons.compress.harmony.pack200.PopulationCodec",
      "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry",
      "org.apache.commons.compress.harmony.pack200.CPSignature",
      "org.apache.commons.compress.harmony.pack200.CPMethodOrField",
      "org.apache.commons.compress.harmony.pack200.Segment$PassException",
      "org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults",
      "org.apache.commons.compress.harmony.pack200.BandSet$BandData",
      "org.apache.commons.compress.harmony.pack200.CPNameAndType",
      "org.objectweb.asm.TypePath",
      "org.apache.commons.compress.harmony.pack200.CPClass",
      "org.objectweb.asm.ClassReader",
      "org.apache.commons.compress.harmony.pack200.BHSDCodec",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor",
      "org.apache.commons.compress.harmony.pack200.IcBands",
      "org.apache.commons.compress.harmony.pack200.CPDouble"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IcBands_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.compress.harmony.pack200.BandSet",
      "org.apache.commons.compress.harmony.pack200.IcBands",
      "org.apache.commons.compress.harmony.pack200.IcBands$IcTuple",
      "org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger",
      "org.apache.commons.compress.harmony.pack200.PackingUtils",
      "org.apache.commons.compress.harmony.pack200.BHSDCodec",
      "org.apache.commons.compress.harmony.pack200.Codec",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.objectweb.asm.ClassVisitor",
      "org.apache.commons.compress.harmony.pack200.Segment",
      "org.objectweb.asm.FieldVisitor",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor",
      "org.objectweb.asm.MethodVisitor",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor",
      "org.apache.commons.compress.harmony.pack200.SegmentHeader",
      "org.apache.commons.compress.harmony.pack200.IntList",
      "org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter",
      "org.apache.commons.compress.harmony.pack200.CpBands",
      "org.apache.commons.compress.harmony.pack200.ConstantPoolEntry",
      "org.apache.commons.compress.harmony.pack200.CPUTF8",
      "org.apache.commons.compress.harmony.pack200.CPConstant",
      "org.apache.commons.compress.harmony.pack200.CPClass",
      "org.apache.commons.compress.harmony.pack200.CPNameAndType",
      "org.apache.commons.compress.harmony.pack200.CPSignature",
      "org.apache.commons.compress.harmony.pack200.CPMethodOrField",
      "org.objectweb.asm.TypePath",
      "org.objectweb.asm.ByteVector",
      "org.objectweb.asm.AnnotationVisitor",
      "org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor",
      "org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit",
      "org.apache.commons.compress.harmony.pack200.Pack200Exception",
      "org.objectweb.asm.Attribute",
      "org.apache.commons.compress.harmony.pack200.CodecEncoding",
      "org.apache.commons.compress.harmony.pack200.PackingOptions",
      "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands",
      "org.apache.commons.compress.harmony.pack200.ClassBands",
      "org.apache.commons.compress.harmony.pack200.MetadataBandGroup",
      "org.apache.commons.compress.harmony.pack200.BcBands",
      "org.apache.commons.compress.harmony.pack200.FileBands",
      "org.apache.commons.compress.harmony.pack200.CPString",
      "org.apache.commons.compress.harmony.pack200.NewAttribute",
      "org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition",
      "org.apache.commons.compress.harmony.pack200.NewAttributeBands",
      "org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement",
      "org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference"
    );
  }
}
