/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:26:51 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.BandSet;
import org.apache.commons.compress.harmony.pack200.BcBands;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.harmony.pack200.IcBands;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BandSet_ESTest extends BandSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec1 = Codec.UDELTA5;
      long[][] longArray0 = new long[7][1];
      // Undeclared exception!
      try { 
        segmentHeader0.encodeFlags("|M#XjH+;T{NfXPy", longArray0, bHSDCodec0, bHSDCodec1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec1 = Codec.BRANCH5;
      long[][] longArray0 = new long[0][0];
      byte[] byteArray0 = segmentHeader0.encodeFlags((String) null, longArray0, bHSDCodec0, bHSDCodec1, false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[5];
      longArray1[0] = 17825775L;
      longArray0[3] = longArray1;
      byte[] byteArray0 = cpBands0.encodeFlags("+s|?`\")4x", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentHeader0.pack(byteArrayOutputStream0);
      assertEquals(20, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      long[][] longArray0 = new long[9][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (byte) (-115);
      longArray0[1] = longArray1;
      BHSDCodec bHSDCodec0 = Codec.BRANCH5;
      byte[] byteArray0 = segmentHeader0.encodeFlags("w|}h$5c?R", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[4];
      byte[] byteArray0 = segmentHeader0.encodeScalar(intArray0, bHSDCodec0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      IcBands icBands0 = new IcBands(segmentHeader0, (CpBands) null, 116);
      int[] intArray0 = new int[0];
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      byte[] byteArray0 = icBands0.encodeScalar(intArray0, bHSDCodec0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      byte[] byteArray0 = segmentHeader0.encodeScalar(133, bHSDCodec0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      BcBands bcBands0 = new BcBands(cpBands0, segment0, (-1461));
      long[] longArray0 = new long[9];
      byte[] byteArray0 = bcBands0.encodeFlags("user", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      BcBands bcBands0 = new BcBands(cpBands0, segment0, 0);
      long[] longArray0 = new long[0];
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      byte[] byteArray0 = bcBands0.encodeFlags("", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      // Undeclared exception!
      try { 
        segmentHeader0.pack((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.SegmentHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      // Undeclared exception!
      try { 
        cpBands0.pack((OutputStream) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CpBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      // Undeclared exception!
      try { 
        segmentHeader0.longListToArray((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      // Undeclared exception!
      try { 
        segmentHeader0.integerListToArray((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) segmentHeader0);
      // Undeclared exception!
      try { 
        segmentHeader0.integerListToArray(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.SegmentHeader cannot be cast to java.lang.Integer
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      // Undeclared exception!
      try { 
        segmentHeader0.encodeScalar((int[]) null, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      try { 
        segmentHeader0.encodeScalar((-256), bHSDCodec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The codec (3,128) does not encode the value -256
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      // Undeclared exception!
      try { 
        segmentHeader0.encodeScalar(2, (BHSDCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        segmentHeader0.encodeFlags(" caseF_KF[", (long[]) null, bHSDCodec0, bHSDCodec0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<BHSDCodec> linkedList0 = new LinkedList<BHSDCodec>();
      SegmentHeader segmentHeader0 = new SegmentHeader();
      long[] longArray0 = segmentHeader0.longListToArray(linkedList0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      // Undeclared exception!
      try { 
        segmentHeader0.encodeFlags("vZ'H(:XWIr6!%f K'i%", longArray0, bHSDCodec0, bHSDCodec0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      int[] intArray0 = new int[2];
      intArray0[0] = 262144;
      try { 
        segmentHeader0.encodeBandInt("org.apache.commons.compress.harmony.pack200.BandSet$BandData", intArray0, bHSDCodec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The codec (5,4) does not encode the value 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      int[] intArray0 = new int[38];
      BHSDCodec bHSDCodec0 = Codec.BCI5;
      // Undeclared exception!
      try { 
        cpBands0.encodeBandInt("3EtSe'W&Ghx\"\"-b", intArray0, bHSDCodec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 12);
      // Undeclared exception!
      try { 
        cpBands0.cpEntryOrNullListToArray((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      // Undeclared exception!
      try { 
        segmentHeader0.cpEntryListToArray((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      int[] intArray0 = new int[8];
      BcBands bcBands0 = new BcBands(cpBands0, segment0, 375);
      BandSet.BandData bandSet_BandData0 = bcBands0.new BandData(intArray0);
      int int0 = bandSet_BandData0.numDistinctValues();
      assertFalse(bandSet_BandData0.anyNegatives());
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertTrue(bandSet_BandData0.mainlySmallDeltas());
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      int[] intArray0 = new int[6];
      intArray0[5] = (-1731);
      BandSet.BandData bandSet_BandData0 = cpBands0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.anyNegatives();
      assertFalse(bandSet_BandData0.mainlySmallDeltas());
      assertEquals(2, bandSet_BandData0.numDistinctValues());
      assertTrue(boolean0);
      assertFalse(bandSet_BandData0.wellCorrelated());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[1];
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.anyNegatives();
      assertFalse(boolean0);
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertFalse(bandSet_BandData0.mainlySmallDeltas());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[5];
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.mainlyPositiveDeltas();
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertFalse(bandSet_BandData0.anyNegatives());
      assertTrue(bandSet_BandData0.mainlySmallDeltas());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = segmentHeader0.integerListToArray(linkedList0);
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.wellCorrelated();
      assertFalse(boolean0);
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertFalse(bandSet_BandData0.anyNegatives());
      assertFalse(bandSet_BandData0.mainlySmallDeltas());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[5];
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.mainlySmallDeltas();
      assertTrue(boolean0);
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertFalse(bandSet_BandData0.anyNegatives());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 7);
      int[] intArray0 = new int[99];
      BandSet.BandData bandSet_BandData0 = cpBands0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.mainlyPositiveDeltas();
      assertFalse(bandSet_BandData0.anyNegatives());
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertEquals(1, bandSet_BandData0.numDistinctValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1328);
      intArray0[1] = 1;
      byte[] byteArray0 = cpBands0.encodeBandInt("+S|?`\")4x", intArray0, bHSDCodec0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte) (-1), (byte) (-106), (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[1];
      intArray0[0] = 878;
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      byte[] byteArray0 = segmentHeader0.encodeBandInt("*=I,_Z1U{^~7h-^o", intArray0, bHSDCodec0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[8];
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      byte[] byteArray0 = segmentHeader0.encodeBandInt("-ze0?fW&", intArray0, bHSDCodec0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 6);
      int[] intArray0 = new int[104];
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      byte[] byteArray0 = cpBands0.encodeBandInt("8wnj\u0005L", intArray0, bHSDCodec0);
      assertEquals(104, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CpBands cpBands0 = new CpBands(segment0, 9);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 262144;
      intArray0[2] = 1;
      intArray0[3] = 262144;
      intArray0[4] = 84;
      intArray0[5] = 1;
      intArray0[6] = 262144;
      intArray0[7] = 262144;
      // Undeclared exception!
      try { 
        cpBands0.encodeBandInt("POCUL5TIO%", intArray0, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      CpBands cpBands0 = new CpBands(segment0, 9);
      int[] intArray0 = new int[8];
      intArray0[1] = 262144;
      intArray0[3] = 262144;
      intArray0[6] = 262144;
      byte[] byteArray0 = cpBands0.encodeBandInt("POCUL5TIO%", intArray0, bHSDCodec0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      BandSet.BandAnalysisResults bandSet_BandAnalysisResults0 = cpBands0.new BandAnalysisResults();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[8];
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      bandSet_BandData0.numDistinctValues();
      assertFalse(bandSet_BandData0.anyNegatives());
      assertFalse(bandSet_BandData0.wellCorrelated());
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertTrue(bandSet_BandData0.mainlySmallDeltas());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[5];
      intArray0[0] = (-815);
      intArray0[1] = (-815);
      intArray0[2] = (-815);
      intArray0[3] = (-815);
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.wellCorrelated();
      assertTrue(boolean0);
      assertTrue(bandSet_BandData0.anyNegatives());
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertFalse(bandSet_BandData0.mainlySmallDeltas());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      int[] intArray0 = new int[0];
      BandSet.BandData bandSet_BandData0 = segmentHeader0.new BandData(intArray0);
      boolean boolean0 = bandSet_BandData0.mainlySmallDeltas();
      assertFalse(bandSet_BandData0.mainlyPositiveDeltas());
      assertFalse(bandSet_BandData0.anyNegatives());
      assertFalse(boolean0);
      assertFalse(bandSet_BandData0.wellCorrelated());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<BHSDCodec> linkedList0 = new LinkedList<BHSDCodec>();
      linkedList0.add((BHSDCodec) null);
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      int[] intArray0 = cpBands0.cpEntryOrNullListToArray(linkedList0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) segment0);
      // Undeclared exception!
      try { 
        cpBands0.cpEntryOrNullListToArray(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.Segment cannot be cast to org.apache.commons.compress.harmony.pack200.ConstantPoolEntry
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<BHSDCodec> linkedList0 = new LinkedList<BHSDCodec>();
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      int[] intArray0 = cpBands0.cpEntryOrNullListToArray(linkedList0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) segment0);
      // Undeclared exception!
      try { 
        cpBands0.cpEntryListToArray(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.Segment cannot be cast to org.apache.commons.compress.harmony.pack200.ConstantPoolEntry
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      int[] intArray0 = segmentHeader0.cpEntryListToArray(linkedList0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) segmentHeader0);
      // Undeclared exception!
      try { 
        segmentHeader0.longListToArray(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.SegmentHeader cannot be cast to java.lang.Long
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[9];
      longArray0[1] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[2] = (-96L);
      longArray0[3] = longArray2;
      longArray0[5] = longArray0[3];
      // Undeclared exception!
      try { 
        cpBands0.encodeFlags("org.apache.commons.compress.harmony.pack200.BandSet", longArray0, bHSDCodec0, bHSDCodec0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 9;
      longArray1[3] = (long) (-3544);
      longArray0[0] = longArray1;
      byte[] byteArray0 = cpBands0.encodeFlags("cpint", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, (-551));
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      int[] intArray0 = new int[7];
      intArray0[0] = 214;
      byte[] byteArray0 = cpBands0.encodeBandInt("", intArray0, bHSDCodec0);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      int[] intArray0 = new int[6];
      byte[] byteArray0 = segmentHeader0.encodeBandInt(",2Z|<j,v}'D4", intArray0, bHSDCodec0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      int[] intArray0 = new int[2];
      intArray0[0] = (-732);
      byte[] byteArray0 = segmentHeader0.encodeBandInt("CCObzM|I2~duL,$1", intArray0, bHSDCodec0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      int[] intArray0 = new int[0];
      byte[] byteArray0 = cpBands0.encodeBandInt("+S|?`\")4x", intArray0, bHSDCodec0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[9];
      longArray1[1] = (long) 262144;
      longArray1[2] = (long) 262144;
      longArray1[3] = (long) 9;
      longArray1[5] = (long) 262144;
      longArray0[0] = longArray1;
      longArray0[1] = longArray0[0];
      long[] longArray2 = new long[5];
      longArray2[0] = 17825775L;
      longArray0[3] = longArray2;
      // Undeclared exception!
      try { 
        cpBands0.encodeFlags("+s|?`\")4x", longArray0, bHSDCodec0, bHSDCodec0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 9;
      longArray1[1] = 1L;
      longArray0[1] = longArray1;
      // Undeclared exception!
      try { 
        cpBands0.encodeFlags("org.apache.commons.compress.harmony.pack200.BandSet", longArray0, bHSDCodec0, bHSDCodec0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Segment segment0 = new Segment();
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      CpBands cpBands0 = new CpBands(segment0, 9);
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[9];
      longArray1[4] = (long) (-2146877868);
      longArray0[0] = longArray1;
      byte[] byteArray0 = cpBands0.encodeFlags("+s|?`\")4x", longArray0, bHSDCodec0, bHSDCodec0, false);
      assertEquals(70, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 6);
      int[] intArray0 = new int[38];
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      byte[] byteArray0 = cpBands0.encodeBandInt("", intArray0, bHSDCodec0);
      assertEquals(38, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 9);
      int[] intArray0 = new int[5];
      intArray0[0] = 262144;
      intArray0[3] = 262144;
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      byte[] byteArray0 = cpBands0.encodeBandInt("org.apache.commons.compress.harmony.pack200.BandSet", intArray0, bHSDCodec0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)64, (byte) (-43), (byte)6, (byte)0, (byte)0, (byte)64, (byte) (-43), (byte)6, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
  }
}
