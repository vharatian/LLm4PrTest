/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:31:42 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarFile;
import java.util.jar.JarInputStream;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.harmony.pack200.PackingUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PackingUtils_ESTest extends PackingUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JarInputStream jarInputStream0 = new JarInputStream(byteArrayInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("System");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        PackingUtils.copyThroughJar(jarInputStream0, (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // man
         //
         verifyException("java.util.jar.JarOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("META-INF/MANIFEST.MF");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        PackingUtils.copyThroughJar((JarFile) null, (OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.PackingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.setLogFile("org.objectweb.asm.Attribute");
      PackingUtils.config(packingOptions0);
      assertEquals("org.objectweb.asm.Attribute", packingOptions0.getLogFile());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackingUtils.getPackingFileListFromJar((JarInputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.PackingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)11, (byte)11);
      JarInputStream jarInputStream0 = new JarInputStream(byteArrayInputStream0);
      jarInputStream0.close();
      try { 
        PackingUtils.getPackingFileListFromJar(jarInputStream0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.util.zip.ZipInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackingUtils.getPackingFileListFromJar((JarFile) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.PackingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackingUtils.config((PackingOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.PackingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PackingUtils.log("Uza4<~c,|gYR&");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)11, (byte)11);
      JarInputStream jarInputStream0 = new JarInputStream(byteArrayInputStream0);
      List list0 = PackingUtils.getPackingFileListFromJar(jarInputStream0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarInputStream jarInputStream0 = new JarInputStream(sequenceInputStream0);
      List list0 = PackingUtils.getPackingFileListFromJar(jarInputStream0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.setLogFile("");
      // Undeclared exception!
      try { 
        PackingUtils.config(packingOptions0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.util.logging.MockFileHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PackingUtils packingUtils0 = new PackingUtils();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PackingOptions packingOptions0 = new PackingOptions();
      PackingUtils.config(packingOptions0);
      assertEquals(1000000L, packingOptions0.getSegmentLimit());
  }
}
