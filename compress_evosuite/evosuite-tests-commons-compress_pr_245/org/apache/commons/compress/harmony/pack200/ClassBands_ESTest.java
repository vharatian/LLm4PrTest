/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:29:32 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.SequenceInputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.compress.harmony.pack200.Archive;
import org.apache.commons.compress.harmony.pack200.CPClass;
import org.apache.commons.compress.harmony.pack200.CPNameAndType;
import org.apache.commons.compress.harmony.pack200.ClassBands;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.pack200.PackingOptions;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassBands_ESTest extends ClassBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", " bytes in ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0005 bytes in strip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      String[] stringArray0 = new String[1];
      classBands0.addClass(262144, 262144, "error", "RunCodec[k=", "error", stringArray0);
      classBands0.addClass((-353), 21, " bytes in ", "keep", "error", stringArray0);
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction((String) null, "H/e]xB4\"-");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLocalVariable("H/e]xB4\"-", "org.apache.commons.compress.harmony.pack200.CPConstant", "H/e]xB4\"-", label0, label0, 262144);
      classBands0.addLocalVariable("error", (String) null, (String) null, (Label) null, (Label) null, 2241);
      IntList intList0 = new IntList();
      HashMap<CPNameAndType, CPNameAndType> hashMap0 = new HashMap<CPNameAndType, CPNameAndType>();
      // Undeclared exception!
      try { 
        classBands0.doBciRenumbering(intList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(35, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 262144, false);
      classBands0.addCode();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLocalVariable("pass", "shaded.org.apache.commons.io.file.CopyDirectoryVisitor", "strip", label0, label0, (-2440));
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fjbu[8@RR3cbd", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 262144, false);
      classBands0.addCode();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLineNumber(783, label0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 78, 78, true);
      classBands0.addEnclosingMethod("KPRTEyM1kGL", "KPRTEyM1kGL", "avN'xR[/)#yLi'{*,#");
      classBands0.addEnclosingMethod("+y9,gssk%", "pass", "error");
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0005jbu[8@RR3cbdstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 152, 4493, false);
      String[] stringArray0 = new String[7];
      classBands0.addClass((-817), 152, "3jac `3\"aqF_Xn}^f/z", (String) null, "i8q,aL}~eM/#xb<F", stringArray0);
      classBands0.addSourceFile("`\">R@");
      classBands0.addSourceFile("error");
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fjbu[8@RR3cbd", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 262144, false);
      classBands0.addCode();
      classBands0.addCode();
      classBands0.endOfMethod();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR13cbd", "jbu[8@RR13cbd");
      packingOptions0.addFieldAttributeAction("class_field_count", "class_field_count");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0002\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\rclass_field_countjbu[8@RR13cbd", byteArrayOutputStream0.toString());
      assertEquals(55, archive_SegmentUnit0.getPackedByteAmount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(42, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 152, 4493, false);
      String[] stringArray0 = new String[7];
      classBands0.addClass((-817), 152, "3jac `3\"aqF_Xn}^f/z", (String) null, "i8q,aL}~eM/#xb<F", stringArray0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", " bytes in ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(47, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 907, 196, false);
      int int0 = classBands0.numClassesProcessed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 9966, 262144, false);
      classBands0.endOfClass();
      int int0 = classBands0.numClassesProcessed();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(35, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 262144, false);
      classBands0.isAnySyntheticMethods();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.isAnySyntheticFields();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction(" bytes i/ ", " bytes i/ ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n bytes i/ ", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 67, 262144, true);
      classBands0.isAnySyntheticClasses();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ClassBands.countArgs("q2UHdADX()sP,iR_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 4096, 210, false);
      String[] stringArray0 = new String[3];
      classBands0.addClass(3159, 4194309, "YfX7+b2;{IC.@|L", "*dCJVO", "exclude", stringArray0);
      // Undeclared exception!
      try { 
        classBands0.removeCurrentClass();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IntList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("u", "jbu[8@RR3cbd");
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 1224, (-340), true);
      // Undeclared exception!
      classBands0.pack(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addMethodAttributeAction(" !voMTB)cU", " !voMTB)cU");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addField(262144, "error", "error", "strip", (Object) null);
      // Undeclared exception!
      try { 
        classBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index should be > 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      classBands0.endOfMethod();
      // Undeclared exception!
      try { 
        classBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", " bytes in ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      // Undeclared exception!
      try { 
        classBands0.pack(byteArrayOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      File file0 = MockFile.createTempFile("iK0$WBXe>:c", "strip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      try { 
        classBands0.pack(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.endOfClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassBands.countArgs((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 9966, 262144, true);
      // Undeclared exception!
      try { 
        classBands0.addSourceFile("e>i=]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("keep", "`JvHu* ^cI%\"e?c");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addSourceFile("strip");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(118);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("s9m^RXuC7Mot1M0M", "jG]k5t[f");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classBands0.addMethod((-1641), (String) null, (String) null, "s9m^RXuC7Mot1M0M", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CPNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addMaxStack(262144, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      classBands0.endOfMethod();
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        classBands0.addLocalVariable("keep", "strip", "error", label0, label0, 262144);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        classBands0.addLocalVariable("keep", "error", "pass", label0, label0, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 262144, false);
      classBands0.addCode();
      classBands0.endOfMethod();
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        classBands0.addLineNumber(94, label0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        classBands0.addLineNumber(179, label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "n(_o|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 235, 235, false);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        classBands0.addHandler(label0, label0, label0, "keep");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IntList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 109, (-320), true);
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[3];
      Label[] labelArray0 = new Label[0];
      NewAttribute newAttribute0 = new NewAttribute((ClassReader) null, "jbu[8@RR3cbd", "keep", byteArray0, charArray0, 1147, labelArray0);
      // Undeclared exception!
      try { 
        classBands0.addFieldAttribute(newAttribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("PzA", "PzA");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 78, 262144, false);
      // Undeclared exception!
      try { 
        classBands0.addEnclosingMethod("error", "pass", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CPNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addEnclosingMethod("keep", "keep", "5j K}_>{|q~5-@4\"^");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addClass(262144, (-1810), "error", "pass", "keep", (String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("keep", ";Ha- 2&");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addAnnotationDefault(linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, (List) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.MetadataBandGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 500, 128, false);
      LinkedList<SequenceInputStream> linkedList1 = new LinkedList<SequenceInputStream>();
      linkedList0.add((Object) segment0);
      // Undeclared exception!
      try { 
        classBands0.addAnnotationDefault(linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList1, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.Segment cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.MetadataBandGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addAnnotation(1, "pass", false, linkedList0, linkedList0, (List) null, linkedList0, linkedList0, linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.MetadataBandGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      linkedList0.addLast(segment0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addAnnotation(2, "strip", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.pack200.Segment cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.MetadataBandGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Segment segment0 = new Segment();
      ClassBands classBands0 = new ClassBands(segment0, 262144, 262144, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Segment segment0 = new Segment();
      ClassBands classBands0 = null;
      try {
        classBands0 = new ClassBands(segment0, 7, 262144, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Segment segment0 = new Segment();
      ClassBands classBands0 = null;
      try {
        classBands0 = new ClassBands(segment0, (-3290), (-3290), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", " bytes in ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      classBands0.endOfClass();
      assertEquals(1, classBands0.numClassesProcessed());
      
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("pass", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0004jbu[8@RR3cbdpass", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 2140, (-1916), true);
      classBands0.addField(9972, "pass", "&l9Xx.@SiRH'h*", (String) null, "keep");
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", " bytes i/ ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0005 bytes i/ strip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 1635, 200, true);
      classBands0.addField(1635, "!NVF>xqH!]o$>?5", "pass", " bytes i/ ", (Object) null);
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "n(_D|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0005n(_D|pz|+strip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, false);
      classBands0.addAnnotation(0, "pass", false, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      classBands0.addAnnotation(0, "pass", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.removeCurrentClass();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addAnnotation(2, "strip", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addAnnotation(262144, "pass", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addAnnotation(2, "strip", false, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      LinkedList<SequenceInputStream> linkedList1 = new LinkedList<SequenceInputStream>();
      // Undeclared exception!
      try { 
        classBands0.addParameterAnnotation(262144, "keep", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList1, linkedList1, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("file.separator", "6(0^hq Y@deZk[4v");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLocalVariable(packingOptions0.STRIP, "keep", " bytes from classFileVersionMajor[", (Label) null, label0, (-2729));
      IntList intList0 = new IntList();
      // Undeclared exception!
      try { 
        classBands0.doBciRenumbering(intList0, (Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      classBands0.addLocalVariable("pass", "error", "keep", (Label) null, (Label) null, (-2729));
      IntList intList0 = new IntList();
      HashMap<CPNameAndType, CPNameAndType> hashMap0 = new HashMap<CPNameAndType, CPNameAndType>();
      classBands0.doBciRenumbering(intList0, hashMap0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addCodeAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(27, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      HashMap<CPNameAndType, CPNameAndType> hashMap0 = new HashMap<CPNameAndType, CPNameAndType>();
      IntList intList0 = new IntList();
      classBands0.doBciRenumbering(intList0, hashMap0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addMethodAttributeAction("ma{].3;bC;1K~'", "ma{].3;bC;1K~'");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(37, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      HashMap<Object, CPNameAndType> hashMap0 = new HashMap<Object, CPNameAndType>();
      classBands0.doBciRenumbering((IntList) null, hashMap0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      HashMap<CPNameAndType, CPNameAndType> hashMap0 = new HashMap<CPNameAndType, CPNameAndType>();
      IntList intList0 = new IntList();
      classBands0.doBciRenumbering(intList0, hashMap0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLocalVariable("keep", "strip", "error", label0, label0, 262144);
      classBands0.addLocalVariable("keep", "error", "pass", label0, label0, 262144);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addLocalVariable(" bytes from code_LocalVariableTypeTable_N[", "pass", (String) null, (Label) null, (Label) null, 262144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IntList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLineNumber(262144, label0);
      classBands0.addLineNumber(262144, label0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 1571, 1571, false);
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addHandler(label0, label0, label0, (String) null);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR13cbd", "jbu[8@RR13cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(36, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addHandler(label0, label0, label0, "pass");
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 745, 745, true);
      classBands0.addCode();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addCodeAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute("keep", "strip", 262144);
      // Undeclared exception!
      try { 
        classBands0.addCodeAttribute(newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      PackingOptions packingOptions0 = new PackingOptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      packingOptions0.addCodeAttributeAction("keep", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute("pass", "pass", 262144);
      // Undeclared exception!
      try { 
        classBands0.addCodeAttribute(newAttribute0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No suitable definition for pass
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addMethodAttributeAction(" !vLTB)cU", " !vLTB)cU");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute("strip", "a$($Sy|5xP0", 262144);
      // Undeclared exception!
      try { 
        classBands0.addMethodAttribute(newAttribute0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No suitable definition for strip
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addMethodAttributeAction(" !vLTB)cU", " !vLTB)cU");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute(" !vLTB)cU", "z", 262144);
      // Undeclared exception!
      try { 
        classBands0.addMethodAttribute(newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      NewAttribute newAttribute0 = new NewAttribute("error", "pass", 262144);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addFieldAttribute(newAttribute0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No suitable definition for error
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      NewAttribute newAttribute0 = new NewAttribute("strip", "pass", 137);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addFieldAttribute(newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute("strip", "error", 262144);
      // Undeclared exception!
      try { 
        classBands0.addClassAttribute(newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      NewAttribute newAttribute0 = new NewAttribute("error", "keep", 262144);
      // Undeclared exception!
      try { 
        classBands0.addClassAttribute(newAttribute0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No suitable definition for error
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\fjbu[8@RR3cbd", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 3192, 3192, true);
      classBands0.addEnclosingMethod("pass", (String) null, "pass");
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("CopyDirectoryVisitor.java", "");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 9978, 262144, false);
      classBands0.addField(262144, "strip", "keep", "shaded.org.apache.commns.ioffilefilter.WildcardFilter", "strip");
      classBands0.endOfClass();
      assertEquals(1, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = ClassBands.countArgs("ffoTY(iq?IRGL)NQ:");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassBands.countArgs("dbC%-mlsMkzQ{&)k(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No arguments
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassBands.countArgs("?r[03QpQ/(`TWlEF,*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No arguments
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      Label label0 = new Label();
      classBands0.addLocalVariable("error", "strip", "error", label0, label0, 262144);
      classBands0.endOfMethod();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("jbu[8@RR3cbd", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      classBands0.endOfMethod();
      // Undeclared exception!
      try { 
        classBands0.endOfMethod();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.endOfMethod();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("Vt(Deb'5:)9L.T@1%O)", "Vt(Deb'5:)9L.T@1%O)");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(42, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      String[] stringArray0 = new String[6];
      classBands0.addMethod(262144, "org.apache.commons.compress.harmony.pack200.CPClass", "Vt(Deb'5:)9L.T@1%O)", "index must be 0 but was ", stringArray0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", " bytes i/ ");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classBands0.addMethod((-393), "strip", "@')e7WuP$:c4z0f", " bytes i/ ", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No arguments
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("s9m^RXuC7Mot1M0M", "s9m^RXuC7Mot1M0M");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addMethod(262144, "s9m^RXuC7Mot1M0M", "U", "m", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No arguments
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classBands0.addMethod(262144, "-", "strip", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No arguments
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      PackingOptions packingOptions0 = new PackingOptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      packingOptions0.addCodeAttributeAction("keep", "cNs$leVer{xonMajor");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.pack(byteArrayOutputStream0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0004cNs$leVer{xonMajorkeep", byteArrayOutputStream0.toString());
      assertEquals(47, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addMethodAttributeAction(" !voMTB)cU", " !voMTB)cU");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.pack(byteArrayOutputStream0);
      assertEquals(33, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n !voMTB)cU", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction(">*AR?+^V!)W;`", " bytes from field_attr_calls[");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 168, 0, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "error";
      stringArray0[1] = "error";
      stringArray0[2] = "n(_D|pz|+";
      stringArray0[3] = " bytes from field_attr_calls[";
      stringArray0[4] = "keep";
      stringArray0[5] = ">*AR?+^V!)W;`";
      stringArray0[6] = "n(_D|pz|+";
      stringArray0[7] = "OS";
      classBands0.addClass(262144, 0, "strip", "strip", "OS", stringArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        classBands0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addField(1, "keep", "error", "+O+vl`)d]", segment0);
      classBands0.addAnnotation(1, "pass", false, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addField(1, "keep", "error", "DUt", segment0);
      classBands0.addAnnotation(1, "pass", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "n(_D|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(39, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, false);
      classBands0.addAnnotation(0, "pass", false, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "nd_.|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(39, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      classBands0.addAnnotation(0, "pass", true, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      String[] stringArray0 = new String[1];
      classBands0.addClass(262144, 262144, "error", "keep", "error", stringArray0);
      CpBands cpBands0 = segment0.getCpBands();
      CPClass cPClass0 = cpBands0.getCPClass("keep");
      classBands0.currentClassReferencesInnerClass(cPClass0);
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.addCode();
      // Undeclared exception!
      try { 
        classBands0.finaliseBands();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.pack200.IntList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(34, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      String[] stringArray0 = new String[1];
      classBands0.addClass(262144, 262144, "error", "keep", "error", stringArray0);
      classBands0.finaliseBands();
      classBands0.finaliseBands();
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      // Undeclared exception!
      try { 
        classBands0.addField((-773), "keep", "strip", "strip", archive_SegmentUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0005jbu[8@RR3cbdstrip", byteArrayOutputStream0.toString());
      
      ClassBands classBands0 = new ClassBands(segment0, 152, 4493, false);
      String[] stringArray0 = new String[7];
      classBands0.addClass((-817), 152, "3jac `3\"aqF_Xn}^f/z", (String) null, "i8q,aL}~eM/#xb<F", stringArray0);
      classBands0.currentClassReferencesInnerClass((CPClass) null);
      classBands0.currentClassReferencesInnerClass((CPClass) null);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "jbu[8@RR3cbd");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(42, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 152, 4493, false);
      String[] stringArray0 = new String[7];
      classBands0.addClass((-817), 152, "3jac `3\"aqF_Xn}^f/z", (String) null, "i8q,aL}~eM/#xb<F", stringArray0);
      CpBands cpBands0 = segment0.getCpBands();
      CPClass cPClass0 = cpBands0.getCPClass("3jac `3\"aqF_Xn}^f/z");
      classBands0.currentClassReferencesInnerClass(cPClass0);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "nd_.|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      assertEquals(39, byteArrayOutputStream0.size());
      
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, false);
      classBands0.currentClassReferencesInnerClass((CPClass) null);
      assertEquals(0, classBands0.numClassesProcessed());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "n(_D|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, true);
      String[] stringArray0 = new String[0];
      classBands0.addClass(880, 131072, "XTxO%B%l(P", "pass", "error", stringArray0);
      // Undeclared exception!
      try { 
        classBands0.removeCurrentClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "n(_D|pz|+");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 235, 235, true);
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        classBands0.addClass(262144, (-1471), "strip", "pass", "n(_D|pz|+", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(262144);
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = new ClassBands(segment0, 196, 196, false);
      LinkedList<SequenceInputStream> linkedList1 = new LinkedList<SequenceInputStream>();
      // Undeclared exception!
      try { 
        classBands0.addParameterAnnotation(262144, "keep", false, linkedList0, linkedList0, linkedList0, linkedList0, linkedList1, linkedList1, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addClassAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      classBands0.pack(byteArrayOutputStream0);
      assertEquals(34, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\uFFFD\r\u0007\uFFFD\uFFFD\u0000\u0000\u0001\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0005keepstrip", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Archive.SegmentUnit archive_SegmentUnit0 = new Archive.SegmentUnit(linkedList0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PackingOptions packingOptions0 = new PackingOptions();
      packingOptions0.addFieldAttributeAction("strip", "keep");
      segment0.pack(archive_SegmentUnit0, byteArrayOutputStream0, packingOptions0);
      ClassBands classBands0 = segment0.getClassBands();
      LinkedList<CPNameAndType> linkedList1 = new LinkedList<CPNameAndType>();
      // Undeclared exception!
      try { 
        classBands0.addAnnotationDefault(linkedList1, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
