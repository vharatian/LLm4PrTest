/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Aug 22 22:06:38 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SevenZOutputFile_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/azureuser/LLm4PrTest/compress_experiment_2"); 
    java.lang.System.setProperty("user.name", "azureuser"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SevenZOutputFile_ESTest_scaffolding.class.getClassLoader() ,
      "org.tukaani.xz.SPARCOptions",
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper",
      "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.lz.BT4",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream",
      "org.tukaani.xz.ArrayCache",
      "org.apache.commons.compress.utils.FlushShieldFilterOutputStream",
      "org.tukaani.xz.lz.HC4",
      "org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile",
      "org.tukaani.xz.lz.Hash234",
      "org.tukaani.xz.lz.Matches",
      "org.tukaani.xz.FilterOptions",
      "org.tukaani.xz.simple.SimpleFilter",
      "org.apache.commons.compress.archivers.sevenz.Coders$1",
      "org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream",
      "org.apache.commons.compress.MemoryLimitException",
      "org.apache.commons.compress.archivers.sevenz.LZMADecoder",
      "org.tukaani.xz.lz.LZEncoder",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$2",
      "org.tukaani.xz.lzma.LZMAEncoderFast",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1",
      "org.apache.commons.compress.archivers.cpio.CpioConstants",
      "org.apache.commons.compress.utils.ChecksumVerifyingInputStream",
      "org.tukaani.xz.ARMOptions",
      "org.apache.commons.compress.archivers.sevenz.Coders",
      "org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder",
      "org.tukaani.xz.XZIOException",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.tukaani.xz.UnsupportedOptionsException",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry",
      "org.tukaani.xz.LZMAInputStream",
      "org.tukaani.xz.LZMAOutputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
      "org.apache.commons.compress.compressors.bzip2.BZip2Constants",
      "org.apache.commons.compress.archivers.sevenz.AbstractCoder",
      "org.tukaani.xz.SimpleOutputStream",
      "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder",
      "org.tukaani.xz.PowerPCOptions",
      "org.apache.commons.compress.archivers.ArchiveEntry",
      "org.tukaani.xz.ARMThumbOptions",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.tukaani.xz.SimpleInputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile$1",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "org.tukaani.xz.FilterEncoder",
      "org.apache.commons.compress.utils.TimeUtils",
      "org.tukaani.xz.rangecoder.RangeEncoderToBuffer",
      "org.tukaani.xz.lzma.State",
      "org.tukaani.xz.FilterCoder",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder",
      "org.apache.commons.compress.utils.CRC32VerifyingInputStream",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.lzma.Optimum",
      "org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream",
      "org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.archivers.sevenz.DeltaDecoder",
      "org.tukaani.xz.UncompressedLZMA2OutputStream",
      "org.tukaani.xz.X86Options",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.apache.commons.compress.utils.BoundedInputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZMethod",
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1",
      "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration",
      "org.apache.commons.compress.utils.CountingOutputStream",
      "org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream",
      "org.tukaani.xz.FinishableWrapperOutputStream",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "org.tukaani.xz.BCJOptions",
      "org.apache.commons.compress.archivers.sevenz.AES256Options",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.LZMA2InputStream",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.apache.commons.compress.utils.InputStreamStatistics",
      "org.tukaani.xz.IA64Options",
      "org.tukaani.xz.FinishableOutputStream"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SevenZOutputFile_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile",
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper",
      "org.apache.commons.compress.utils.CountingOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1",
      "org.apache.commons.compress.archivers.sevenz.SevenZMethod",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.sevenz.Coders$1",
      "org.apache.commons.compress.archivers.sevenz.AbstractCoder",
      "org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder",
      "org.apache.commons.compress.archivers.sevenz.LZMADecoder",
      "org.apache.commons.compress.archivers.sevenz.LZMA2Decoder",
      "org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder",
      "org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder",
      "org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder",
      "org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder",
      "org.tukaani.xz.FilterOptions",
      "org.tukaani.xz.BCJOptions",
      "org.tukaani.xz.X86Options",
      "org.tukaani.xz.PowerPCOptions",
      "org.tukaani.xz.IA64Options",
      "org.tukaani.xz.ARMOptions",
      "org.tukaani.xz.ARMThumbOptions",
      "org.tukaani.xz.SPARCOptions",
      "org.apache.commons.compress.archivers.sevenz.DeltaDecoder",
      "org.apache.commons.compress.archivers.sevenz.Coders",
      "org.apache.commons.compress.utils.TimeUtils",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration",
      "org.apache.commons.compress.archivers.sevenz.AES256Options",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE",
      "org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader",
      "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
      "org.apache.commons.compress.archivers.jar.JarArchiveEntry",
      "org.apache.commons.compress.archivers.zip.GeneralPurposeBit",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource",
      "org.apache.commons.compress.archivers.zip.ZipShort",
      "org.apache.commons.compress.archivers.zip.AsiExtraField",
      "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp",
      "org.apache.commons.compress.archivers.zip.X7875_NewUnix",
      "org.apache.commons.compress.archivers.zip.JarMarker",
      "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField",
      "org.apache.commons.compress.archivers.zip.UnicodePathExtraField",
      "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField",
      "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField",
      "org.apache.commons.compress.archivers.zip.X000A_NTFS",
      "org.apache.commons.compress.archivers.zip.ZipEightByteInteger",
      "org.apache.commons.compress.archivers.zip.PKWareExtraHeader",
      "org.apache.commons.compress.archivers.zip.X0014_X509Certificates",
      "org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile",
      "org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory",
      "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader",
      "org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList",
      "org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField",
      "org.apache.commons.compress.archivers.zip.ExtraFieldUtils",
      "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
      "org.apache.commons.compress.archivers.arj.ArjArchiveEntry",
      "org.apache.commons.compress.archivers.arj.LocalFileHeader",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.archivers.tar.TarUtils$1",
      "org.apache.commons.compress.archivers.tar.TarUtils",
      "org.tukaani.xz.LZMA2Options",
      "org.tukaani.xz.FinishableOutputStream",
      "org.tukaani.xz.FinishableWrapperOutputStream",
      "org.tukaani.xz.ArrayCache",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.tukaani.xz.rangecoder.RangeEncoderToBuffer",
      "org.tukaani.xz.lzma.LZMACoder",
      "org.tukaani.xz.lzma.LZMAEncoder",
      "org.tukaani.xz.lzma.LZMAEncoderNormal",
      "org.tukaani.xz.lz.LZEncoder",
      "org.tukaani.xz.lz.BT4",
      "org.tukaani.xz.lz.CRC32Hash",
      "org.tukaani.xz.lz.Hash234",
      "org.tukaani.xz.lz.Matches",
      "org.tukaani.xz.lzma.State",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder",
      "org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder",
      "org.tukaani.xz.lzma.LZMACoder$LengthCoder",
      "org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder",
      "org.tukaani.xz.lzma.Optimum",
      "org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$2"
    );
  }
}
