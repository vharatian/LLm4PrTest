/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 22:06:38 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.TreeSet;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZOutputFile_ESTest extends SevenZOutputFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, 647, 647);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("+]rK%[hNiLo<IC}.I", "J\"");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[0];
      sevenZOutputFile0.write(byteArray0, 0, 0);
      assertEquals(32L, fileChannel0.position());
      assertEquals((-32), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0, (char[]) null);
      assertEquals(32L, fileChannel0.position());
      assertEquals((-32), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.closeArchiveEntry();
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("`q@CU8x E", "`q@CU8x E");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.close();
      assertEquals(44L, file0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      LinkOption[] linkOptionArray0 = new LinkOption[2];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      linkOptionArray0[0] = linkOption0;
      linkOptionArray0[1] = linkOption0;
      sevenZOutputFile0.createArchiveEntry(path0, "jsrrH|q~u[ecu", linkOptionArray0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null, (int) (byte)4, (int) (byte)4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t.*1jfay6O2^Y$K!");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      sevenZOutputFile0.write(byteArray0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("J{4.^xNt\"5$q,e", "J{4.^xNt\"5$q,e");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        sevenZOutputFile0.write(path0, openOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("Unsupported LZMA2 property bits", "Unsupported LZMA2 property bits");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.APPEND;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(path0, openOptionArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 'APPEND' not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((Path) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      try { 
        sevenZOutputFile0.write((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZOutputFile0.setContentMethods(treeSet0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(19);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((-451));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("J{4.^xNt\"5$q,e", "J{4.^xNt\"5$q,e");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("J{4.^xNt\"5$q,e");
      // Undeclared exception!
      try { 
        sevenZOutputFile0.putArchiveEntry(cpioArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      fileChannel0.close();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      Path path0 = file0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      try { 
        sevenZOutputFile0.createArchiveEntry(path0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", linkOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.createArchiveEntry((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write((-451));
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t.*1jfay6O2^Y$K!");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)19;
      mockFileOutputStream0.close();
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)78;
      sevenZOutputFile0.write(byteArray0);
      sevenZOutputFile0.write((-1321));
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      mockFileInputStream0.close();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.comprss.archivers.sevenz.SeenZOutputFil$1", "org.apache.commons.comprss.archivers.sevenz.SeenZOutputFil$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      fileChannel0.close();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0, charArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((SeekableByteChannel) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0, charArray0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      fileChannel0.close();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("org.apache.commonC.compress.archivers.sevenz.SevenZ|utputFile");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1", "org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("", "");
      SevenZArchiveEntry sevenZArchiveEntry0 = sevenZOutputFile0.createArchiveEntry((File) mockFile0, "");
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write((-451));
      sevenZOutputFile0.write((-451));
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t.*1jfay6O2^Y$K!");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.finish();
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        sevenZOutputFile0.write(path0, openOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1", "org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$10org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.vpache.cmmons.comprss.archvers.sevenz.SeenZOutputFil$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((InputStream) mockFileInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.write((InputStream) mockFileInputStream0);
      assertEquals(33L, fileChannel0.position());
      assertEquals((-33), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.write((byte[]) null, (int) (byte) (-4), (int) (byte) (-4));
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.vache.cmmons.comprss.archvers.seven).SeknZOwutFil$1", "org.vache.cmmons.comprss.archvers.seven).SeknZOwutFil$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.putArchiveEntry((ArchiveEntry) null);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.closeArchiveEntry();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      char[] charArray0 = new char[0];
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t.*1jfay6O2^Y$K!");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      sevenZOutputFile0.write(0);
      sevenZOutputFile0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[0];
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((File) null, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((int) (byte)4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current 7z entry
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_ARM_THUMB_FILTER;
      sevenZOutputFile0.setContentCompression(sevenZMethod0);
      assertEquals(32L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZOutputFile0.putArchiveEntry(sevenZArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write(byteArray0, 8024, 8024);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMA2OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      // Undeclared exception!
      try { 
        sevenZOutputFile0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SevenZOutputFile sevenZOutputFile0 = null;
      try {
        sevenZOutputFile0 = new SevenZOutputFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      Path path0 = file0.toPath();
      // Undeclared exception!
      try { 
        sevenZOutputFile0.createArchiveEntry(path0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1", (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper", "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      SevenZOutputFile sevenZOutputFile0 = new SevenZOutputFile(fileChannel0);
      sevenZOutputFile0.createArchiveEntry(file0, "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper");
      assertEquals(32L, fileChannel0.position());
      assertEquals((-32), mockFileInputStream0.available());
  }
}
