/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 21:59:26 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.crypto.Cipher;
import org.apache.commons.compress.archivers.sevenz.AES256Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AES256Options_ESTest extends AES256Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      AES256Options aES256Options0 = null;
      try {
        aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray1, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Encryption error (do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.AES256Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, (byte)0);
      int int0 = aES256Options0.getNumCyclesPower();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, (byte) (-57));
      int int0 = aES256Options0.getNumCyclesPower();
      assertEquals((-57), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[1];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, (-8));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AES256Options aES256Options0 = null;
      try {
        aES256Options0 = new AES256Options((char[]) null, (byte[]) null, (byte[]) null, 1204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      AES256Options aES256Options0 = new AES256Options(charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, (byte)0);
      byte[] byteArray1 = aES256Options0.getIv();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, 2);
      int int0 = aES256Options0.getNumCyclesPower();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, (byte)0);
      Cipher cipher0 = aES256Options0.getCipher();
      assertNotNull(cipher0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[5];
      byte[] byteArray0 = new byte[16];
      AES256Options aES256Options0 = new AES256Options(charArray0, byteArray0, byteArray0, 2);
      byte[] byteArray1 = aES256Options0.getSalt();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AES256Options aES256Options0 = null;
      try {
        aES256Options0 = new AES256Options((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }
}
