/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 06:24:52 GMT 2025
 */

package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.util.Date;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CpioArchiveEntry_ESTest extends CpioArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null");
      cpioArchiveEntry0.hashCode();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("The suffix must not be null", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "j4+n0I");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, (String) null);
      cpioArchiveEntry0.setMode(49155L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(49155L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(";6WG>grV^qS6%r<N<");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TRAILER!!!");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "GD2c1<n}");
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals("GD2c1<n}", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ", 40960L);
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TRAILER!!!");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "NF/S3SDU@L2G+}i");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("NF/S3SDU@L2G+}i", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("aC8:(d)\"%");
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("aC8:(d)\"%", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ny;n}!/czhYgmf/");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "ny;n}!/czhYgmf/");
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("ny;n}!/czhYgmf/", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("9^tE<.#.*O00p", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "?MDM&M35]v(");
      Date date0 = cpioArchiveEntry0.getLastModifiedDate();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("?MDM&M35]v(", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null", 4294967295L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1, int0);
      assertEquals("The suffix must not be null", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, " Masked: ");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(" Masked: ", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals((short)4, short0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uses");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "aQute.bnd.osgi.Instruction");
      cpioArchiveEntry0.setUID(661L);
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(661L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("hKM9/K", 20L);
      cpioArchiveEntry0.setUID((-3327L));
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals((-3327L), long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "j4+n0I");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, (String) null);
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals(1392409281L, long0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TRAILER!!!");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "GD2c1<n}");
      cpioArchiveEntry0.setSize(1L);
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)1);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("?d6?<tt&E");
      cpioArchiveEntry0.setRemoteDeviceMin(965L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(965L, long0);
      assertEquals("?d6?<tt&E", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ");
      cpioArchiveEntry0.setRemoteDeviceMin((-4866L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals((-4866L), long0);
      assertEquals("Unknown mode. Full: ", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ny;n}!/czhYgmf/");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "ny;n}!/czhYgmf/");
      cpioArchiveEntry0.setRemoteDeviceMaj(2L);
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("ny;n}!/czhYgmf/", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(";6WG>grV^qS6%r<N<");
      cpioArchiveEntry0.setRemoteDeviceMaj((-2013L));
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-2013L), long0);
      assertEquals(";6WG>grV^qS6%r<N<", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setRemoteDevice(49192L);
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(49192L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      cpioArchiveEntry0.setRemoteDevice((-1L));
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals((-1L), long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uses");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "Unknown header type");
      cpioArchiveEntry0.setNumberOfLinks((-1467L));
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals((-1467L), long0);
      assertEquals("Unknown header type", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "j4+n0I");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, (String) null);
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertNull(string0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("", string0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ", 40960L);
      cpioArchiveEntry0.setInode(40960L);
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals(40960L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("KRAILER2!!");
      cpioArchiveEntry0.setInode((-1356L));
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals((-1356L), long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(2, int0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setGID((short)4);
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((String) null, 4096L);
      cpioArchiveEntry0.setDeviceMin((-1877L));
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals((-1877L), long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4096L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("=yZ14wvJTB$zG=+");
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("=yZ14wvJTB$zG=+", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("?NN6");
      cpioArchiveEntry0.setDeviceMaj(16384L);
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(16384L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals("?NN6", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null");
      cpioArchiveEntry0.setDeviceMaj((-889L));
      long long0 = cpioArchiveEntry0.getDeviceMaj();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals((-889L), long0);
      assertEquals("The suffix must not be null", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice(20L);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(20L, long0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(" BHS202:!_'", 393L);
      cpioArchiveEntry0.setChksum(393L);
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(" BHS202:!_'", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(393L, long0);
      assertEquals(3, cpioArchiveEntry0.getDataPadCount());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("wjGXX/GBW7eUn");
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(4, int0);
      assertEquals("wjGXX/GBW7eUn", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDevice((short)2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("p");
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDevice();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getChksum();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)1383, "3GM!l7u1?C=f", (short)1383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)4501, "Unknown mode. Full: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)4, (File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry(" Masked: ", (short) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <-3>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((File) null, "KRAILER2!!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("TRAILER!!!");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "NF/S3SDU@L2G+}i");
      cpioArchiveEntry0.setMode(32768L);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("NF/S3SDU@L2G+}i", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(")uUZR?GtXEIlr", 16384L);
      cpioArchiveEntry0.setMode(16384L);
      assertEquals(16384L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wjGXX/GBW7eUn", "hQPkrW[BR[`<E");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("wjGXX/GBW7eUn/hQPkrW[BR[`<E");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, mockFile0, "GD2c1<n}");
      boolean boolean0 = cpioArchiveEntry0.isDirectory();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals("GD2c1<n}", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("wjGXX/GBW7eUn");
      int int0 = cpioArchiveEntry0.getHeaderPadCount((-124L));
      assertEquals("wjGXX/GBW7eUn", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("KRAILER2!!", 4103L);
      int int0 = cpioArchiveEntry0.getHeaderPadCount(4103L);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(2, int0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((long) (short)4);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("9^tE<.#.*O00p", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "?MDM&M35]v(");
      int int0 = cpioArchiveEntry0.getHeaderPadCount((Charset) null);
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "j4+n0I");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, (String) null);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((Charset) null);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, int0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("/xN");
      cpioArchiveEntry0.setTime((-72L));
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals((-72L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("/xN");
      long long0 = cpioArchiveEntry0.getTime();
      assertEquals("/xN", cpioArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry1);
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(0, cpioArchiveEntry1.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertTrue(boolean0);
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals(76, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getUID());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("The suffix must not be null", 4294967295L);
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry("The suffix must not be null", 4294967295L);
      boolean boolean0 = cpioArchiveEntry1.equals(cpioArchiveEntry0);
      assertTrue(boolean0);
      assertEquals(0L, cpioArchiveEntry1.getUID());
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(110, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals(1, cpioArchiveEntry1.getDataPadCount());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertEquals("The suffix must not be null", cpioArchiveEntry1.getName());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ", 40960L);
      boolean boolean0 = cpioArchiveEntry0.equals("..*");
      assertEquals(40960L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertFalse(boolean0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals("Unknown mode. Full: ", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals((Object) null);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      MockFile mockFile0 = new MockFile("2%#X{a;A4~+Y+2g*c");
      CpioArchiveEntry cpioArchiveEntry1 = new CpioArchiveEntry(mockFile0, "2%#X{a;A4~+Y+2g*c");
      assertFalse(cpioArchiveEntry1.equals((Object)cpioArchiveEntry0));
      
      boolean boolean0 = cpioArchiveEntry0.equals(cpioArchiveEntry1);
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry1.getMode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getUID());
      assertEquals(0L, cpioArchiveEntry1.getSize());
      assertEquals(0L, cpioArchiveEntry1.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry1.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry1.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry1.getTime());
      assertEquals("2%#X{a;A4~+Y+2g*c", cpioArchiveEntry1.getName());
      assertEquals(4, cpioArchiveEntry1.getAlignmentBoundary());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.hashCode();
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setMode((short)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode. Full: 4 Masked: 0
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("s)TIT]S'1r6=;+)mo", 4294967295L);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize(4294967305L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <4294967305>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setSize((-356L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid entry size <-356>
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ", 40960L);
      cpioArchiveEntry0.setMode(40960L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(40960L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Unknown mode. Full: ", 40960L);
      boolean boolean0 = cpioArchiveEntry0.isSymbolicLink();
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(40960L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals("Unknown mode. Full: ", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("aC8:(d)\"%");
      cpioArchiveEntry0.setMode(49152L);
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(49152L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      boolean boolean0 = cpioArchiveEntry0.isSocket();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D)snvE8X-dd", "D)snvE8X-dd");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "D)snvE8X-dd");
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertTrue(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("D)snvE8X-dd", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isRegularFile();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("070702");
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals("070702", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertFalse(boolean0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("KRAILER2!!");
      cpioArchiveEntry0.setMode(36864L);
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(36864L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("/xN");
      boolean boolean0 = cpioArchiveEntry0.isNetwork();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals("/xN", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F!GC7");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "F!GC7");
      cpioArchiveEntry0.setMode(10000L);
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(10000L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/<OBEKMRFw?fQ=", "/<OBEKMRFw?fQ=");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "/<OBEKMRFw?fQ=");
      boolean boolean0 = cpioArchiveEntry0.isCharacterDevice();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("/<OBEKMRFw?fQ=", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/<OBEKMRFw?fQ=", "/<OBEKMRFw?fQ=");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "/<OBEKMRFw?fQ=");
      cpioArchiveEntry0.setMode(24576L);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(24576L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      boolean boolean0 = cpioArchiveEntry0.isBlockDevice();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertFalse(boolean0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(2L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(16384L, cpioArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("?NN6");
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(1L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals("?NN6", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(32768L, long0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      long long0 = cpioArchiveEntry0.getMode();
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, long0);
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("xq!");
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("xq!", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0, int0);
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals("", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, int0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("?NN6");
      int int0 = cpioArchiveEntry0.getHeaderPadCount();
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8);
      int int0 = cpioArchiveEntry0.getHeaderPadCount((long) (short)8);
      assertEquals(1, int0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(2, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      Charset charset0 = Charset.defaultCharset();
      int int0 = cpioArchiveEntry0.getHeaderPadCount(charset0);
      assertEquals(3, int0);
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("TRAILER!!!", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Invalid entry size <", "Invalid entry size <");
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)12, mockFile0, "Invalid entry size <");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)8, "/xN", 1L);
      int int0 = cpioArchiveEntry0.getDataPadCount();
      assertEquals(26, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = null;
      try {
        cpioArchiveEntry0 = new CpioArchiveEntry((short)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown header type
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)2);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDevice((short)2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "Cannot determine type of file ");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "Cannot determine type of file ");
      cpioArchiveEntry0.setGID((-2235L));
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals((-2235L), long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setDeviceMaj((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("/xN");
      long long0 = cpioArchiveEntry0.getRemoteDeviceMaj();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals("/xN", cpioArchiveEntry0.getName());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("?NN6");
      String string0 = cpioArchiveEntry0.getName();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("?NN6", string0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("TRAILER!!!");
      short short0 = cpioArchiveEntry0.getFormat();
      assertEquals(0L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      long long0 = cpioArchiveEntry0.getRemoteDevice();
      assertEquals(0L, long0);
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setChksum((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "Cannot determine type of file ");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "Cannot determine type of file ");
      long long0 = cpioArchiveEntry0.getGID();
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("Cannot determine type of file ", cpioArchiveEntry0.getName());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("/xN");
      long long0 = cpioArchiveEntry0.getChksum();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals("/xN", cpioArchiveEntry0.getName());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("KRAILER2!!", 4103L);
      cpioArchiveEntry0.setMode(4103L);
      boolean boolean0 = cpioArchiveEntry0.isPipe();
      assertEquals(4103L, cpioArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("shaded.org.apache.commons.io.filefilter.EmptyFileFilter");
      int int0 = cpioArchiveEntry0.getHeaderSize();
      assertEquals("shaded.org.apache.commons.io.filefilter.EmptyFileFilter", cpioArchiveEntry0.getName());
      assertEquals(110, int0);
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("xq!");
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals("xq!", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getDeviceMaj();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      int int0 = cpioArchiveEntry0.getAlignmentBoundary();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0, int0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile(" Masked: ", "Cannot determine type of file ");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(file0, "Cannot determine type of file ");
      long long0 = cpioArchiveEntry0.getUID();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(1392409281L, cpioArchiveEntry0.getTime());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, long0);
      assertEquals("Cannot determine type of file ", cpioArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("xq!");
      cpioArchiveEntry0.setDeviceMin(1L);
      long long0 = cpioArchiveEntry0.getDeviceMin();
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(1L, long0);
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("xq!", cpioArchiveEntry0.getName());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setDevice((-2093L));
      long long0 = cpioArchiveEntry0.getDevice();
      assertEquals((-2093L), long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      long long0 = cpioArchiveEntry0.getSize();
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, long0);
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.getRemoteDeviceMin();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      cpioArchiveEntry0.setNumberOfLinks((short)4);
      long long0 = cpioArchiveEntry0.getNumberOfLinks();
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(76, cpioArchiveEntry0.getHeaderSize());
      assertEquals(4L, long0);
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals(0, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getUID());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("KRAILER2!!");
      long long0 = cpioArchiveEntry0.getInode();
      assertEquals("KRAILER2!!", cpioArchiveEntry0.getName());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0L, long0);
      assertEquals(0L, cpioArchiveEntry0.getSize());
      assertEquals(0L, cpioArchiveEntry0.getGID());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4);
      // Undeclared exception!
      try { 
        cpioArchiveEntry0.setRemoteDeviceMin((short)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("+3pJbc$", "+3pJbc$", (File) null);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short)4, file0, "");
      cpioArchiveEntry0.setName("0#>");
      assertEquals("0#>", cpioArchiveEntry0.getName());
  }
}
