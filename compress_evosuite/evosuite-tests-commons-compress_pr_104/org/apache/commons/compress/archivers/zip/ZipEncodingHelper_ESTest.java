/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 06:52:46 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipEncodingHelper_ESTest extends ZipEncodingHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3742);
      ByteBuffer byteBuffer1 = ZipEncodingHelper.growBufferBy(byteBuffer0, 3742);
      assertEquals(7484, byteBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipEncoding zipEncoding0 = ZipEncodingHelper.getZipEncoding("org.apache.commons.compress.archivers.zip.ZipEncodingHelper");
      assertNotNull(zipEncoding0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2926);
      byteBuffer0.compact();
      // Undeclared exception!
      try { 
        ZipEncodingHelper.growBufferBy(byteBuffer0, (-292));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(49);
      // Undeclared exception!
      try { 
        ZipEncodingHelper.growBufferBy(byteBuffer0, (-2224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipEncodingHelper.getZipEncoding("FQe%Axm:Ml2b2");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // FQe%Axm:Ml2b2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = ZipEncodingHelper.isUTF8("fFw5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = ZipEncodingHelper.isUTF8("UTF8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = ZipEncodingHelper.isUTF8((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipEncoding zipEncoding0 = ZipEncodingHelper.getZipEncoding("UTF8");
      assertNotNull(zipEncoding0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipEncoding zipEncoding0 = ZipEncodingHelper.getZipEncoding((String) null);
      assertNotNull(zipEncoding0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipEncodingHelper.growBufferBy((ByteBuffer) null, (-26));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipEncodingHelper", e);
      }
  }
}
