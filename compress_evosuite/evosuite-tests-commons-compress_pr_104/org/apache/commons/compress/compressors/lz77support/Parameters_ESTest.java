/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 07:13:49 GMT 2025
 */

package org.apache.commons.compress.compressors.lz77support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Parameters_ESTest extends Parameters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMinBackReferenceLength(16);
      Parameters parameters0 = parameters_Builder1.build();
      int int0 = parameters0.getMinBackReferenceLength();
      assertEquals(16, parameters0.getNiceBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(15, parameters0.getMaxOffset());
      assertEquals(16, parameters0.getLazyMatchingThreshold());
      assertEquals(16, parameters0.getMaxLiteralLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(16, parameters0.getMaxBackReferenceLength());
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxBackReferenceLength(375);
      assertSame(parameters_Builder1, parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      parameters_Builder0.withNiceBackReferenceLength(0);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getNiceBackReferenceLength();
      assertEquals(0, int0);
      assertEquals(128, parameters0.getMaxLiteralLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals(0, parameters0.getLazyMatchingThreshold());
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(128, parameters0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withNiceBackReferenceLength((-44));
      Parameters parameters0 = parameters_Builder1.build();
      int int0 = parameters0.getNiceBackReferenceLength();
      assertTrue(parameters0.getLazyMatching());
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertEquals(128, parameters0.getMaxLiteralLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals((-44), parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(128, parameters0.getWindowSize());
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      parameters_Builder0.withMaxNumberOfCandidates((-1));
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getMaxCandidates();
      assertTrue(parameters0.getLazyMatching());
      assertEquals((-1), int0);
      assertEquals(16, parameters0.getMaxLiteralLength());
      assertEquals(7, parameters0.getNiceBackReferenceLength());
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(15, parameters0.getMaxOffset());
      assertEquals(15, parameters0.getMaxBackReferenceLength());
      assertEquals(7, parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getMinBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(1024);
      parameters_Builder0.withNiceBackReferenceLength((-408));
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getLazyMatchingThreshold();
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(1024, parameters0.getWindowSize());
      assertEquals(1023, parameters0.getMaxOffset());
      assertEquals(1023, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(1024, parameters0.getMaxLiteralLength());
      assertEquals((-408), int0);
      assertEquals((-408), parameters0.getNiceBackReferenceLength());
      assertEquals(256, parameters0.getMaxCandidates());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      parameters_Builder0.withLazyMatching(false);
      Parameters parameters0 = parameters_Builder0.build();
      boolean boolean0 = parameters0.getLazyMatching();
      assertEquals(3, parameters0.getNiceBackReferenceLength());
      assertEquals(1, parameters0.getMaxOffset());
      assertEquals(3, parameters0.getLazyMatchingThreshold());
      assertEquals(256, parameters0.getMaxCandidates());
      assertFalse(boolean0);
      assertEquals(2, parameters0.getMaxLiteralLength());
      assertEquals(2, parameters0.getWindowSize());
      assertEquals(1, parameters0.getMaxBackReferenceLength());
      assertEquals(3, parameters0.getMinBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxLiteralLength((-1083));
      assertSame(parameters_Builder1, parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      parameters_Builder0.withMaxLiteralLength(1);
      Parameters parameters0 = parameters_Builder0.build();
      assertEquals(15, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(7, parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(15, parameters0.getMaxOffset());
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(1, parameters0.getMaxLiteralLength());
      assertEquals(7, parameters0.getNiceBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxOffset((-413));
      assertSame(parameters_Builder1, parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxOffset(1552);
      assertSame(parameters_Builder0, parameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxBackReferenceLength((-2381));
      Parameters.Builder parameters_Builder2 = parameters_Builder1.withMinBackReferenceLength(0);
      assertSame(parameters_Builder1, parameters_Builder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxBackReferenceLength(3);
      assertSame(parameters_Builder0, parameters_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      // Undeclared exception!
      try { 
        parameters_Builder0.withMinBackReferenceLength(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minBackReferenceLength can't be bigger than windowSize
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.Parameters$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMinBackReferenceLength(0);
      assertSame(parameters_Builder1, parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parameters.builder(2147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be a power of two
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.Parameters$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parameters.builder((-278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be a power of two
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.Parameters$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getMaxLiteralLength();
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals(128, parameters0.getWindowSize());
      assertEquals(128, int0);
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(63, parameters0.getNiceBackReferenceLength());
      assertEquals(63, parameters0.getLazyMatchingThreshold());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getLazyMatchingThreshold();
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(16, parameters0.getMaxLiteralLength());
      assertEquals(7, parameters0.getNiceBackReferenceLength());
      assertEquals(7, int0);
      assertTrue(parameters0.getLazyMatching());
      assertEquals(15, parameters0.getMaxOffset());
      assertEquals(15, parameters0.getMaxBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getNiceBackReferenceLength();
      assertEquals(63, parameters0.getLazyMatchingThreshold());
      assertEquals(63, int0);
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(128, parameters0.getMaxLiteralLength());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(128, parameters0.getWindowSize());
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getMaxBackReferenceLength();
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals(128, parameters0.getWindowSize());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(63, parameters0.getNiceBackReferenceLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(127, int0);
      assertEquals(63, parameters0.getLazyMatchingThreshold());
      assertEquals(128, parameters0.getMaxLiteralLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getMaxOffset();
      assertEquals(63, parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(63, parameters0.getNiceBackReferenceLength());
      assertEquals(128, parameters0.getWindowSize());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(128, parameters0.getMaxLiteralLength());
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertEquals(127, int0);
      assertEquals(256, parameters0.getMaxCandidates());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getMaxCandidates();
      assertEquals(256, int0);
      assertEquals(2, parameters0.getMaxLiteralLength());
      assertEquals(2, parameters0.getWindowSize());
      assertEquals(1, parameters0.getMaxOffset());
      assertEquals(3, parameters0.getNiceBackReferenceLength());
      assertEquals(3, parameters0.getLazyMatchingThreshold());
      assertEquals(1, parameters0.getMaxBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(3, parameters0.getMinBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(128);
      Parameters parameters0 = parameters_Builder0.build();
      boolean boolean0 = parameters0.getLazyMatching();
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(128, parameters0.getWindowSize());
      assertEquals(127, parameters0.getMaxOffset());
      assertEquals(63, parameters0.getLazyMatchingThreshold());
      assertEquals(63, parameters0.getNiceBackReferenceLength());
      assertEquals(128, parameters0.getMaxLiteralLength());
      assertEquals(127, parameters0.getMaxBackReferenceLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getWindowSize();
      assertTrue(parameters0.getLazyMatching());
      assertEquals(1, parameters0.getMaxBackReferenceLength());
      assertEquals(3, parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(2, parameters0.getMaxLiteralLength());
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(1, parameters0.getMaxOffset());
      assertEquals(3, parameters0.getNiceBackReferenceLength());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.tunedForCompressionRatio();
      Parameters parameters0 = parameters_Builder1.build();
      assertEquals(32, parameters0.getMaxCandidates());
      assertEquals(16, parameters0.getMaxLiteralLength());
      assertEquals(15, parameters0.getLazyMatchingThreshold());
      assertEquals(15, parameters0.getMaxOffset());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(15, parameters0.getNiceBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(15, parameters0.getMaxBackReferenceLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.withMaxNumberOfCandidates(0);
      Parameters parameters0 = parameters_Builder1.build();
      int int0 = parameters0.getMaxCandidates();
      assertEquals(1, parameters0.getMaxOffset());
      assertEquals(3, parameters0.getLazyMatchingThreshold());
      assertEquals(3, parameters0.getNiceBackReferenceLength());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(1, parameters0.getMaxBackReferenceLength());
      assertEquals(0, int0);
      assertEquals(2, parameters0.getMaxLiteralLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(2, parameters0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(2);
      Parameters.Builder parameters_Builder1 = parameters_Builder0.tunedForSpeed();
      assertSame(parameters_Builder1, parameters_Builder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parameters.Builder parameters_Builder0 = Parameters.builder(16);
      parameters_Builder0.withLazyThreshold(0);
      Parameters parameters0 = parameters_Builder0.build();
      int int0 = parameters0.getLazyMatchingThreshold();
      assertEquals(256, parameters0.getMaxCandidates());
      assertEquals(16, parameters0.getMaxLiteralLength());
      assertEquals(7, parameters0.getNiceBackReferenceLength());
      assertTrue(parameters0.getLazyMatching());
      assertEquals(0, int0);
      assertEquals(16, parameters0.getWindowSize());
      assertEquals(15, parameters0.getMaxBackReferenceLength());
      assertEquals(3, parameters0.getMinBackReferenceLength());
      assertEquals(15, parameters0.getMaxOffset());
  }
}
