/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 07:02:50 GMT 2025
 */

package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BZip2CompressorOutputStream_ESTest extends BZip2CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)3;
      byteArray0[6] = (byte) (-1);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[16];
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      bZip2CompressorOutputStream2.write(byteArray0);
      bZip2CompressorOutputStream2.close();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[16];
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      bZip2CompressorOutputStream2.write(byteArray0);
      bZip2CompressorOutputStream0.write(1);
      bZip2CompressorOutputStream1.write(9);
      bZip2CompressorOutputStream0.write(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte) (-30);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-56);
      byteArray1[7] = (byte) (-112);
      bZip2CompressorOutputStream1.write(byteArray1);
      bZip2CompressorOutputStream2.write(byteArray1);
      bZip2CompressorOutputStream0.write(byteArray1);
      bZip2CompressorOutputStream0.write((int) (byte) (-56));
      bZip2CompressorOutputStream2.close();
      assertEquals("BZh21AY&SY\uFFFD\uFFFD\u001E\uFFFD\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFDpe$t\u0000u@\r1@\uFFFD\uFFFD@n R \uFFFDB\uFFFD\uFFFDP\uFFFDd\u0000\u0016\uFFFD\uFFFD\uFFFD\u0000\uFFFD\uFFFD\uFFFD\u0000h4\u0000\u0000\uFFFD\u0000z\uFFFD\uFFFD\u001A\u0003!\uFFFD\uFFFD\uFFFD\uFFFDi=OPEO)\uFFFD\uFFFD\u0003M\r\r\u0003F\uFFFD\u0003 \u0006M4\u0000\u0006\uFFFD\r\u0019\u0019!\uFFFD$\b=\b\u0000\uFFFDH\u0019#6\u001D\uFFFD\uFFFDL_GgiB\uFFFD\uFFFDx\uFFFD\u001F\uFFFD`\uFFFD\n\uFFFDq%\uFFFDs\uFFFDj\uFFFD&\uFFFD\uFFFDG\uFFFDOb\u001E\uFFFD\uFFFD\uFFFD`\u0007\uFFFD\u001A\uFFFD\uFFFD.\uFFFDC~\uFFFD\u0001d\uFFFD\u0015\uFFFD\uFFFD\u0005\uFFFD\uFFFDq>\u0006*%n\uFFFDP\uFFFD8\uFFFDU\r\uFFFDP\uFFFDm\uFFFD\uFFFDXG\uFFFD\uFFFD0\u001C\uFFFD\u0001\uFFFD\uFFFD\u0007\uFFFDd\f\uFFFD\uFFFD \uFFFD\uFFFDl/\uFFFD~p]\uFFFD\u0014\uFFFDBB\u0016\uFFFD{\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(224, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[0];
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(0L);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 9, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[17];
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, 2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[16];
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      BZip2CompressorOutputStream bZip2CompressorOutputStream3 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream2, 4);
      bZip2CompressorOutputStream3.write(byteArray0);
      // Undeclared exception!
      bZip2CompressorOutputStream3.close();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream0.finish();
      try { 
        bZip2CompressorOutputStream1.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[7];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.finish();
      assertEquals(38, byteArrayOutputStream0.size());
      assertEquals("BZh21AY&SY~\uFFFD6\uFFFD\u0000\u0000\u0000@\u0000H\u0000 \u00000\uFFFDAA\uFFFD\uFFFD\"\uFFFD(H?}\uFFFD\\\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)16;
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[4];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
      assertEquals(37, byteArrayOutputStream0.size());
      assertEquals("BZh21AY&SY8\uFFFD\"\uFFFD\u0000\u0000\u0001\uFFFD\u0000@\u0000 \u00000\uFFFD#X]\uFFFD\u0014\uFFFDB@\uFFFD\uFFFD\u0010", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[17];
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
      bZip2CompressorOutputStream1.close();
      assertEquals(62, byteArrayOutputStream0.size());
      assertEquals("BZh21AY&SY\uFFFD\uFFFD!\uFFFD\u0000\u0000\u0002\uFFFD@\u0002\u0000\uFFFD\u0010@\u0012\u0000@\u0010\u0000@\u0010\u0000@\u0000 \u00001\u0003@\uFFFD \u0003F\uFFFD\uFFFD\u0012xQ\u001Ax\uFFFD\uFFFD\uFFFD)\u0084\uFFFD\u001F\uFFFD\u000E@", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[35];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0, 2, 9);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0, 2, 9);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.finish();
      byte[] byteArray0 = new byte[2];
      try { 
        bZip2CompressorOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, 2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(2) + len(2) > buf.length(0).
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, (int) (byte) (-15), 104);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(-15) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 2, (-256));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // len(-256) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.flush();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("BZh", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.flush();
      assertEquals("BZh2\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(14, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.close();
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("BZh2\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.finalize();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(2, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.finalize();
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("BZh2\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.finish();
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = null;
      try {
        bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(pipedOutputStream0, 1948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(1948) > 9
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, (-1812));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(-1812) < 1
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize((-2689L));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.write(516);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 2);
      bZip2CompressorOutputStream1.close();
      assertEquals("BZh21AY&SYPz\u0664\u0000\u0000\u0002\uFFFDD\u0000\u0000\uFFFD\u0010@\u0012\u0000@\u0010\u0000@\u0010\u0000@\u0000 \u0000\"\u00004h@\uFFFD4\u000B*O\n#O\u001F\u0017rE8P\uFFFDPz\u0664", byteArrayOutputStream0.toString());
      assertEquals(61, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream1.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      int int0 = bZip2CompressorOutputStream0.getBlockSize();
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(byteArrayOutputStream0, 2);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.finish();
      assertEquals(14, byteArrayOutputStream0.size());
      assertEquals("BZh2\u0017rE8P\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }
}
