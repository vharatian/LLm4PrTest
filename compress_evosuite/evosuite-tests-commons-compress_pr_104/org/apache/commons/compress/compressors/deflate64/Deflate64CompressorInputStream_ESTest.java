/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 07:07:49 GMT 2025
 */

package org.apache.commons.compress.compressors.deflate64;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Deflate64CompressorInputStream_ESTest extends Deflate64CompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      int int0 = deflate64CompressorInputStream0.read((byte[]) null, 577, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      int int0 = deflate64CompressorInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream(byteArrayInputStream0);
      try { 
        deflate64CompressorInputStream0.read(byteArray0, 1994, 1994);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid Deflate64 input
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((InputStream) null);
      try { 
        deflate64CompressorInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid Deflate64 input
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream(byteArrayInputStream0);
      try { 
        deflate64CompressorInputStream0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        deflate64CompressorInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream(mockFileInputStream0);
      try { 
        deflate64CompressorInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      byte[] byteArray0 = new byte[6];
      int int0 = deflate64CompressorInputStream0.read(byteArray0, 9, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream(pipedInputStream0);
      deflate64CompressorInputStream0.close();
      assertEquals(0L, deflate64CompressorInputStream0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      Deflate64CompressorInputStream deflate64CompressorInputStream1 = new Deflate64CompressorInputStream(deflate64CompressorInputStream0);
      int int0 = deflate64CompressorInputStream1.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      int int0 = deflate64CompressorInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      Deflate64CompressorInputStream deflate64CompressorInputStream1 = new Deflate64CompressorInputStream(deflate64CompressorInputStream0);
      byte[] byteArray0 = new byte[6];
      try { 
        deflate64CompressorInputStream1.read(byteArray0, 0, (-1));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((InputStream) null);
      long long0 = deflate64CompressorInputStream0.getCompressedCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Deflate64CompressorInputStream deflate64CompressorInputStream0 = new Deflate64CompressorInputStream((HuffmanDecoder) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(deflate64CompressorInputStream0, deflate64CompressorInputStream0);
      int int0 = sequenceInputStream0.read();
      assertEquals((-1), int0);
  }
}
