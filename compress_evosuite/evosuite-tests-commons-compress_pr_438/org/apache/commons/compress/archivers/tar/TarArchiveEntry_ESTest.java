/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 19:01:03 GMT 2025
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.InvalidPathException;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveStructSparse;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setDevMajor(0);
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("unix", (byte)77, false);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertEquals("unix", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)77, tarArchiveEntry0.getLinkFlag());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("linux/", (byte)124);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals((byte)124, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate", (byte)77);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals((byte)77, tarArchiveEntry0.getLinkFlag());
      assertEquals("=7SL|ad;Q5Ate", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/.luEuS:/PEvx", (byte)100);
      tarArchiveEntry0.isGNULongNameEntry();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(".luEuS:/PEvx", tarArchiveEntry0.getName());
      assertEquals((byte)100, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("unix", (byte)77, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals("unix", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)77, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;", (byte) (-66));
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte) (-66), tarArchiveEntry0.getLinkFlag());
      assertEquals("yK+yr;", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("unix", (byte)77, false);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("unix", tarArchiveEntry0.getName());
      assertEquals((byte)77, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(}n2", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals("(}n2", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(tarArchiveEntry0.isBlockDevice());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("linux/");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertFalse(boolean0);
      assertEquals("linux/", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)53, tarArchiveEntry0.getLinkFlag());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.common.io.file.NopPathVisitor");
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(7L, 31);
      linkedList0.add(tarArchiveStructSparse0);
      TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(33188, 16877);
      linkedList0.offerLast(tarArchiveStructSparse1);
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      try { 
        tarArchiveEntry0.getOrderedSparseHeaders();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Corrupted TAR archive. Sparse block extends beyond real size of the entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-74), true);
      tarArchiveEntry0.setName("A)");
      assertEquals("A)", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Nb'*wYV:;Nkw__R;ed", (byte)91);
      FileTime fileTime0 = FileTime.fromMillis(0L);
      tarArchiveEntry0.setLastModifiedTime(fileTime0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("Nb'*wYV:;Nkw__R;ed", tarArchiveEntry0.getName());
      assertEquals((byte)91, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      Date date0 = tarArchiveEntry0.getModTime();
      tarArchiveEntry0.setModTime(date0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("{F9[%NVO(5X\"", (byte) (-35));
      FileTime fileTime0 = FileTime.fromMillis(16877);
      tarArchiveEntry0.setModTime(fileTime0);
      assertEquals("{F9[%NVO(5X\"", tarArchiveEntry0.getName());
      assertEquals((byte) (-35), tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile(".");
          Path path0 = mockFile0.toPath();
          LinkOption[] linkOptionArray0 = new LinkOption[1];
          LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
          linkOptionArray0[0] = linkOption0;
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(path0, "J", linkOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:625)
             // sun.reflect.GeneratedConstructorAccessor89.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",d3wj*eO$", (byte)104);
      assertFalse(tarArchiveEntry0.isSparse());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      tarArchiveEntry0.isStarSparse();
      assertEquals((byte)104, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("@", (byte) (-38), true);
      Map<String, String> map0 = tarArchiveEntry0.getExtraPaxHeaders();
      tarArchiveEntry0.fillGNUSparse1xData(map0);
      tarArchiveEntry0.isPaxGNUSparse();
      assertTrue(tarArchiveEntry0.isPaxGNU1XSparse());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",", (byte)89);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillGNUSparse1xData(map0);
      tarArchiveEntry0.isPaxGNU1XSparse();
      assertEquals(",", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)89, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4)fgnw(}Sv;*&[aJ;?J");
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(" to be annotated with ");
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
      assertEquals((-1L), tarArchiveEntry1.getDataOffset());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertEquals((byte)48, tarArchiveEntry1.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      tarArchiveEntry0.setUserName((String) null);
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals("0", tarArchiveEntry0.getName());
      assertNull(string0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$VALUES", true);
      tarArchiveEntry0.setUserId(1719);
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(1719L, tarArchiveEntry0.getLongUserId());
      assertEquals(1719, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7yL|adhQ3fte");
      tarArchiveEntry0.setUserId((-53786696));
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals((-53786696L), tarArchiveEntry0.getLongUserId());
      assertEquals((-53786696), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      FileTime fileTime0 = tarArchiveEntry0.getLastModifiedTime();
      tarArchiveEntry0.setStatusChangeTime(fileTime0);
      tarArchiveEntry0.getStatusChangeTime();
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("y2NE&t2{^,/O");
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      tarArchiveEntry0.getSparseHeaders();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("y2NE&t2{^,/O", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(0L, 0L);
      linkedList0.add(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3&arh6LZ7,R", (byte) (-56));
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      tarArchiveEntry0.getSparseHeaders();
      assertEquals("3&arh6LZ7,R", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte) (-56), tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4)fgnw}Sv*&[aJ;?J", (byte)8);
      tarArchiveEntry0.setSize((byte)8);
      long long0 = tarArchiveEntry0.getSize();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("linux/");
      assertEquals(0L, tarArchiveEntry0.getSize());
      
      tarArchiveEntry0.setSize(2097151L);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(2097151L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)59);
      String string0 = tarArchiveEntry0.getName();
      assertEquals("", string0);
      assertEquals((byte)59, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)59, false);
      tarArchiveEntry0.setMode((-1044));
      int int0 = tarArchiveEntry0.getMode();
      assertEquals((-1044), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("f2j)xG-N", (byte)89);
      tarArchiveEntry0.setUserId(1171);
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals(1171L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "'jB$E%nu{h\\us-z1l=Y";
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(string0, false);
      tarArchiveEntry0.setIds((-1145), (-1145));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals((-1145L), tarArchiveEntry0.getLongGroupId());
      assertEquals((-1145L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("e7?`s", false);
      tarArchiveEntry0.setGroupId((long) 127);
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals(127, tarArchiveEntry0.getGroupId());
      assertEquals(127L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(c..*)?");
      tarArchiveEntry0.setGroupId((-4200L));
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals((-4200), tarArchiveEntry0.getGroupId());
      assertEquals((-4200L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.realsize");
      tarArchiveEntry0.setLinkName((String) null);
      String string0 = tarArchiveEntry0.getLinkName();
      assertNull(string0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("GNU.sparse.realsize", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("!4s*%.6BM8-Zk", (byte)44);
      tarArchiveEntry0.setLinkName("K+y;");
      tarArchiveEntry0.getLinkName();
      assertEquals("K+y;", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("bTd.FrF", (byte) (-53), false);
      byte byte0 = tarArchiveEntry0.getLinkFlag();
      assertEquals((byte) (-53), byte0);
      assertEquals("bTd.FrF", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(")B@;Ap'UI43l", (byte)8);
      tarArchiveEntry0.setNames("Nc`II&m/<0", (String) null);
      tarArchiveEntry0.getGroupName();
      assertEquals("Nc`II&m/<0", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-79));
      tarArchiveEntry0.setNames("", "y");
      tarArchiveEntry0.getGroupName();
      assertEquals("y", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",", (byte)45);
      tarArchiveEntry0.setGroupId(10);
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals(10L, tarArchiveEntry0.getLongGroupId());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("S");
      tarArchiveEntry0.setGroupId((-1L));
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((-1L), tarArchiveEntry0.getLongGroupId());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",", false);
      tarArchiveEntry0.addPaxHeader(",", ",");
      String string0 = tarArchiveEntry0.getExtraPaxHeader(",");
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertNotNull(string0);
      assertEquals(",", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("rCOhr*2v4Yp;weXV");
      tarArchiveEntry0.addPaxHeader("rCOhr*2v4Yp;weXV", "");
      String string0 = tarArchiveEntry0.getExtraPaxHeader("rCOhr*2v4Yp;weXV");
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("rCOhr*2v4Yp;weXV", tarArchiveEntry0.getName());
      assertNotNull(string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate", (byte)79);
      tarArchiveEntry0.setDevMinor((byte)79);
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]F'B/");
      tarArchiveEntry0.setDevMajor(4096);
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(4096, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">uY1<B\"tun'+E2", (byte)0);
      tarArchiveEntry0.setDataOffset((byte)0);
      long long0 = tarArchiveEntry0.getDataOffset();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate", (byte)79);
      tarArchiveEntry0.setDataOffset(913L);
      long long0 = tarArchiveEntry0.getDataOffset();
      assertEquals(913L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)59);
      tarArchiveEntry0.addPaxHeader("LIBARCHIVE.creationtime", "2");
      FileTime fileTime0 = tarArchiveEntry0.getCreationTime();
      assertEquals((byte)59, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertNotNull(fileTime0);
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(";\"Vd[1S", (byte)120);
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(17);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" to be annotated with ", true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, (ZipEncoding) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(";\"Vd[1S", (byte)120);
      tarArchiveEntry0.addPaxHeader(";\"Vd[1S", ";\"Vd[1S");
      tarArchiveEntry0.getExtraPaxHeaders();
      tarArchiveEntry0.isPaxHeader();
      tarArchiveEntry0.getSize();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)120);
      ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, (ByteBuffer) null).when(zipEncoding0).encode(anyString());
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/=KO7SL|ad;Q5Ate", (byte) (-101));
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.updateEntryFromPaxHeaders((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("LIBARCHIVE.creationtime");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("apply");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;", (byte) (-66));
      // Undeclared exception!
      try { 
        tarArchiveEntry0.isDescendent((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("775:Su@#Wf[");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.common.io.file.NopPathVisitor");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("uname");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.addPaxHeader((String) null, ",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null, false, 4096L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(hashMap0, byteArray0, (ZipEncoding) null, false, (-2319L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((Map<String, String>) null, (byte[]) null, (ZipEncoding) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      byte[] byteArray0 = new byte[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(map0, byteArray0, (ZipEncoding) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("9j/", "9j/");
      Path path0 = mockFile0.toPath();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(path0, "9j/", linkOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)97, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte)72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ustar\u0000");
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "ustar\u0000");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, ",2OV,/SHRoE%coOI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("istar\u0000");
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I^o:tx? V~1");
      tarArchiveEntry0.setDevMinor((byte)0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("I^o:tx? V~1", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("D|Fuc4ul");
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("D|Fuc4ul", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate", (byte)77);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.fillGNUSparse1xData(map0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(tarArchiveEntry0.isGNUSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate");
      Map<String, String> map0 = tarArchiveEntry0.getExtraPaxHeaders();
      tarArchiveEntry0.fillStarSparseData(map0);
      boolean boolean0 = tarArchiveEntry0.isSparse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("paths must have the same root", (byte)88);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertTrue(boolean0);
      assertEquals("paths must have the same root", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isPaxHeader();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("~", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals((byte)103, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("f2j)xG-N", (byte)89);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)89, tarArchiveEntry0.getLinkFlag());
      assertFalse(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("f2j)xG-N", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("#SuTNU", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("#SuTNU", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("i?GR");
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals("i?GR", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("linux/");
      tarArchiveEntry0.addPaxHeader("GNU.sparse.realsize", "linux/");
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertTrue(tarArchiveEntry0.isPaxGNU1XSparse());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",", (byte)89);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals((byte)89, tarArchiveEntry0.getLinkFlag());
      assertEquals(",", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("OH{c9@;aPT_z&~O0");
      tarArchiveEntry0.equals(tarArchiveEntry0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("OH{c9@;aPT_z&~O0", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("@", (byte) (-38), true);
      tarArchiveEntry0.isPaxGNUSparse();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("@", tarArchiveEntry0.getName());
      assertEquals((byte) (-38), tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar\u0000");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setLastModifiedTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Time must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(}n2", (byte) (-50));
      tarArchiveEntry0.setUserName("1indo5slinmx");
      tarArchiveEntry0.getUserName();
      assertEquals("1indo5slinmx", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7(/Uj&ij<", (byte) (-107));
      tarArchiveEntry0.setGroupName("7(/Uj&ij<");
      assertEquals("7(/Uj&ij<", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Minor device number is out of range: ", (byte)120);
      tarArchiveEntry0.setCreationTime((FileTime) null);
      assertEquals("Minor device number is out of range: ", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)120, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Nb'*wYV:;Nkw__R;ed", (byte)91);
      tarArchiveEntry0.setUserId((-778L));
      assertEquals((-778), tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;", (byte) (-66));
      String string0 = tarArchiveEntry0.getName();
      assertEquals((byte) (-66), tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("yK+yr;", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",d3wj*eO$", (byte)104);
      tarArchiveEntry0.isStarSparse();
      assertEquals((byte)104, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(",d3wj*eO$", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("aQute.lib.env.Selector");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        tarArchiveEntry0.parseTarHeader(byteArray0, (ZipEncoding) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]F'B/");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("*J}D1([usm", false);
      tarArchiveEntry0.setLastAccessTime((FileTime) null);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("*J}D1([usm", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0y(d8>Xf:0");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveEntry0.updateEntryFromPaxHeaders(map0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("0y(d8>Xf:0", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setSize((byte) (-66));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size is out of range: -66
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("LIBARCHIVE.creationtime");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMinor((-1862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minor device number is out of range: -1862
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" to declare exactly one property named value of an array type");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDevMajor((-583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Major device number is out of range: -583
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("uame");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setDataOffset((-3749L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset can not be smaller than 0
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("", "");
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "gname/");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:537)
             // sun.reflect.GeneratedConstructorAccessor92.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile(".", ".");
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ".");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:537)
             // sun.reflect.GeneratedConstructorAccessor92.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("");
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:537)
             // sun.reflect.GeneratedConstructorAccessor92.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      tarArchiveEntry0.addPaxHeader("SCHILY.devminor", "0");
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("aG}|kOE<*c&I");
      tarArchiveEntry0.addPaxHeader("SCHILY.filetype", "aG}|kOE<*c&I");
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("aG}|kOE<*c&I", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      tarArchiveEntry0.addPaxHeader("size", "0");
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.addPaxHeader("GNU.sparse.size", "GNU.sparse.size");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7");
      tarArchiveEntry0.addPaxHeader("SCHILY.devmajor", "7");
      assertEquals(7, tarArchiveEntry0.getDevMajor());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("value", (byte)50);
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("value", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",");
      boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
      assertFalse(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(",", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      assertFalse(tarArchiveEntry0.isSparse());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveEntry0.fillStarSparseData(hashMap0);
      long long0 = tarArchiveEntry0.getRealSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate", (byte)120);
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(boolean0);
      assertTrue(tarArchiveEntry0.isPaxHeader());
      assertEquals("=7SL|ad;Q5Ate", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)120, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("9./", (byte)49);
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals("9./", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Eof)l9!b{Q\"iZ1");
      boolean boolean0 = tarArchiveEntry0.isLink();
      assertEquals("Eof)l9!b{Q\"iZ1", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]F'B/", (byte)83);
      boolean boolean0 = tarArchiveEntry0.isGNUSparse();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals("|.QR4)sv]F'B/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" IX(X:U", (byte)76);
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(" IX(X:U", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("_|.QR4Dsv]FqBI");
      boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
      assertFalse(boolean0);
      assertEquals("_|.QR4Dsv]FqBI", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("VW6<[ @\"+Fuo5tC]Qd:", (byte)75, false);
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertTrue(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("VW6<[ @\"+Fuo5tC]Qd:", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Time must not be null");
      boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("Time must not be null", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~", (byte)103);
      boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertTrue(boolean0);
      assertEquals("~", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]FqB/");
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertFalse(boolean0);
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.common.io.file.NopPathVisitor");
      boolean boolean0 = tarArchiveEntry0.isFile();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.common.io.file.NopPathVisitor", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("OH{c9@;aUT@9~Or%0", (byte)0);
      tarArchiveEntry0.isFile();
      assertEquals((byte)0, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("linux", (byte)54);
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("linux", tarArchiveEntry0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("i?GR");
      boolean boolean0 = tarArchiveEntry0.isFIFO();
      assertEquals("i?GR", tarArchiveEntry0.getName());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("apply");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("apply", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertFalse(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]FqB/");
      boolean boolean0 = tarArchiveEntry0.isDirectory();
      assertEquals("|.QR4)sv]FqB/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals((byte)53, tarArchiveEntry0.getLinkFlag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("`|4$#r9RVhK", (byte)51);
      boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("`|4$#r9RVhK", tarArchiveEntry0.getName());
      assertTrue(boolean0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("java.Nang.StackWalker");
      tarArchiveEntry0.isCharacterDevice();
      assertEquals("java.Nang.StackWalker", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("(}n2", (byte)52);
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals("(}n2", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("I.RvNO$");
      boolean boolean0 = tarArchiveEntry0.isBlockDevice();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("I.RvNO$", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(1L, 0L);
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows");
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      tarArchiveEntry0.setSize(5L);
      assertEquals(5L, tarArchiveEntry0.getRealSize());
      
      List<TarArchiveStructSparse> list0 = tarArchiveEntry0.getOrderedSparseHeaders();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(47L, 47L);
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast(tarArchiveStructSparse0);
      linkedList0.offerLast(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("///home/azureuser/LLm4PrTest/compress_experiment_2/Container creation requires an assignable array as return value: /1H!pGD$pX`wBwF(-", true);
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      try { 
        tarArchiveEntry0.getOrderedSparseHeaders();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Corrupted TAR archive. Sparse blocks for ///home/azureuser/LLm4PrTest/compress_experiment_2/Container creation requires an assignable array as return value: /1H!pGD$pX`wBwF(- overlap each other.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(1L, 0L);
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast(tarArchiveStructSparse0);
      linkedList0.offerLast(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("windows");
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      try { 
        tarArchiveEntry0.getOrderedSparseHeaders();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Corrupted TAR archive. Sparse block extends beyond real size of the entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(0L, 3580L);
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("9bhs>");
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      try { 
        tarArchiveEntry0.getOrderedSparseHeaders();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Corrupted TAR archive. Sparse block extends beyond real size of the entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TarArchiveStructSparse tarArchiveStructSparse0 = new TarArchiveStructSparse(0L, 0L);
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast(tarArchiveStructSparse0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/SCHILY.oevmior");
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      List<TarArchiveStructSparse> list0 = tarArchiveEntry0.getOrderedSparseHeaders();
      assertFalse(list0.contains(tarArchiveStructSparse0));
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("SCHILY.oevmior", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<TarArchiveStructSparse> linkedList0 = new LinkedList<TarArchiveStructSparse>();
      linkedList0.offerLast((TarArchiveStructSparse) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(".", true);
      tarArchiveEntry0.setSparseHeaders(linkedList0);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.getOrderedSparseHeaders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" IX(X:U");
      List<TarArchiveStructSparse> list0 = tarArchiveEntry0.getOrderedSparseHeaders();
      tarArchiveEntry0.setSparseHeaders(list0);
      tarArchiveEntry0.getOrderedSparseHeaders();
      assertEquals(" IX(X:U", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("java.Nang.StackWalker");
      tarArchiveEntry0.getFile();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("java.Nang.StackWalker", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",");
      tarArchiveEntry0.getDirectoryEntries();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(",", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7");
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(")");
      boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
      assertFalse(boolean0);
      assertEquals((byte)48, tarArchiveEntry1.getLinkFlag());
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertEquals((-1L), tarArchiveEntry1.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.common.io.file.NopPathVisitor");
      boolean boolean0 = tarArchiveEntry0.equals((TarArchiveEntry) null);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
      assertEquals("org.apache.common.io.file.NopPathVisitor", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=7SL|ad;Q5Ate");
      tarArchiveEntry0.equals((Object) tarArchiveEntry0);
      assertEquals("=7SL|ad;Q5Ate", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$", false);
      boolean boolean0 = tarArchiveEntry0.equals((Object) "$");
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("$", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("$", true);
      boolean boolean0 = tarArchiveEntry0.equals((Object) null);
      assertEquals("$", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((Path) null, "=/", (LinkOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Minor device number is out of range: ");
      Path path0 = mockFile0.toPath();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("value");
          mockFile0.mkdirs();
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:537)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:499)
             // sun.reflect.GeneratedConstructorAccessor82.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("LIBARCHIVE.creationtime");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.addPaxHeader("LIBARCHIVE.creationtime", "LIBARCHIVE.creationtime");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.common.io.file.NopPathVisitor");
      tarArchiveEntry0.getLastModifiedDate();
      assertEquals("org.apache.common.io.file.NopPathVisitor", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;", (byte) (-66));
      tarArchiveEntry0.setModTime((long) (byte) (-66));
      assertEquals((byte) (-66), tarArchiveEntry0.getLinkFlag());
      assertEquals("yK+yr;", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("gid");
      tarArchiveEntry0.getExtraPaxHeader("\"s");
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("gid", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("yK+yr;", (byte) (-65));
      long long0 = tarArchiveEntry0.getLongUserId();
      assertEquals("yK+yr;", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte) (-65), tarArchiveEntry0.getLinkFlag());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Corrupted PAX header. Time field value is invalid '");
      tarArchiveEntry0.getCreationTime();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("Corrupted PAX header. Time field value is invalid '", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("{$K2`F-U}#E\"");
      int int0 = tarArchiveEntry0.getUserId();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("{$K2`F-U}#E\"", tarArchiveEntry0.getName());
      assertEquals(0, int0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null, false, (-267L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry(hashMap0, (byte[]) null, (ZipEncoding) null, true, 2046L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      long long0 = tarArchiveEntry0.getDataOffset();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("2");
      tarArchiveEntry0.isExtended();
      assertEquals("2", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("java.Nang.StackWalker");
      long long0 = tarArchiveEntry0.getLongGroupId();
      assertEquals("java.Nang.StackWalker", tarArchiveEntry0.getName());
      assertEquals(0L, long0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("java.Nang.StackWalker");
      int int0 = tarArchiveEntry0.getGroupId();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(0, int0);
      assertEquals("java.Nang.StackWalker", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4)fgnw(}Sv;*&[aJ;?J");
      boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry0);
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("4)fgnw(}Sv;*&[aJ;?J", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("D|Fuc4ul");
      tarArchiveEntry0.hashCode();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("D|Fuc4ul", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("uname");
      tarArchiveEntry0.addPaxHeader("uname", "uname");
      assertEquals("uname", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" ~ot3dOHD0<<;'\u00039&");
      tarArchiveEntry0.getSparseHeaders();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(" ~ot3dOHD0<<;'\u00039&", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]F'B/");
      tarArchiveEntry0.getLastAccessTime();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)53, tarArchiveEntry0.getLinkFlag());
      assertEquals("|.QR4)sv]F'B/", tarArchiveEntry0.getName());
      assertEquals(16877, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ZEv4Uir5H");
      tarArchiveEntry0.getStatusChangeTime();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("ZEv4Uir5H", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      tarArchiveEntry0.addPaxHeader("atime", "0");
      FileTime fileTime0 = tarArchiveEntry0.getLastAccessTime();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertNotNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("6-BPD:6bj");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Time must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ctime");
      tarArchiveEntry0.addPaxHeader("ctime", "5");
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("ctime", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.realsize");
      String string0 = tarArchiveEntry0.getGroupName();
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("GNU.sparse.realsize", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("LIBARCHIVE.creationtime");
      int int0 = tarArchiveEntry0.getDevMinor();
      assertEquals("LIBARCHIVE.creationtime", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0, int0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("posix");
      tarArchiveEntry0.isPaxGNU1XSparse();
      assertEquals("posix", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",");
      // Undeclared exception!
      try { 
        tarArchiveEntry0.setModTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Time must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"?");
      String string0 = tarArchiveEntry0.getLinkName();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("\"?", tarArchiveEntry0.getName());
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("net.bytebuddy.matcher.ElementMatcher$Junction$AbstractBase");
      byte byte0 = tarArchiveEntry0.getLinkFlag();
      assertEquals("net.bytebuddy.matcher.ElementMatcher$Junction$AbstractBase", tarArchiveEntry0.getName());
      assertEquals((byte)48, byte0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      tarArchiveEntry0.clearExtraPaxHeaders();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("|.QR4)sv]F'B/");
      tarArchiveEntry0.getPath();
      assertEquals(16877, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)53, tarArchiveEntry0.getLinkFlag());
      assertEquals("|.QR4)sv]F'B/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("LIBARCHIVE.creationtime");
      tarArchiveEntry0.isCheckSumOK();
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("LIBARCHIVE.creationtime", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("2");
      tarArchiveEntry0.addPaxHeader("mtime", "2");
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("2", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("[.j,.&LIHPNvaJ6!");
      int int0 = tarArchiveEntry0.getDevMajor();
      assertEquals(0, int0);
      assertEquals("[.j,.&LIHPNvaJ6!", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("AN%dD");
          TarArchiveEntry tarArchiveEntry0 = null;
          try {
            tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"accessUserInformation\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:148)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:214)
             // sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:131)
             // sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)
             // sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
             // java.nio.file.Files.readAttributes(Files.java:1737)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(TarArchiveEntry.java:1778)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:537)
             // org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:499)
             // sun.reflect.GeneratedConstructorAccessor82.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:218)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:173)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("path");
      tarArchiveEntry0.addPaxHeader("path", "path");
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("path", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0");
      tarArchiveEntry0.addPaxHeader("gid", "0");
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("0", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(",", (byte)89);
      tarArchiveEntry0.addPaxHeader("linkpath", "Corrupted TAR archive.");
      assertEquals("Corrupted TAR archive.", tarArchiveEntry0.getLinkName());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("gname");
      tarArchiveEntry0.addPaxHeader("gname", "gname");
      assertEquals("gname", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7");
      tarArchiveEntry0.addPaxHeader("uid", "7");
      assertEquals(7L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("OH{c9@;aPT_z&~O0");
      int int0 = tarArchiveEntry0.getMode();
      assertEquals(33188, int0);
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
      assertEquals("OH{c9@;aPT_z&~O0", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = null;
      try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("unix:ctime");
      String string0 = tarArchiveEntry0.getUserName();
      assertEquals("", string0);
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals("unix:ctime", tarArchiveEntry0.getName());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4)fgnw(}Sv;*&[aJ;?J");
      tarArchiveEntry0.isStreamContiguous();
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("4)fgnw(}Sv;*&[aJ;?J", tarArchiveEntry0.getName());
      assertEquals((-1L), tarArchiveEntry0.getDataOffset());
      assertEquals((byte)48, tarArchiveEntry0.getLinkFlag());
  }
}
