/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:13:10 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.archivers.zip.ZipIoUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipIoUtil_ESTest extends ZipIoUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2345);
      // Undeclared exception!
      try { 
        ZipIoUtil.writeFullyAt((FileChannel) null, byteBuffer0, 2345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipIoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ZipIoUtil.writeFullyAt((FileChannel) null, byteBuffer0, 0);
      assertFalse(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2345);
      // Undeclared exception!
      try { 
        ZipIoUtil.writeFully((SeekableByteChannel) null, byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipIoUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ZipIoUtil.writeFully((SeekableByteChannel) null, byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
  }
}
