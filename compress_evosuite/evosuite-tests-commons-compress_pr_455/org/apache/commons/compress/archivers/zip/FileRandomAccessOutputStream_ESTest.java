/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:01:42 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.FileChannel;
import java.nio.file.FileSystem;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.spi.FileSystemProvider;
import org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileRandomAccessOutputStream_ESTest extends FileRandomAccessOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      byte[] byteArray0 = new byte[3];
      fileRandomAccessOutputStream0.write(byteArray0, 1, 0);
      assertEquals(0L, fileRandomAccessOutputStream0.position());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.writeFullyAt((byte[]) null, 0, 0, (long) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.writeFullyAt(byteArray0, (-12), (-12), (long) (-12));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.write((byte[]) null, 663, 663);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.write(byteArray0, 3578, 3578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = null;
      try {
        fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((Path) null, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = null;
      try {
        fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.channels.FileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.writeFullyAt(byteArray0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      byte[] byteArray0 = new byte[4];
      fileRandomAccessOutputStream0.writeFullyAt(byteArray0, 0, 0, (-1233L));
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      FileChannel fileChannel0 = fileRandomAccessOutputStream0.channel();
      assertNull(fileChannel0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      long long0 = fileRandomAccessOutputStream0.position();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream((FileChannel) null);
      // Undeclared exception!
      try { 
        fileRandomAccessOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemProvider fileSystemProvider0 = mock(FileSystemProvider.class, new ViolatedAssumptionAnswer());
      doReturn((FileChannel) null).when(fileSystemProvider0).newFileChannel(any(java.nio.file.Path.class) , anySet() , any(java.nio.file.attribute.FileAttribute[].class));
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemProvider0).when(fileSystem0).provider();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystem0).when(path0).getFileSystem();
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream(path0);
      assertEquals(0L, fileRandomAccessOutputStream0.position());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemProvider fileSystemProvider0 = mock(FileSystemProvider.class, new ViolatedAssumptionAnswer());
      doReturn((FileChannel) null).when(fileSystemProvider0).newFileChannel(any(java.nio.file.Path.class) , anySet() , any(java.nio.file.attribute.FileAttribute[].class));
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemProvider0).when(fileSystem0).provider();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystem0).when(path0).getFileSystem();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      FileRandomAccessOutputStream fileRandomAccessOutputStream0 = new FileRandomAccessOutputStream(path0, openOptionArray0);
      assertEquals(0L, fileRandomAccessOutputStream0.position());
  }
}
