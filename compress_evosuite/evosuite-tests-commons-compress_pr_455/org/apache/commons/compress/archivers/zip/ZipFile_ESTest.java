/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:11:04 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipFile_ESTest extends ZipFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = ZipFile.builder();
      byte[] byteArray0 = new byte[22];
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setByteArray(byteArray0);
      try { 
        zipFile_Builder1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error reading Zip content from SeekableInMemoryByteChannel
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m7");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "m7", false, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "org.apache.commons.io.filefilter.TrueFileFilter", true, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.TrueFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, (String) null, true, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F:^7BIp{geeE3");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "F:^7BIp{geeE3", true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "vxAvyKnc6Mvh", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // vxAvyKnc6Mvh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, (String) null, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SsN");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "SsN");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "erdSize");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // erdSize
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}Y");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(path0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "/1L", "WOu", true, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // WOu
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "/1L", "/1L", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /1L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0, (String) null, (String) null, true, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from null
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "NN0", "NN0", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // NN0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "Q}m9^dBZ8aU)3p(", "Q}m9^dBZ8aU)3p(", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Q}m9^dBZ8aU)3p(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0, "-/W>#", (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from -/W>#
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "net.bytebuddy.dump");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.dump
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "&>J@}hL3@<m/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &>J@}hL3@<m/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from a SeekableByteChannel
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ILZ*U");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from a SeekableByteChannel
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("", "Cqz");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Cqz
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("(U!");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.Counters$NoopPathCounters");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "org.apache.commons.io.file.Counters$NoopPathCounters", true, true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((File) null, "T7<W]_rm+", true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, (String) null, false, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m7");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "m7", true);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "org.apache.commons.io.filefilter.FileEqualsFileFilter", true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.filefilter.FileEqualsFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((File) null, "8n3n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, (String) null, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("broken archive, entry with negative fileNameLen");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "broken archive, entry with negative fileNameLen");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "R");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // R
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((File) null, "/_~/,#/Neb *p n_~w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^!@Fe^rY ");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = ZipFile.builder();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      zipFile_Builder0.setOpenOptions(openOptionArray0);
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setFile("");
      try { 
        zipFile_Builder1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = ZipFile.builder();
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setFile("");
      try { 
        zipFile_Builder1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = new ZipFile.Builder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":^DQ8");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setSeekableByteChannel(fileChannel0);
      try { 
        zipFile_Builder1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error reading Zip content from EvoFileChannel
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = ZipFile.builder();
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setMaxNumberOfDisks((-980L));
      assertSame(zipFile_Builder0, zipFile_Builder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = new ZipFile.Builder();
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setIgnoreLocalFileHeader(true);
      assertSame(zipFile_Builder0, zipFile_Builder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZipFile.Builder zipFile_Builder0 = new ZipFile.Builder();
      ZipFile.Builder zipFile_Builder1 = zipFile_Builder0.setUseUnicodeExtraFields(false);
      assertSame(zipFile_Builder0, zipFile_Builder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((Path) null, "org.apache.commons.compress.archivers.zip.ZipFile$Builder", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ZipFile.closeQuietly((ZipFile) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(" and ", " and ");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((Path) null, "org.apache.commons.compress.archivers.zip.ZipFile$Builder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "getSecurityManager", true, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // getSecurityManager
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error reading Zip content from /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((Path) null, "1BE[", false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, (String) null, (String) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }
}
