/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:37:01 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPField;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMember;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassConstantPool_ESTest extends ClassConstantPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Integer integer0 = Integer.valueOf((-402));
      CPInteger cPInteger0 = new CPInteger(integer0, (-402));
      classConstantPool0.addWithNestedEntries(cPInteger0);
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      assertEquals(1, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Integer integer0 = new Integer(522);
      CPInteger cPInteger0 = new CPInteger(integer0, 512);
      classConstantPool0.addWithNestedEntries(cPInteger0);
      int int0 = classConstantPool0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Integer integer0 = new Integer(195);
      CPInteger cPInteger0 = new CPInteger(integer0, (byte)1);
      classConstantPool0.add(cPInteger0);
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      classConstantPool0.get(1);
      assertEquals(1, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      classConstantPool0.add((ClassFileEntry) null);
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        classConstantPool0.resolve(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("T");
      RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[] runtimeVisibleorInvisibleParameterAnnotationsAttribute_ParameterAnnotationArray0 = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation[2];
      AnnotationsAttribute.Annotation[] annotationsAttribute_AnnotationArray0 = new AnnotationsAttribute.Annotation[2];
      CPUTF8[] cPUTF8Array0 = new CPUTF8[6];
      AnnotationsAttribute.ElementValue[] annotationsAttribute_ElementValueArray0 = new AnnotationsAttribute.ElementValue[0];
      AnnotationsAttribute.Annotation annotationsAttribute_Annotation0 = new AnnotationsAttribute.Annotation((-1267), cPUTF8_0, cPUTF8Array0, annotationsAttribute_ElementValueArray0);
      annotationsAttribute_AnnotationArray0[0] = annotationsAttribute_Annotation0;
      RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation runtimeVisibleorInvisibleParameterAnnotationsAttribute_ParameterAnnotation0 = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute.ParameterAnnotation(annotationsAttribute_AnnotationArray0);
      runtimeVisibleorInvisibleParameterAnnotationsAttribute_ParameterAnnotationArray0[0] = runtimeVisibleorInvisibleParameterAnnotationsAttribute_ParameterAnnotation0;
      RuntimeVisibleorInvisibleParameterAnnotationsAttribute runtimeVisibleorInvisibleParameterAnnotationsAttribute0 = new RuntimeVisibleorInvisibleParameterAnnotationsAttribute(cPUTF8_0, runtimeVisibleorInvisibleParameterAnnotationsAttribute_ParameterAnnotationArray0);
      classConstantPool0.add(runtimeVisibleorInvisibleParameterAnnotationsAttribute0);
      // Undeclared exception!
      try { 
        classConstantPool0.resolve((Segment) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("/o6zPx4Z=.$02V1");
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      int[] intArray0 = new int[1];
      CPUTF8[] cPUTF8Array0 = new CPUTF8[6];
      cPUTF8Array0[0] = cPUTF8_0;
      cPUTF8Array0[1] = cPUTF8_0;
      cPUTF8Array0[2] = cPUTF8_0;
      cPUTF8Array0[3] = cPUTF8_0;
      cPUTF8Array0[4] = cPUTF8_0;
      cPUTF8Array0[5] = cPUTF8_0;
      LocalVariableTableAttribute localVariableTableAttribute0 = new LocalVariableTableAttribute((byte)7, intArray0, intArray0, cPUTF8Array0, cPUTF8Array0, intArray0);
      classConstantPool0.add(localVariableTableAttribute0);
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        classConstantPool0.resolve(segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      // Undeclared exception!
      try { 
        classConstantPool0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CPField cPField0 = new CPField(cPUTF8_0, cPUTF8_0, (byte)4, linkedList0);
      linkedList0.add((Object) cPField0);
      ConstantValueAttribute constantValueAttribute0 = new ConstantValueAttribute(cPField0);
      // Undeclared exception!
      try { 
        classConstantPool0.addWithNestedEntries(constantValueAttribute0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      // Undeclared exception!
      try { 
        classConstantPool0.addWithNestedEntries((ClassFileEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      CPMember cPMember0 = new CPMember(cPUTF8_0, cPUTF8_0, 3L, linkedList0);
      // Undeclared exception!
      try { 
        classConstantPool0.addWithNestedEntries(cPMember0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.compress.harmony.unpack200.bytecode.Attribute
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.CPMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8[] cPUTF8Array0 = new CPUTF8[0];
      LocalVariableTypeTableAttribute localVariableTypeTableAttribute0 = new LocalVariableTypeTableAttribute(113, (int[]) null, (int[]) null, cPUTF8Array0, cPUTF8Array0, (int[]) null);
      // Undeclared exception!
      try { 
        classConstantPool0.addWithNestedEntries(localVariableTypeTableAttribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8[] cPUTF8Array0 = new CPUTF8[1];
      LocalVariableTypeTableAttribute localVariableTypeTableAttribute0 = new LocalVariableTypeTableAttribute(221, (int[]) null, (int[]) null, cPUTF8Array0, cPUTF8Array0, (int[]) null);
      classConstantPool0.add(localVariableTypeTableAttribute0);
      // Undeclared exception!
      try { 
        classConstantPool0.addNestedEntries();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeprecatedAttribute deprecatedAttribute0 = new DeprecatedAttribute();
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      classConstantPool0.othersContainsSet = null;
      // Undeclared exception!
      try { 
        classConstantPool0.add(deprecatedAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("9_-M}/");
      classConstantPool0.addWithNestedEntries(cPUTF8_0);
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      int int0 = classConstantPool0.indexOf(cPUTF8_0);
      assertEquals(1, classConstantPool0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      DeprecatedAttribute deprecatedAttribute0 = new DeprecatedAttribute();
      int int0 = classConstantPool0.indexOf(deprecatedAttribute0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      DeprecatedAttribute deprecatedAttribute0 = new DeprecatedAttribute();
      classConstantPool0.add(deprecatedAttribute0);
      ClassFileEntry classFileEntry0 = classConstantPool0.add(deprecatedAttribute0);
      assertEquals("Deprecated Attribute", classFileEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Integer integer0 = Integer.valueOf((-402));
      CPInteger cPInteger0 = new CPInteger(integer0, 163);
      ClassFileEntry classFileEntry0 = classConstantPool0.addWithNestedEntries(cPInteger0);
      classConstantPool0.add(classFileEntry0);
      assertEquals(1, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Double double0 = new Double(0.0);
      CPDouble cPDouble0 = new CPDouble(double0, (-2458));
      classConstantPool0.addWithNestedEntries(cPDouble0);
      classConstantPool0.sortClassPool();
      assertEquals(2, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Long long0 = new Long((byte)5);
      CPLong cPLong0 = new CPLong(long0, (byte)1);
      classConstantPool0.addWithNestedEntries(cPLong0);
      classConstantPool0.sortClassPool();
      assertEquals(2, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("l");
      CPNameAndType cPNameAndType0 = new CPNameAndType(cPUTF8_0, cPUTF8_0, (-1));
      classConstantPool0.addWithNestedEntries(cPNameAndType0);
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        classConstantPool0.resolve(segment0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // error
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      // Undeclared exception!
      try { 
        classConstantPool0.get(2329);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Constant pool is not yet resolved; this does not make any sense
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      // Undeclared exception!
      try { 
        classConstantPool0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("error");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)10);
      classConstantPool0.add(newAttribute0);
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      assertEquals(0, Segment.LOG_LEVEL_QUIET);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      classConstantPool0.indexCache = null;
      DeprecatedAttribute deprecatedAttribute0 = new DeprecatedAttribute();
      // Undeclared exception!
      try { 
        classConstantPool0.indexOf(deprecatedAttribute0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Index cache is not initialized!
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      // Undeclared exception!
      try { 
        classConstantPool0.indexOf((ClassFileEntry) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Constant pool is not yet resolved; this does not make any sense
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("9Zv`z1");
      CPClass cPClass0 = new CPClass(cPUTF8_0, (-1));
      classConstantPool0.addWithNestedEntries(cPClass0);
      Segment segment0 = new Segment();
      classConstantPool0.resolve(segment0);
      assertEquals(2, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeprecatedAttribute deprecatedAttribute0 = new DeprecatedAttribute();
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      HashSet<BufferedInputStream> hashSet0 = new HashSet<BufferedInputStream>();
      classConstantPool0.add(deprecatedAttribute0);
      classConstantPool0.othersContainsSet = hashSet0;
      // Undeclared exception!
      try { 
        classConstantPool0.addNestedEntries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("error");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)10);
      classConstantPool0.add(newAttribute0);
      classConstantPool0.addNestedEntries();
      assertEquals(1, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      ByteCode byteCode0 = new ByteCode(102);
      ClassFileEntry classFileEntry0 = classConstantPool0.add(byteCode0);
      assertNull(classFileEntry0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      CPUTF8 cPUTF8_0 = new CPUTF8("9Zv`z1");
      CPClass cPClass0 = new CPClass(cPUTF8_0, (-1));
      classConstantPool0.addWithNestedEntries(cPClass0);
      classConstantPool0.addNestedEntries();
      assertEquals(2, classConstantPool0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      int int0 = classConstantPool0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassConstantPool classConstantPool0 = new ClassConstantPool();
      List list0 = classConstantPool0.entries();
      CPUTF8 cPUTF8_0 = new CPUTF8("{gP@hNA?SRa:L8", (-2433));
      CPMember cPMember0 = new CPMember(cPUTF8_0, cPUTF8_0, 1899L, list0);
      classConstantPool0.addWithNestedEntries(cPMember0);
      // Undeclared exception!
      try { 
        classConstantPool0.addNestedEntries();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8 cannot be cast to org.apache.commons.compress.harmony.unpack200.bytecode.Attribute
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.bytecode.CPMember", e);
      }
  }
}
