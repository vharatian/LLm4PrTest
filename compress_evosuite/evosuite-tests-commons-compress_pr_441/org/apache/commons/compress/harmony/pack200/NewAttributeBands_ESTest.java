/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:41:56 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UncheckedIOException;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands;
import org.apache.commons.compress.harmony.pack200.CPUTF8;
import org.apache.commons.compress.harmony.pack200.CpBands;
import org.apache.commons.compress.harmony.pack200.IntList;
import org.apache.commons.compress.harmony.pack200.NewAttribute;
import org.apache.commons.compress.harmony.pack200.NewAttributeBands;
import org.apache.commons.compress.harmony.pack200.Segment;
import org.apache.commons.compress.harmony.pack200.SegmentHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NewAttributeBands_ESTest extends NewAttributeBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      CPUTF8 cPUTF8_0 = new CPUTF8("}ifGYb-^{9");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1490), (-1490), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-459), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("code_LocalVariableTypeTable_type_RS");
      assertEquals("code_LocalVariableTypeTable_type_RS", newAttributeBands_Integral0.getTag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 1452, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1466, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("XKS", "-=.s");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(77, (-478), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(255, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("FI", "TJ V9Nr\"p{g_");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      newAttributeBands_Replication0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1490), (-1210), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-459), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("glob");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("glob");
      newAttributeBands_Integral0.pack(mockPrintStream0);
      assertEquals("glob", newAttributeBands_Integral0.getTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("hk=Bx:");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(71303171, 111, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(71303171, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttribute newAttribute0 = new NewAttribute("9rXkD:i", "9rXkD:i", 111);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("f");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      newAttributeBands_Integral0.addAttributeToBand(newAttribute0, pipedInputStream0);
      int int0 = newAttributeBands_Integral0.latestValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("RIPA");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(82, 4194305, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(0, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("-zI{2$Tmc)~x M");
      MockFile mockFile0 = new MockFile("{$");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      newAttributeBands_Reference0.pack(mockPrintStream0);
      assertEquals("-zI{2$Tmc)~x M", newAttributeBands_Reference0.getTag());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(4249, 4249, cPUTF8_0, cPUTF8_0);
      CpBands cpBands0 = new CpBands(segment0, 262144);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(4249, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttribute newAttribute0 = new NewAttribute("V", "Oorg.apache.commons.compress.harmony.pack200.PackingOptions", 4249);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("V");
      NewAttributeBands.Integral newAttributeBands_Integral1 = newAttributeBands0.new Integral("Oorg.apache.commons.compress.harmony.pack200.PackingOptions", newAttributeBands_Integral0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(140);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        newAttributeBands_Integral1.addAttributeToBand(newAttribute0, dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-1739), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("PInvalid lambda deserialization", "POSi", 1746);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("LaQute/bnd/annotation/component/Component;");
      NewAttributeBands.Integral newAttributeBands_Integral1 = newAttributeBands0.new Integral("POSi", newAttributeBands_Integral0);
      // Undeclared exception!
      try { 
        newAttributeBands_Integral1.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("/META-INF");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(80, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(50, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(262144);
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.addAttributeToBand((NewAttribute) null, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("7IFb`[7v7/Mt ");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(0, (-3574), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1486, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      int int0 = newAttributeBands0.getFlagIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("8j(-gk3=pRay-e3^^");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1142), 75, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(4122, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      int int0 = newAttributeBands0.getFlagIndex();
      assertEquals((-1142), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(93, 93, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(23, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      String string0 = newAttributeBands0.getAttributeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("RSPO?7Z8x&,[#ck{1o g\"X1");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 98, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-2416), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        newAttributeBands0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("RSPO?7Z8x&,[#ck{1o 2\"X1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RSPO?7Z8x&,[#ck{1o 2\"X1");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(76, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      try { 
        newAttributeBands0.pack(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("8}>5Ys*");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(2, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      // Undeclared exception!
      try { 
        newAttributeBands0.addAttribute((NewAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("(WuTi");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-4388), 1, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-4388), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("FI", "N[W");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V0Y<");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(5126, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 37);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(53, 37, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(53, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("org.objectweb.asm.FieldWriter", "N{7B`a[K+2ZiMfRA");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("KBNtE}75)u8*!");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1262), 91, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(91, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("!");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-1), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(389, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("!", "OS7IFb`[7v7/Mt ");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(77, (-478), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-478), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("\"9r%pny_S\"%{zWQU", "POPULATION");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("P+Q}6Yg>)");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 0, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(167, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("N]QM(");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 255, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertEquals(262144, newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 1488);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("P\u00A7NULL\u00A7");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(1926, (-112), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1488, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertEquals(1926, newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("!");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-1), cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("@-JApZ4P", "Gd,It[qF*Qg{.");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = segment0.getCpBands();
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("<.v");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-385), 255, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(93, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("<.v", "Dv,6dw4$dSczO");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(58, 80, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(84, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("\"^6@YWO+v'[", "@-JApZ4P");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("PV");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1705), (-1705), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-101), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("", "?7Z8x&,[#ck{1o 2\"X1");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8(")EhUY");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(1811, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(2502, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("B vl<.ZsHtKtj0", ">#sY;h!_");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("=");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(85, 954, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(970, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = segment0.getCpBands();
      CPUTF8 cPUTF8_0 = new CPUTF8("CN,L=7m22");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(158, 745, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(85, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("Z6?aq;4rS|J6", ": ");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("36LvX}o");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("@-JApZ4P", "583@uL//G^662l\" ~qj");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("I2Fb`[7v7/Mt ");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 100, cPUTF8_0, cPUTF8_0);
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 70);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("N;v1Iy]<(%u^(\"Cb");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(13, 13, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(13, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      // Undeclared exception!
      try { 
        newAttributeBands0.pack((OutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("TdV!06");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(4249, 28, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8(".[?=#");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-3574), (-710), cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-277), cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertEquals((-3574), newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("-_gE");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(45, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(0, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("-_gE", ";EW/&o[");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8(",");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-466), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertEquals(262144, newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("+>");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(234, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      assertEquals(262144, newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Segment segment0 = new Segment();
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      CpBands cpBands0 = new CpBands(segment0, 262144);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-14), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("*WAfn%3g", "*WAfn%3g");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 534);
      CPUTF8 cPUTF8_0 = new CPUTF8("(.xAG)X~@jCwtU9W$bZk");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(534, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = null;
      try {
        newAttributeBands0 = new NewAttributeBands(534, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("RSOS!j]");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 68, cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1947, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("H", "J");
      // Undeclared exception!
      newAttributeBands_Replication0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("RSO#2S!j]");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 68, cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RS", "keep");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(70, (-3202), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(70, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("KS", "");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("FI");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-1512), 51, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassReader classReader0 = new ClassReader(byteArrayInputStream0);
      char[] charArray0 = new char[8];
      Label[] labelArray0 = new Label[0];
      NewAttribute newAttribute0 = new NewAttribute(classReader0, "FB", "FB", byteArray0, charArray0, 87, labelArray0);
      newAttributeBands0.addAttribute(newAttribute0);
      assertFalse(newAttribute0.isContextCode());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(4249, 4249, cPUTF8_0, cPUTF8_0);
      IntList intList0 = new IntList(4249);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(4249, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      newAttributeBands0.renumberBci(intList0, hashMap0);
      assertTrue(intList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Segment segment0 = new Segment();
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      CpBands cpBands0 = new CpBands(segment0, 262144);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-14), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tw'0Y");
      newAttributeBands0.pack(mockPrintStream0);
      assertFalse(newAttributeBands0.isUsedAtLeastOnce());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("'");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(0, 0, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(75, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("'", "FH");
      IntList intList0 = new IntList();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      newAttributeBands_Replication0.renumberBci(intList0, hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = segment0.getSegmentHeader();
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("Signature");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(660, 257, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-610), cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("0d4#olX1wLR{5|i^hm", "Signature");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      newAttributeBands_Replication0.pack(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("RSPO?7Z8x&,[#ck{1o 2\"X1");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 4194305, cPUTF8_0, cPUTF8_0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((byte)52, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RSPO?7Z8x&,[#ck{1o 2\"X1");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Segment segment0 = new Segment();
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(4194305, 100, cPUTF8_0, cPUTF8_0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CpBands cpBands0 = new CpBands(segment0, 4194305);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(100, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("Tw'0Y");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("POV");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2340, 32767, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("zNx9:hPP5h+LuwP%t");
      File file0 = MockFile.createTempFile("zNx9:hPP5h+LuwP%t", "O");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.pack(mockPrintStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262144
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8(")EhUY");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(2502, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("H");
      int int0 = newAttributeBands_Integral0.getLength('I');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8(")EhUY");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(2502, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("H");
      int int0 = newAttributeBands_Integral0.getLength('H');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 255, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(255, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("1m');d7,=D7bMB4_'");
      int int0 = newAttributeBands_Integral0.getLength('B');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 255, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("V");
      NewAttributeBands.Integral newAttributeBands_Integral1 = newAttributeBands0.new Integral("ORSPO?7Z8x&,[#ck{1o 2\"X1", newAttributeBands_Integral0);
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      IntList intList0 = new IntList(262144);
      newAttributeBands_Integral1.renumberBci(intList0, hashMap0);
      assertTrue(intList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("P");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2724, (-1313), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(84, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("P", "P");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      newAttributeBands_Integral0.renumberBci((IntList) null, hashMap0);
      assertEquals("P", newAttributeBands_Integral0.getTag());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Segment segment0 = new Segment();
      CPUTF8 cPUTF8_0 = new CPUTF8("Tw'0Y");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(4249, 4249, cPUTF8_0, cPUTF8_0);
      IntList intList0 = new IntList();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      CpBands cpBands0 = new CpBands(segment0, (-256));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(4249, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("POPJ");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.renumberBci(intList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("OPV");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(46, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      IntList intList0 = new IntList();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      // Undeclared exception!
      try { 
        newAttributeBands0.renumberBci(intList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("PV");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("PV", "PV", 262144);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("PV");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("<.v");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("<.v", "OS@InMYo{", 262144);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("OS@InMYo{");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("eA1X");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(39, 91, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(39, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("OS@InMYo{", "eA1X", 262144);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("SV");
      newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
      assertEquals(0, newAttributeBands_Integral0.latestValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 255, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("FV");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 73);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      newAttributeBands_Integral0.addAttributeToBand((NewAttribute) null, dataInputStream0);
      assertEquals(0, newAttributeBands_Integral0.latestValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-466), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("V", "V");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      newAttributeBands_Replication0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("eA1X");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("eA1X", "eA1X", 262144);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("SI");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // Error reading unknown attribute
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-466), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(73, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("I", "V");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      newAttributeBands_Replication0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("hk=Bx:");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-2999), 111, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-2999), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttribute newAttribute0 = new NewAttribute("SH", "SB", 111);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("SH");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, pipedInputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // Error reading unknown attribute
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, (-466), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(89, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("FH");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand((NewAttribute) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 37);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 37, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("SB", "0'=w!i<tw", 262144);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("SB");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // Error reading unknown attribute
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-147), 9, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(37, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      NewAttribute newAttribute0 = new NewAttribute("Zm2]@=>P(U u", "RUPO", (-326));
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("FB");
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addAttributeToBand(newAttribute0, mockFileInputStream0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // Error reading unknown attribute
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("H6X2t?W:&vr=r\u0005>#");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(135, 65535, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(336, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("H6X2t?W:&vr=r\u0005>#");
      newAttributeBands_Integral0.addAttributeToBand((NewAttribute) null, (InputStream) null);
      assertEquals(0, newAttributeBands_Integral0.latestValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("hk=Bx:");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(65535, 111, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(65535, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("B", "B");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      newAttributeBands_Replication0.addAttributeToBand((NewAttribute) null, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("[FVNHZmd=Xi(");
      IntList intList0 = new IntList();
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2615, 2615, cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-1131), cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      newAttributeBands0.renumberBci(intList0, hashMap0);
      assertEquals(0, intList0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 2615);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("[FVNHZmd=Xi(");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2615, 2615, cPUTF8_0, cPUTF8_0);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-14), cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[FVNHZmd=Xi(");
      newAttributeBands0.pack(mockPrintStream0);
      assertEquals(2615, newAttributeBands0.getFlagIndex());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("CN,L=7m22");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(158, 745, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-1054), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((-548));
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.setCallable((NewAttributeBands.Callable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 1488);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("frdxaCmUIhoZ:`l");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(1488, 3015, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(3015, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(1488);
      newAttributeBands_Call0.setCallable((NewAttributeBands.Callable) null);
      assertEquals(1488, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("7IFb`[7v7/Mt ");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(46, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("T)");
      String string0 = newAttributeBands_Reference0.getTag();
      assertEquals("T)", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("7IFb`[7v7/Mt ");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 100, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-3862), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("");
      IntList intList0 = new IntList();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      newAttributeBands_Reference0.renumberBci(intList0, hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2058, (-2439), cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(2058, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(2058);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      newAttributeBands_Call0.pack(mockPrintStream0);
      assertEquals(2058, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("V");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 2732, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(0, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      IntList intList0 = new IntList();
      HashMap<Label, Integer> hashMap0 = new HashMap<Label, Integer>();
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(262144);
      newAttributeBands_Call0.renumberBci(intList0, hashMap0);
      assertEquals(262144, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("rl..Yf{'L:(BCH-kF|");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(3944, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(262144, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(3944);
      int int0 = newAttributeBands_Call0.getCallableIndex();
      assertEquals(3944, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("CN,L=7m22");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(158, 745, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-1054), (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((-548));
      newAttributeBands_Call0.getCallable();
      assertEquals((-548), newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 0);
      CPUTF8 cPUTF8_0 = new CPUTF8("7IFb`[7v7/Mt ");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(2265, 262144, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(46, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      boolean boolean0 = newAttributeBands0.isUsedAtLeastOnce();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = cpBands0.getCPUtf8("");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 2265, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands((-2330), cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      int[] intArray0 = newAttributeBands0.numBackwardsCalls();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("8j(-gk3=pRay-e3^^");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 3614, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(109, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      int int0 = newAttributeBands0.getFlagIndex();
      assertEquals(262144, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("<.v");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition((-889), 0, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(1486, (CpBands) null, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      String string0 = newAttributeBands0.getAttributeName();
      assertEquals("<.v", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 262144);
      CPUTF8 cPUTF8_0 = new CPUTF8("OOP");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(79, 79, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(79, cpBands0, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("OOP", "org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      String string0 = newAttributeBands_Integral0.getTag();
      assertEquals("OOP", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Segment segment0 = new Segment();
      CpBands cpBands0 = new CpBands(segment0, 1488);
      SegmentHeader segmentHeader0 = new SegmentHeader();
      CPUTF8 cPUTF8_0 = new CPUTF8("frdxaCmUIhoZ:`l");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(1488, 3015, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(3015, cpBands0, segmentHeader0, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("frdxaCmUIhoZ:`l", "4Hi;JB/");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.latestValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CPUTF8 cPUTF8_0 = new CPUTF8("8j(-gk3=pRay-e3^^");
      AttributeDefinitionBands.AttributeDefinition attributeDefinitionBands_AttributeDefinition0 = new AttributeDefinitionBands.AttributeDefinition(262144, 3614, cPUTF8_0, cPUTF8_0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(109, (CpBands) null, (SegmentHeader) null, attributeDefinitionBands_AttributeDefinition0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("#:DXY'e!wazq93GMrc", "org.apache.commons.io.build.AbstractSupplier");
      List<NewAttributeBands.LayoutElement> list0 = newAttributeBands_Replication0.getLayoutElements();
      assertTrue(list0.isEmpty());
  }
}
