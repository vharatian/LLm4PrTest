/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:47:06 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.jar.JarFile;
import java.util.jar.JarInputStream;
import org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Pack200PackerAdapter_ESTest extends Pack200PackerAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("j%Lm6/q:1@WxqN");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("j%Lm6/q:1@WxqN");
      JarInputStream jarInputStream0 = new JarInputStream(mockFileInputStream0);
      pack200PackerAdapter0.pack(jarInputStream0, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object0 = new Object();
      pack200PackerAdapter0.firePropertyChange("pack.code.attribute.pack.progress", object0, "pack.code.attribute.pack.progress");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarInputStream jarInputStream0 = new JarInputStream(sequenceInputStream0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("pack.pass.file.q*K]bM`*Q;_,zRWFcmh");
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.pack(jarInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange((String) null, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarInputStream jarInputStream0 = new JarInputStream(sequenceInputStream0, false);
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.pack(jarInputStream0, (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify both input and output streams
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 183);
      pipedOutputStream0.close();
      JarInputStream jarInputStream0 = new JarInputStream(pipedInputStream0);
      try { 
        pack200PackerAdapter0.pack(jarInputStream0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Must specify both input and output streams");
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.pack((JarInputStream) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify both input and output streams
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ovCZu;eJclDW#Mf:,", true);
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.pack((JarFile) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must specify both input and output streams
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.unknown.attribute", object1, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.segment.limit", "pack.segment.limit", "pck.field.attribute.pack.progress");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to parse long from string value: pck.field.attribute.pack.progress
         //
         verifyException("org.apache.commons.compress.utils.ParsingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.pass.file.j5(d;^t[QARLkfv|", (Object) null, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.pass.file.j5(d;^t[QARLkfv|", object0, "pack.pass.file.j5(d;^t[QARLkfv|");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.modification.time", object0, object1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      pack200PackerAdapter0.firePropertyChange("pack.method.attribute.", pack200PackerAdapter0, "pack.method.attribute.");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object0 = new Object();
      pack200PackerAdapter0.firePropertyChange("pack.keep.file.order", object0, "pack.keep.file.order");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      Object object0 = new Object();
      pack200PackerAdapter0.firePropertyChange("pack.field.attribute.", object0, "pack.field.attribute.");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.effort", pipedInputStream0, "pack.effort");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to parse int from string value: pack.effort
         //
         verifyException("org.apache.commons.compress.utils.ParsingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        pack200PackerAdapter0.firePropertyChange("pack.deflate.hint", pipedInputStream0, "pack.ke[p.fil.order");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad argument: -H pack.ke[p.fil.order ? deflate hint should be either true, false or keep (default)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.PackingOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      pack200PackerAdapter0.firePropertyChange("pack.class.attribute.u-!-:rzh(_}P", "pack.keep.file.order", "pack.class.attribute.u-!-:rzh(_}P");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      pack200PackerAdapter0.firePropertyChange("Must specify both input and output streams", "Must specify both input and output streams", "Must specify both input and output streams");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Pack200PackerAdapter pack200PackerAdapter0 = new Pack200PackerAdapter();
      pack200PackerAdapter0.firePropertyChange("<", "pack.keep.file.order", (Object) null);
  }
}
