/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 22 18:49:50 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.unpack200.AttributeLayout;
import org.apache.commons.compress.harmony.unpack200.NewAttributeBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.SegmentHeader;
import org.apache.commons.compress.harmony.unpack200.bytecode.Attribute;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NewAttributeBands_ESTest extends NewAttributeBands_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("O", "ACC_SYNTHETIC");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.readBands(dataInputStream0, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      newAttributeBands_Call0.readBands(byteArrayInputStream0, 79);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("8+5mo83 Wy%Ui){iEH", 2, "8+5mo83 Wy%Ui){iEH", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttribute newAttribute0 = new NewAttribute((CPUTF8) null, (-1221));
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("ACC_FINAL");
      newAttributeBands_Reference0.addToAttribute(0, newAttribute0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("8+5mo83 Wy%Ui){iEH", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("AnnotationDefault");
      newAttributeBands_Integral0.readBands((InputStream) null, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("&", 1, "&", 152);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      newAttributeBands0.read(pushbackInputStream0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T46#>tow[#sAWtwC?af", 0, "T46#>tow[#sAWtwC?af", 1377);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      try { 
        newAttributeBands0.parseAttributes(inputStream0, (-3771));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("6_q5x", 2, "csD2", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("t',66:ob?;");
      CPUTF8 cPUTF8_0 = new CPUTF8("RuntimeVisibleAnnotations");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (byte)4);
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.addToAttribute(292, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes(inputStream0, (-2468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2468
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KS", 2, "KS", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      try { 
        newAttributeBands0.parseAttributes(inputStream0, (byte)1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of stream reached whilst decoding
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("Code", 0, "EnclosingMethod", (byte)9);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("(NheBtQXqB", 2, "(NheBtQXqB", 2, true);
      NewAttributeBands newAttributeBands0 = null;
      try {
        newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("Di$", 1, "RIACC_ENUM", 0, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("0 @-Q", 1, "0 @-Q", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RuntimeInvisibleAnnotations", 0, "Qb1ATh^", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("1t:j+", 0, "J", 4);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("LineNumberTable", 0, "M]\"", 0, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("S", 1, "S", 2, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      // Undeclared exception!
      try { 
        newAttributeBands0.getCodec((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T46#>tow[#sAWtwC?af", 0, "T46#>tow[#sAWtwC?af", 1377);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("KDNU3]p=B/");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(256L, bHSDCodec0.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("RSb-Yrx1-se");
      assertEquals(4294967293L, bHSDCodec0.largest());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(":+'Y?&ZIUu/JL_", 2, ":+'Y?&ZIUu/JL_", 0, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("Code");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(4294967293L, bHSDCodec0.largest());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("simpleComparisonsFirst", 2, "ACC_ANNOTATION", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("RuntimeInvisibleParameterAnnotations");
      assertEquals(86955L, bHSDCodec0.largest());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("SourceFile");
      assertEquals(1, bHSDCodec0.getS());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      BHSDCodec bHSDCodec0 = newAttributeBands0.getCodec("ACC_VOLATILE");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(252, bHSDCodec0.getL());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 1, "V&D*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("Signature", "(73xdQGjRx=TM");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RM!;P4WX|ckz", "P");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KS", 0, "OS", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("SourceFile", "Nez] TKh}oCr$]_");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("&LQ", 0, "B", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("&LQ", "M\"dmLmU}CFWW]X@ROvh");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RSUOS", 0, "LineNumberTable", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("5jsxJPqvx{", 0, "5jsxJPqvx{", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("ACC_ENUM", "I");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 1, "FH", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("VD*Qn s6<[yBqx*<H", 1, "VD*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("@(]`\u0002o#&qCAR", 1, "@(]`\u0002o#&qCAR", 73, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("7h!4*uqTB62g:=zKE?", 2, "?`-", 1485);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication((String) null, "ACC_VOLATILE");
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_VOLATILE");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 33);
      // Undeclared exception!
      try { 
        newAttributeBands_Replication0.addToAttribute(1, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("N>Om7&6R.", 0, "=QF#wo8^", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "V<Y|", (-780));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("H;@LhAe]E$7", 1, "H;@LhAe]E$7", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 1, "V&D*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("SE;0{f5lBTd", "7");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 1, "4]0", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("&LQ", 0, "3", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6[yBqx<H", 1, "V&D*Qn s6[yBqx<H", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("Code", "2GC=idG0");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RS", 1, "~YmHXqEvD(#", (-2662));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("?hv{Upz!EU-HSb", "KI\"O%0~HTq}ra");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("@(]`\u0002o#&qCAR", 1, "6_q5x", 73, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("zvF8,}IZvZ", "/d]-");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication(":^", "-;#TIq5a/kUsV3Q");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout(":+'Y?&ZIUu/JL_", 2, ":+'Y?&ZIUu/JL_", 0, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("str1", ",#");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("+&E*Qn s6<[JBdx*<H", 2, "+&E*Qn s6<[JBdx*<H", (-857), true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KJExceptions", 0, "H*|SkTXT?4\"", 1844);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("lV#7\"", 2, ")$A!O?D2fy", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RViQ:)[inM-V(9q}", "KIKJRuntimeVisibleAnnotations");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      newAttributeBands0.setBackwardsCalls((int[]) null);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6[yBqx<H", 1, "V&D*Qn s6[yBqx<H", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      List<Attribute> list0 = newAttributeBands0.parseAttributes((InputStream) null, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes((InputStream) null, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6[yBqx<H", 1, "V&D*Qn s6[yBqx<H", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("RS.Yzb}-h?/u?", "Error reading from the input stream");
      try { 
        newAttributeBands_Replication0.readBands(pipedInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KS", 2, "KS", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("KS", "dload");
      try { 
        newAttributeBands_Replication0.readBands(pipedInputStream0, (byte)8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 1, "V&D*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("Qan>_0A%", "SourceFile");
      newAttributeBands_Replication0.readBands(pipedInputStream0, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6[yBqx<H", 1, "V&D*Qn s6[yBqx<H", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("InnerClasses", "PO");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("]&D*Qn s6<[yBqx*<H", 0, "]&D*Qn s6<[yBqx*<H", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RU");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.readBands((InputStream) null, (-2228));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6[yBqx<H", 1, "V&D*Qn s6[yBqx<H", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RILocalVariableTypeTable");
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 2287);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 1, "V&D*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RMX<=DSzD/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, (-8323580));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RFRFEnclosingMethod");
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RD");
      try { 
        newAttributeBands_Reference0.readBands(pipedInputStream0, (-1875));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RS");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.readBands((InputStream) null, (-1818));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.BHSDCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KS", 2, "KS", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        newAttributeBands0.parseAttributes(pipedInputStream0, 185);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KDOS");
      newAttributeBands_Reference0.readBands((InputStream) null, 0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("> WUqq%!)`J.?", 0, "> WUqq%!)`J.?", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("FV");
      newAttributeBands_Reference0.readBands((InputStream) null, (-3124));
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("H:@LhAe]E!", 1, "H:@LhAe]E!", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("RuntimeInvisibleParameterAnnotations");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 1);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RUOS");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(694, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_ENUM");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 2);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RFACC_ENUM");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)5, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("@(]`\u0002o#&qCAR", 1, "6_q5x", 73, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_INTERFACE");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (-1519));
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RDRMX<=DSzD/");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(205, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_STATIC");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (-2228));
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RSRUOS");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(4, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PUBLIC");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 2);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KSRuntimeVisibleAn:otations");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)11, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_STATIC");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, (-2228));
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KDOS");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)3, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("LineNumberTable");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 3);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KFOS");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute(0, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("ACC_PUBLIC");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 2);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KJRuntimeVisibleAnnotations");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)11, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("class-file version");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 45);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("KIACC_FINAL");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((-507), newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 1, "V&D*Qn s6<[yBqx*<H", 2);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("FI");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("KIH.Za_Eu}IvL~R", 1, "KIH.Za_Eu}IvL~R", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      SegmentHeader segmentHeader0 = new SegmentHeader(segment0);
      InputStream inputStream0 = segmentHeader0.getBandHeadersInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0, (byte)6);
      // Undeclared exception!
      try { 
        newAttributeBands0.parseAttributes(pushbackInputStream0, (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.BandSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("B");
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("X<=DSzD/", 0, "X<=DSzD/", (-2147));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(0);
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.setCallable((NewAttributeBands.Callable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("H:@LhAe]E!", 1, "H:@LhAe]E!", 1, true);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(4062);
      // Undeclared exception!
      try { 
        newAttributeBands_Call0.readBands((InputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Segment segment0 = new Segment();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 0, "V&D*Qn s6<[yBqx*<H", (-98334618));
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call((-96576071));
      newAttributeBands_Call0.readBands(sequenceInputStream0, 1);
      assertEquals((-96576071), newAttributeBands_Call0.getCallableIndex());
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("T46#>tow[#sAWtwC?af", 0, "T46#>tow[#sAWtwC?af", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      CPUTF8 cPUTF8_0 = new CPUTF8("[k&]46!@K5uzx");
      NewAttribute newAttribute0 = new NewAttribute(cPUTF8_0, 51);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("RIACC_PRIVATE");
      // Undeclared exception!
      try { 
        newAttributeBands_Reference0.addToAttribute((byte)11, newAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("> WUqq%!)`J.?", 0, "> WUqq%!)`J.?", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Reference newAttributeBands_Reference0 = newAttributeBands0.new Reference("FV");
      newAttributeBands_Reference0.getTag();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("}6AtTF", 2, "8+5mo83 Wy%Ui){iEH", 2, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(0);
      newAttributeBands_Call0.getCallable();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, newAttributeBands_Call0.getCallableIndex());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", 1, false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Call newAttributeBands_Call0 = newAttributeBands0.new Call(2);
      int int0 = newAttributeBands_Call0.getCallableIndex();
      assertEquals(2, int0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RU", 2, "RU", 2601);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      int int0 = newAttributeBands0.getBackwardsCallCount();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("V&D*Qn s6<[yBqx*<H", 2, "V&D*Qn s6<[yBqx*<H", (-857), false);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-685), (-157));
      newAttributeBands0.unpack((InputStream) byteArrayInputStream0);
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RIRuntimeVisibleAnnotations", 1, "AC", 0);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      newAttributeBands0.unpack();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("D'-", 2, "org.apache.commons.io.filefilter.RegexFileFilter", 155);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Replication newAttributeBands_Replication0 = newAttributeBands0.new Replication("8, 7r3qmsscpN}qTiA", "QDk=O&&QMJlb");
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands_Replication0.getCountElement();
      // Undeclared exception!
      try { 
        newAttributeBands_Integral0.getValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Segment segment0 = new Segment();
      AttributeLayout attributeLayout0 = new AttributeLayout("RSRuntimeVisibleAnnotations", 0, "B", 1);
      NewAttributeBands newAttributeBands0 = new NewAttributeBands(segment0, attributeLayout0);
      NewAttributeBands.Integral newAttributeBands_Integral0 = newAttributeBands0.new Integral("s$4O]_z3uA9!&(Vh-");
      newAttributeBands_Integral0.getTag();
      assertEquals(0, attributeLayout0.numBackwardsCallables());
  }
}
