/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:04:59 GMT 2025
 */

package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.compressors.bzip2.BlockSort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BlockSort_ESTest extends BlockSort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(8);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      blockSort0.fallbackSort(intArray0, byteArray0, 8);
      assertArrayEquals(new int[] {2, 3, 4, 5, 6, 7, 1, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(4);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.fallbackSort(bZip2CompressorOutputStream_Data0, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.mainSort(bZip2CompressorOutputStream_Data0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(212);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.mainSort((BZip2CompressorOutputStream.Data) null, (-1816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(7);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      blockSort0.fallbackSort(intArray0, byteArray0, 797161);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(8);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, (byte[]) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(6);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, byteArray0, (-822));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -758
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(8);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(intArray0, byteArray0, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort((int[]) null, (byte[]) null, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(9);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.fallbackSort(bZip2CompressorOutputStream_Data0, 55542);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.fallbackSort(bZip2CompressorOutputStream_Data0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(7);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.blockSort((BZip2CompressorOutputStream.Data) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(0);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      try { 
        blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockSort blockSort0 = null;
      try {
        blockSort0 = new BlockSort((BZip2CompressorOutputStream.Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BlockSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(4);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)123;
      blockSort0.fallbackSort(intArray0, byteArray0, 4);
      assertArrayEquals(new int[] {2, 3, 0, 1, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(8);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      blockSort0.fallbackSort(intArray0, byteArray0, 8);
      assertArrayEquals(new int[] {1, 2, 3, 4, 5, 6, 7, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(8);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(114);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      // Undeclared exception!
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 55543);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(7);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 49);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(7);
      BlockSort blockSort0 = new BlockSort(bZip2CompressorOutputStream_Data0);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 7);
      blockSort0.blockSort(bZip2CompressorOutputStream_Data0, 8);
  }
}
