/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 00:02:34 GMT 2025
 */

package org.apache.commons.compress.compressors.bzip2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BZip2CompressorOutputStream_ESTest extends BZip2CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unknown file attribute view: ");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      bZip2CompressorOutputStream0.write((-322));
      byteArray0[2] = (byte)62;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.finish();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[4];
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      bZip2CompressorOutputStream2.write(31);
      bZip2CompressorOutputStream1.write(byteArray0);
      bZip2CompressorOutputStream2.close();
      assertNotSame(bZip2CompressorOutputStream2, bZip2CompressorOutputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.write(15);
      bZip2CompressorOutputStream0.finish();
      assertEquals(1, BZip2CompressorOutputStream.MIN_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") > buf.length(");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[0];
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize((-531L));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BZip2CompressorOutputStream.Data bZip2CompressorOutputStream_Data0 = new BZip2CompressorOutputStream.Data(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 1, 195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.bytebuddy.build.RepeatedAnnotationPlugin");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        bZip2CompressorOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      BZip2CompressorOutputStream bZip2CompressorOutputStream3 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream2, 1);
      bZip2CompressorOutputStream3.write(1);
      // Undeclared exception!
      bZip2CompressorOutputStream3.close();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(pipedOutputStream0, 2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)12;
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[6];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      BZip2CompressorOutputStream bZip2CompressorOutputStream2 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream1, 1);
      bZip2CompressorOutputStream2.close();
      assertEquals(1, bZip2CompressorOutputStream2.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[6];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.close();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.write(1);
      bZip2CompressorOutputStream0.write(1);
      bZip2CompressorOutputStream0.close();
      assertEquals(9, BZip2CompressorOutputStream.MAX_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[6];
      bZip2CompressorOutputStream0.write(byteArray0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0, 1);
      bZip2CompressorOutputStream1.close();
      assertEquals(9, BZip2CompressorOutputStream.MAX_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq8h");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[27];
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      bZip2CompressorOutputStream0.write(byteArray0);
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}+1|R_gEq=t");
      byte[] byteArray0 = new byte[6];
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write(byteArray0, (int) (byte)12, (int) (byte)12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(12) + len(12) > buf.length(4).
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".6");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, 19, (-246));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // len(-246) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".6");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      // Undeclared exception!
      try { 
        bZip2CompressorOutputStream0.write((byte[]) null, (-2412), (-246));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offs(-2412) < 0.
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.flush();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&Ib2,k8:nm");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.flush();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        bZip2CompressorOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".6");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.close();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(").");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.finalize();
      assertEquals(9, BZip2CompressorOutputStream.MAX_BLOCKSIZE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") > buf.length(");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.finish();
      bZip2CompressorOutputStream0.finalize();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(") > buf.length(");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.finish();
      BZip2CompressorOutputStream bZip2CompressorOutputStream1 = null;
      try {
        bZip2CompressorOutputStream1 = new BZip2CompressorOutputStream(bZip2CompressorOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Closed
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, 167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(167) > 9
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null, (-2963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blockSize(-2963) < 1
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = BZip2CompressorOutputStream.chooseBlockSize(0L);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".6");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      int int0 = bZip2CompressorOutputStream0.getBlockSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".6");
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream(mockFileOutputStream0, 1);
      bZip2CompressorOutputStream0.close();
      bZip2CompressorOutputStream0.finish();
      assertEquals(1, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = null;
      try {
        bZip2CompressorOutputStream0 = new BZip2CompressorOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream", e);
      }
  }
}
