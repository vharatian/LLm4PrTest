/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 08:03:52 GMT 2025
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.apache.commons.compress.utils.BoundedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BoundedInputStream_ESTest extends BoundedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0, (-838));
      int int0 = boundedInputStream0.read((byte[]) null, (-838), (-838));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0, 0L);
      int int0 = boundedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0, 1L);
      long long0 = boundedInputStream0.skip(3955L);
      assertEquals(1L, long0);
      
      long long1 = boundedInputStream0.skip((byte)85);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)110);
      int int0 = boundedInputStream0.read(byteArray0, (int) (byte)2, (int) (byte)2);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, (byte)111);
      int int0 = boundedInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, 3L);
      // Undeclared exception!
      try { 
        boundedInputStream0.skip(3L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0, (-588L));
      try { 
        boundedInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, (-838));
      // Undeclared exception!
      try { 
        boundedInputStream0.read((byte[]) null, (-838), (-838));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2144848698, 2144848698);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 2144848698);
      // Undeclared exception!
      try { 
        boundedInputStream0.read(byteArray0, 2144848698, 2144848698);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0, 85);
      try { 
        boundedInputStream0.read((byte[]) null, 85, 85);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, 3L);
      // Undeclared exception!
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1881), 1002);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(bufferedInputStream0, 1002);
      // Undeclared exception!
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0, 3244L);
      try { 
        boundedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, 0L);
      BoundedInputStream boundedInputStream1 = new BoundedInputStream(boundedInputStream0, 1759L);
      int int0 = boundedInputStream1.read((byte[]) null, (-1237), 2146712004);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, 0L);
      int int0 = boundedInputStream0.read((byte[]) null, (-1237), 2146712004);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BoundedInputStream boundedInputStream0 = new BoundedInputStream((InputStream) null, (-838));
      int int0 = boundedInputStream0.read((byte[]) null, (-838), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 20L);
      int int0 = boundedInputStream0.read();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(mockFileInputStream0, (-588L));
      int int0 = boundedInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(pipedInputStream0, 0L);
      boundedInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 46, (-2144924071));
      BoundedInputStream boundedInputStream0 = new BoundedInputStream(byteArrayInputStream0, 46);
      long long0 = boundedInputStream0.skip(96L);
      assertEquals((-2144924071L), long0);
  }
}
