/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:17:40 GMT 2025
 */

package org.apache.commons.compress.compressors.deflate64;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.apache.commons.compress.compressors.deflate64.HuffmanDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HuffmanDecoder_ESTest extends HuffmanDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (-340), (-624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)30;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray0, (int) (byte) (-61), (int) (byte) (-61));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-65);
      byteArray0[4] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal LEN / NLEN values
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-35), 1635);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal LEN / NLEN values
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(sequenceInputStream0);
      huffmanDecoder0.decode(byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(22, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      long long0 = huffmanDecoder0.getBytesRead();
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, 37, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(sequenceInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-35), (int) (byte) (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid code -1 in literal table
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(27);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        huffmanDecoder0.decode(byteArray0, 27, 23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder((InputStream) null);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      PipedInputStream pipedInputStream0 = new PipedInputStream(545);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(pipedInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      int int0 = huffmanDecoder0.decode(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      int int0 = huffmanDecoder0.decode(byteArray0, 8, 153);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray0, (int) (byte) (-53), 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-41), 6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unsupported compression: 3
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-29), (int) (byte) (-29));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to read beyond memory: dist=1
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-35), (int) (byte) (-35));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node doesn't exist in Huffman tree
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-35), (int) (byte) (-35));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node doesn't exist in Huffman tree
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte) (-35), 6);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[2] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(bufferedInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0, (int) (byte)21, (-3049));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(sequenceInputStream0);
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Truncated Deflate64 Stream
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(sequenceInputStream0);
      // Undeclared exception!
      try { 
        huffmanDecoder0.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid code -1 in literal table
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      huffmanDecoder0.decode(byteArray0);
      int int0 = huffmanDecoder0.available();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      huffmanDecoder0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      int int0 = huffmanDecoder0.decode(byteArray0);
      int int1 = huffmanDecoder0.decode(byteArray0, (int) (byte) (-53), 1);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      int int0 = huffmanDecoder0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder(byteArrayInputStream0);
      long long0 = huffmanDecoder0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HuffmanDecoder huffmanDecoder0 = new HuffmanDecoder((InputStream) null);
      huffmanDecoder0.close();
      // Undeclared exception!
      try { 
        huffmanDecoder0.getBytesRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.deflate64.HuffmanDecoder", e);
      }
  }
}
