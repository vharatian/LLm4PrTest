/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:28:05 GMT 2025
 */

package org.apache.commons.compress.compressors.snappy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SnappyCompressorInputStream_ESTest extends SnappyCompressorInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1142);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0, 31);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(10766, snappyCompressorInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = (-2379);
      // Undeclared exception!
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) byteArray0[0], int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      assertEquals(0, snappyCompressorInputStream0.getSize());
      
      int int0 = (-2379);
      int int1 = snappyCompressorInputStream0.read(byteArray0, (int) byteArray0[0], int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = snappyCompressorInputStream0.getSize();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        snappyCompressorInputStream0.read(byteArray0, 32768, (int) (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream((InputStream) null, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0, (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // windowSize must be bigger than 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(mockFileInputStream0, 743);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 650);
      SnappyCompressorInputStream snappyCompressorInputStream0 = null;
      try {
        snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      snappyCompressorInputStream0.skip(116);
      int int0 = snappyCompressorInputStream0.read(byteArray0, 1, 325);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      assertEquals(5L, snappyCompressorInputStream0.getCompressedCount());
      assertEquals(61, snappyCompressorInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading back-reference length
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Illegal block with bad offset found
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      try { 
        snappyCompressorInputStream0.read(byteArray0, (int) (byte)2, 32768);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Premature end of stream reading block start
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
      int int0 = snappyCompressorInputStream0.read(byteArray0, 4, 4);
      assertEquals(5L, snappyCompressorInputStream0.getUncompressedCount());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0, 95);
      int int0 = snappyCompressorInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(0, snappyCompressorInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      SnappyCompressorInputStream snappyCompressorInputStream1 = null;
      try {
        snappyCompressorInputStream1 = new SnappyCompressorInputStream(snappyCompressorInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Premature end of stream reading size
         //
         verifyException("org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SnappyCompressorInputStream snappyCompressorInputStream0 = new SnappyCompressorInputStream(byteArrayInputStream0);
      int int0 = snappyCompressorInputStream0.getSize();
      assertEquals(0, int0);
  }
}
