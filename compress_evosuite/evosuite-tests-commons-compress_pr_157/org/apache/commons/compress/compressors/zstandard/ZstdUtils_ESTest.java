/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:30:11 GMT 2025
 */

package org.apache.commons.compress.compressors.zstandard;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.zstandard.ZstdUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZstdUtils_ESTest extends ZstdUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      boolean boolean0 = ZstdUtils.matches(byteArray0, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      boolean boolean0 = ZstdUtils.matches(byteArray0, (byte)61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZstdUtils.matches((byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.zstandard.ZstdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)42;
      // Undeclared exception!
      try { 
        ZstdUtils.matches(byteArray0, (byte)83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.compress.compressors.zstandard.ZstdUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      boolean boolean0 = ZstdUtils.matches(byteArray0, (byte)8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      boolean boolean0 = ZstdUtils.matches(byteArray0, (byte)40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ZstdUtils.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZstdUtils.setCacheZstdAvailablity(true);
      ZstdUtils.setCacheZstdAvailablity(true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZstdUtils.setCacheZstdAvailablity(false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZstdUtils.setCacheZstdAvailablity(true);
      boolean boolean0 = ZstdUtils.isZstdCompressionAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZstdUtils.isZstdCompressionAvailable();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZstdUtils.getCachedZstdAvailability();
  }
}
