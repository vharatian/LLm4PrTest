/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 04:24:33 GMT 2025
 */

package org.apache.commons.compress.compressors.lz4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FramedLZ4CompressorOutputStream_ESTest extends FramedLZ4CompressorOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5(bz-PLgr_Q0mRq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(4876);
      framedLZ4CompressorOutputStream0.finish();
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 1048576, 262144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true, parameters0);
      MockFile mockFile0 = new MockFile("'atzk8l:=T.", "'atzk8l:=T.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockFileOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, 16, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, true, true, (Parameters) null);
      MockFile mockFile0 = new MockFile("Pattern is missing");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockFileOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[14];
      framedLZ4CompressorOutputStream0.write(byteArray0, 8, 5);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      int int0 = framedLZ4CompressorOutputStream_BlockSize0.getIndex();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn((-1617), 0).when(parameters0).getMinBackReferenceLength();
      doReturn(64, 3).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(65536);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 65536, 262144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-902)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 65536, 262144);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write(byteArray0, (-931), (-931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(65536);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 65536, 262144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false);
      MockFile mockFile0 = new MockFile("Jarsigner command: %s", "Jarsigner command: %s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockFileOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.close();
      framedLZ4CompressorOutputStream0.write((-639));
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, (-639), 262144);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, (Parameters) null);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write((-258));
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameters0).getLazyMatching();
      doReturn(0).when(parameters0).getLazyMatchingThreshold();
      doReturn((-519), 0).when(parameters0).getMinBackReferenceLength();
      doReturn(2050, 2050).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(3);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn((-663)).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(3);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(3);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.finish();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      MockFile mockFile0 = new MockFile("*xr~NI1.", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true, (Parameters) null);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // params
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write((-3759));
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(parameters0).getMinBackReferenceLength();
      doReturn(0, 0).when(parameters0).getWindowSize();
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(3);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.close();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.compress.compressors.lz77support.LZ77Compressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(byteArrayOutputStream0, (FramedLZ4CompressorOutputStream.Parameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      MockFile mockFile0 = new MockFile("5(bz-PLgr_QmRq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream2.finish();
      framedLZ4CompressorOutputStream1.finish();
      framedLZ4CompressorOutputStream0.finish();
      assertEquals(51L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      MockPrintStream mockPrintStream0 = new MockPrintStream("M@!9K//Q+");
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[43];
      framedLZ4CompressorOutputStream0.write(byteArray0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write(byteArray0);
      framedLZ4CompressorOutputStream0.write(56);
      // Undeclared exception!
      framedLZ4CompressorOutputStream0.finish();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5(bz-PLgr_Q0mRq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, true);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(4876);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 4876, 1048576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5(bz-PLgr_Q0mRq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, true, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.write(4876);
      // Undeclared exception!
      try { 
        framedLZ4CompressorOutputStream0.write((byte[]) null, 1048576, 262144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      MockFile mockFile0 = new MockFile("5(bz-PLgr_QmRq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, false, false, false);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream1 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      byte[] byteArray0 = new byte[1];
      framedLZ4CompressorOutputStream1.write(byteArray0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream2 = new FramedLZ4CompressorOutputStream(framedLZ4CompressorOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream1.finish();
      framedLZ4CompressorOutputStream0.finish();
      assertEquals(38L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K64;
      Parameters parameters0 = mock(Parameters.class, new ViolatedAssumptionAnswer());
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, parameters0);
      MockFile mockFile0 = new MockFile(", withBlockDependency ", "yG(i2B`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(mockPrintStream0, framedLZ4CompressorOutputStream_Parameters0);
      framedLZ4CompressorOutputStream0.finish();
      framedLZ4CompressorOutputStream0.finish();
      assertEquals(15L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream0 = null;
      try {
        framedLZ4CompressorOutputStream0 = new FramedLZ4CompressorOutputStream(pipedOutputStream0, framedLZ4CompressorOutputStream_Parameters0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FramedLZ4CompressorOutputStream.BlockSize framedLZ4CompressorOutputStream_BlockSize0 = FramedLZ4CompressorOutputStream.BlockSize.K256;
      FramedLZ4CompressorOutputStream.Parameters framedLZ4CompressorOutputStream_Parameters0 = new FramedLZ4CompressorOutputStream.Parameters(framedLZ4CompressorOutputStream_BlockSize0, true, true, true);
      String string0 = framedLZ4CompressorOutputStream_Parameters0.toString();
      assertEquals("LZ4 Parameters with BlockSize K256, withContentChecksum true, withBlockChecksum true, withBlockDependency true", string0);
  }
}
