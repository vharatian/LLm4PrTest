/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:53:08 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.zip.ExplodingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExplodingInputStream_ESTest extends ExplodingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(4096, 4096, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of trees must be 2 or 3
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(32768, (byte)0, pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dictionary size must be 4096 or 8192
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      try { 
        explodingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8192);
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 2, pipedInputStream0);
      try { 
        explodingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(1215, 1215, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dictionary size must be 4096 or 8192
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExplodingInputStream explodingInputStream0 = null;
      try {
        explodingInputStream0 = new ExplodingInputStream(4096, (-1), (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of trees must be 2 or 3
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      // Undeclared exception!
      try { 
        explodingInputStream0.getCompressedCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExplodingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      explodingInputStream0.close();
      assertEquals(0L, explodingInputStream0.getUncompressedCount());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ExplodingInputStream explodingInputStream0 = new ExplodingInputStream(8192, 3, pipedInputStream0);
      long long0 = explodingInputStream0.getUncompressedCount();
      assertEquals(0L, long0);
  }
}
