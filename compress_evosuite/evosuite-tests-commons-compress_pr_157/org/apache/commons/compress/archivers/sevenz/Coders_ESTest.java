/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:37:30 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;
import org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder;
import org.apache.commons.compress.archivers.sevenz.Coder;
import org.apache.commons.compress.archivers.sevenz.CoderBase;
import org.apache.commons.compress.archivers.sevenz.Coders;
import org.apache.commons.compress.archivers.sevenz.DeltaDecoder;
import org.apache.commons.compress.archivers.sevenz.LZMADecoder;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.tukaani.xz.ARMOptions;
import org.tukaani.xz.DeltaInputStream;
import org.tukaani.xz.DeltaOptions;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Coders_ESTest extends Coders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream((DeflaterOutputStream) null, deflater0);
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderOutputStream0.write((byte[]) null, 0, 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      LZMADecoder lZMADecoder0 = new LZMADecoder();
      MockFile mockFile0 = new MockFile("LoC7rV9)r/d$%x-", "LoC7rV9)r/d$%x-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object object0 = new Object();
      OutputStream outputStream0 = lZMADecoder0.encode(mockPrintStream0, object0);
      BZip2CompressorOutputStream bZip2CompressorOutputStream0 = (BZip2CompressorOutputStream)coders_BZIP2Decoder0.encode(outputStream0, object0);
      assertEquals(9, bZip2CompressorOutputStream0.getBlockSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "SR");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Deflater deflater0 = new Deflater();
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockFileOutputStream0, deflater0);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      byte[] byteArray0 = new byte[7];
      coders_DeflateDecoder_DeflateDecoderOutputStream0.write(byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "Aw");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(mockPrintStream0);
      Deflater deflater0 = new Deflater(9);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      coders_DeflateDecoder_DeflateDecoderOutputStream0.write(9);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoderBase coderBase0 = Coders.findByMethod((SevenZMethod) null);
      assertNull(coderBase0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.COPY;
      OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, (Object) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Method doesn't support writing
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.CoderBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, deflater0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.tukaani.xz.LZMAOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-11), (byte) (-11));
      // Undeclared exception!
      try { 
        Coders.addDecoder("", byteArrayInputStream0, (-3592L), (Coder) null, byteArray0, (byte) (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      MockPrintStream mockPrintStream0 = new MockPrintStream("18k#5uO{-.");
      Inflater inflater0 = new Inflater();
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pipedInputStream0, inflater0, 100);
      try { 
        Coders.addEncoder(mockPrintStream0, (SevenZMethod) null, inflaterInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[1];
      coder0.decompressionMethodId = byteArray0;
      InputStream inputStream0 = Coders.addDecoder("", (InputStream) null, 0L, coder0, byteArray0, 799);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      DeltaOptions deltaOptions0 = new DeltaOptions();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(deltaOptions0);
      DeltaInputStream deltaInputStream0 = (DeltaInputStream)coders_BCJDecoder0.decode("Unsupported compression method ", pipedInputStream0, 256, coder0, (byte[]) null, 100);
      assertEquals(256, DeltaInputStream.DISTANCE_MAX);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      ARMOptions aRMOptions0 = new ARMOptions();
      Coders.BCJDecoder coders_BCJDecoder0 = new Coders.BCJDecoder(aRMOptions0);
      OutputStream outputStream0 = coders_BCJDecoder0.encode((OutputStream) null, coders_CopyDecoder0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      DeltaDecoder deltaDecoder0 = new DeltaDecoder();
      byte[] byteArray0 = new byte[5];
      InputStream inputStream0 = deltaDecoder0.decode("8s+9@u$Z>M-", pipedInputStream0, 1L, coder0, byteArray0, (byte)77);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(inputStream0);
      Inflater inflater0 = new Inflater();
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      // Undeclared exception!
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 620);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pushbackInputStream0);
      Inflater inflater0 = new Inflater();
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      try { 
        coders_DeflateDecoder_DeflateDecoderInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pipedInputStream0);
      Inflater inflater0 = new Inflater();
      Coders.DeflateDecoder.DeflateDecoderInputStream coders_DeflateDecoder_DeflateDecoderInputStream0 = new Coders.DeflateDecoder.DeflateDecoderInputStream(inflaterInputStream0, inflater0);
      coders_DeflateDecoder_DeflateDecoderInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      SevenZMethod sevenZMethod0 = SevenZMethod.LZMA2;
      OutputStream outputStream0 = Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
      DeflaterOutputStream deflaterOutputStream0 = new DeflaterOutputStream(outputStream0, true);
      Coders.DeflateDecoder.DeflateDecoderOutputStream coders_DeflateDecoder_DeflateDecoderOutputStream0 = new Coders.DeflateDecoder.DeflateDecoderOutputStream(deflaterOutputStream0, deflater0);
      byte[] byteArray0 = new byte[1];
      coders_DeflateDecoder_DeflateDecoderOutputStream0.write(byteArray0, 0, 0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#>u4Il9,QAg.U", false);
      OutputStream outputStream0 = coders_DeflateDecoder0.encode(mockFileOutputStream0, (Object) null);
      outputStream0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      AES256SHA256Decoder aES256SHA256Decoder0 = new AES256SHA256Decoder();
      OutputStream outputStream0 = coders_CopyDecoder0.encode((OutputStream) null, aES256SHA256Decoder0);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coders.CopyDecoder coders_CopyDecoder0 = new Coders.CopyDecoder();
      Coder coder0 = new Coder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      InputStream inputStream0 = coders_CopyDecoder0.decode("Unsupported compression method ", pipedInputStream0, 100, coder0, (byte[]) null, 100);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.DEFLATE;
      // Undeclared exception!
      try { 
        Coders.addEncoder((OutputStream) null, sevenZMethod0, sevenZMethod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coders.DeflateDecoder coders_DeflateDecoder0 = new Coders.DeflateDecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Coder coder0 = new Coder();
      byte[] byteArray0 = new byte[8];
      InputStream inputStream0 = coders_DeflateDecoder0.decode("", bufferedInputStream0, (-3581L), coder0, byteArray0, (byte) (-65));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coder coder0 = new Coder();
      Coders.Deflate64Decoder coders_Deflate64Decoder0 = new Coders.Deflate64Decoder();
      InputStream inputStream0 = coders_Deflate64Decoder0.decode("SW+]W,.", (InputStream) null, 132000L, coder0, (byte[]) null, 0);
      try { 
        Coders.addDecoder("jB<6E_>r5oW#?C", inputStream0, 4L, coder0, (byte[]) null, 229);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported compression method null used in jB<6E_>r5oW#?C
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.Coders", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coders.BZIP2Decoder coders_BZIP2Decoder0 = new Coders.BZIP2Decoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      InflaterInputStream inflaterInputStream0 = new InflaterInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        coders_BZIP2Decoder0.decode("org.apache.commons.compress.archivers.sevenz.Coders", inflaterInputStream0, 9, (Coder) null, byteArray0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SevenZMethod sevenZMethod0 = SevenZMethod.BCJ_IA64_FILTER;
      CoderBase coderBase0 = Coders.findByMethod(sevenZMethod0);
      assertNotNull(coderBase0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coders coders0 = new Coders();
  }
}
