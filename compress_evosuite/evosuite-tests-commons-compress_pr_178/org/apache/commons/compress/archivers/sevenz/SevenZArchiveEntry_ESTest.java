/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:00:08 GMT 2025
 */

package org.apache.commons.compress.archivers.sevenz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZMethod;
import org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SevenZArchiveEntry_ESTest extends SevenZArchiveEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate(1083, 0, 0, 63, 1105);
      sevenZArchiveEntry0.setLastModifiedDate((Date) mockDate0);
      assertTrue(sevenZArchiveEntry0.getHasLastModifiedDate());
      
      Date date0 = sevenZArchiveEntry0.getLastModifiedDate();
      assertTrue(date0.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrcValue(10000L);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc((-1583));
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-1583), sevenZArchiveEntry0.getCrc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setWindowsAttributes((-1));
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals((-1), sevenZArchiveEntry1.getWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setAccessDate(390L);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setLastModifiedDate(7L);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setCreationDate(1L);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime((-649L));
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime((-1147L));
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(mockDate0);
      assertEquals((-13924092824670000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setDirectory(true);
      boolean boolean0 = sevenZArchiveEntry0.isDirectory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAntiItem(true);
      boolean boolean0 = sevenZArchiveEntry0.isAntiItem();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setWindowsAttributes(853);
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals(853, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setWindowsAttributes((-2146662429));
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals((-2146662429), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setSize(14);
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("signdjar");
      String string0 = sevenZArchiveEntry0.getName();
      assertEquals("signdjar", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("");
      String string0 = sevenZArchiveEntry0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasWindowsAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate(0, (-1525), 0, 0, 0, 31);
      sevenZArchiveEntry0.setLastModifiedDate((Date) mockDate0);
      boolean boolean0 = sevenZArchiveEntry0.getHasLastModifiedDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCreationDate(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasCreationDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Date date0 = SevenZArchiveEntry.ntfsTimeToJavaTime((-315L));
      sevenZArchiveEntry0.setAccessDate(date0);
      boolean boolean0 = sevenZArchiveEntry0.getHasAccessDate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc(14);
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc((-1414));
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals((-1414L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc(14);
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrcValue((-34L));
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      LinkedHashSet<SevenZMethodConfiguration> linkedHashSet0 = new LinkedHashSet<SevenZMethodConfiguration>();
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>(linkedHashSet0);
      sevenZArchiveEntry0.setContentMethods(treeSet0);
      Iterable<? extends SevenZMethodConfiguration> iterable0 = sevenZArchiveEntry0.getContentMethods();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedSize(1);
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedSize((-741L));
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals((-741L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrc(23);
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals(23L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrc(1);
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SevenZArchiveEntry.javaTimeToNtfsTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      LinkedHashSet<SevenZMethodConfiguration> linkedHashSet0 = new LinkedHashSet<SevenZMethodConfiguration>();
      linkedHashSet0.add((SevenZMethodConfiguration) null);
      sevenZArchiveEntry0.setContentMethods(linkedHashSet0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setContentMethods(linkedHashSet0);
      // Undeclared exception!
      try { 
        sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2141991361), (-230), (-230), (-230), (-230));
      long long0 = SevenZArchiveEntry.javaTimeToNtfsTime(mockDate0);
      assertEquals(1381837813996216704L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      HashSet<SevenZMethodConfiguration> hashSet0 = new HashSet<SevenZMethodConfiguration>(treeSet0);
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      hashSet0.add(sevenZMethodConfiguration0);
      sevenZArchiveEntry0.setContentMethods(hashSet0);
      sevenZArchiveEntry1.setContentMethods(treeSet0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      LinkedHashSet<SevenZMethodConfiguration> linkedHashSet0 = new LinkedHashSet<SevenZMethodConfiguration>();
      SevenZMethod sevenZMethod0 = SevenZMethod.DELTA_FILTER;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      linkedHashSet0.add(sevenZMethodConfiguration0);
      sevenZArchiveEntry0.setContentMethods(linkedHashSet0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      ArrayList<SevenZMethodConfiguration> arrayList0 = new ArrayList<SevenZMethodConfiguration>();
      arrayList0.add((SevenZMethodConfiguration) null);
      sevenZArchiveEntry1.setContentMethods(arrayList0);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      LinkedHashSet<SevenZMethodConfiguration> linkedHashSet0 = new LinkedHashSet<SevenZMethodConfiguration>();
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      linkedHashSet0.add(sevenZMethodConfiguration0);
      sevenZArchiveEntry0.setContentMethods(linkedHashSet0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setContentMethods(linkedHashSet0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      LinkedHashSet<SevenZMethodConfiguration> linkedHashSet0 = new LinkedHashSet<SevenZMethodConfiguration>();
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      sevenZArchiveEntry0.setContentMethods(linkedHashSet0);
      linkedHashSet0.add(sevenZMethodConfiguration0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setContentMethods(linkedHashSet0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      sevenZArchiveEntry1.setContentMethods(treeSet0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      TreeSet<SevenZMethodConfiguration> treeSet0 = new TreeSet<SevenZMethodConfiguration>();
      HashSet<SevenZMethodConfiguration> hashSet0 = new HashSet<SevenZMethodConfiguration>(treeSet0);
      sevenZArchiveEntry0.setContentMethods(hashSet0);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry0.setCompressedSize((-1114L));
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setSize((-466L));
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertEquals((-466L), sevenZArchiveEntry1.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setCompressedCrcValue((-2302L));
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setHasCrc(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry1.getHasCrc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setWindowsAttributes(124);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertEquals(124, sevenZArchiveEntry1.getWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setAccessDate(1749L);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setLastModifiedDate((-146L));
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(sevenZArchiveEntry0.equals((Object)sevenZArchiveEntry1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry1.setCreationDate(10000L);
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setHasLastModifiedDate(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry1.getHasLastModifiedDate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      assertTrue(sevenZArchiveEntry1.equals((Object)sevenZArchiveEntry0));
      
      sevenZArchiveEntry0.setHasCreationDate(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setDirectory(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry0.isDirectory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setHasStream(true);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry1.hasStream());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      sevenZArchiveEntry1.setName("a%logB'LCc.W");
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZMethod sevenZMethod0 = SevenZMethod.AES256SHA256;
      SevenZMethodConfiguration sevenZMethodConfiguration0 = new SevenZMethodConfiguration(sevenZMethod0);
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZMethodConfiguration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setName("Po\"MsD8");
      sevenZArchiveEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setContentMethods((Iterable<? extends SevenZMethodConfiguration>) null);
      assertEquals(0, sevenZArchiveEntry0.getWindowsAttributes());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate();
      sevenZArchiveEntry0.setAccessDate((Date) mockDate0);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry0.getHasAccessDate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAccessDate((Date) null);
      assertFalse(sevenZArchiveEntry0.getHasLastModifiedDate());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getAccessDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setLastModifiedDate((Date) null);
      assertFalse(sevenZArchiveEntry0.getHasWindowsAttributes());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getLastModifiedDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      MockDate mockDate0 = new MockDate(1, 0, 5, 1, (-2598), 1);
      sevenZArchiveEntry0.setCreationDate((Date) mockDate0);
      assertTrue(sevenZArchiveEntry0.getHasCreationDate());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCreationDate((Date) null);
      assertFalse(sevenZArchiveEntry0.getHasCrc());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      // Undeclared exception!
      try { 
        sevenZArchiveEntry0.getCreationDate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The entry doesn't have this timestamp
         //
         verifyException("org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasWindowsAttributes(true);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertTrue(sevenZArchiveEntry0.getHasWindowsAttributes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCompressedSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasCrc();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.hasStream();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasLastModifiedDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setAntiItem(true);
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.equals(sevenZArchiveEntry1);
      assertTrue(sevenZArchiveEntry0.isAntiItem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getWindowsAttributes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getCrc();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      Iterable<? extends SevenZMethodConfiguration> iterable0 = sevenZArchiveEntry0.getContentMethods();
      assertNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrc((-460));
      SevenZArchiveEntry sevenZArchiveEntry1 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry1.equals(sevenZArchiveEntry0);
      assertEquals((-460), sevenZArchiveEntry0.getCrc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = sevenZArchiveEntry0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setSize((-934L));
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals((-934L), long0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCreationDate(true);
      assertTrue(sevenZArchiveEntry0.getHasCreationDate());
      
      Date date0 = sevenZArchiveEntry0.getCreationDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrc((-3250));
      int int0 = sevenZArchiveEntry0.getCompressedCrc();
      assertEquals((-3250), int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasAccessDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasCreationDate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCompressedCrcValue((-2302L));
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals((-2302L), long0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasStream(true);
      boolean boolean0 = sevenZArchiveEntry0.hasStream();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasAccessDate(true);
      assertTrue(sevenZArchiveEntry0.getHasAccessDate());
      
      Date date0 = sevenZArchiveEntry0.getAccessDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCompressedCrcValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getCrcValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCrc(true);
      boolean boolean0 = sevenZArchiveEntry0.getHasCrc();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.getHasWindowsAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.isAntiItem();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      boolean boolean0 = sevenZArchiveEntry0.isDirectory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      long long0 = sevenZArchiveEntry0.getSize();
      assertEquals(0L, long0);
  }
}
