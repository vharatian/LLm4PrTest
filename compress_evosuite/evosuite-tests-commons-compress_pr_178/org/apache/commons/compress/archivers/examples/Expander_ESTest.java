/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 02:57:54 GMT 2025
 */

package org.apache.commons.compress.archivers.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.FileSystemException;
import java.nio.file.InvalidPathException;
import java.nio.file.NoSuchFileException;
import java.util.Enumeration;
import java.util.Stack;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.examples.CloseableConsumer;
import org.apache.commons.compress.archivers.examples.Expander;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Expander_ESTest extends Expander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("/");
      MockFile mockFile1 = new MockFile(mockFile0, "+~d*~mh7");
      try { 
        expander0.expand("Gn=^97P_", (File) mockFile0, (File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: Gn=^97P_ not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("TripleDES168", "7z", (File) mockFile0);
      try { 
        expander0.expand("zip", (File) mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("J ZQ^10=tf[", "p");
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.examples.expander", "v", (File) mockFile0);
      try { 
        expander0.expand(file0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Expander expander0 = new Expander();
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      MockFile mockFile0 = new MockFile(" PraKh2PW~.", "^{,2@KU8,_9y.ci0");
      expander0.expand((ArchiveInputStream) zipArchiveInputStream0, (File) mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile(" PraKh2PW~.");
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, false);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(tarArchiveInputStream0);
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) arArchiveInputStream0, (File) mockFile0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1910010747), (-1910010747));
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      File file0 = MockFile.createTempFile("Don't know how to handle format ", "Fy*-gA");
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) zipArchiveInputStream0, file0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("actual and claimed size don't match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile", "/tmp/F~d*~m5NK|h70=/");
      try { 
        expander0.expand((ArchiveInputStream) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File name too long
         //
         verifyException("java.io.UnixFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7x", "7x");
      Expander expander0 = new Expander();
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream((InputStream) null);
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(jarArchiveInputStream0, "7x");
      try { 
        expander0.expand((ArchiveInputStream) cpioArchiveInputStream0, (File) mockFile0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Expanding ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("Expanding ", (SeekableByteChannel) fileChannel0, (File) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: Expanding  not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("15^", (SeekableByteChannel) null, (File) null, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Don't know how to handle format ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("Don't know how to handle format ");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (SeekableByteChannel) fileChannel0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/Tk?,|^#p/eY]ny13(w");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      try { 
        expander0.expand("/Tk?,|^#p/eY]ny13(w", (SeekableByteChannel) fileChannel0, (File) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: /Tk?,|^#p/eY]ny13(w not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("!9U?Fk: /_@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7z");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        expander0.expand("7z", (SeekableByteChannel) fileChannel0, (File) mockFile0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("6Y", "6Y");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aqute.bnd.osgi.instruction$filter");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (SeekableByteChannel) fileChannel0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The size must be non-negative", "zip");
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("zip");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      try { 
        expander0.expand("zip", (SeekableByteChannel) fileChannel0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("8*{afP`@&m{#r{", (InputStream) pipedInputStream0, (File) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: 8*{afP`@&m{#r{ not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Expander expander0 = new Expander();
      Enumeration<DumpArchiveInputStream> enumeration0 = (Enumeration<DumpArchiveInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      File file0 = MockFile.createTempFile("zip", "zip");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("7z", (InputStream) sequenceInputStream0, file0, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("\"je}VvK=7//'mf9.");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      JarArchiveInputStream jarArchiveInputStream0 = new JarArchiveInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        expander0.expand("\"je}VvK=7//'mf9.", (InputStream) jarArchiveInputStream0, (File) mockFile0, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1298);
      try { 
        expander0.expand("7z", (InputStream) pipedInputStream0, (File) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The 7z doesn't support streaming.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Expander expander0 = new Expander();
      CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 416);
      // Undeclared exception!
      try { 
        expander0.expand("zip", (InputStream) cpioArchiveInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/compre*s_experiment_2/ PraKh2PW~./ PraKh2PW~./", "/home/azureuser/LLm4PrTest/compre*s_experiment_2/ PraKh2PW~./ PraKh2PW~./");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("/home/azureuser/LLm4PrTest/compre*s_experiment_2/ PraKh2PW~./ PraKh2PW~./", (InputStream) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Expander expander0 = new Expander();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/zip0zip");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Enumeration<DumpArchiveInputStream> enumeration0 = (Enumeration<DumpArchiveInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      File file0 = MockFile.createTempFile("zip", "zip");
      try { 
        expander0.expand("zip", (InputStream) zipArchiveInputStream0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("zip");
      try { 
        expander0.expand("zip", (File) mockFile0, (File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("\u0000\u0000", "\u0000\u0000");
      // Undeclared exception!
      try { 
        expander0.expand("\u0000\u0000", (File) mockFile0, (File) mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Expander expander0 = new Expander();
      File file0 = MockFile.createTempFile("compressed and uncompressed size don't match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArUhiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile", "!SAl%*v|:c");
      try { 
        expander0.expand("G{$", file0, file0);
        fail("Expecting exception: FileSystemException");
      
      } catch(FileSystemException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        expander0.expand((String) null, (File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Archivername must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1233), (-1233));
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) null, closeableConsumer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) null, (File) null, (CloseableConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Expander expander0 = new Expander();
      TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 1754);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(tarArchiveInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(arArchiveInputStream0);
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) bufferedInputStream0, (File) null, closeableConsumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current ar entry
         //
         verifyException("org.apache.commons.compress.archivers.ar.ArArchiveInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expander expander0 = new Expander();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 321);
      try { 
        expander0.expand((InputStream) bufferedInputStream0, (File) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Expander expander0 = new Expander();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), 1);
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) byteArrayInputStream0, (File) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("\u0000\u0000", "/home/azureuser/LLm4PrTest/compress_experiment_2/XA0B7Zrl[6QxI]@eN_o/");
      // Undeclared exception!
      try { 
        expander0.expand((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FO");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("FO");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("7z", (SeekableByteChannel) fileChannel0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("7x", (SeekableByteChannel) null, (File) null, closeableConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"ch\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("zip");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      try { 
        expander0.expand("zip", (SeekableByteChannel) fileChannel0, (File) mockFile0, closeableConsumer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand("OSG]", (InputStream) null, (File) null, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Expander expander0 = new Expander();
      Enumeration<DumpArchiveInputStream> enumeration0 = (Enumeration<DumpArchiveInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFile mockFile0 = new MockFile("", "n!w2NK[2J6");
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      expander0.expand("zip", (InputStream) sequenceInputStream0, (File) mockFile0, closeableConsumer0);
      assertEquals("/", mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Expander expander0 = new Expander();
      CloseableConsumer closeableConsumer0 = mock(CloseableConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) null, (File) null, closeableConsumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ArchiveInputStream) null, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Expander expander0 = new Expander();
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
      File file0 = MockFile.createTempFile("The prefix must not be null", "The prefix must not be null");
      expander0.expand("zip", (InputStream) zipArchiveInputStream0, file0);
      assertEquals("/tmp", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("7z", (File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Expander expander0 = new Expander();
      MockFile mockFile0 = new MockFile("");
      try { 
        expander0.expand((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IOException while reading signature.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((InputStream) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream must not be null.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((ZipFile) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand("H", (SeekableByteChannel) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // \"ch\" is null!
         //
         verifyException("java.nio.channels.Channels", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Expander expander0 = new Expander();
      // Undeclared exception!
      try { 
        expander0.expand((SevenZFile) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.examples.Expander", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Expander expander0 = new Expander();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        expander0.expand("Don't know how to handle format ", (InputStream) pipedInputStream0, (File) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Archiver: Don't know how to handle format  not found.
         //
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
}
