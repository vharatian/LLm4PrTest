/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 03:04:32 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonReadableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ZipFile_ESTest extends ZipFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Wt");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      mockFileOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      byte[] byteArray1 = new byte[10];
      mockFileOutputStream0.write(byteArray1);
      mockFileOutputStream0.write((int) (byte)1);
      mockFileOutputStream0.write(byteArray1);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0, "Wt", "Wt", true, false);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, (String) null, (String) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0, "v-3-rl", "v-3-rl", true, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile v-3-rl
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Wmt");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      mockFileOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      byte[] byteArray1 = new byte[10];
      mockFileOutputStream0.write(byteArray1);
      mockFileOutputStream0.write((int) (byte)1);
      mockFileOutputStream0.write(byteArray1);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0, "Wmt", "Wmt", true);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "c+Ld", "c+Ld", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0, (String) null, (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile null
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "4Ffrgj2/@odOQ6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4Ffrgj2/@odOQ6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Wt");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[2];
      mockFileOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)1);
      byte[] byteArray1 = new byte[10];
      mockFileOutputStream0.write(byteArray1);
      mockFileOutputStream0.write((int) (byte)1);
      mockFileOutputStream0.write(byteArray1);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0, "Wt");
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AvQ+=d|T&[0\"S0zP");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[25];
      mockFileOutputStream0.write(byteArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(fileChannel0);
        fail("Expecting exception: NonReadableChannelException");
      
      } catch(NonReadableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("", "UTF8");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "i2CrL", false, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, (String) null, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "SCHILY.realsize");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SeekableByteChannel[] seekableByteChannelArray0 = new SeekableByteChannel[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(seekableByteChannel0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile unknown archive
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipFile.closeQuietly((ZipFile) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile("", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "", "", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0, "\"I$TlheM*WT", true, true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"I$TlheM*WT
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Error on ZipFile /home/azureuser/LLm4PrTest/compress_experiment_2
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZipFile zipFile0 = null;
      try {
        zipFile0 = new ZipFile((SeekableByteChannel) null, "", "", false, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
