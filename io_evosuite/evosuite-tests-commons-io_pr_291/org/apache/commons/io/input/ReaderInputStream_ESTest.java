/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:59:15 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.ReaderInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ReaderInputStream_ESTest extends ReaderInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6h*!i8^' s5EEgnPi:");
      Charset charset0 = Charset.defaultCharset();
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charset0);
      byte[] byteArray0 = new byte[8];
      int int0 = readerInputStream0.read(byteArray0, (int) (byte)2, (int) (byte)2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      int int0 = ReaderInputStream.checkMinBufferSize(charsetEncoder0, 6);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0, charsetEncoder0, 1484);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null, charset0, 1397);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t/y");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      readerInputStream0.read(byteArray0);
      readerInputStream0.read(byteArray0);
      int int0 = readerInputStream0.read(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)121, (byte)47}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      int int0 = readerInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[9];
      int int0 = readerInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      float float0 = ReaderInputStream.minBufferSize(charsetEncoder0);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read((byte[]) null, 1024, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, 2139224095, 2139224095);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      stringReader0.close();
      try { 
        readerInputStream0.read(byteArray0, 2139224095, 2139224095);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t=/([,");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      readerInputStream0.close();
      byte[] byteArray0 = new byte[6];
      try { 
        readerInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h*i8^' s5EEgnPi:");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      readerInputStream0.close();
      try { 
        readerInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReaderInputStream.minBufferSize((CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReaderInputStream.checkMinBufferSize((CharsetEncoder) null, (-650));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      // Undeclared exception!
      try { 
        ReaderInputStream.checkMinBufferSize(charsetEncoder0, (-84));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -84 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (CharsetEncoder) null, 1501);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, charsetEncoder0, (-915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -915 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (Charset) null, 440);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, "array", 76);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // array
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Buffer size %,d must be at least %s for a CharsetEncoder %s.");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "Buffer size %,d must be at least %s for a CharsetEncoder %s.", (-5025));
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Buffer size %,d must be at least %s for a CharsetEncoder %s.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (String) null, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, "l9", (-119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -119 must be at least 2.0 for a CharsetEncoder ISO-8859-15.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t=/([,");
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream(stringReader0, "t=/([,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // t=/([,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null, charsetEncoder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null, "l9", 8);
      byte[] byteArray0 = new byte[0];
      int int0 = readerInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, 1788, 1788);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=1788, length=1788
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, (-485), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=-485, length=0
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerInputStream0.read(byteArray0, (-57), (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size=0, offset=-57, length=-57
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t=/([,");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      int int0 = readerInputStream0.read();
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      readerInputStream0.read();
      // Undeclared exception!
      try { 
        readerInputStream0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, charset0, (-1651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -1,651 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReaderInputStream readerInputStream0 = null;
      try {
        readerInputStream0 = new ReaderInputStream((Reader) null, (CharsetEncoder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null);
      // Undeclared exception!
      try { 
        readerInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ReaderInputStream readerInputStream0 = new ReaderInputStream((Reader) null, "l9");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      ReaderInputStream readerInputStream0 = new ReaderInputStream(stringReader0);
      long long0 = readerInputStream0.skip(692L);
      assertEquals(139L, long0);
  }
}
