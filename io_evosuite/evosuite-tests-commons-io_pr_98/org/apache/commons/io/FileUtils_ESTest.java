/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:07:07 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.time.format.TextStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("a", "Unable to create directory ");
      FileUtils.write((File) mockFile0, (CharSequence) "' and destination '");
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockFile mockFile0 = new MockFile("/tmp/S8Lqr/D'0org.apache.commons.io.IOCase");
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.IOCase");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write((File) mockFile0, (CharSequence) "org.apache.commons.io.IOCase", charset0, false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile(file0, ":jaV@v%R^965e(C`7Cl", charset0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "f%m/u(");
      URI uRI0 = mockFile0.toURI();
      MockFile mockFile1 = new MockFile(uRI0);
      FileUtils.writeStringToFile((File) mockFile1, "/tmp/6!::Q6>h 3h\"h4*");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "S8Lqr/D'");
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>();
      FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R3R=t{ko Fqvw", "The reference file '");
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      FileUtils.writeLines((File) mockFile0, (Collection<?>) arrayDeque0, "arX", false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      FileUtils.writeLines(file0, (Collection<?>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) priorityQueue0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileUtils.writeLines(file0, (String) null, (Collection<?>) linkedHashSet0, (String) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.write(file0, (CharSequence) "`-OCs", (String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "syU72Doc~ln");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // syU72Doc~ln
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File[] fileArray0 = new File[1];
      fileArray0[0] = file0;
      FileUtils.toURLs(fileArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unable to create directory ", "1 bytes");
      FileUtils.write((File) mockFile0, (CharSequence) "Unable to create directory ");
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".");
      URL uRL0 = mockFile0.toURL();
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", "file", "##u<_,U yMZ");
      FileUtils.toFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile(",dZOI_&.:x&.C-s%eq", "V1I.Dc2zS}]", file0);
      FileUtils.write(file1, (CharSequence) "V1I.Dc2zS}]");
      FileUtils.sizeOfAsBigInteger(file1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.write(file0, (CharSequence) "`-OCs");
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-2178));
      Object object0 = new Object();
      arrayDeque0.add(object0);
      FileUtils.writeLines(file0, (Collection<?>) arrayDeque0, "S8Lqr/D'");
      FileUtils.readLines(file0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("n/w*Mcr3Mu#9!", "n/w*Mcr3Mu#9!");
      byte[] byteArray0 = new byte[6];
      FileUtils.writeByteArrayToFile(file0, byteArray0, 0, (int) (byte)5);
      FileUtils.readFileToString(file0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.write(file0, (CharSequence) "`-OCs");
      FileUtils.readFileToString(file0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.write(file0, (CharSequence) "`-OCs");
      FileUtils.openInputStream(file0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      FileUtils.listFiles(file0, (IOFileFilter) orFileFilter0, (IOFileFilter) orFileFilter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", (String) null);
      FileUtils.lineIterator(file0, (String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      FileUtils.lineIterator(file0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[6];
      FileUtils.iterateFiles(file0, stringArray0, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate((-3015), (-3015), 9, 9, 16);
      FileUtils.isFileNewer(file0, (Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      FileUtils.getUserDirectory();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unable to create directory ";
      stringArray0[1] = "' and destination '";
      stringArray0[2] = "Unable to create directory ";
      stringArray0[3] = "1 bytes";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.write(file0, (CharSequence) "Unable to create directory ");
      FileUtils.getFile(stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NameFileFilter(S8Lqr/D')";
      stringArray0[1] = "S8Lqr/D'";
      stringArray0[2] = "S8Lqr/D'";
      stringArray0[3] = "NameFileFilter(S8Lqr/D')";
      stringArray0[4] = "S8Lqr/D'";
      stringArray0[5] = "S8Lqr/D'";
      stringArray0[6] = "NameFileFilter(S8Lqr/D')";
      stringArray0[7] = "S8Lqr/D'";
      stringArray0[8] = "S8Lqr/D'";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/NameFileFilter(S8Lqr/D')/S8Lqr/D'/S8Lqr/D'/NameFileFilter(S8Lqr/D')/S8Lqr/D'/S8Lqr/D'/NameFileFilter(S8Lqr/D')/S8Lqr/D'/S8Lqr/D'");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      System.setCurrentTimeMillis((-154317264093000L));
      File file0 = MockFile.createTempFile("U56%wW7:", "");
      String[] stringArray0 = new String[0];
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      FileUtils.getFile(file0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S8Lqr/D'");
      String[] stringArray0 = new String[0];
      FileUtils.getFile((File) mockFile0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteQuietly(file0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileUtils.decodeUrl("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/ca_0.", "/tmp/ca_0.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[9];
      mockPrintStream0.format("/tmp/ca_0.", objectArray0);
      FileUtils.copyFile(file0, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/..2,rP78k{)4L/home/azureuser/LLm4PrTest/ io_experiments/..2,rP78k{)4L/..2,rP78k{)4L";
      stringArray0[1] = "#N<dJ`JEu";
      stringArray0[2] = "SxQ";
      stringArray0[3] = " ^f.L";
      stringArray0[4] = "Ie<";
      stringArray0[5] = "' cannot be written to";
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0, iOCase0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, suffixFileFilter0, suffixFileFilter0);
      FileUtils.convertFileCollectionToFileArray(collection0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.convertFileCollectionToFileArray(linkedList0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.write(file0, (CharSequence) "`-OCs");
      FileUtils.checksumCRC32(file0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, "' already exists", charset0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.writeStringToFile(file0, "V1I.Dc2zS}]", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "Source '", "`aOC$", true);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `aOC$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/c4]jt0/tmp", "d(HKF$Env3n{@7");
      MockFile mockFile0 = new MockFile(file0, "=j*Q.T*g");
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "Failed to copy full contents from '", (String) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/tmp/tmp/c4]jt0/tmp0d(HKF$Env3n{@7' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "", "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "kx+.K\"<@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) priorityQueue0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) list0, "file", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-2178));
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) arrayDeque0, "/tmp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-2108913730));
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayDeque0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "org.apache.commons.io.IOCase", (Collection<?>) treeSet0, true);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.IOCase
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/", (Collection<?>) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      try { 
        FileUtils.writeLines(file0, "A\n9", (Collection<?>) arrayList0, "A\n9", true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.vintage.TimeoutExtension");
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "org.junitpioneer.vintage.TimeoutExtension", (Collection<?>) stack0, "}*");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.vintage.TimeoutExtension
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "`-OCs", (Collection<?>) linkedList0, "`-OCs");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `-OCs
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        FileUtils.writeLines(file0, "1 KB", (Collection<?>) linkedHashSet0, "1 KB");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "org.apachecommon0.ioIO6ase");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "org.apachecommon0.ioIO6ase", (Collection<?>) hashSet0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apachecommon0.ioIO6ase
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z6D.'qFTON");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) mockFile0, "z6D.'qFTON", (Collection<?>) hashSet0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // z6D.'qFTON
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      byte[] byteArray0 = new byte[7];
      try { 
        FileUtils.writeByteArrayToFile(file0, byteArray0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, (-201), (-625), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##u<_,U yMZ");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-1098), 37, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, (-1982292595), (-1982292595), true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, (byte[]) null, 2085, 2085);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(:-@e=mpxBS`@SS", "(:-@e=mpxBS`@SS");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0, (-2103672159), 4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null, 2085, 2085);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      byte[] byteArray0 = new byte[1];
      MockFile.createTempFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase", (File) mockFile0);
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/org.apachecommons.ioIOCase/org.apachecommons.ioIOCase' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.write(file0, (CharSequence) "Destination '", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) "1 TB", charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "`-OCs", "3", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R3R=t{ko Fqvw", "The reference file '");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "arX", "1 bytes", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1 bytes
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "VOD|", "RN");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // RN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "1024 EB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      FileUtils.moveToDirectory(file1, file0, true);
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file1, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CASS_FLE_SUFFIX", "CASS_FLE_SUFFIX");
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) mockFile0, "sEY");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sEY
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "SZ");
      try { 
        FileUtils.readLines((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp/SZ' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, "O");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // O
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "Character array is missing");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Character array is missing
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest", "/home/azureuser/LLm4PrTest");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/home/azureuser/LLm4PrTest' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File ', /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orK.apachecommons.ioIOCase");
      File file0 = MockFile.createTempFile("orK.apachecommons.ioIOCase", "orK.apachecommons.ioIOCase", (File) mockFile0);
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/orK.apachecommons.ioIOCase/orK.apachecommons.ioIOCase0orK.apachecommons.ioIOCase' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##u<_,U yMZ");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, mockFile0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("1 GB");
      try { 
        FileUtils.moveDirectory(mockFile0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '1 GB' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter("9[?>Y!mAzm1M'");
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs((File) null, canReadFileFilter0, suffixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, trueFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parameter 'fileFilter' is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("+?J}Au~N;b>bW", iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(mockFile0, prefixFileFilter0, prefixFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (String[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) canWriteFileFilter0, (IOFileFilter) canExecuteFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      NameFileFilter nameFileFilter0 = new NameFileFilter("`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) nameFileFilter0, (IOFileFilter) nameFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /tmp/`-OCs0`-OCs
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8MqrhD'", "org.apache.c|mmons.io.IOnasX");
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "file");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // file
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.lineIterator(file0, "`-OCs");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`-OCs", "`-OCs");
      try { 
        FileUtils.lineIterator((File) mockFile0, "`-OCs");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/`-OCs/`-OCs' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser", "/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", "QcXNG6/60<'936!w6X#");
      MockDate mockDate0 = new MockDate(1449L);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/QcXNG6/60<'936!w6X#
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdirParent((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceMkdir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S8Lqr/D'";
      stringArray0[1] = "S8Lqr/D'";
      stringArray0[2] = "S8Lqr/D'";
      stringArray0[3] = "S8Lqr/D'";
      stringArray0[4] = "S8Lqr/D'";
      stringArray0[5] = "S8Lqr/D'";
      stringArray0[6] = "S8Lqr/D'";
      stringArray0[7] = "S8Lqr/D'";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.copyDirectory(file0, file1, (FileFilter) null);
      // Undeclared exception!
      FileUtils.forceDeleteOnExit(file0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("tUkpI$&:~DQ", "tUkpI$&:~DQ");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tUkpI$&:~DQ0tUkpI$&:~DQ is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2674), (-2674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockFile mockFile0 = new MockFile("/tmp/tmp/V1I.Dc2zS}]");
      try { 
        FileUtils.copyURLToFile(uRL0, (File) mockFile0, 61, 61);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyToFile((InputStream) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Vector<File> vector0 = new Vector<File>();
      vector0.add(file0);
      File file1 = MockFile.createTempFile("YTjn&mql{f{q',J`", "", file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) vector0, file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/home/azureuser/YTjn&mql{f{q',J`0' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Vector<File> vector0 = new Vector<File>();
      vector0.add(file0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) vector0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      MockFile mockFile0 = new MockFile("C4]jt", "C4]jt");
      vector0.add((File) mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) vector0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/C4]jt/C4]jt' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v&GAu";
      stringArray0[1] = "";
      stringArray0[2] = "g*(]_SJ\"YL";
      stringArray0[3] = "/home/azureuser/LLm4PrTest/ io_experiments/6!::Q6>h 3h\"h4*/org.apache.commons.io.IOCase";
      stringArray0[4] = "net.bytebuddy.build.HashCodeAndEqualsPlugin$ValueMatcher";
      stringArray0[5] = ">7]f:S$l3>WlE";
      stringArray0[6] = "/tmp/S8L2=qr/D'0org.apache.commons.io.IOCase";
      stringArray0[7] = "u";
      stringArray0[8] = "b}6K)^W";
      File file1 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      FileUtils.copyToDirectory(file0, file1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 58);
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pushbackInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/`-OCs0`-OCs' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/fake/but/wellformed/url' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_x }[x");
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R3R=t{ko Fqvw");
      try { 
        FileUtils.copyFile(file0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/org.apachecommons.ioIOCase/org.apachecommons.ioIOCase' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setWritable(false, false);
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/azureuser' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' and destination '/tmp' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##u<_,U yMZ");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0, false);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) null, (FileFilter) ageFileFilter0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockFile0, true);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) ageFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can't compare directories, only files";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.copyDirectory(file1, file1, (FileFilter) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/Can't compare directories, only files' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "<~dN;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.contentEquals((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~|O6clAIgY?E", "-^[u b{n?:%)");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.writeStringToFile((File) mockFile0, "Source must not be null", charset0, false);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      File file0 = MockFile.createTempFile("5Ab2p;mJq>k", "5Ab2p;mJq>k");
      List<String> list0 = FileUtils.readLines(file0);
      FileUtils.writeLines(file0, (String) null, (Collection<?>) list0, "9aIMk]QRm^2XRJR", false);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      File file0 = MockFile.createTempFile("/tmp/org.apache.commons.io.IOCase", "#;y2F'`auxV'");
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "", (Collection<?>) arrayDeque0, "#;y2F'`auxV'", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommonstisIOCase", "org.apachecommonstisIOCase");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, 2, 2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/home/azureuser/azureuser", "/home/azureuser/home/azureuser/azureuser");
      byte[] byteArray0 = new byte[8];
      FileUtils.writeByteArrayToFile(file0, byteArray0, (int) (byte)1, 3, false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.write(file0, (CharSequence) null, charset0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("a", "Unable to create directory ");
      FileUtils.openOutputStream((File) mockFile0, true);
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "kC+!'a+2GvKhlp@q2+";
      stringArray0[1] = "`-OCs";
      stringArray0[2] = "`-OCs";
      stringArray0[3] = "*#B";
      stringArray0[4] = "`-OCs";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.openOutputStream(file0);
      FileUtils.readLines(file0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      File file0 = MockFile.createTempFile("n/w*Mcr3Mu#9!", "n/w*Mcr3Mu#9!");
      FileUtils.readFileToString(file0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '", "1 MB");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '";
      stringArray0[1] = "' and destination '";
      stringArray0[2] = "LQ,F;#?',F5u";
      stringArray0[3] = "1 MB";
      stringArray0[4] = "/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '";
      stringArray0[5] = "Unable to create directory ";
      stringArray0[6] = "/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '";
      stringArray0[7] = "1 MB";
      stringArray0[8] = "' and destination '";
      FileUtils.write((File) mockFile0, (CharSequence) "1 MB");
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      try { 
        FileUtils.openOutputStream(file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '/1 MB/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '/' and destination '/LQ,F;#?',F5u/1 MB/home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '/Unable to create directory /home/azureuser/LLm4PrTest/ io_experiments/.ci,M/Unable to create directory /' and destination '/1 MB' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unable to create directory ", "1 bytes");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unable to create directory ";
      stringArray0[1] = "' and destination '";
      stringArray0[2] = "Unable to create directory ";
      stringArray0[3] = "1 bytes";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.write(file0, (CharSequence) "Unable to create directory ");
      FileUtils.openOutputStream((File) mockFile0, false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = MockFile.createTempFile("V,V?", "URL ");
      FileUtils.openOutputStream(file0, true);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`-OCs";
      File file0 = FileUtils.getFile(stringArray0);
      FileUtils.openOutputStream(file0, false);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orK.apachecommons.ioIOCase", "orK.apachecommons.ioIOCase");
      try { 
        FileUtils.openInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/orK.apachecommons.ioIOCase/orK.apachecommons.ioIOCase' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = MockFile.createTempFile("O=yzk_?Z", "O%");
      MockFile mockFile0 = new MockFile(file0, "O%");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp/O=yzk_?Z0O%/O%' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = MockFile.createTempFile("O=yzk_?Z", "ZC  #'Hg)a`W(6t");
      MockFile mockFile0 = new MockFile(file0, "ZC  #'Hg)a`W(6t");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/tmp/O=yzk_?Z0ZC  #'Hg)a`W(6t/ZC  #'Hg)a`W(6t' does not exist [createDestDir=true]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/org.apachecommons.ioIOCase0org.apachecommons.ioIOCase' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(:-@e=mpxBS`@SS", "(:-@e=mpxBS`@SS");
      File file0 = FileUtils.getTempDirectory();
      FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Parameter 'directory' is not a directory: ";
      stringArray0[1] = " KB";
      stringArray0[2] = "Parameter 'directory' is not a directory: ";
      stringArray0[3] = "Parameter 'directory' is not a directory: ";
      stringArray0[4] = "Parameter 'directory' is not a directory: ";
      stringArray0[5] = "Parameter 'directory' is not a directory: ";
      stringArray0[6] = "Parameter 'directory' is not a directory: ";
      File file1 = FileUtils.getFile(file0, stringArray0);
      try { 
        FileUtils.moveDirectory(file0, file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/Parameter 'directory' is not a directory: / KB/Parameter 'directory' is not a directory: /Parameter 'directory' is not a directory: /Parameter 'directory' is not a directory: /Parameter 'directory' is not a directory: /Parameter 'directory' is not a directory: 
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("1 GB");
      FileUtils.moveDirectory(file0, mockFile0);
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: /home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "l^T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.isSymlink(file0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.isFileOlder(file0, (long) (-880));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R3R=t{ko Fqvw", "R3R=t{ko Fqvw");
      FileUtils.isFileOlder((File) mockFile0, (-1346L));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-3805L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, true);
      ageFileFilter0.accept(file0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.deleteDirectory(file0);
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp", "The class file for ");
      // Undeclared exception!
      try { 
        FileUtils.copyToFile((InputStream) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile((File) null, "QL12DO");
      FileUtils.copyToFile(byteArrayInputStream0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/`-OCs0`-OCs' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Bxl~J";
      stringArray0[1] = "HB";
      stringArray0[2] = "GYm5mu";
      stringArray0[3] = "SYSTEM";
      stringArray0[4] = "org.junitpioneer.vintage.TimeoutExtension";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.copyFileToDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/Bxl~J/HB/GYm5mu/SYSTEM/org.junitpioneer.vintage.TimeoutExtension' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/`-OCs0`-OCs' and destination '/tmp/`-OCs0`-OCs' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(file0, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NameFileFilter(S8Lqr/D')";
      stringArray0[1] = "S8Lqr/D'";
      stringArray0[2] = "S8Lqr/D'";
      stringArray0[3] = "NameFileFilter(S8Lqr/D')";
      stringArray0[4] = "S8Lqr/D'";
      stringArray0[5] = "S8Lqr/D'";
      stringArray0[6] = "NameFileFilter(S8Lqr/D')";
      stringArray0[7] = "S8Lqr/D'";
      stringArray0[8] = "S8Lqr/D'";
      File file1 = FileUtils.getFile(file0, stringArray0);
      FileUtils.copyDirectory(file0, file1, (FileFilter) ageFileFilter0, true);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      IOCase iOCase0 = IOCase.SYSTEM;
      NameFileFilter nameFileFilter0 = new NameFileFilter("S8L2=qr/D'", iOCase0);
      File file1 = FileUtils.getUserDirectory();
      FileUtils.copyDirectory(file0, file1, (FileFilter) nameFileFilter0, true);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) trueFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/`-OCs0`-OCs' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      NameFileFilter nameFileFilter0 = new NameFileFilter("", iOCase0);
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) nameFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/home/azureuser' and destination '/home/azureuser' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, adler32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`-OCs", "`-OCs");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      FileUtils.byteCountToDisplaySize(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/c4]jt0/tmp", "d(HKF$Env3n{@7");
      FileUtils.writeStringToFile(file0, "Failed to copy full contents from '", (String) null, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileUtils.getUserDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileUtils.getTempDirectoryPath();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({GD#TUxY", "!P)3ou({GD#TUxY");
      try { 
        FileUtils.write(file0, (CharSequence) "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R3R=t{ko Fqvw", "R3R=t{ko Fqvw");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (-354));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, (-354));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      File file0 = MockFile.createTempFile("V,V?", "URL ");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/V,V?0URL  is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/tmp", "file array contains null");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/tmp/file array contains null does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      try { 
        FileUtils.moveToDirectory(mockFile0, mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase");
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(mockFile0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parameter 'fileFilter' is null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.touch(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to set the last modification time for /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S8Lqr/D'");
      FileUtils.touch(mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL could not be converted to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[16];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(16, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z6D.'qFTON");
      MockFile.createTempFile("z6D.'qFTON", "Q=hcC", (File) mockFile0);
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(mockFile0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P3ou({:`8y^#zTUx");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // P3ou({:`8y^#zTUx does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile.createTempFile("nK/'", "/home/azureusr/azureuser", file0);
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `-OCs does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({GD#TUxY", "!P)3ou({GD#TUxY");
      String string0 = FileUtils.readFileToString(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      File file0 = MockFile.createTempFile("n/w*Mcr3Mu#9!", "n/w*Mcr3Mu#9!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      byte[] byteArray0 = new byte[1];
      FileUtils.writeByteArrayToFile((File) mockFile0, byteArray0);
      byte[] byteArray1 = FileUtils.readFileToByteArray(mockFile0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      byte[] byteArray0 = FileUtils.readFileToByteArray(file0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(file0, "##u<_,U yMZ");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      FileUtils.writeLines((File) mockFile0, (String) null, (Collection<?>) hashSet0);
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = MockFile.createTempFile("CtwD", (String) null);
      MockFile mockFile0 = new MockFile(file0, "' does not exist [createDestDir=");
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "CtwD", (String) null, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Directory '/tmp/CtwD0.tmp' could not be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orK.apachecommons.ioIOCase");
      FileUtils.writeStringToFile((File) mockFile0, "4}ZRnT3zG,SzX8R%{!", (String) null);
      assertEquals(18L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      file0.setReadOnly();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      try { 
        FileUtils.writeLines(file0, "RISqH$Qt#AvY(.^$", (Collection<?>) hashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/`-OCs0`-OCs' cannot be written to
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou>({:y^D#zTUxY", "!P)3ou>({:y^D#zTUxY");
      file0.setReadable(false);
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp/!P)3ou>({:y^D#zTUxY0!P)3ou>({:y^D#zTUxY' cannot be read
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8L2=qr/D'", "S8L2=qr/D'");
      MockFile mockFile0 = new MockFile("S8L2=qr/D'");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory 'S8L2=qr/D'' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      File file1 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/org.apachecommons.ioIOCase0org.apachecommons.ioIOCase' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
          MockFile mockFile0 = new MockFile("7yn8Y(0?Z/feOr|?l'", "!P)3ou({:y^D#zTUxY");
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, mockFile0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/7yn8Y(0?Z/feOr|?l'/!P)3ou({:y^D#zTUxY/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:797)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:747)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2037)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2072)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2097)
             // sun.reflect.GeneratedMethodAccessor281.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(:-@e=mpxBS`@SS", "(:-@e=mpxBS`@SS");
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/(:-@e=mpxBS`@SS/(:-@e=mpxBS`@SS' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser' already exists
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apachecommonstisIOCase", "org.apachecommonstisIOCase");
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/org.apachecommonstisIOCase0org.apachecommonstisIOCase' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isSymlink((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // File must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, 4477161600000L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`-OCs", "`-OCs");
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##<_,U yMZ");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase", "/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file '/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, 3102L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      File[] fileArray0 = new File[6];
      MockFile mockFile0 = new MockFile("JnN5");
      fileArray0[1] = (File) mockFile0;
      boolean boolean0 = FileUtils.isFileNewer(fileArray0[1], 1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 3102L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("o>TPZFX#");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The reference file 'o>TPZFX#' doesn't exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified reference file
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7& |#y|HD2]v1XX|a";
      stringArray0[1] = "cl%rcMHG5JF|3)/tYx6";
      stringArray0[2] = "]";
      File file0 = FileUtils.getFile(stringArray0);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No specified date
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate(4477161600000L);
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      MockFile mockFile0 = new MockFile("", "");
      File[] fileArray0 = new File[6];
      fileArray0[0] = (File) mockFile0;
      IOCase iOCase0 = IOCase.SENSITIVE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(fileArray0[0], prefixFileFilter0, prefixFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      Collection<File> collection0 = FileUtils.listFiles(file0, (String[]) null, true);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7& |#y|HD2]v1XX|a";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFile((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // names must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.getFile((File) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.vintage.TimetExtension");
      FileUtils.forceMkdirParent(mockFile0);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      FileUtils.forceMkdirParent(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orK.apachecommons.ioIOCase");
      File file0 = MockFile.createTempFile("orK.apachecommons.ioIOCase", "orK.apachecommons.ioIOCase", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "orK.apachecommons.ioIOCase");
      try { 
        FileUtils.forceMkdir(mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create directory /home/azureuser/LLm4PrTest/ io_experiments/orK.apachecommons.ioIOCase/orK.apachecommons.ioIOCase0orK.apachecommons.ioIOCase/orK.apachecommons.ioIOCase
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MockFile mockFile0 = new MockFile("orK.apachecommons.ioIOCase");
      File file0 = MockFile.createTempFile("orK.apachecommons.ioIOCase", "orK.apachecommons.ioIOCase", (File) mockFile0);
      try { 
        FileUtils.forceMkdir(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File /home/azureuser/LLm4PrTest/ io_experiments/orK.apachecommons.ioIOCase/orK.apachecommons.ioIOCase0orK.apachecommons.ioIOCase exists and is not a directory. Unable to create directory.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceMkdir(file0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockFile mockFile0 = new MockFile("CASS_FLE_SUFFIX", "CASS_FLE_SUFFIX");
      FileUtils.forceMkdir(mockFile0);
      assertTrue(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = MockFile.createTempFile("orgpacecommonstisIO7aH", "orgpacecommonstisIO7aH");
      FileUtils.forceDeleteOnExit(file0);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
          File file1 = MockFile.createTempFile("mz1kfJV^fzt`xa5H", "!P)3ou({:^D#TUxY");
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, file1, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/mz1kfJV^fzt`xa5H1!P)3ou({:^D#TUxY\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:797)
             // sun.reflect.GeneratedMethodAccessor284.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectory(file0, (File) mockFile0, false);
      try { 
        FileUtils.writeLines((File) mockFile0, "org.apachecommons.ioIOCase", (Collection<?>) null, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser/LLm4PrTest/ io_experiments/org.apachecommons.ioIOCase/org.apachecommons.ioIOCase' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("&QE~$UT0JU9\"");
          MockFile.createTempFile("`-OCs", "&QE~$UT0JU9\"", (File) mockFile0);
          // Undeclared exception!
          try { 
            FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/&QE~$UT0JU9\"/&QE~$UT0JU9\"/`-OCs0&QE~$UT0JU9\"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1271)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:673)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:549)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:717)
             // org.apache.commons.io.FileUtils.copyToDirectory(FileUtils.java:946)
             // sun.reflect.GeneratedMethodAccessor247.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file0, file1, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:98)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:34)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:198)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:121)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:110)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1338)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:339)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1123)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:1973)
             // org.apache.commons.io.FileUtils.moveDirectoryToDirectory(FileUtils.java:2007)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2095)
             // sun.reflect.GeneratedMethodAccessor281.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apachecommons.ioIOCase");
      File file0 = MockFile.createTempFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "org.apachecommons.ioIOCase");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/home/azureuser/LLm4PrTest/ io_experiments/org.apachecommons.ioIOCase/org.apachecommons.ioIOCase0org.apachecommons.ioIOCase/org.apachecommons.ioIOCase/org.apachecommons.ioIOCase' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("nK/'", "/home/azureusr/azureuser", file0);
      try { 
        FileUtils.copyDirectory(file0, file1, (FileFilter) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/nK/'0/home/azureusr/azureuser' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("D]P:VhclWW<!");
      FileUtils.copyToDirectory(file0, (File) mockFile0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SMLqr/.S<jD'";
      stringArray0[1] = "SMLqr/.S<jD'";
      stringArray0[2] = "SMLqr/.S<jD'";
      stringArray0[3] = "SMLqr/.S<jD'";
      stringArray0[4] = "SMLqr/.S<jD'";
      stringArray0[5] = "SMLqr/.S<jD'";
      stringArray0[6] = "SMLqr/.S<jD'";
      stringArray0[7] = "SMLqr/.S<jD'";
      stringArray0[8] = "SMLqr/.S<jD'";
      File file1 = FileUtils.getFile(file0, stringArray0);
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertEquals("/home/azureuser/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr/.S<jD'/SMLqr", file1.getParent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]O", "]O");
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(mockFile0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a directory: /home/azureuser/LLm4PrTest/ io_experiments/]O/]O
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.getUserDirectory();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/C4]jt0/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase/tmp/ bytes/tmp/C4]jt0/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase/tmp0/tmp/C4]jt0/tmp");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete directory /tmp.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##u<_,U yMZ");
      FileUtils.deleteDirectory(mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser/LLm4PrTest/ io_experiments/v&GAu/g*(]_SJ\"YL/home/azureuser", "}4T|0W3A:r-EPSz}5Q^");
      URL uRL0 = mockFile0.toURL();
      File file0 = FileUtils.toFile(uRL0);
      assertEquals("/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser/LLm4PrTest/ io_experiments/v&GAu/g*(]_SJ\"YL/home/azureuser/}4T|0W3A:r-EPSz}5Q^", file0.toString());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("Unable to set the last modification time for ");
      assertEquals("Unable to set the last modification time for ", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      vector0.add((File) null);
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) vector0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sources must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      TreeSet<MockFile> treeSet0 = new TreeSet<MockFile>();
      PriorityQueue<File> priorityQueue0 = new PriorityQueue<File>((SortedSet<? extends File>) treeSet0);
      FileUtils.copyToDirectory((Iterable<File>) priorityQueue0, file0);
      assertEquals("tmp", file0.getName());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-Cs", "-Cs");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = MockFile.createTempFile("Pd;~P]5xV\"WR", "");
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file0);
      FileUtils.copyInputStreamToFile(fileInputStream0, file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "S8Lqr/D'");
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/S8Lqr/D'0S8Lqr/D'' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R3R=t7ko Fyvw");
      MockFile mockFile0 = new MockFile("R3R=t7ko Fyvw");
      long long0 = FileUtils.copyFile((File) mockFile0, (OutputStream) mockFileOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8Lqr/D'", "org.apache.commons.io.IOCase");
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false);
      try { 
        FileUtils.copyFile(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/' exists but is read-only
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = MockFile.createTempFile("S8MqrhD'", "org.apache.c|mmons.io.IOnasX");
      MockFile mockFile0 = new MockFile("");
      try { 
        FileUtils.copyFile(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/.");
      try { 
        FileUtils.copyToDirectory(file0, (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY/home/azureuser/LLm4PrTest/ io_experiments/.' directory cannot be created
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("8qr/D'", "8qr/D'");
          MockFile mockFile0 = new MockFile("/tmp/tmp/C4]jt0");
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, (File) mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/tmp/C4]jt0\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1308)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:797)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:747)
             // sun.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("`-OCs", "`-OCs");
      try { 
        FileUtils.copyFileToDirectory(file1, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/`-OCs0`-OCs' and destination '/tmp/`-OCs0`-OCs' are the same
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      File file1 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file1, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination '/tmp/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source '/tmp/`-OCs0`-OCs' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = MockFile.createTempFile("Q{ooqSu&e^aT)^DN{", "Q{ooqSu&e^aT)^DN{");
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/LLm4PrTest/ io_experiments/`-OCs/`-OCs");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/Q{ooqSu&e^aT)^DN{0Q{ooqSu&e^aT)^DN{/home/azureuser/LLm4PrTest/ io_experiments/`-OCs/`-OCs' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      try { 
        FileUtils.copyDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source '/tmp/!P)3ou({:y^D#zTUxY0!P)3ou({:y^D#zTUxY' exists but is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      File file1 = MockFile.createTempFile("mz1kfJV^fzt`xa5H", "!P)3ou({:^D#TUxY");
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "U56%wW7:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("C4]jt", "/tmp/org.apache.c|mmons.io.IOnasX0org.apachecommons.ioIOCase", file0);
      try { 
        FileUtils.contentEqualsIgnoreEOL(file1, file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "`-OCs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/V1I.Dc2zS}]");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/tmp/tmp/V1I.Dc2zS}]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!P)3ou({:^D#TUxY", "!P)3ou({:^D#TUxY");
      File file0 = MockFile.createTempFile("mz1kfJV^fzt`:\"xa5H", "!P)3ou({:^D#TUxY");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "U56%wW7:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "{u4q#WUHc.r<~^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("NgWj90ZuX[ 4", "/home/azureuser//tmp/azureuser", file0);
      try { 
        FileUtils.contentEquals(file1, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = MockFile.createTempFile("CLASS_FILE_SUFFIX", "CLASS_FILE_SUFFIX", file0);
      boolean boolean0 = FileUtils.contentEquals(file1, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can't compare directories, only files
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S8Lqr/D'");
      MockFile mockFile1 = new MockFile("");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NTFS ADS separator (':') in file name is forbidden.", "/home/azureuser/LLm4PrTest/ io_experiments");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:98)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:34)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:198)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:121)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:110)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1338)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:339)
             // sun.reflect.GeneratedMethodAccessor307.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = MockFile.createTempFile(">uR=k}", ">uR=k}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      long long0 = FileUtils.checksumCRC32(file0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Destination must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Source must not be null
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /tmp/`-OCs0`-OCs is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(19L);
      assertEquals("19 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(1125899906842624L);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate(1449L);
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0, false);
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.writeStringToFile(file0, "bFIym8#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockFile mockFile0 = new MockFile("._'b\"<[<ROOD+");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File '._'b\"<[<ROOD+' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/, /VB)NhxIq'*L`/, /VB)NhxIq'*L`' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.asm.Advice$WithCustomMapping", "net.bytebuddy.asm.Advice$WithCustomMapping");
      FileUtils.write((File) mockFile0, (CharSequence) "Destination '", false);
      assertEquals(13L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, " but was: ", (Collection<?>) linkedHashSet0, " but was: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayDeque0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) arrayDeque0, "e}1^8&.l&$Gd$]f<@S'", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", /VB)NhxIq'*L`", ", /VB)NhxIq'*L`");
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) mockFile0, (byte[]) null, (-925), (-2045222519));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.copyInputStreamToFile((InputStream) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/`-OCs/`-OCs does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R$bUD~or");
      NotFileFilter notFileFilter0 = (NotFileFilter)CanExecuteFileFilter.CANNOT_EXECUTE;
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(mockFile0, notFileFilter0, notFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: R$bUD~or
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "/tmp/orK.apachecommons.ioIOCase");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/orK.apachecommons.ioIOCase
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.cYmmons.i.file.DeletingPathVisitor");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source 'org.apache.cYmmons.i.file.DeletingPathVisitor' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "Gp'2YvW#a", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = MockFile.createTempFile("!P)3ou({:y^D#zTUxY", "!P)3ou({:y^D#zTUxY");
      Vector<TextStyle> vector0 = new Vector<TextStyle>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines(file0, "}bN+8i,1kAOhV\"", (Collection<?>) vector0, false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }bN+8i,1kAOhV\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apachecommons.ioIOCase", "org.apachecommons.ioIOCase");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "HqW&:3)", "org.apachecommons.ioIOCase");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apachecommons.ioIOCase
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksums can't be computed on directories
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = MockFile.createTempFile("`-OCs", "`-OCs");
      FileUtils.writeStringToFile(file0, "`-OCs", false);
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, (-2674), (-2674));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "##u<_,U yMZ");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "##u<_,U yMZ", "##u<_,U yMZ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ##u<_,U yMZ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.lineIterator(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/tmp' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      try { 
        FileUtils.writeLines(file0, (Collection<?>) priorityQueue0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File '/home/azureuser' exists but is a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals(1024L, FileUtils.ONE_KB);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "RISqH$Qt#AvY(.^$", (Collection<?>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      File file0 = MockFile.createTempFile("JVYja&`@]B&", "JVYja&`@]B&");
      Charset charset0 = Charset.defaultCharset();
      FileUtils.write(file0, (CharSequence) "/home/azureuser/=9<sT%r18rZYw)JSO0/home/azureuser/LLm4PrTest/ io_experiments/v&GAu/g*(]_SJ\"YL/home/azureuser/LLm4PrTest/ io_experiments/6!::Q6>h 3h\"h4*", charset0);
      assertEquals(151L, file0.length());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      File file0 = MockFile.createTempFile("CtwD", (String) null);
      FileUtils.write(file0, (CharSequence) "CtwD", (String) null, true);
      assertEquals(4L, file0.length());
  }
}
