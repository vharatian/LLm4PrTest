/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:02:49 GMT 2025
 */

package org.apache.commons.io.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Converter;
import com.google.common.base.Function;
import java.time.chrono.HijrahEra;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.function.IOConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOConsumer_ESTest extends IOConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOConsumer<Integer> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = IOConsumer.noop();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) iOConsumer1;
      objectArray0[1] = (Object) iOConsumer0;
      objectArray0[2] = (Object) iOConsumer1;
      objectArray0[3] = (Object) iOConsumer1;
      objectArray0[4] = (Object) iOConsumer0;
      objectArray0[5] = (Object) iOConsumer0;
      objectArray0[6] = (Object) iOConsumer1;
      objectArray0[7] = (Object) iOConsumer1;
      objectArray0[8] = (Object) iOConsumer0;
      Stream<Object> stream0 = Stream.of(objectArray0);
      Function<Object, Stream<Object>> function0 = (Function<Object, Stream<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, IOCase> function1 = (Function<Object, IOCase>) mock(Function.class, new ViolatedAssumptionAnswer());
      Converter<Object, Stream<Object>> converter0 = Converter.from((Function<? super Object, ? extends Stream<Object>>) function0, (Function<? super Stream<Object>, ?>) function1);
      Converter<Stream<Object>, Stream<Object>> converter1 = Converter.identity();
      Converter<Object, Stream<Object>> converter2 = converter0.andThen(converter1);
      Stream<Object> stream1 = stream0.flatMap((java.util.function.Function<? super Object, ? extends Stream<?>>) converter2);
      // Undeclared exception!
      try { 
        IOConsumer.forAll(iOConsumer1, stream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = iOConsumer0.andThen(iOConsumer0);
      assertNotNull(iOConsumer1);
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      Stream<Object> stream0 = Stream.empty();
      assertNotNull(stream0);
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(iOConsumer0).when(supplier0).get();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object object0 = stream0.collect(supplier0, (BiConsumer<Object, ? super Object>) biConsumer0, biConsumer0);
      assertNotNull(object0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      
      IOConsumer<HijrahEra> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      
      IOConsumer<HijrahEra> iOConsumer3 = iOConsumer2.andThen(iOConsumer1);
      assertNotNull(iOConsumer3);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      Consumer<HijrahEra> consumer0 = iOConsumer3.asConsumer();
      assertNotNull(consumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Stream<HijrahEra> stream1 = Stream.of(hijrahEra0);
      assertNotNull(stream1);
      
      Stream<HijrahEra> stream2 = stream1.sorted();
      assertNotNull(stream2);
      assertFalse(stream2.equals((Object)stream1));
      
      IOConsumer<Object> iOConsumer4 = iOConsumer1.andThen(iOConsumer0);
      assertNotNull(iOConsumer4);
      assertNotSame(iOConsumer1, iOConsumer4);
      assertNotSame(iOConsumer4, iOConsumer1);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer4.equals((Object)iOConsumer0));
      assertFalse(iOConsumer4.equals((Object)iOConsumer1));
      
      Stream<HijrahEra> stream3 = stream2.distinct();
      assertNotNull(stream3);
      assertFalse(stream1.equals((Object)stream2));
      assertFalse(stream2.equals((Object)stream1));
      assertFalse(stream3.equals((Object)stream2));
      assertFalse(stream3.equals((Object)stream1));
      
      Function<Object, HijrahEra> function0 = (Function<Object, HijrahEra>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Converter<HijrahEra, HijrahEra> converter0 = Converter.from((Function<? super HijrahEra, ? extends HijrahEra>) function0, (Function<? super HijrahEra, ? extends HijrahEra>) function0);
      assertNotNull(converter0);
      
      Converter<HijrahEra, HijrahEra> converter1 = Converter.identity();
      assertNotNull(converter1);
      assertFalse(converter1.equals((Object)converter0));
      
      Converter<HijrahEra, HijrahEra> converter2 = converter0.andThen(converter1);
      assertNotNull(converter2);
      assertFalse(converter1.equals((Object)converter0));
      assertFalse(converter2.equals((Object)converter0));
      assertFalse(converter2.equals((Object)converter1));
      assertFalse(converter0.equals((Object)converter1));
      
      Stream<HijrahEra> stream4 = stream3.map((java.util.function.Function<? super HijrahEra, ? extends HijrahEra>) converter2);
      assertNotNull(stream4);
      assertFalse(converter1.equals((Object)converter2));
      assertFalse(converter1.equals((Object)converter0));
      assertFalse(converter2.equals((Object)converter0));
      assertFalse(converter2.equals((Object)converter1));
      assertFalse(stream4.equals((Object)stream1));
      assertFalse(stream4.equals((Object)stream2));
      assertFalse(stream4.equals((Object)stream3));
      assertFalse(stream1.equals((Object)stream2));
      assertFalse(stream1.equals((Object)stream3));
      assertFalse(stream2.equals((Object)stream3));
      assertFalse(stream2.equals((Object)stream1));
      assertFalse(stream3.equals((Object)stream2));
      assertFalse(stream3.equals((Object)stream1));
      assertFalse(converter0.equals((Object)converter2));
      assertFalse(converter0.equals((Object)converter1));
      
      // Undeclared exception!
      try { 
        IOConsumer.forEach(stream4, iOConsumer3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<Stream<Integer>> arrayDeque0 = new ArrayDeque<Stream<Integer>>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      IOConsumer<Stream<Integer>> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Integer> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer<Integer> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      assertSame(iOConsumer2, iOConsumer1);
      
      Stream<Integer> stream0 = Stream.of((Integer) null);
      assertNotNull(stream0);
      
      stream0.close();
      // Undeclared exception!
      try { 
        IOConsumer.forAll(iOConsumer1, stream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      Supplier<HijrahEra> supplier0 = (Supplier<HijrahEra>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      Stream<HijrahEra> stream0 = Stream.generate(supplier0);
      assertNotNull(stream0);
      
      Stream<HijrahEra> stream1 = stream0.skip(0L);
      assertNotNull(stream1);
      assertSame(stream0, stream1);
      assertSame(stream1, stream0);
      
      IOConsumer<HijrahEra> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer<HijrahEra> iOConsumer2 = iOConsumer1.andThen(iOConsumer0);
      assertNotNull(iOConsumer2);
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      
      // Undeclared exception!
      IOConsumer.forEach(stream1, iOConsumer2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOConsumer<Integer> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      // Undeclared exception!
      try { 
        iOConsumer0.andThen((IOConsumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // after
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object1));
      
      objectArray0[7] = object7;
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = iOConsumer0.andThen(iOConsumer0);
      assertNotNull(iOConsumer1);
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      IOConsumer<Object> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      assertSame(iOConsumer2, iOConsumer0);
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      
      IOConsumer<Object> iOConsumer3 = iOConsumer2.andThen(iOConsumer1);
      assertNotNull(iOConsumer3);
      assertSame(iOConsumer0, iOConsumer2);
      assertNotSame(iOConsumer1, iOConsumer3);
      assertSame(iOConsumer2, iOConsumer0);
      assertNotSame(iOConsumer3, iOConsumer1);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer0));
      
      IOConsumer<Object> iOConsumer4 = iOConsumer1.andThen(iOConsumer3);
      assertNotNull(iOConsumer4);
      assertSame(iOConsumer0, iOConsumer2);
      assertNotSame(iOConsumer1, iOConsumer4);
      assertNotSame(iOConsumer1, iOConsumer3);
      assertSame(iOConsumer2, iOConsumer0);
      assertNotSame(iOConsumer3, iOConsumer1);
      assertNotSame(iOConsumer3, iOConsumer4);
      assertNotSame(iOConsumer4, iOConsumer3);
      assertNotSame(iOConsumer4, iOConsumer1);
      assertFalse(iOConsumer0.equals((Object)iOConsumer3));
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer1.equals((Object)iOConsumer3));
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer0));
      assertFalse(iOConsumer4.equals((Object)iOConsumer3));
      assertFalse(iOConsumer4.equals((Object)iOConsumer1));
      assertFalse(iOConsumer4.equals((Object)iOConsumer0));
      assertFalse(iOConsumer4.equals((Object)iOConsumer2));
      
      IOConsumer.forEach(objectArray0, iOConsumer1);
      assertEquals(8, objectArray0.length);
      assertSame(iOConsumer0, iOConsumer2);
      assertNotSame(iOConsumer1, iOConsumer4);
      assertNotSame(iOConsumer1, iOConsumer3);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
      assertFalse(iOConsumer0.equals((Object)iOConsumer3));
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer1.equals((Object)iOConsumer4));
      assertFalse(iOConsumer1.equals((Object)iOConsumer3));
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      
      Stream<Object> stream0 = Stream.of(objectArray0);
      assertEquals(8, objectArray0.length);
      assertNotNull(stream0);
      
      IOConsumer.forAll(iOConsumer3, stream0);
      assertEquals(8, objectArray0.length);
      assertSame(iOConsumer0, iOConsumer2);
      assertNotSame(iOConsumer1, iOConsumer4);
      assertNotSame(iOConsumer1, iOConsumer3);
      assertSame(iOConsumer2, iOConsumer0);
      assertNotSame(iOConsumer3, iOConsumer1);
      assertNotSame(iOConsumer3, iOConsumer4);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
      assertFalse(iOConsumer0.equals((Object)iOConsumer3));
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer1.equals((Object)iOConsumer4));
      assertFalse(iOConsumer1.equals((Object)iOConsumer3));
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer2.equals((Object)iOConsumer4));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer4));
      assertFalse(iOConsumer3.equals((Object)iOConsumer0));
      
      IOConsumer<Object> iOConsumer5 = IOConsumer.noop();
      assertNotNull(iOConsumer5);
      assertSame(iOConsumer5, iOConsumer0);
      assertSame(iOConsumer5, iOConsumer2);
      assertFalse(iOConsumer5.equals((Object)iOConsumer1));
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      assertFalse(iOConsumer5.equals((Object)iOConsumer3));
      
      IOConsumer<Stream<Object>> iOConsumer6 = IOConsumer.noop();
      assertNotNull(iOConsumer6);
      
      IOConsumer<Stream<Object>> iOConsumer7 = iOConsumer6.andThen(iOConsumer0);
      assertNotNull(iOConsumer7);
      assertSame(iOConsumer0, iOConsumer5);
      assertSame(iOConsumer0, iOConsumer2);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
      assertFalse(iOConsumer0.equals((Object)iOConsumer3));
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer7.equals((Object)iOConsumer6));
      
      IOConsumer<Stream<Object>> iOConsumer8 = iOConsumer7.andThen(iOConsumer2);
      assertNotNull(iOConsumer8);
      assertSame(iOConsumer0, iOConsumer5);
      assertSame(iOConsumer0, iOConsumer2);
      assertSame(iOConsumer2, iOConsumer0);
      assertSame(iOConsumer2, iOConsumer5);
      assertNotSame(iOConsumer7, iOConsumer8);
      assertNotSame(iOConsumer8, iOConsumer7);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
      assertFalse(iOConsumer0.equals((Object)iOConsumer3));
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer2.equals((Object)iOConsumer4));
      assertFalse(iOConsumer6.equals((Object)iOConsumer7));
      assertFalse(iOConsumer7.equals((Object)iOConsumer6));
      assertFalse(iOConsumer8.equals((Object)iOConsumer7));
      assertFalse(iOConsumer8.equals((Object)iOConsumer6));
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>(40, 40);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(40));
      assertNotNull(hashSet0);
      
      IOConsumer<Integer> iOConsumer9 = IOConsumer.noop();
      assertNotNull(iOConsumer9);
      
      // Undeclared exception!
      try { 
        iOConsumer9.andThen((IOConsumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // after
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = iOConsumer0.andThen(iOConsumer0);
      assertNotNull(iOConsumer1);
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      Consumer<Object> consumer0 = iOConsumer1.asConsumer();
      assertNotNull(consumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iOConsumer1;
      IOConsumer.forAll(iOConsumer1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      IOConsumer.forAll(iOConsumer0, (Iterable<Object>) null);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Integer integer0 = Integer.getInteger("6JZ:&s`~ m");
      assertNull(integer0);
      
      Integer integer1 = new Integer((-993));
      assertNotNull(integer1);
      assertEquals((-993), (int)integer1);
      
      IOConsumer<Integer> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      
      IOConsumer<Integer> iOConsumer3 = IOConsumer.noop();
      assertNotNull(iOConsumer3);
      assertSame(iOConsumer3, iOConsumer2);
      
      IOConsumer<Integer> iOConsumer4 = iOConsumer3.andThen(iOConsumer1);
      assertNotNull(iOConsumer4);
      assertSame(iOConsumer3, iOConsumer2);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer4.equals((Object)iOConsumer3));
      assertFalse(iOConsumer4.equals((Object)iOConsumer2));
      
      IOConsumer.forEach((Integer[]) null, iOConsumer3);
      assertSame(iOConsumer3, iOConsumer2);
      assertFalse(iOConsumer3.equals((Object)iOConsumer4));
      
      IOConsumer<Integer> iOConsumer5 = IOConsumer.noop();
      assertNotNull(iOConsumer5);
      assertSame(iOConsumer5, iOConsumer2);
      assertSame(iOConsumer5, iOConsumer3);
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      
      Consumer<Integer> consumer1 = iOConsumer5.asConsumer();
      assertNotNull(consumer1);
      assertSame(iOConsumer5, iOConsumer2);
      assertSame(iOConsumer5, iOConsumer3);
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      
      UnaryOperator<HijrahEra> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Stream<HijrahEra> stream0 = Stream.iterate(hijrahEra0, unaryOperator0);
      assertNotNull(stream0);
      
      Stream<Stream<HijrahEra>> stream1 = Stream.of(stream0);
      assertNotNull(stream1);
      
      stream1.close();
      stream1.close();
      IOConsumer<Stream<HijrahEra>> iOConsumer6 = IOConsumer.noop();
      assertNotNull(iOConsumer6);
      
      // Undeclared exception!
      try { 
        IOConsumer.forEach(stream1, iOConsumer6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Integer> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      HijrahEra[] hijrahEraArray0 = new HijrahEra[5];
      HijrahEra hijrahEra0 = HijrahEra.AH;
      hijrahEraArray0[0] = hijrahEra0;
      HijrahEra hijrahEra1 = HijrahEra.AH;
      hijrahEraArray0[1] = hijrahEra1;
      HijrahEra hijrahEra2 = HijrahEra.AH;
      hijrahEraArray0[2] = hijrahEra2;
      HijrahEra hijrahEra3 = HijrahEra.AH;
      hijrahEraArray0[3] = hijrahEra3;
      HijrahEra hijrahEra4 = HijrahEra.AH;
      hijrahEraArray0[4] = hijrahEra4;
      IOConsumer<HijrahEra> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      
      IOConsumer<HijrahEra> iOConsumer3 = iOConsumer2.andThen(iOConsumer0);
      assertNotNull(iOConsumer3);
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      IOConsumer.forEach(hijrahEraArray0, iOConsumer3);
      assertEquals(5, hijrahEraArray0.length);
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Stream<Integer> stream0 = Stream.of(integer0);
      assertNotNull(stream0);
      
      IOConsumer.forAll(iOConsumer1, stream0);
      IOConsumer.forEach(objectArray0, iOConsumer0);
      assertEquals(7, objectArray0.length);
      
      IOConsumer.forAll(iOConsumer0, (Object[]) hijrahEraArray0);
      assertEquals(5, hijrahEraArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOConsumer<Stream<Integer>> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Integer> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer.forAll(iOConsumer1, (Stream<Integer>) null);
      Consumer<Integer> consumer0 = iOConsumer1.asConsumer();
      assertNotNull(consumer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOConsumer<Integer> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer.forEach((Stream<Integer>) null, iOConsumer0);
      IOConsumer<Object> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer<Integer> iOConsumer2 = iOConsumer0.andThen(iOConsumer1);
      assertNotNull(iOConsumer2);
      assertFalse(iOConsumer2.equals((Object)iOConsumer0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      Consumer<Object> consumer0 = iOConsumer0.asConsumer();
      assertNotNull(consumer0);
      
      IOConsumer<HijrahEra> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer<HijrahEra> iOConsumer2 = iOConsumer1.andThen(iOConsumer0);
      assertNotNull(iOConsumer2);
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      
      IOConsumer<HijrahEra> iOConsumer3 = iOConsumer2.andThen(iOConsumer1);
      assertNotNull(iOConsumer3);
      assertNotSame(iOConsumer2, iOConsumer3);
      assertNotSame(iOConsumer3, iOConsumer2);
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOConsumer0;
      objectArray0[1] = (Object) iOConsumer3;
      Stream<Object> stream0 = Stream.of(objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(stream0);
      
      IOConsumer.forEach(stream0, iOConsumer0);
      assertEquals(2, objectArray0.length);
      
      Consumer<Object> consumer1 = iOConsumer0.asConsumer();
      assertNotNull(consumer1);
      assertNotSame(consumer1, consumer0);
      assertFalse(consumer1.equals((Object)consumer0));
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) iOConsumer3;
      objectArray1[1] = (Object) iOConsumer3;
      objectArray1[2] = (Object) consumer1;
      objectArray1[3] = (Object) iOConsumer3;
      objectArray1[4] = (Object) iOConsumer2;
      objectArray1[5] = (Object) consumer0;
      objectArray1[6] = (Object) consumer1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[7] = object0;
      IOConsumer.forAll(iOConsumer0, objectArray1);
      assertEquals(8, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      IOConsumer<Object> iOConsumer4 = IOConsumer.noop();
      assertNotNull(iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      
      IOConsumer<Object> iOConsumer5 = iOConsumer0.andThen(iOConsumer4);
      assertNotNull(iOConsumer5);
      assertSame(iOConsumer0, iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      assertFalse(iOConsumer5.equals((Object)iOConsumer0));
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      
      IOConsumer.forEach(objectArray0, iOConsumer4);
      assertEquals(2, objectArray0.length);
      assertNotSame(objectArray0, objectArray1);
      assertSame(iOConsumer4, iOConsumer0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(iOConsumer4.equals((Object)iOConsumer5));
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-736));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-736), (int)integer3);
      
      integerArray0[3] = integer3;
      IOConsumer<Integer> iOConsumer6 = IOConsumer.noop();
      assertNotNull(iOConsumer6);
      
      IOConsumer<Integer> iOConsumer7 = iOConsumer6.andThen(iOConsumer5);
      assertNotNull(iOConsumer7);
      assertSame(iOConsumer0, iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer5));
      assertFalse(iOConsumer7.equals((Object)iOConsumer6));
      assertFalse(iOConsumer4.equals((Object)iOConsumer5));
      assertFalse(iOConsumer5.equals((Object)iOConsumer0));
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      
      IOConsumer.forEach(integerArray0, iOConsumer7);
      assertEquals(4, integerArray0.length);
      assertSame(iOConsumer0, iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer5));
      assertFalse(iOConsumer6.equals((Object)iOConsumer7));
      assertFalse(iOConsumer7.equals((Object)iOConsumer6));
      assertFalse(iOConsumer4.equals((Object)iOConsumer5));
      assertFalse(iOConsumer5.equals((Object)iOConsumer0));
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = iOConsumer0.andThen(iOConsumer0);
      assertNotNull(iOConsumer1);
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      Consumer<Object> consumer0 = iOConsumer1.asConsumer();
      assertNotNull(consumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iOConsumer1;
      IOConsumer.forAll(iOConsumer1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      
      IOConsumer.forAll(iOConsumer0, (Iterable<Object>) null);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      HijrahEra hijrahEra1 = HijrahEra.AH;
      EnumSet<HijrahEra> enumSet0 = EnumSet.of(hijrahEra0, hijrahEra0, hijrahEra1, hijrahEra1);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(hijrahEra1));
      assertNotNull(enumSet0);
      assertSame(hijrahEra0, hijrahEra1);
      assertSame(hijrahEra1, hijrahEra0);
      
      EnumSet<HijrahEra> enumSet1 = enumSet0.clone();
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(hijrahEra1));
      assertTrue(enumSet1.contains(hijrahEra1));
      assertNotNull(enumSet1);
      assertSame(hijrahEra0, hijrahEra1);
      assertSame(hijrahEra1, hijrahEra0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      IOConsumer<HijrahEra> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      
      IOConsumer<HijrahEra> iOConsumer3 = iOConsumer2.andThen(iOConsumer1);
      assertNotNull(iOConsumer3);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      
      IOConsumer.forEach((Iterable<HijrahEra>) enumSet1, iOConsumer3);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.contains(hijrahEra1));
      assertTrue(enumSet1.contains(hijrahEra1));
      assertSame(hijrahEra0, hijrahEra1);
      assertSame(hijrahEra1, hijrahEra0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer1));
      assertFalse(iOConsumer1.equals((Object)iOConsumer0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(iOConsumer2.equals((Object)iOConsumer3));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayDeque<Stream<Integer>> arrayDeque0 = new ArrayDeque<Stream<Integer>>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      IOConsumer<Stream<Integer>> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      IOConsumer.forEach((Iterable<Stream<Integer>>) arrayDeque0, iOConsumer0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOConsumer<Integer> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      IOConsumer.forAll(iOConsumer0, (Iterable<Integer>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      IOConsumer<Stream<Integer>> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      Consumer<Object> consumer0 = iOConsumer0.asConsumer();
      assertNotNull(consumer0);
      
      IOConsumer<Integer> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(2927, 2927);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(2927));
      assertNotNull(linkedHashSet0);
      
      IOConsumer.forAll(iOConsumer1, (Iterable<Integer>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(2927));
      
      IOConsumer<Object> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      assertSame(iOConsumer2, iOConsumer0);
      
      HashSet<HijrahEra> hashSet0 = new HashSet<HijrahEra>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      IOConsumer<HijrahEra> iOConsumer3 = IOConsumer.noop();
      assertNotNull(iOConsumer3);
      
      IOConsumer.forEach((Iterable<HijrahEra>) hashSet0, iOConsumer3);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      IOConsumer<Object> iOConsumer4 = iOConsumer0.andThen(iOConsumer2);
      assertNotNull(iOConsumer4);
      assertSame(iOConsumer0, iOConsumer2);
      assertSame(iOConsumer2, iOConsumer0);
      assertFalse(iOConsumer4.equals((Object)iOConsumer2));
      assertFalse(iOConsumer4.equals((Object)iOConsumer0));
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(2927));
      assertNotNull(arrayDeque0);
      
      IOConsumer.forAll(iOConsumer4, (Iterable<Object>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(2927));
      assertSame(iOConsumer0, iOConsumer2);
      assertSame(iOConsumer2, iOConsumer0);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
      assertFalse(iOConsumer2.equals((Object)iOConsumer4));
      assertFalse(iOConsumer4.equals((Object)iOConsumer2));
      assertFalse(iOConsumer4.equals((Object)iOConsumer0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iOConsumer4;
      objectArray0[1] = (Object) iOConsumer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) consumer0;
      objectArray0[4] = (Object) iOConsumer2;
      IOConsumer.forEach(objectArray0, iOConsumer0);
      assertEquals(5, objectArray0.length);
      assertSame(iOConsumer0, iOConsumer2);
      assertFalse(iOConsumer0.equals((Object)iOConsumer4));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Integer> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(133);
      assertNotNull(integer0);
      assertEquals(133, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 127;
      Integer integer1 = new Integer(127);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(127, (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(8, integerArray0.length);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(133, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      assertNotNull(integer4);
      assertFalse(int1 == int0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertNotNull(integer5);
      assertFalse(int0 == int1);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(127, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(127);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(127, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(Integer.MIN_VALUE, (int)integer7);
      
      integerArray0[7] = integer7;
      IOConsumer<Integer> iOConsumer2 = IOConsumer.noop();
      assertNotNull(iOConsumer2);
      assertSame(iOConsumer2, iOConsumer1);
      
      IOConsumer.forEach(integerArray0, iOConsumer2);
      assertEquals(8, integerArray0.length);
      assertSame(iOConsumer2, iOConsumer1);
      
      IOConsumer<Integer> iOConsumer3 = iOConsumer1.andThen(iOConsumer0);
      assertNotNull(iOConsumer3);
      assertSame(iOConsumer1, iOConsumer2);
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer8 = new Integer((-706));
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertEquals((-706), (int)integer8);
      
      integerArray1[0] = integer8;
      IOConsumer.forAll(iOConsumer3, integerArray1);
      assertEquals(1, integerArray1.length);
      assertSame(iOConsumer1, iOConsumer2);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(iOConsumer1.equals((Object)iOConsumer3));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      IOConsumer.forAll(iOConsumer3, integerArray1);
      assertEquals(1, integerArray1.length);
      assertSame(iOConsumer1, iOConsumer2);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(iOConsumer1.equals((Object)iOConsumer3));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      IOConsumer<Object> iOConsumer4 = IOConsumer.noop();
      assertNotNull(iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      
      IOConsumer<Object> iOConsumer5 = iOConsumer0.andThen(iOConsumer4);
      assertNotNull(iOConsumer5);
      assertSame(iOConsumer0, iOConsumer4);
      assertSame(iOConsumer4, iOConsumer0);
      assertFalse(iOConsumer5.equals((Object)iOConsumer4));
      assertFalse(iOConsumer5.equals((Object)iOConsumer0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer.forAll(iOConsumer0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOConsumer.forEach((HijrahEra[]) null, (IOConsumer<HijrahEra>) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) iOConsumer0;
      objectArray0[1] = (Object) iOConsumer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) iOConsumer0;
      objectArray0[4] = (Object) iOConsumer0;
      objectArray0[5] = (Object) iOConsumer0;
      objectArray0[6] = (Object) iOConsumer0;
      objectArray0[7] = (Object) iOConsumer0;
      objectArray0[8] = (Object) iOConsumer0;
      IOConsumer.forEach(objectArray0, iOConsumer0);
      assertEquals(9, objectArray0.length);
      
      IOConsumer<Object> iOConsumer1 = IOConsumer.noop();
      assertNotNull(iOConsumer1);
      assertSame(iOConsumer1, iOConsumer0);
      
      IOConsumer<Object> iOConsumer2 = iOConsumer1.andThen(iOConsumer0);
      assertNotNull(iOConsumer2);
      assertSame(iOConsumer0, iOConsumer1);
      assertSame(iOConsumer1, iOConsumer0);
      assertFalse(iOConsumer2.equals((Object)iOConsumer0));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      
      IOConsumer<Object> iOConsumer3 = iOConsumer0.andThen(iOConsumer2);
      assertNotNull(iOConsumer3);
      assertSame(iOConsumer0, iOConsumer1);
      assertSame(iOConsumer1, iOConsumer0);
      assertNotSame(iOConsumer2, iOConsumer3);
      assertNotSame(iOConsumer3, iOConsumer2);
      assertFalse(iOConsumer0.equals((Object)iOConsumer2));
      assertFalse(iOConsumer1.equals((Object)iOConsumer2));
      assertFalse(iOConsumer2.equals((Object)iOConsumer0));
      assertFalse(iOConsumer2.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer0));
      assertFalse(iOConsumer3.equals((Object)iOConsumer1));
      assertFalse(iOConsumer3.equals((Object)iOConsumer2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOConsumer<Object> iOConsumer0 = org.apache.commons.io.function.IOConsumer.noop();
      assertNotNull(iOConsumer0);
      
      IOConsumer<Object> iOConsumer1 = org.apache.commons.io.function.IOConsumer.noop();
      assertNotNull(iOConsumer1);
      assertSame(iOConsumer1, iOConsumer0);
  }
}
