/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:55:03 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("/NTFS ADS separator (':') in file name is forbidden.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("~&N0&q*V");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("~GD>yS]#?Z>");
      assertNotNull(string0);
      assertEquals("~GD>yS]#?Z>", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("#PtR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(".", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("/8#b{b1'd9+-*X;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("BkW/F");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("J^U9N]a.b3eSM");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = FilenameUtils.getName("~");
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("d.a`^rcNRQY!:j% ");
      assertEquals("a`^rcNRQY!:j% ", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized((String) null, "net.bytebuddy.build.Plugin$Compound");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("}oz)B47gA<QGHi#nS", "7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "5J*]z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalized(".:4", ".:4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = FilenameUtils.concat("//6XU;dD|7oN", "Kdj{IeY");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("{vM M", "*Pc>n,2xI0OXXp", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("5J", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("?", "?", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch(".", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, "", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals("@#vP:c*/b>$UxcB", "K.", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "HZu_inI%M", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals(";IU>lwF(#f'0AO", (String) null, false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, true, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      // Undeclared exception!
      try { 
        FilenameUtils.equals("-:", "-:", true, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = FilenameUtils.getExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = FilenameUtils.getName("p5qJsG/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("/.");
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("'olH)/es=^");
      assertEquals("'olH)/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.getPath("/~G6U;CdudD|>");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("Invalid IOCase name: ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("M@=UkuM:gSm]]AWc`z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("net.bytebuddy.build.Plugin$Compound");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("//@~XU;dD|_oY>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("f:L=}Zod/vf,,|w`");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(":");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix(">`*X");
      assertEquals(">`*X", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = FilenameUtils.concat("p5qJsG/", "p5qJsG/");
      assertNotNull(string0);
      assertEquals("p5qJsG/p5qJsG/", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("fxc_$/", true);
      assertEquals("fxc_$", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = FilenameUtils.normalize("p5qJsG/");
      assertEquals("p5qJsG/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = FilenameUtils.normalize("vB3COH5/m~J02ZMf");
      assertEquals("vB3COH5/m~J02ZMf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("\\YY&+T0E~|=X", "\\YY&+T0E~|=X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("Failed to create custom temp directory", "i**cKB^wG", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("PM+OKr)e7#8j\by", "*QVqEF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("\"*I6*", "\"*I6*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("NA*?Yv$+JKlP#fV|$]", "NA*?Yv$+JKlP#fV|$]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch(":@|\u0000SD@.w{", "*@", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("h=N_4^k$Te~", "h=N_4^k$Te~", (IOCase) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("UvSwC");
      boolean boolean0 = FilenameUtils.isExtension("UvSwC", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("temp.dir", (Collection<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("//@~XU;dD|_oY>", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = FilenameUtils.isExtension("7u&3", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("org.junitpioneTr.intage.Timeout[xtensin", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("Invalid IOCase name: ", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("");
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[16];
      boolean boolean0 = FilenameUtils.isExtension(stringArray0[1], stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.asm.Advice$OnDefaultValue", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("hF7Y", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("nz{", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("org.junitpioneTr.intage.Timeout[xtensin");
      assertEquals("org.junitpioneTr.intage", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension(".", ".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("p5qJsG/");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("{p,](Z'kP;rJ1!");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("QUv{sxed");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("-:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = FilenameUtils.getPath("Kwo'\"/");
      assertEquals("Kwo'\"/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = FilenameUtils.getPath("-:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("-:");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("bi)fabJ{W");
      assertEquals("bi)fabJ{W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\Y4Y&T0/~|=X");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/:");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = FilenameUtils.concat("R:/6=(c3iw3_%b", "dLsb]Q%\"h");
      assertNotNull(string0);
      assertEquals("R:/6=(c3iw3_%b/dLsb]Q%\"h", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("_:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("m:");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~/ {;T@^");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~GD>yS]#?Z>");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~");
      assertNotNull(string0);
      assertEquals("~/", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = FilenameUtils.concat(":", ":");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertEquals("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("-./P2i3):F@8j");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("Duplicate advice for ");
      assertEquals("Duplicate advice for ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("\\XY&T0E~|=X");
      assertEquals("/XY&T0E~|=X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Invalid IOCase name: ", "O@ffo'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("/)4xIa_ke=Yg9#E2+", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "M@%k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem(".", ".");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.concat("./PiH:F@8", "./PiH:F@8");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = FilenameUtils.concat("-./P2i3):F@8j", "-./P2i3):F@8j");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = FilenameUtils.concat("/", "/");
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.normalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("&rn~YYo1:", false);
      assertNotNull(string0);
      assertEquals("&rn~YYo1:", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.normalize("Failed to delete temp dircctorys", true);
      assertEquals("Failed to delete temp dircctorys", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalizedOnSystem(".:4", ".:4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("/)!@ptRHg\"");
      assertNotNull(string0);
      assertEquals("/)!@ptRHg\"", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals(".", ".");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("//@~XU;dD|_oY>", "//@~XU;dD|_oY>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = FilenameUtils.getPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("");
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
