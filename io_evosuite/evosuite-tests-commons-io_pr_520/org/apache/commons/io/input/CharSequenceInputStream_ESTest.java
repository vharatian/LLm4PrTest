/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 17:34:52 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.input.CharSequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceInputStream_ESTest extends CharSequenceInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      long long0 = charSequenceInputStream0.skip((-9223372036854775808L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(77);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (Charset) null, 77);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 1, 2161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=1, offset=1, length=2161
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(87855567);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(87855567, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(87855567);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      // Undeclared exception!
      charSequenceInputStream0.skip(87855567);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2222);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.skip(2222);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(77);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0, 77);
      charSequenceInputStream0.read();
      charset0.encode(charBuffer0);
      charSequenceInputStream0.reset();
      // Undeclared exception!
      try { 
        charSequenceInputStream0.reset();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(140);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charset0.encode(charBuffer0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charBuffer0.append('V');
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, charset0, 3972);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("?", charset0, (-2050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size -2,050 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(140);
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, "qi", 140);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // qi
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(140);
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, "", 140);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null, 2606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream("", (String) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size 1 must be at least 6.0 for a CharsetEncoder UTF-8.
         //
         verifyException("org.apache.commons.io.input.ReaderInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, "org.apache.commons.io.input.CharSequenceInputStream");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.input.CharSequenceInputStream
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, "Ze8S;b");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Ze8S;b
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(100);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[7];
      int int0 = charSequenceInputStream0.read(byteArray0, 4, (int) (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[19];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[7];
      charSequenceInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, 2028179000, 2028179000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[7];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(1, int0);
      
      int int1 = charSequenceInputStream0.read(byteArray0, (-1073741823), 445);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[19];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      byte[] byteArray0 = new byte[7];
      int int0 = charSequenceInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.mark(21);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(179);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (String) null);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      long long0 = charSequenceInputStream0.skip(2L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("S", charset0);
      charSequenceInputStream0.read();
      charSequenceInputStream0.reset();
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(100);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.reset();
      charSequenceInputStream0.skip(100);
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[1];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[0];
      int int0 = charSequenceInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read(byteArray0, (-3180), (-3180));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-3180, length=-3180
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("", charset0);
      int int0 = charSequenceInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = new CharSequenceInputStream.Builder();
      CharSequenceInputStream.Builder charSequenceInputStream_Builder1 = charSequenceInputStream_Builder0.setCharset((Charset) null);
      assertSame(charSequenceInputStream_Builder0, charSequenceInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      // Undeclared exception!
      try { 
        charSequenceInputStream_Builder0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = new CharSequenceInputStream.Builder();
      CharSequenceInputStream.Builder charSequenceInputStream_Builder1 = charSequenceInputStream_Builder0.setCharsetEncoder((CharsetEncoder) null);
      assertSame(charSequenceInputStream_Builder0, charSequenceInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("?", charset0);
      CharsetEncoder charsetEncoder0 = charSequenceInputStream0.getCharsetEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharSequenceInputStream charSequenceInputStream0 = null;
      try {
        charSequenceInputStream0 = new CharSequenceInputStream((CharSequence) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("<", charset0);
      // Undeclared exception!
      try { 
        charSequenceInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharSequenceInputStream.Builder charSequenceInputStream_Builder0 = CharSequenceInputStream.builder();
      CharsetEncoder charsetEncoder0 = charSequenceInputStream_Builder0.getCharsetEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(96);
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, (String) null, 96);
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(100);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.reset();
      charSequenceInputStream0.reset();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[33];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream(charBuffer0, charset0);
      charSequenceInputStream0.close();
      assertTrue(charSequenceInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharSequenceInputStream charSequenceInputStream0 = new CharSequenceInputStream("=h", charset0);
      boolean boolean0 = charSequenceInputStream0.markSupported();
      assertTrue(boolean0);
  }
}
