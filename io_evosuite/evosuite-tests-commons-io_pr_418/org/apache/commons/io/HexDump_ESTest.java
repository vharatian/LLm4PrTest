/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 18:38:34 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.commons.io.HexDump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HexDump_ESTest extends HexDump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      File file0 = MockFile.createTempFile("k|\"nox2<M", "GBDirj =8 ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      HexDump.dump(byteArray0, (-1467L), (OutputStream) objectOutputStream0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte) (-82);
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)116);
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      StringWriter stringWriter0 = new StringWriter(0);
      HexDump.dump(byteArray0, 0L, (Appendable) stringWriter0, 0, 0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HexDump.dump(byteArray0, (long) 2, (OutputStream) byteArrayOutputStream0, 2);
      assertEquals(72, byteArrayOutputStream0.size());
      assertEquals("00000004 00 00 00 00 00 00 00 00 00 00 00 00 00 00       ..............\n", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) 9, (Appendable) charBuffer1, 9, 9);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) 1, (Appendable) charBuffer0, 1, 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) (-1063), (Appendable) null, (-1063), (-1063));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        HexDump.dump(byteArray0, (long) 14, (Appendable) pipedWriter0, 14, 14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) 5, (OutputStream) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // stream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        HexDump.dump((byte[]) null, (long) 667, (OutputStream) byteArrayOutputStream0, 667);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)55;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((byte)52);
      HexDump.dump(byteArray0, (long) 0, (Appendable) charArrayWriter0, (int) (byte)0, 7);
      assertEquals(65, charArrayWriter0.size());
      assertEquals("00000000 37 00 00 00 00 00 00                            7......\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      MockFile mockFile0 = new MockFile((File) null, "isRegularFile");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      HexDump.dump(byteArray0, 0L, (Appendable) mockFileWriter0, 23, 23);
      assertEquals(56, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      StringWriter stringWriter0 = new StringWriter(19);
      try { 
        HexDump.dump(byteArray0, 1474L, (Appendable) stringWriter0, (-2556), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: -2556 into array of length 2
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Hn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      try { 
        HexDump.dump(byteArray0, (long) (byte)0, (Appendable) mockPrintWriter0, (int) (byte)7, 1658);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 7 into array of length 5
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      byteArray0[12] = (byte)127;
      HexDump.dump(byteArray0, (long) (byte)0, (Appendable) charArrayWriter0, (int) (byte)0, (int) (byte)15);
      assertEquals(73, charArrayWriter0.size());
      assertEquals("00000000 00 00 00 00 00 00 00 00 00 00 00 00 7F 00 00    ...............\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)123);
      HexDump.dump(byteArray0, (Appendable) charBuffer0);
      assertEquals(58, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        HexDump.dump(byteArray0, (Appendable) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        HexDump.dump(byteArray0, (long) (byte)0, (Appendable) charArrayWriter0, (int) (byte)0, (int) (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Range [0, 0 + 31) out of bounds for length 20
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      try { 
        HexDump.dump(byteArray0, (long) (byte)0, (Appendable) charArrayWriter0, (int) (byte)0, (int) (byte) (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Range [0, 0 + -2) out of bounds for length 20
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HexDump.dump(byteArray0, (long) 5, (OutputStream) pipedOutputStream0, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) pipedWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 0 into array of length 0
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        HexDump.dump(byteArray0, (long) (-48), (OutputStream) byteArrayOutputStream0, (-48));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: -48 into array of length 16
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HexDump hexDump0 = new HexDump();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }
}
