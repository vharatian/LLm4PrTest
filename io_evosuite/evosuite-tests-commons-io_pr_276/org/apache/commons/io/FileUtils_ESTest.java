/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:30:13 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UncheckedIOException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.CopyOption;
import java.nio.file.FileVisitResult;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileTime;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Chronology;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.util.zip.Adler32;
import java.util.zip.CRC32;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.LineIterator;
import org.apache.commons.io.filefilter.AgeFileFilter;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FalseFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.MagicNumberFileFilter;
import org.apache.commons.io.filefilter.NameFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.filefilter.SizeFileFilter;
import org.apache.commons.io.filefilter.SymbolicLinkFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/%l<kLj/j.");
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/%l<kLj/j.", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("-5980780305148018688 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      CopyOption[] copyOptionArray0 = new CopyOption[5];
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      copyOptionArray0[2] = (CopyOption) standardCopyOption0;
      copyOptionArray0[3] = (CopyOption) standardCopyOption0;
      copyOptionArray0[4] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U;8iTwe{V";
      stringArray0[1] = "]ld;u";
      stringArray0[2] = "CQQMT";
      stringArray0[3] = "0lM";
      stringArray0[4] = "9";
      stringArray0[5] = "";
      File file1 = FileUtils.getFile(stringArray0);
      assertNotNull(file1);
      assertFalse(file1.canRead());
      
      NameFileFilter nameFileFilter0 = new NameFileFilter(" EB");
      FileUtils.copyDirectory(file0, file1, (FileFilter) nameFileFilter0, false);
      assertEquals(1392409281320L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("<", "ECp5WUg)g96");
      FileUtils.copyDirectory(file0, (File) mockFile0);
      assertEquals(1755984341278L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileUtils.current();
          boolean boolean0 = FileUtils.deleteQuietly(file0);
          assertFalse(boolean0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)EmptyFileFilter.NOT_EMPTY;
      FileUtils.copyDirectory(file1, file0, (FileFilter) notFileFilter0);
      assertEquals(1755767590862L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.waitFor(file0, 12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("srcFile");
      boolean boolean0 = FileUtils.waitFor(mockFile0, (byte) (-26));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File[] fileArray0 = new File[2];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(2, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/fake/but/wellformed/url");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = FileUtils.toFile(uRL0);
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = file0.toURL();
      File file1 = FileUtils.toFile(uRL0);
      assertNotSame(file0, file1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfDirectoryAsBigInteger(file0);
      assertEquals((short) (-17098), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOfDirectory(file0);
      assertEquals(92388662L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = FileUtils.current();
      BigInteger bigInteger0 = FileUtils.sizeOfAsBigInteger(file0);
      assertEquals((short) (-17098), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = FileUtils.current();
      long long0 = FileUtils.sizeOf(file0);
      assertEquals(92388662L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/'s5z}9HVL/org.apache.commons.io.file.CountingPathVisitor/org.apache.commons.io.file.CountingPathVisitor/ig%aV+<%SvQ/'s5z}9HVL/'s5z}9HVL/org.apache.commons.io.file.CountingPathVisitor", "A=nOOP*6a ");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream(file0);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = MockFile.createTempFile("au@m@", "au@m@", file0);
      FileInputStream fileInputStream0 = FileUtils.openInputStream(file1);
      assertEquals(0, fileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileVisitResult fileVisitResult0 = FileVisitResult.TERMINATE;
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = new SymbolicLinkFileFilter(fileVisitResult0, fileVisitResult0);
      Collection<File> collection0 = FileUtils.listFilesAndDirs(file0, symbolicLinkFileFilter0, symbolicLinkFileFilter0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      String[] stringArray0 = new String[1];
      Collection<File> collection0 = FileUtils.listFiles((File) mockFile0, stringArray0, false);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      File file0 = FileUtils.current();
      MockDate mockDate0 = new MockDate((-1L));
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(mockDate0);
      Collection<File> collection0 = FileUtils.listFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) ageFileFilter0);
      assertFalse(collection0.contains(file0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0, (String) null);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LineIterator lineIterator0 = FileUtils.lineIterator(file0);
      assertNotNull(lineIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter((byte)99, true);
      Iterator<File> iterator0 = FileUtils.iterateFilesAndDirs(file0, ageFileFilter0, ageFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, stringArray0, false);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      File file0 = FileUtils.current();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      NameFileFilter nameFileFilter0 = new NameFileFilter(list0);
      Iterator<File> iterator0 = FileUtils.iterateFiles(file0, (IOFileFilter) nameFileFilter0, (IOFileFilter) nameFileFilter0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = FileUtils.current();
      MockDate mockDate0 = new MockDate(2361, 1757, 2361);
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = FileUtils.isFileOlder(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1513L);
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) minguoDate0, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      JapaneseEra japaneseEra0 = JapaneseEra.MEIJI;
      Chronology chronology0 = Chronology.from(japaneseEra0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      boolean boolean0 = FileUtils.isFileOlder(file0, chronoLocalDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//home/azureuser/azureuser", "1 TB");
      Instant instant0 = MockInstant.ofEpochSecond((-3510L), (-3510L));
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileOlder(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileOlder(file0, 1125899906842624L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest", "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest");
      boolean boolean0 = FileUtils.isFileOlder((File) mockFile0, (-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockDate mockDate0 = new MockDate((-1095), (-1095), (-1095), 2603, 106, (-1095));
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      File file0 = MockFile.createTempFile("ftp", "http");
      boolean boolean0 = FileUtils.isFileNewer(file0, (Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) japaneseDate0, localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fFO_9mA3)Pi)");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      LocalTime localTime0 = MockLocalTime.now();
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) japaneseDate0, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fFO_9mA3)Pi)");
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, (ChronoLocalDate) japaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      FileTime fileTime0 = FileTime.from(17L, timeUnit0);
      Instant instant0 = fileTime0.toInstant();
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("/lom", "/lom");
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      boolean boolean0 = FileUtils.isFileNewer(file0, instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      FileTime fileTime0 = FileTime.from(instant0);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file1, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.isFileNewer(file0, file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.isFileNewer(file0, 988L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/_w!XKKu/o jMgkD{");
      boolean boolean0 = FileUtils.isFileNewer((File) mockFile0, 1125899906842692L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtils.getUserDirectory();
      assertEquals("azureuser", file0.getName());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadable(false, false);
      File file1 = FileUtils.getUserDirectory();
      assertEquals("/home", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      file0.delete();
      File file1 = FileUtils.getTempDirectory();
      assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0`i=h!65";
      stringArray0[1] = "vPL!";
      stringArray0[2] = "file2";
      stringArray0[3] = "/tmp//home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp";
      stringArray0[4] = "IsbY2D~";
      stringArray0[5] = "File system element for parameter '";
      stringArray0[6] = ".}.T3t";
      File file0 = FileUtils.getFile(stringArray0);
      assertNotNull(file0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/0`i=h!65/vPL!/file2/tmp/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp/IsbY2D~/File system element for parameter '/.}.T3t", file0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      File file0 = FileUtils.getFile(stringArray0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = FileUtils.current();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertEquals(".", file1.getName());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("URL ");
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile((File) mockFile0, stringArray0);
      assertEquals("URL ", file0.getName());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destinationDir", "Ca!not delete file: ");
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(mockFile0);
      boolean boolean0 = FileUtils.directoryContains(file0, file1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EDDRH$!O'- 5H!]/G$");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/Cannot delete file: /home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/dos/;0/azureuser");
      File file1 = FileUtils.createParentDirectories(mockFile0);
      assertEquals("/home/azureuser/LLm4PrTest/ io_experiments/./home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/Cannot delete file: /home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/dos", file1.getParent());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = FileUtils.getTempDirectory();
      linkedList0.add(file0);
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(linkedList0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<File> vector0 = new Vector<File>();
      File[] fileArray0 = FileUtils.convertFileCollectionToFileArray(vector0);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "org.apache.commons.io.filefilter.PathEqualsFileFilter", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFil6e");
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) mockFile0, "destFil6e", "destFil6e", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // destFil6e
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile(file0, "ftp", "ftp");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ftp
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "", (Collection<?>) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte) (-121), (-476), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, (int) (byte) (-121), (int) (byte) (-121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/lome/az\"reuser/home/azureuser/azxreu<er", "/lome/az\"reuser/home/azureuser/azxreu<er");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) "/lome/az\"reuser/home/azureuser/azxreu<er", "/lome/az\"reuser/home/azureuser/azxreu<er", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /lome/az\"reuser/home/azureuser/azxreu<er
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "dos", "dos");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dos
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "1 GB", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("ExceptionWasThrown", "");
      // Undeclared exception!
      FileUtils.waitFor(file0, 0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.touch((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[10];
      MockFile mockFile0 = new MockFile(file0, "net.bytebuddy.generate");
      try { 
        FileUtils.streamFiles(mockFile0, false, stringArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectoryAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" GB");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: ' GB'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfDirectory(file0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOfAsBigInteger(file0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "Ca!not delete file: ");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: 'Ca!not delete file: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.sizeOf(file0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/lome/az\"reuser/hWme/azureuser/azxreu<er/lome/az\"reuser/hWme/azureuser/azxreu<er/tmp0 to a subdirectory of itself: ");
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/tmp/lome/az\"reuser/hWme/azureuser/azxreu<er/lome/az\"reuser/hWme/azureuser/azxreu<er/tmp0 to a subdirectory of itself: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOf(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fR;(48UR/WB");
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines((File) mockFile0, charset0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D.t5<Z^@ZnN4]";
      stringArray0[1] = "' does not exist";
      stringArray0[2] = "~fX`4aJ&N6]I";
      stringArray0[3] = " does not exist";
      stringArray0[4] = "5`'";
      stringArray0[5] = "5aLCc{O8bXT9eD_r";
      stringArray0[6] = "l(!";
      stringArray0[7] = "/tmp//home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp";
      stringArray0[8] = " TB";
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readLines(file0, "e^fdn6rhUq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // e^fdn6rhUq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readLines(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      try { 
        FileUtils.readLines((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser//home/azureuser/azureuser");
      try { 
        FileUtils.readFileToString((File) mockFile0, (Charset) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("p)FeK+HA-(]", "file1");
      try { 
        FileUtils.readFileToString((File) mockFile0, (String) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.readFileToString(file0, "3");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/Gmp/o", "/Gmp/o");
      try { 
        FileUtils.readFileToString((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.readFileToString(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFile");
      try { 
        FileUtils.readFileToByteArray(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readFileToByteArray(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/home/azureuser";
      stringArray0[1] = "/home/azureuser";
      stringArray0[2] = "/home/azureuser";
      stringArray0[3] = "/home/azureuser";
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getFile(stringArray0);
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/home/azureuser/home/azureuser/home'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.openInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.moveToDirectory(file0, file1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.moveToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp to a subdirectory of itself: /tmp/tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = FileUtils.current();
      File file1 = MockFile.createTempFile("N2NH?u,eosz|f0:KA", "N2NH?u,eosz|f0:KA", file0);
      try { 
        FileUtils.moveFileToDirectory(file1, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser/LLm4PrTest/ io_experiments/./N2NH?u,eosz|f0:KA0N2NH?u,eosz|f0:KA'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFileExample();
      File file1 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.moveFileToDirectory(file0, file1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/fake/but/wellformed/url'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "File does not exist: ";
      File file0 = FileUtils.getFile(stringArray0);
      File file1 = MockFile.createTempFile("File does not exist: ", "File does not exist: ", file0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile(file1, file1, copyOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/home/azureuser/LLm4PrTest/ io_experiments/File does not exist: /File does not exist: 0File does not exist: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "destFile");
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/destFile' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("#iNc", "#iNc");
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destFile' already exists: '/tmp/#iNc0#iNc'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        FileUtils.moveFile((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/tmp/foo.bar' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.getTempDirectory();
      File file2 = file1.getAbsoluteFile();
      FileUtils.copyDirectoryToDirectory(file0, file1);
      try { 
        FileUtils.moveDirectoryToDirectory(file2, file0, false);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = FileUtils.current();
      MockFile mockFile0 = new MockFile(file0, "?W5Xlk");
      File file1 = FileUtils.createParentDirectories(mockFile0);
      // Undeclared exception!
      try { 
        FileUtils.moveDirectoryToDirectory(file1, file1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='/home/azureuser/LLm4PrTest/ io_experiments/.', file2='/home/azureuser/LLm4PrTest/ io_experiments/./.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyToDirectory(file0, file0);
      MockFile mockFile0 = new MockFile("/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|G')@n6J7 HY/tmp");
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("hSpZ9Orq6y5](n9\"6T", "hSpZ9Orq6y5](n9\"6T");
      // Undeclared exception!
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcDir' is not a directory: '/tmp/hSpZ9Orq6y5](n9\"6T0hSpZ9Orq6y5](n9\"6T'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.systemprpertyextension", "org.junitpioneer.jupiter.systemprpertyextension");
      try { 
        FileUtils.moveDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.systemprpertyextension/org.junitpioneer.jupiter.systemprpertyextension' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      // Undeclared exception!
      try { 
        FileUtils.listFilesAndDirs(file0, pathEqualsFileFilter0, pathEqualsFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, true);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("java.nio.file.FileTreeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      File file0 = MockFile.createTempFile("Never disable parameterized test method itself", "Never disable parameterized test method itself");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.listFiles(file0, stringArray0, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/Never disable parameterized test method itself0Never disable parameterized test method itself
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      AgeFileFilter ageFileFilter0 = new AgeFileFilter(0L);
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      // Undeclared exception!
      FileUtils.listFiles(file0, (IOFileFilter) ageFileFilter0, (IOFileFilter) trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zDN", "zDN");
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) mockFile0, (IOFileFilter) falseFileFilter0, (IOFileFilter) falseFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/azureuser/LLm4PrTest/ io_experiments/zDN/zDN
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("LR\"s20)vn8", "date");
      try { 
        FileUtils.lineIterator((File) mockFile0, "http");
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "org.junitpioneer.jupiter.StopwatchExtension");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.StopwatchExtension
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.lineIterator(file0, "++>j");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ++>j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8IpuDK%_]9\"7Zm4");
      try { 
        FileUtils.lineIterator((File) mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      File file0 = MockFile.createTempFile("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor", "");
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedUnchecked(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp/net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor0
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = MockFile.createTempFile("v3p6:LTZy!O'P", "/tmp/tmp/bjilmz0[,1~");
      try { 
        FileUtils.lastModifiedFileTime(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModifiedFileTime((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile("' does not exist: '");
      try { 
        FileUtils.lastModified(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lastModified((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.INSTANCE;
      // Undeclared exception!
      FileUtils.iterateFilesAndDirs(file0, trueFileFilter0, trueFileFilter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      OrFileFilter orFileFilter0 = new OrFileFilter();
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, orFileFilter0, orFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AndFileFilter andFileFilter0 = (AndFileFilter)CanReadFileFilter.READ_ONLY;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) null, (IOFileFilter) andFileFilter0, (IOFileFilter) andFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      File file0 = FileUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[3];
      // Undeclared exception!
      try { 
        FileUtils.isRegularFile(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      FileTime fileTime0 = FileTime.from(0L, timeUnit0);
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, fileTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("srcFile", "/home/azureuser/LLm4PrTest/ io_experiments/zREM$ErL0js^w)K9EP2/zREM$ErL0js^w)K9EP2");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/srcFile/home/azureuser/LLm4PrTest/ io_experiments/zREM$ErL0js^w)K9EP2/zREM$ErL0js^w)K9EP2'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp//home/azureuser/LLm4PrTest/ io_experiments/:", "/tmp//home/azureuser/LLm4PrTest/ io_experiments/:");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/tmp/home/azureuser/LLm4PrTest/ io_experiments/:0/tmp/home/azureuser/LLm4PrTest/ io_experiments/:
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Method `", "Cannot delete file: ");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'reference' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/Method `/Cannot delete file: '
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      File file0 = MockFile.createTempFile("rw-r--r--", "[8JEn7");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.NoSuchFileException: /tmp/rw-r--r--0[8JEn7
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/og.apache.commons.io.file8lter.FalseFileFilqer0og.apache.commons.io.file8lter.FalseFileFilqer", "c7j3K<eFLtD0sXb2$s");
      try { 
        FileUtils.isEmptyDirectory(mockFile0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isEmptyDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      File file0 = MockFile.createTempFile(" TB", " TB");
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.isDirectory(file0, linkOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDeleteOnExit((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.forceDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.directoryContains((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      // Undeclared exception!
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.directoryContains(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      File file0 = MockFile.createTempFile("6\"2TnA'nZFS.al", "6\"2TnA'nZFS.al");
      // Undeclared exception!
      try { 
        FileUtils.deleteDirectory(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'directory' is not a directory: '/tmp/6\"2TnA'nZFS.al06\"2TnA'nZFS.al'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.createParentDirectories(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter/tmp/tmp'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile((URL) null, file0, 2175, 1016);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 1289, (-133990373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0, 2175, 2175);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        FileUtils.copyURLToFile(uRL0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(631);
      // Undeclared exception!
      try { 
        FileUtils.copyToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceIterable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      linkedList0.add(file0);
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedList0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.copyToDirectory(file1, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='/home/azureuser/LLm4PrTest/ io_experiments/./.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.unitpioneer.jupiter.DefaultLocaeExtenson", "org.unitpioneer.jupiter.DefaultLocaeExtenson");
      try { 
        FileUtils.copyToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/org.unitpioneer.jupiter.DefaultLocaeExtenson/org.unitpioneer.jupiter.DefaultLocaeExtenson'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        FileUtils.copyInputStreamToFile(pipedInputStream0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/_w!XKKu/o jMgkD{");
      try { 
        FileUtils.copyFileToDirectory((File) mockFile0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/_w!XKKu/o jMgkD{'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockFile mockFile0 = new MockFile("pqY@WY)<;f3U");
      try { 
        FileUtils.copyFile((File) mockFile0, (OutputStream) null);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        FileUtils.copyFile(file0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("s\"M\"`57L)&x");
      try { 
        FileUtils.copyFile((File) mockFile0, file0, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 's\"M\"`57L)&x'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[0] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, (CopyOption[]) linkOptionArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.nio.file.StandardCopyOption
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockFile mockFile0 = new MockFile("$Proxy", "$Proxy");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false, (CopyOption[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/$Proxy/$Proxy'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp");
      try { 
        FileUtils.copyFile((File) mockFile0, (File) mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyFile(file0, file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      try { 
        FileUtils.copyDirectoryToDirectory(file1, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceDir
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("destFile");
      try { 
        FileUtils.copyDirectoryToDirectory(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: 'destFile'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser/LLm4PrTest/ io_experiments' (file1='.', file2='.')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtils.copyDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) falseFileFilter0, false, (CopyOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "/tmp/home/azureuser/LLm4PrTest/ io_experiments/java.io.tmpdir/java.io.tmpdir");
      String[] stringArray0 = new String[0];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.ATOMIC_MOVE;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      copyOptionArray0[1] = (CopyOption) standardCopyOption0;
      LinkOption linkOption0 = LinkOption.NOFOLLOW_LINKS;
      copyOptionArray0[2] = (CopyOption) linkOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) wildcardFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) falseFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/azureuser");
      Pattern pattern0 = Pattern.compile("/home/azureuser/azureuser");
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      NotFileFilter notFileFilter0 = new NotFileFilter(regexFileFilter0);
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) notFileFilter0, true, copyOptionArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) notFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Path path0 = file0.toPath();
      PathEqualsFileFilter pathEqualsFileFilter0 = new PathEqualsFileFilter(path0);
      IOFileFilter iOFileFilter0 = pathEqualsFileFilter0.negate();
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) iOFileFilter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%", "Don't clear/set the same entry more than once.");
      IOCase iOCase0 = IOCase.SYSTEM;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("%", iOCase0);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) regexFileFilter0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/%/Don't clear/set the same entry more than once.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = new String[1];
      IOCase iOCase0 = IOCase.SENSITIVE;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0, iOCase0);
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory((File) null, (File) null, (FileFilter) prefixFileFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = FileUtils.current();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("]", "/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments/home/azureuser/LLm4PrTest/ io_experiments");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(0L);
      try { 
        FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("directory", "directory");
      SizeFileFilter sizeFileFilter0 = new SizeFileFilter(1125899906842624L);
      try { 
        FileUtils.copyDirectory((File) mockFile0, (File) mockFile0, (FileFilter) sizeFileFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/directory/directory'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      File file0 = MockFile.createTempFile("%b|", "%b|");
      File file1 = MockFile.createTempFile("checksum", "/?o_OR[uw^ZEmw;G&T");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file1, "checksum");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // checksum
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      File file0 = MockFile.createTempFile("qA>Ck_bYKBL3IC", "r3yCTW6A!>yz]>#");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@carteianProducTst not ound.");
      // Undeclared exception!
      try { 
        FileUtils.cleanDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '@carteianProducTst not ound.'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.file.CleaningPathVisitor", "org.apache.commons.io.file.CleaningPathVisitor");
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "V\"y+3c%x");
      try { 
        FileUtils.checksumCRC32(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '/tmp/V\"y+3c%x'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      File file0 = MockFile.createTempFile("?SV,+/C43e>Fq3[", (String) null);
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      // Undeclared exception!
      try { 
        FileUtils.checksum((File) null, adler32_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      CRC32 cRC32_0 = new CRC32();
      // Undeclared exception!
      try { 
        FileUtils.checksum(file0, cRC32_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0`xolK");
      CRC32 cRC32_0 = new CRC32();
      try { 
        FileUtils.checksum(mockFile0, cRC32_0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'file' does not exist: '0`xolK'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // size
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.byteCountToDisplaySize((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.streamFiles((File) null, false, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      File file0 = FileUtils.current();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readFileToString(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.moveFileToDirectory(file0, file0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("file", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/LLm4PrTest/ io_experiments/file/@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          MockFile mockFile0 = new MockFile("/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|G')@n6J7 HY/tmp");
          // Undeclared exception!
          try { 
            FileUtils.moveDirectory(file0, mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1158)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1278)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:414)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1372)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:349)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1227)
             // org.apache.commons.io.FileUtils.moveDirectory(FileUtils.java:2340)
             // sun.reflect.GeneratedMethodAccessor440.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile(">j:pv?)KEkI~,");
      try { 
        FileUtils.moveDirectory(file0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: >j:pv?)KEkI~,
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = MockFile.createTempFile("qA>Ck_bYKBL3IC", "qA>Ck_bYKBL3IC");
      boolean boolean0 = FileUtils.isSymlink(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("0`xolK");
      FileUtils.copyDirectory(file0, (File) mockFile0, (FileFilter) null, false, (CopyOption[]) null);
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.current();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      FileUtils.copyDirectory(file1, file0, (FileFilter) falseFileFilter0, false, (CopyOption[]) null);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_YB;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1048576 EB", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "A=77 ZR_U[_Oq", ",;&|KBW B)2D'm", false);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,;&|KBW B)2D'm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      Charset charset0 = Charset.defaultCharset();
      try { 
        FileUtils.readLines(file0, charset0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/home/azureuser' (file1='/home/azureuser', file2='/home/azureuser')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "nfOs,1Kx_dV");
      // Undeclared exception!
      try { 
        FileUtils.write((File) mockFile0, (CharSequence) null, "2FGVHdH8oz", false);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 2FGVHdH8oz
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      NotFileFilter notFileFilter0 = (NotFileFilter)HiddenFileFilter.VISIBLE;
      // Undeclared exception!
      FileUtils.listFilesAndDirs(file0, notFileFilter0, notFileFilter0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile((File) null, byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.forceMkdir(file0);
      assertEquals("tmp", file0.getName());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockFile mockFile0 = new MockFile("net.bytebuddy.implementation.auxiliary.AuxiliaryType");
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) mockFile0, (ChronoZonedDateTime<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoZonedDateTime
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null, "/home/azureuser//homeazuruser/home/azureuser/azureuser/azureuser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.newOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      long long0 = FileUtils.lastModified(file0);
      //  // Unstable assertion: assertEquals(1755984341278L, long0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = FileUtils.getUserDirectoryPath();
      assertEquals("/home/azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = FileUtils.getTempDirectoryPath();
      assertEquals("/tmp", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "3 KB", charset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A,(UF?y", "A,(UF?y");
      try { 
        FileUtils.moveFileToDirectory(mockFile0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Source '/home/azureuser/LLm4PrTest/ io_experiments/A,(UF?y/A,(UF?y' does not exist
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      File[] fileArray0 = new File[6];
      // Undeclared exception!
      try { 
        FileUtils.toURLs(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      File[] fileArray0 = new File[0];
      URL[] uRLArray0 = FileUtils.toURLs(fileArray0);
      assertEquals(0, uRLArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("@CartesianProductTest not found.", "@CartesianProductTest not found.");
          // Undeclared exception!
          try { 
            FileUtils.touch(mockFile0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/ io_experiments/@CartesianProductTest not found.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // org.apache.commons.io.file.PathUtils.createParentDirectories(PathUtils.java:339)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:992)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2494)
             // org.apache.commons.io.FileUtils.touch(FileUtils.java:3158)
             // sun.reflect.GeneratedMethodAccessor516.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.touch(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:72)
             // java.nio.file.Files.setLastModifiedTime(Files.java:2306)
             // org.apache.commons.io.file.attribute.FileTimes.setLastModifiedTime(FileTimes.java:122)
             // org.apache.commons.io.FileUtils.touch(FileUtils.java:3160)
             // sun.reflect.GeneratedMethodAccessor516.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      // Undeclared exception!
      try { 
        FileUtils.toFiles(uRLArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only convert file URL to a File: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL[] uRLArray0 = new URL[1];
      uRLArray0[0] = uRL0;
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(1, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      File[] fileArray0 = FileUtils.toFiles((URL[]) null);
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      URL[] uRLArray0 = new URL[3];
      File[] fileArray0 = FileUtils.toFiles(uRLArray0);
      assertEquals(3, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      File file0 = FileUtils.toFile(uRL0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      String[] stringArray0 = new String[10];
      Stream<File> stream0 = FileUtils.streamFiles(file0, false, stringArray0);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp//|qK?'t|Gq')@n6J` HY/tmp");
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File system element for parameter 'directory' does not exist: '/tmp/|qK?'t|Gq')@n6J` HY/tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      File file0 = MockFile.createTempFile("YsTvM-hdT.n", "YsTvM-hdT.n");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'sourceDir' is not a directory: '/tmp/YsTvM-hdT.n0YsTvM-hdT.n'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      try { 
        FileUtils.moveDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      File file0 = FileUtils.current();
      try { 
        FileUtils.readFileToString(file0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' is not a file: /home/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuser/LLm4PrTest/ io_experiments/v4}.6;;/v4}.6;;/v4}.6;;/v4}.6;;0v4}.6;;");
      FileOutputStream fileOutputStream0 = FileUtils.openOutputStream((File) mockFile0, false);
      assertNotNull(fileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      try { 
        FileUtils.moveFileToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'destDir' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/org.junitpioneer.jupiter.DefaultLocaleExtension/org.junitpioneer.jupiter.DefaultLocaleExtension'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          File file1 = MockFile.createTempFile("/home/azureuser/LLm4PrTest/ io_experiments/*!!n5/ must be static.", "/home/azureuser/LLm4PrTest/ io_experiments/*!!n5/ must be static.", file0);
          // Undeclared exception!
          try { 
            FileUtils.moveToDirectory(file1, file0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/ must be static.\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:875)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2422)
             // org.apache.commons.io.FileUtils.moveFile(FileUtils.java:2396)
             // org.apache.commons.io.FileUtils.moveFileToDirectory(FileUtils.java:2452)
             // org.apache.commons.io.FileUtils.moveToDirectory(FileUtils.java:2478)
             // sun.reflect.GeneratedMethodAccessor397.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      MockFile mockFile0 = new MockFile("'");
      try { 
        FileUtils.moveDirectoryToDirectory(file0, mockFile0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot move directory: /home/azureuser to a subdirectory of itself: /home/azureuser/LLm4PrTest/ io_experiments/'/azureuser
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile("/home/azureuser/home/azureuser/azureuser", "/home/azureuser/home/azureuser/azureuser");
      try { 
        FileUtils.moveToDirectory(file0, mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Destination directory '/home/azureuser/home/azureuser/azureuser/home/azureuser/home/azureuser/azureuser' does not exist [createDestDir=false]
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      File file0 = MockFile.createTempFile("/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/File element in parameter '%s' already exists: '%s'/azureuser", (String) null);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination '/tmp/home/azureuser/home/azureuser/LLm4PrTest/ io_experiments/File element in parameter '%s' already exists: '%s'/azureuser0.tmp' is not a directory
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      file0.setReadOnly();
      try { 
        FileUtils.copyDirectoryToDirectory(file0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot create directory '/home/azureuser/azureuser'.
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      File file1 = FileUtils.current();
      FalseFileFilter falseFileFilter0 = (FalseFileFilter)FalseFileFilter.INSTANCE;
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file1, (FileFilter) falseFileFilter0, true, (CopyOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.iterateFilesAndDirs(file0, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileUtils.isSymlink((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      File file0 = FileUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isRegularFile((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      File file0 = MockFile.createTempFile(" TB", " TB");
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      File file0 = FileUtils.current();
      LinkOption[] linkOptionArray0 = new LinkOption[0];
      boolean boolean0 = FileUtils.isDirectory(file0, linkOptionArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkOption[] linkOptionArray0 = new LinkOption[1];
      boolean boolean0 = FileUtils.isDirectory((File) null, linkOptionArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "sourceIterable";
      // Undeclared exception!
      try { 
        FileUtils.getFile(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[0];
      File file0 = FileUtils.getFile(stringArray0);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        FileUtils.getFile(file0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      String[] stringArray0 = new String[0];
      File file1 = FileUtils.getFile(file0, stringArray0);
      assertTrue(file1.canWrite());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      FileUtils.forceDeleteOnExit(mockFile0);
      assertTrue(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          File file1 = FileUtils.current();
          // Undeclared exception!
          try { 
            FileUtils.copyDirectoryToDirectory(file1, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/./mvn_compile_merge_pr_452.out\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:875)
             // org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1343)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:724)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:655)
             // org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:556)
             // org.apache.commons.io.FileUtils.copyDirectoryToDirectory(FileUtils.java:755)
             // sun.reflect.GeneratedMethodAccessor413.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MockFile mockFile0 = new MockFile(file0, "g/i");
      boolean boolean0 = FileUtils.directoryContains(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      boolean boolean0 = FileUtils.directoryContains(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\r\n", "destinationDir");
      boolean boolean0 = FileUtils.deleteQuietly(mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = FileUtils.deleteQuietly((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.deleteQuietly(file0);
      assertEquals(0L, file0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp", "/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp");
      FileUtils.deleteDirectory(mockFile0);
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.deleteDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.apache.commons.io.FileUtils.delete(FileUtils.java:1210)
             // org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1229)
             // sun.reflect.GeneratedMethodAccessor435.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      File file0 = FileUtils.toFile(uRL0);
      try { 
        FileUtils.copyDirectory(file0, file0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/fake/but/wellformed/url'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("%{o/T9j");
      assertEquals("%{o/T9j", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MockFile mockFile0 = new MockFile("dat)", "dat)");
      linkedList0.add((File) mockFile0);
      try { 
        FileUtils.copyToDirectory((Iterable<File>) linkedList0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File system element for parameter 'source' does not exist: '/home/azureuser/LLm4PrTest/ io_experiments/dat)/dat)'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      FileUtils.copyToDirectory((Iterable<File>) linkedList0, file0);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getTempDirectory();
          // Undeclared exception!
          try { 
            FileUtils.copyInputStreamToFile((InputStream) null, file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // org.apache.commons.io.file.PathUtils.newOutputStream(PathUtils.java:994)
             // org.apache.commons.io.FileUtils.newOutputStream(FileUtils.java:2494)
             // org.apache.commons.io.FileUtils.copyToFile(FileUtils.java:1067)
             // org.apache.commons.io.FileUtils.copyInputStreamToFile(FileUtils.java:977)
             // sun.reflect.GeneratedMethodAccessor505.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // outputStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("net.bytebuddy.build.Plugin$ForElementMatcher", "net.bytebuddy.build.Plugin$ForElementMatcher", (File) null);
          File file1 = MockFile.createTempFile("net.bytebuddy.build.Plugin$ForElementMatcher", "net.bytebuddy.build.Plugin$ForElementMatcher");
          CopyOption[] copyOptionArray0 = new CopyOption[1];
          // Undeclared exception!
          try { 
            FileUtils.copyFile(file0, file1, copyOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/net.bytebuddy.build.Plugin$ForElementMatcher1net.bytebuddy.build.Plugin$ForElementMatcher\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:513)
             // sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:253)
             // java.nio.file.Files.copy(Files.java:1274)
             // org.apache.commons.io.FileUtils.copyFile(FileUtils.java:875)
             // sun.reflect.GeneratedMethodAccessor418.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory(file0, file0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: .
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.createParentDirectories(file0);
      FileUtils.copyDirectory(file0, file1, false);
      assertEquals(1392409281320L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.copyDirectoryToDirectory(file0, file0);
      try { 
        FileUtils.moveDirectoryToDirectory(file0, file0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File element in parameter 'destDir' already exists: '/home/azureuser/azureuser'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, file0, "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      File file1 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file1, "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/tmp/tmp/lome/az\"reuser/hWme/azureuser/azxreu<er/lome/az\"reuser/hWme/azureuser/azxreu<er", "/tmp/tmp/lome/az\"reuser/hWme/azureuser/azxreu<er/lome/az\"reuser/hWme/azureuser/azxreu<er");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(mockFile0, mockFile0, "/tmp/tmp/lome/az\"reuser/hWme/azureuser/azxreu<er/lome/az\"reuser/hWme/azureuser/azxreu<er");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tp/tmp/org.apache.commons.io.filefilter.FalseFileFplter0org.apache.commons.io.filefilter.FalseFileFilter", "/tp/tmp/org.apache.commons.io.filefilter.FalseFileFplter0org.apache.commons.io.filefilter.FalseFileFilter");
      MockFile mockFile0 = new MockFile("/tp/tmp/org.apache.commons.io.filefilter.FalseFileFplter0org.apache.commons.io.filefilter.FalseFileFilter");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, mockFile0, "/tp/tmp/org.apache.commons.io.filefilter.FalseFileFplter0org.apache.commons.io.filefilter.FalseFileFilter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      File file0 = FileUtils.current();
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL(file0, (File) null, "str2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      File file0 = MockFile.createTempFile(";kYYRjF", ";kYYRjF");
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, file0, ";kYYRjF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEqualsIgnoreEOL((File) null, (File) null, "/home/azureuser//home/azureuser/LLm4PrTest/ io_experiments/date/azureuser");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEqualsIgnoreEOL(file0, file0, "/tmp/home/azureuser/LLm4PrTest/ io_experiments/tmp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      File file1 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "destFile");
      try { 
        FileUtils.contentEquals(file1, file0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.io.filfilter.FalseFileFilter", "org.apache.commons.io.filfilter.FalseFileFilter");
      boolean boolean0 = FileUtils.contentEquals(file0, file0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_]vP^.I", "mjN0('7dZ7$>hx$Gs3");
      boolean boolean0 = FileUtils.contentEquals(mockFile0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.FileUtils", "file");
      File file0 = FileUtils.createParentDirectories(mockFile0);
      boolean boolean0 = FileUtils.contentEquals(file0, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.contentEquals(file0, (File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file");
      boolean boolean0 = FileUtils.contentEquals((File) null, mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = FileUtils.contentEquals((File) null, (File) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.contentEquals(file0, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file1' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      FileUtils.forceDeleteOnExit(file0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileUtils.getUserDirectory();
          // Undeclared exception!
          try { 
            FileUtils.cleanDirectory(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/azureuser/LLm4PrTest/compress_experiments/commons-compress/.asf.yaml\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:254)
             // sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:190)
             // org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:1158)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:159)
             // org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:37)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:1278)
             // org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:453)
             // org.apache.commons.io.file.PathUtils.delete(PathUtils.java:414)
             // org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1372)
             // org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:349)
             // sun.reflect.GeneratedMethodAccessor409.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileUtils.cleanDirectory(file0);
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_KB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 KB", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_MB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 MB", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_GB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 GB", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_TB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 TB", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_PB_BI;
      String string0 = FileUtils.byteCountToDisplaySize(bigInteger0);
      assertEquals("1 PB", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      CopyOption[] copyOptionArray0 = new CopyOption[1];
      StandardCopyOption standardCopyOption0 = StandardCopyOption.COPY_ATTRIBUTES;
      copyOptionArray0[0] = (CopyOption) standardCopyOption0;
      // Undeclared exception!
      try { 
        FileUtils.copyFile(file0, file0, true, copyOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'srcFile' is not a file: /tmp
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOf((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      EmptyFileFilter emptyFileFilter0 = (EmptyFileFilter)EmptyFileFilter.EMPTY;
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles(file0, (IOFileFilter) emptyFileFilter0, (IOFileFilter) emptyFileFilter0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /tmp
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "org.junitpioneer.jupiter.DefaultLocaleExtension");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.convertFileCollectionToFileArray((Collection<File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.waitFor((File) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      FileTime fileTime0 = FileUtils.lastModifiedFileTime(file0);
      boolean boolean0 = FileUtils.isFileOlder(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      MagicNumberFileFilter magicNumberFileFilter0 = new MagicNumberFileFilter("srcFile");
      // Undeclared exception!
      try { 
        FileUtils.copyDirectory(file0, file0, (FileFilter) magicNumberFileFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File canonical paths are equal: '/tmp' (file1='/tmp', file2='/tmp')
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (String) null, (Collection<?>) linkedHashSet0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.sizeOfAsBigInteger(file0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.nio.file.AccessDeniedException: /tmp/systemd-private-3ae89cc2c1154e9ba15d776568219df0-polkit.service-CHYYdM
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, 100L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BigInteger bigInteger0 = FileUtils.ONE_EB_BI;
      String string0 = FileUtils.byteCountToDisplaySize((Number) bigInteger0);
      assertEquals("1 EB", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      long long0 = FileUtils.lastModifiedUnchecked(file0);
      assertEquals(1755767590862L, long0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (-3716L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) set0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFileToDirectory((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sourceFile
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      File file0 = FileUtils.createParentDirectories((File) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToString((File) null, "' does not exist");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ' does not exist
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      File file0 = FileUtils.current();
      LocalDate localDate0 = MockLocalDate.now();
      boolean boolean0 = FileUtils.isFileOlder(file0, (ChronoLocalDate) localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.sizeOfDirectoryAsBigInteger((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // directory
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home", "/home/azureuser/");
      // Undeclared exception!
      try { 
        FileUtils.iterateFiles((File) mockFile0, (String[]) null, false);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // /home/home/azureuser
         //
         verifyException("org.apache.commons.io.UncheckedIOExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readLines((File) null, "names");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // names
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = FileUtils.isFileNewer(file0, (ChronoLocalDate) thaiBuddhistDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.copyFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "{??^", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "/home/azureuse4/LLm4PrTest/ io_e!periments/|qK?'t|Gq')@n6J7 HY/tmp", (Collection<?>) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) linkedHashSet0, "name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      FileTime fileTime0 = FileTime.fromMillis(0L);
      boolean boolean0 = FileUtils.isFileNewer(file0, fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.readFileToByteArray((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      boolean boolean0 = FileUtils.isEmptyDirectory(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, (String) null, "94IVUd,Og8=0k|x");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 94IVUd,Og8=0k|x
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.checksumCRC32((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.listFiles((File) null, (IOFileFilter) null, (IOFileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      File file1 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.moveToDirectory(file0, file1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File parameter 'destDir is not writable: '/home/azureuser/LLm4PrTest/ io_experiments/./tmp'
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.writeStringToFile((File) null, "aQE^e>m1W3/vfb!EU", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chronoLocalDate
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      FileUtils.listFiles(file0, (String[]) null, true);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.isFileOlder((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // reference
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.lineIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Vector<ThaiBuddhistEra> vector0 = new Vector<ThaiBuddhistEra>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, (Collection<?>) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      assertEquals("/home/azureuser", fileUtils0.getUserDirectoryPath());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        FileUtils.writeLines((File) null, "INSTANCE", (Collection<?>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.moveFile((File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.write((File) null, (CharSequence) "/tmp", (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.openInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      // Undeclared exception!
      try { 
        FileUtils.writeByteArrayToFile(file0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      File file0 = MockFile.createTempFile("ExceptionWasThrown", "ExceptionWasThrown");
      FileUtils.forceMkdirParent(file0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = FileUtils.byteCountToDisplaySize(673L);
      assertEquals("673 bytes", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      File file0 = FileUtils.getUserDirectory();
      // Undeclared exception!
      try { 
        FileUtils.write(file0, (CharSequence) "d2ox", "d2ox");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d2ox
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      File file0 = MockFile.createTempFile("/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter", "/tmp/tmp/org.apache.commons.io.filefilter.FalseFileFilter0org.apache.commons.io.filefilter.FalseFileFilter");
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      File file0 = FileUtils.current();
      // Undeclared exception!
      try { 
        FileUtils.isFileNewer(file0, (Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.delete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      File file0 = FileUtils.getTempDirectory();
      try { 
        FileUtils.readLines(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
