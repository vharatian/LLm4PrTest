/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:10:00 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOCase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FilenameUtils_ESTest extends FilenameUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("?", "?", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("KS@=/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = FilenameUtils.getPath("/b");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = FilenameUtils.getPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = FilenameUtils.concat("/&zgjV{4Zl2jSh", "7t");
      assertEquals("/&zgjV{4Zl2jSh/7t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = FilenameUtils.concat("O:", "net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor");
      assertEquals("O:/net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = FilenameUtils.splitOnTokens("*");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = FilenameUtils.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = FilenameUtils.normalize("?:Em8UU");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = FilenameUtils.normalize(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isSystemWindows();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("NTFS ADS separator (':') in file name is forbidden.");
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("z:_+`Np/i");
      assertEquals("_+`Np", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = FilenameUtils.getPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = FilenameUtils.getName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator(" does not declare a parameter with index ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("net.bytebuddy.build.Plugin$Compound");
      assertEquals("Plugin$Compound", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("%", "%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalizedOnSystem("", "Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals("", "Null byte present in file");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("", "0\"6JZD@(j%j^6Ye");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("~$#uYKs%J'hvtp|C0", "", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("~$#uYKs%J'hvtp|C0", ".", (IOCase) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("<$UfI}>?p__8fKh", "*91R", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("*", "*", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("", "?", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, ">t<bWfzuSS-H:CRY", iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch((String) null, (String) null, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      // Undeclared exception!
      try { 
        FilenameUtils.equals("net.bytbuddy.implementation.bind.annotation.TargetMethodAnnotationDrienBinder", "?:Em8UpU", true, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("No advice defined by ", "", true, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("-9)!", "org.apache.commons.io.FilenameUtils", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, "0", false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null, false, iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      // Undeclared exception!
      try { 
        FilenameUtils.equals("::", "::", true, iOCase0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.equals("^?gc]dCi$Z>X4/T#, s", (String) null, false, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = FilenameUtils.getExtension("r0\"n%4O{");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = FilenameUtils.getName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = FilenameUtils.getName("^C14aX=+^P5\"Fp@rqvX");
      assertEquals("^C14aX=+^P5\"Fp@rqvX", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
      assertEquals("Null byte present in file/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator(":G");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("~N");
      assertEquals("~N/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension("-wO*Ak^s[M,/n$79=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension(".");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("/HzgjV{4~l2h");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("2fWHa=qv:[4N<");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("m:_6t{fM&bP");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(" :2mo}$!~.qy:\"TBsE\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("`:8ChY");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~N/");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength(":");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = FilenameUtils.normalize("dxV>.]LV;x@r/");
      assertNotNull(string0);
      assertEquals("dxV>.]LV;x@r/", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("~", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = FilenameUtils.wildcardMatch("#8*<ZQPZD?7/#8*<ZQPZD?7", "#8*<ZQPZD?7/#8*<ZQPZD?7", iOCase0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("o1~}Wc\"~Bv,.~jFv*", "o1~}Wc\"~Bv,.~jFv*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = FilenameUtils.wildcardMatch("inline", (String) null, iOCase0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.build.HashCodeAndEqualsPlugin$AnnotationOrderComparator", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", (Collection<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = FilenameUtils.isExtension((String) null, (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      boolean boolean0 = FilenameUtils.isExtension("8ZD/`!T-*W]hCBi^!,", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = FilenameUtils.isExtension("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = FilenameUtils.isExtension("&TnnA0F,", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("|Q\"OqZ/W{\"HCzW\"", (String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("nI&TKPdqAW^u^[<Q/-^%i~pw+m..", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FilenameUtils.isExtension("\\&@Gyll].8Z/r", "Bpv~s2?|4$B}}`:Q%)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalized("]", "1:$cF|ph\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized((String) null, "~$#uvKs?J'hv:|C`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = FilenameUtils.removeExtension("net.bytebuddy.build.Plugin$Factory$UsingReflection");
      assertEquals("net.bytebuddy.build", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = FilenameUtils.getExtension((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Hzgj{4lh:");
      boolean boolean0 = FilenameUtils.isExtension("\\&@/Gyll]P8Z/r", (Collection<String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName("}");
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("~$#uYKs%J'hvtp|C0");
      assertNotNull(string0);
      assertEquals("~$#uYKs%J'hvtp|C0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("6");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = FilenameUtils.getPath("~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("*");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = FilenameUtils.getPrefix("::");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = FilenameUtils.indexOfExtension((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = FilenameUtils.indexOfLastSeparator((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("\\4B/Gyll]P8Z/h");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("\\U%lVm8~h");
      assertNotNull(string0);
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FilenameUtils.getFullPathNoEndSeparator("\\/HzgjV{4wh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = FilenameUtils.concat("//DDwCbP(6h`w&o", "//DDwCbP(6h`w&o");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\4BGUl]P8Zh", "$VALUES");
      assertNotNull(string0);
      assertEquals("/4BGUl]P8Zh/$VALUES", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = FilenameUtils.concat("/:C;wfha", "suppress");
      assertEquals("/:C;wfha/suppress", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("W:");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength("~]k");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = FilenameUtils.getPrefixLength((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToSystem("#");
      assertNotNull(string0);
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("\\4B/GUl]P8Z/h");
      assertEquals("\\4B\\GUl]P8Z\\h", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToWindows((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$");
      assertEquals("^(d{1,3}).(d{1,3}).(d{1,3}).(d{1,3})$", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix("\\&@Gyll].8Z/r");
      assertEquals("/&@Gyll].8Z/r", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = FilenameUtils.separatorsToUnix((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Q", "s./U_Mj/s./U_Mj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("Q", "Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.directoryContains((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Directory must not be null
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FilenameUtils.directoryContains("hZJLM8", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = FilenameUtils.concat("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = FilenameUtils.concat((String) null, "@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = FilenameUtils.concat("~cV48/4HEd/nQzRyjohx=Dgz{", "~cV48/4HEd/nQzRyjohx=Dgz{");
      assertEquals("~cV48/4HEd/nQzRyjohx=Dgz{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("u+=2k_b_FDbj$U/");
      assertEquals("u+=2k_b_FDbj$U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = FilenameUtils.concat("\\4B/Gyl]P8Z/h", "..");
      assertEquals("/4B/Gyl]P8Z/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = FilenameUtils.concat("nI&TKPdqAW^u^[<Q", "-^%i~pw+m..");
      assertNotNull(string0);
      assertEquals("nI&TKPdqAW^u^[<Q/-^%i~pw+m..", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalized("..", "..");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("/[zn(Spm,Sr(%'C-.", "/[zn(Spm,Sr(%'C-.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = FilenameUtils.concat("e~.iua", "..");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = FilenameUtils.concat("U", ".");
      assertNotNull(string0);
      assertEquals("U/", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = FilenameUtils.concat(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = FilenameUtils.concat("pg&//x[9c*qJ*>!", "pg&//x[9c*qJ*>!");
      assertEquals("pg&/x[9c*qJ*>!/pg&/x[9c*qJ*>!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator(",P|T,5;[oL4iGKD@", false);
      assertNotNull(string0);
      assertEquals(",P|T,5;[oL4iGKD@", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = FilenameUtils.normalize(" :2mo}$!~.qy:\"TBsE\"", true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = FilenameUtils.normalize("~", false);
      assertNotNull(string0);
      assertEquals("~\\", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilenameUtils.equalsNormalizedOnSystem("::", "::");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error normalizing one or both of the file names
         //
         verifyException("org.apache.commons.io.FilenameUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatchOnSystem("1**lEG2xE.2-(P-w", "1**lEG2xE.2-(P-w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = FilenameUtils.getBaseName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FilenameUtils filenameUtils0 = new FilenameUtils();
      assertEquals('.', FilenameUtils.EXTENSION_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsNormalized("/", "/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = FilenameUtils.normalizeNoEndSeparator((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = FilenameUtils.concat("KZN]/", "KZN]/");
      assertEquals("KZN]/KZN]/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FilenameUtils.wildcardMatch("j", "*u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = FilenameUtils.getPathNoEndSeparator("/xzn(Spm,Sr(%'C-.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = FilenameUtils.getPath("\\&@Gyll]8Z/r");
      assertNotNull(string0);
      assertEquals("&@Gyll]8Z/", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FilenameUtils.equalsOnSystem("(wQCt'*w;p,", "1N@cU'=v\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = FilenameUtils.getFullPath(" :2mo}$!~.qy:\"T1BsE\"");
      assertNull(string0);
  }
}
