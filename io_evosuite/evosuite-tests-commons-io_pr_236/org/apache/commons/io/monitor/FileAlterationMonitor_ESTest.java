/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:11:50 GMT 2025
 */

package org.apache.commons.io.monitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.concurrent.ThreadFactory;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.monitor.FileAlterationMonitor;
import org.apache.commons.io.monitor.FileAlterationObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileAlterationMonitor_ESTest extends FileAlterationMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L);
      long long0 = fileAlterationMonitor0.getInterval();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      long long0 = fileAlterationMonitor0.getInterval();
      assertEquals(10000L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, linkedList0);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.stop((-2545L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1139L), linkedList0);
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      Thread thread0 = MockThread.currentThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(thread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      fileAlterationMonitor0.setThreadFactory(threadFactory0);
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1158L), linkedList0);
      fileAlterationMonitor0.start();
      // Undeclared exception!
      try { 
        fileAlterationMonitor0.run();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(10000L);
      try { 
        fileAlterationMonitor0.stop((-145L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L);
      File file0 = MockFile.createTempFile("U4Kg", "=MS>!y9@cQSu", (File) null);
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver(file0, canExecuteFileFilter0);
      fileAlterationMonitor0.addObserver(fileAlterationObserver0);
      assertEquals(0L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(10000L);
      fileAlterationMonitor0.addObserver((FileAlterationObserver) null);
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      fileAlterationMonitor0.start();
      // Undeclared exception!
      fileAlterationMonitor0.run();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      fileAlterationMonitor0.run();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[1];
      IOCase iOCase0 = IOCase.SYSTEM;
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter("v}=", iOCase0);
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("v}=", prefixFileFilter0);
      fileAlterationObserverArray0[0] = fileAlterationObserver0;
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, fileAlterationObserverArray0);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop();
      assertEquals(0L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileAlterationObserver[] fileAlterationObserverArray0 = new FileAlterationObserver[3];
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-3543L), fileAlterationObserverArray0);
      fileAlterationMonitor0.start();
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is already running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1478L), linkedList0);
      fileAlterationMonitor0.start();
      fileAlterationMonitor0.stop(2409L);
      assertEquals((-1478L), fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<FileAlterationObserver> linkedHashSet0 = new LinkedHashSet<FileAlterationObserver>();
      FileAlterationObserver fileAlterationObserver0 = new FileAlterationObserver("org.apache.commons.io.monitor.FileAlterationMonitor", (FileFilter) null);
      linkedHashSet0.add(fileAlterationObserver0);
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(0L, linkedHashSet0);
      fileAlterationMonitor0.removeObserver(fileAlterationObserver0);
      assertEquals(0L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1478L), linkedList0);
      fileAlterationMonitor0.removeObserver((FileAlterationObserver) null);
      assertEquals((-1478L), fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1696L), (FileAlterationObserver[]) null);
      assertEquals((-1696L), fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(10000L);
      fileAlterationMonitor0.getObservers();
      assertEquals(10000L, fileAlterationMonitor0.getInterval());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<FileAlterationObserver> linkedList0 = new LinkedList<FileAlterationObserver>();
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor((-1478L), linkedList0);
      long long0 = fileAlterationMonitor0.getInterval();
      assertEquals((-1478L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor(1L);
      try { 
        fileAlterationMonitor0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Monitor is not running
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileAlterationMonitor fileAlterationMonitor0 = new FileAlterationMonitor();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      fileAlterationMonitor0.setThreadFactory(threadFactory0);
      try { 
        fileAlterationMonitor0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.monitor.FileAlterationMonitor", e);
      }
  }
}
