/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 16:42:41 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.io.input.CountingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CountingInputStream_ESTest extends CountingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), (byte)14);
      CountingInputStream countingInputStream0 = new CountingInputStream(byteArrayInputStream0);
      long long0 = countingInputStream0.skip(827L);
      assertEquals(14L, countingInputStream0.getByteCount());
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      countingInputStream0.afterRead((byte)17);
      assertEquals(17L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 6, (-178));
      CountingInputStream countingInputStream0 = new CountingInputStream(byteArrayInputStream0);
      countingInputStream0.skip(1L);
      assertEquals((-178L), countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals((-178), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.afterRead(53);
      assertEquals(53L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.resetByteCount();
      assertEquals(53L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      countingInputStream0.afterRead((byte) (-66));
      assertEquals((-66L), countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.resetByteCount();
      assertEquals((-66L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.afterRead(53);
      int int0 = countingInputStream0.getCount();
      assertEquals(53L, countingInputStream0.getByteCount());
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 6, (-178));
      CountingInputStream countingInputStream0 = new CountingInputStream(byteArrayInputStream0);
      countingInputStream0.skip(1L);
      int int0 = countingInputStream0.getCount();
      assertEquals((-178L), countingInputStream0.getByteCount());
      assertEquals((-178), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.afterRead(180);
      long long0 = countingInputStream0.getByteCount();
      assertEquals(180L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 6, (-178));
      CountingInputStream countingInputStream0 = new CountingInputStream(byteArrayInputStream0);
      countingInputStream0.skip(1L);
      long long0 = countingInputStream0.getByteCount();
      assertEquals((-178L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.skip(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      try { 
        countingInputStream0.skip(1288L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.resetByteCount();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      long long0 = countingInputStream0.getByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.afterRead((-1));
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      long long0 = countingInputStream0.skip(2L);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      countingInputStream0.resetCount();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CountingInputStream countingInputStream0 = new CountingInputStream(sequenceInputStream0);
      int int0 = countingInputStream0.getCount();
      assertEquals(0, int0);
  }
}
